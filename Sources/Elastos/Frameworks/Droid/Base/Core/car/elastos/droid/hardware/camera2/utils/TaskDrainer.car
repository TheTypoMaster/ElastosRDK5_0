
module
{
    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Camera2 {
    namespace Utils {

    interface ITaskDrainer {
        /**
         * Mark an asynchronous task as having started.
         *
         * <p>A task cannot be started more than once without first having finished. Once
         * draining begins with {@link #beginDrain}, no new tasks can be started.</p>
         *
         * @param task a key to identify a task
         *
         * @see #taskFinished
         * @see #beginDrain
         *
         * @throws IllegalStateException
         *          If attempting to start a task which is already started (and not finished),
         *          or if attempting to start a task after draining has begun.
         */
        TaskStarted(
            [in] IInterface* task);

        /**
         * Mark an asynchronous task as having finished.
         *
         * <p>A task cannot be finished if it hasn't started. Once finished, a task
         * cannot be finished again (unless it's started again).</p>
         *
         * @param task a key to identify a task
         *
         * @see #taskStarted
         * @see #beginDrain
         *
         * @throws IllegalStateException
         *          If attempting to start a task which is already finished (and not re-started),
         */
        TaskFinished(
            [in] IInterface* task);

        /**
         * Do not allow any more tasks to be started; once all existing started tasks are finished,
         * fire the {@link DrainListener#onDrained} callback asynchronously.
         *
         * <p>This operation is idempotent; calling it more than once has no effect.</p>
         */
        BeginDrain();
    }

    } // namespace Utils
    } // namespace Camera2
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
