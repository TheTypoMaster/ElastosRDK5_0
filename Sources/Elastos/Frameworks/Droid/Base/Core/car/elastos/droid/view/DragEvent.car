
module
{
    interface Elastos.Droid.Content.IClipDescription;
    interface Elastos.Droid.Content.IClipData;

    namespace Elastos {
    namespace Droid {
    namespace View {

    interface IDragEvent {
        /**
         * Action constant returned by {@link #getAction()}: Signals the start of a
         * drag and drop operation. The View should return {@code true} from its
         * {@link View#onDragEvent(DragEvent) onDragEvent()} handler method or
         * {@link View.View.OnDragListener#onDrag(View,DragEvent) OnDragListener.onDrag()} listener
         * if it can accept a drop. The onDragEvent() or onDrag() methods usually inspect the metadata
         * from {@link #getClipDescription()} to determine if they can accept the data contained in
         * this drag. For an operation that doesn't represent data transfer, these methods may
         * perform other actions to determine whether or not the View should accept the drag.
         * If the View wants to indicate that it is a valid drop target, it can also react by
         * changing its appearance.
         * <p>
         * A View only receives further drag events if it returns {@code true} in response to
         * ACTION_DRAG_STARTED.
         * </p>
         * @see #ACTION_DRAG_ENDED
         */
        const Int32 ACTION_DRAG_STARTED = 1;

        /**
         * Action constant returned by {@link #getAction()}: Sent to a View after
         * {@link #ACTION_DRAG_ENTERED} if the drag shadow is still within the View object's bounding
         * box. The {@link #getX()} and {@link #getY()} methods supply
         * the X and Y position of of the drag point within the View object's bounding box.
         * <p>
         * A View receives an {@link #ACTION_DRAG_ENTERED} event before receiving any
         * ACTION_DRAG_LOCATION events.
         * </p>
         * <p>
         * The system stops sending ACTION_DRAG_LOCATION events to a View once the user moves the
         * drag shadow out of the View object's bounding box. If the user moves the drag shadow back
         * into the View object's bounding box, the View receives an ACTION_DRAG_ENTERED again before
         * receiving any more ACTION_DRAG_LOCATION events.
         * </p>
         * @see #ACTION_DRAG_ENTERED
         * @see #getX()
         * @see #getY()
         */
        const Int32 ACTION_DRAG_LOCATION = 2;

        /**
         * Action constant returned by {@link #getAction()}: Signals to a View that the user
         * has released the drag shadow, and the drag point is within the bounding box of the View.
         * The View should retrieve the data from the DragEvent by calling {@link #getClipData()}.
         * The methods {@link #getX()} and {@link #getY()} return the X and Y position of the drop point
         * within the View object's bounding box.
         * <p>
         * The View should return {@code true} from its {@link View#onDragEvent(DragEvent)}
         * handler or {@link View.View.OnDragListener#onDrag(View,DragEvent) OnDragListener.onDrag()}
         * listener if it accepted the drop, and {@code false} if it ignored the drop.
         * </p>
         * <p>
         * The View can also react to this action by changing its appearance.
         * </p>
         * @see #getClipData()
         * @see #getX()
         * @see #getY()
         */
        const Int32 ACTION_DROP = 3;

        /**
         * Action constant returned by {@link #getAction()}:  Signals to a View that the drag and drop
         * operation has concluded.  A View that changed its appearance during the operation should
         * return to its usual drawing state in response to this event.
         * <p>
         * All views that received an ACTION_DRAG_STARTED event will receive the
         * ACTION_DRAG_ENDED event even if they are not currently visible when the drag ends.
         * </p>
         * <p>
         *  The View object can call {@link #getResult()} to see the result of the operation.
         *  If a View returned {@code true} in response to {@link #ACTION_DROP}, then
         *  getResult() returns {@code true}, otherwise it returns {@code false}.
         * </p>
         * @see #ACTION_DRAG_STARTED
         * @see #getResult()
         */
        const Int32 ACTION_DRAG_ENDED = 4;

        /**
         * Action constant returned by {@link #getAction()}: Signals to a View that the drag point has
         * entered the bounding box of the View.
         * <p>
         *  If the View can accept a drop, it can react to ACTION_DRAG_ENTERED
         *  by changing its appearance in a way that tells the user that the View is the current
         *  drop target.
         * </p>
         * The system stops sending ACTION_DRAG_LOCATION events to a View once the user moves the
         * drag shadow out of the View object's bounding box. If the user moves the drag shadow back
         * into the View object's bounding box, the View receives an ACTION_DRAG_ENTERED again before
         * receiving any more ACTION_DRAG_LOCATION events.
         * </p>
         * @see #ACTION_DRAG_ENTERED
         * @see #ACTION_DRAG_LOCATION
         */
        const Int32 ACTION_DRAG_ENTERED = 5;

        /**
         * Action constant returned by {@link #getAction()}: Signals that the user has moved the
         * drag shadow outside the bounding box of the View.
         * The View can react by changing its appearance in a way that tells the user that
         * View is no longer the immediate drop target.
         * <p>
         *  After the system sends an ACTION_DRAG_EXITED event to the View, the View receives no more
         *  ACTION_DRAG_LOCATION events until the user drags the drag shadow back over the View.
         * </p>
         *
         */
        const Int32 ACTION_DRAG_EXITED = 6;

        GetAction(
            [out] Int32* action);

        SetAction(
            [in] Int32 action);

        GetX(
            [out] Float* x);

        GetY(
            [out] Float* y);

        SetX(
            [in] Float x);

        SetY(
            [in] Float y);

        /**
         * Returns the {@link android.content.ClipData} object sent to the system as part of the call
         * to
         * {@link android.view.View#startDrag(ClipData,View.DragShadowBuilder,Object,int) startDrag()}.
         * This method only returns valid data if the event action is {@link #ACTION_DROP}.
         * @return The ClipData sent to the system by startDrag().
         */
        GetClipData(
            [out] IClipData** clipData);

        /**
         * Returns the {@link android.content.ClipDescription} object contained in the
         * {@link android.content.ClipData} object sent to the system as part of the call to
         * {@link android.view.View#startDrag(ClipData,View.DragShadowBuilder,Object,int) startDrag()}.
         * The drag handler or listener for a View can use the metadata in this object to decide if the
         * View can accept the dragged View object's data.
         * <p>
         * This method returns valid data for all event actions.
         * @return The ClipDescription that was part of the ClipData sent to the system by startDrag().
         */
        GetClipDescription(
            [out] IClipDescription** description);

        /**
         * Returns the local state object sent to the system as part of the call to
         * {@link android.view.View#startDrag(ClipData,View.DragShadowBuilder,Object,int) startDrag()}.
         * The object is intended to provide local information about the drag and drop operation. For
         * example, it can indicate whether the drag and drop operation is a copy or a move.
         * <p>
         *  This method returns valid data for all event actions.
         * </p>
         * @return The local state object sent to the system by startDrag().
         */
        GetLocalState(
            [out] IInterface** localState);

        SetLocalState(
            [in] IInterface* localState);

        /**
         * <p>
         * Returns an indication of the result of the drag and drop operation.
         * This method only returns valid data if the action type is {@link #ACTION_DRAG_ENDED}.
         * The return value depends on what happens after the user releases the drag shadow.
         * </p>
         * <p>
         * If the user releases the drag shadow on a View that can accept a drop, the system sends an
         * {@link #ACTION_DROP} event to the View object's drag event listener. If the listener
         * returns {@code true}, then getResult() will return {@code true}.
         * If the listener returns {@code false}, then getResult() returns {@code false}.
         * </p>
         * <p>
         * Notice that getResult() also returns {@code false} if no {@link #ACTION_DROP} is sent. This
         * happens, for example, when the user releases the drag shadow over an area outside of the
         * application. In this case, the system sends out {@link #ACTION_DRAG_ENDED} for the current
         * operation, but never sends out {@link #ACTION_DROP}.
         * </p>
         * @return {@code true} if a drag event listener returned {@code true} in response to
         * {@link #ACTION_DROP}. If the system did not send {@link #ACTION_DROP} before
         * {@link #ACTION_DRAG_ENDED}, or if the listener returned {@code false} in response to
         * {@link #ACTION_DROP}, then {@code false} is returned.
         */
        GetResult(
            [out] Boolean* dragResult);

         /**
         * Recycle the DragEvent, to be re-used by a later caller.  After calling
         * this function you must never touch the event again.
         *
         * @hide
         */
        Recycle();
    }

    interface IDragEventHelper{
        Obtain(
            [out] IDragEvent** event);

        Obtain(
            [in] Int32 action,
            [in] Float x,
            [in] Float y,
            [in] IInterface* localState,
            [in] IClipDescription* description,
            [in] IClipData* data,
            [in] Boolean result,
            [out] IDragEvent** event);

        Obtain(
            [in] IDragEvent* source,
            [out] IDragEvent** event);
    }

    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
