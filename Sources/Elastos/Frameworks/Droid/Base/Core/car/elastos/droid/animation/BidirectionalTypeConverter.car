
module {

    namespace Elastos {
    namespace Droid {
    namespace Animation {

    /**
     * Abstract base class used convert type T to another type V and back again. This
     * is necessary when the value types of in animation are different from the property
     * type. BidirectionalTypeConverter is needed when only the final value for the
     * animation is supplied to animators.
     * @see PropertyValuesHolder#setConverter(TypeConverter)
     */
    /**
     * @Involve
     * implements ITypeConverter
     */
    interface IBidirectionalTypeConverter {
        /**
         * Does a conversion from the target type back to the source type. The subclass
         * must implement this when a TypeConverter is used in animations and current
         * values will need to be read for an animation.
         * @param value The Object to convert.
         * @return A value of type T, converted from <code>value</code>.
         */
        ConvertBack(
            [in] IInterface* value,
            [out] IInterface** result);

        /**
         * Returns the inverse of this converter, where the from and to classes are reversed.
         * The inverted converter uses this convert to call {@link #convertBack(Object)} for
         * {@link #convert(Object)} calls and {@link #convert(Object)} for
         * {@link #convertBack(Object)} calls.
         * @return The inverse of this converter, where the from and to classes are reversed.
         */
        Invert(
            [out] IBidirectionalTypeConverter** result);
    }

    }   //namespace Animation
    }   //namespace Droid
    }   //namespace Elastos
}
