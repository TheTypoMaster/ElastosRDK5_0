
module
{
    namespace Elastos {
    namespace Droid {
    namespace Media {

    interface IMediaSyncEvent {

        /**
         * No sync event specified. When used with a synchronized playback or capture method, the
         * behavior is equivalent to calling the corresponding non synchronized method.
         */
        const Int32 SYNC_EVENT_NONE = 0; // AudioSystem.SYNC_EVENT_NONE;

        /**
         * The corresponding action is triggered only when the presentation is completed
         * (meaning the media has been presented to the user) on the specified session.
         * A synchronization of this type requires a source audio session ID to be set via
         * {@link #setAudioSessionId(int) method.
         */
        const Int32 SYNC_EVENT_PRESENTATION_COMPLETE = 1;  // AudioSystem.SYNC_EVENT_PRESENTATION_COMPLETE;

        /**
         * Sets the event source audio session ID.
         *
         * <p>The audio session ID specifies on which audio session the synchronization event should be
         * monitored.
         * It is mandatory for certain event types (e.g. {@link #SYNC_EVENT_PRESENTATION_COMPLETE}).
         * For instance, the audio session ID can be retrieved via
         * {@link MediaPlayer#getAudioSessionId()} when monitoring an event on a particular MediaPlayer.
         * @param audioSessionId the audio session ID of the event source being monitored.
         * @return the MediaSyncEvent the method is called on.
         * @throws java.lang.IllegalArgumentException
         */
        SetAudioSessionId(
            [in] Int32 result);

        /**
         * Gets the synchronization event type.
         *
         * @return the synchronization event type.
         */
        GetType(
            [out] Int32* result);

        /**
         * Gets the synchronization event audio session ID.
         *
         * @return the synchronization audio session ID. The returned audio session ID is 0 if it has
         * not been set.
         */
        GetAudioSessionId(
            [out] Int32* result);
    }

    interface IMediaSyncEventHelper {
        /**
         * Creates a synchronization event of the sepcified type.
         *
         * <p>The type specifies which kind of event is monitored.
         * For instance, event {@link #SYNC_EVENT_PRESENTATION_COMPLETE} corresponds to the audio being
         * presented to the user on a particular audio session.
         * @param eventType the synchronization event type.
         * @return the MediaSyncEvent created.
         * @throws java.lang.IllegalArgumentException
         */
        CreateEvent(
            [in] Int32 eventType,
            [out] IMediaSyncEvent** result);
    }

    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
