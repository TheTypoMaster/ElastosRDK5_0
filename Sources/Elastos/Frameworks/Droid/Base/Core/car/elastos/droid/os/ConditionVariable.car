module
{
    namespace Elastos {
    namespace Droid {
    namespace Os {

    /**
     * Class that implements the condition variable locking paradigm.
     *
     * <p>
     * This differs from the built-in java.lang.Object wait() and notify()
     * in that this class contains the condition to wait on itself.  That means
     * open(), close() and block() are sticky.  If open() is called before block(),
     * block() will not block, and instead return immediately.
     *
     * <p>
     * This class uses itself as the object to wait on, so if you wait()
     * or notify() on a ConditionVariable, the results are undefined.
     */
    interface IConditionVariable {
        /**
         * Open the condition, and release all threads that are blocked.
         *
         * <p>
         * Any threads that later approach block() will not block unless close()
         * is called.
         */
        Open();

        /**
         * Reset the condition to the closed state.
         *
         * <p>
         * Any threads that call block() will block until someone calls open.
         */
        Close();

        /**
         * Block the current thread until the condition is opened.
         *
         * <p>
         * If the condition is already opened, return immediately.
         */
        Block();

        /**
         * Block the current thread until the condition is opened or until
         * timeout milliseconds have passed.
         *
         * <p>
         * If the condition is already opened, return immediately.
         *
         * @param timeout the minimum time to wait in milliseconds.
         *
         * @return true if the condition was opened, false if the call returns
         * because of the timeout.
         */
        Block(
            [in] Int64 timeout,
            [out] Boolean * result);
    }

    } // namespace Os
    } // namespace Droid
    } // namespace Elastos

} // module
