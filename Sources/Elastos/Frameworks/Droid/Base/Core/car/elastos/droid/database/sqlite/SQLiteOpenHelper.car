module
{
    interface Elastos.Droid.Database.Sqlite.ISQLiteDatabase;

    namespace Elastos {
    namespace Droid {
    namespace Database {
    namespace Sqlite {

    /**
     * A helper class to manage database creation and version management.
     *
     * <p>You create a subclass implementing {@link #onCreate}, {@link #onUpgrade} and
     * optionally {@link #onOpen}, and this class takes care of opening the database
     * if it exists, creating it if it does not, and upgrading it as necessary.
     * Transactions are used to make sure the database is always in a sensible state.
     *
     * <p>This class makes it easy for {@link android.content.ContentProvider}
     * implementations to defer opening and upgrading the database until first use,
     * to avoid blocking application startup with long-running database upgrades.
     *
     * <p>For an example, see the NotePadProvider class in the NotePad sample application,
     * in the <em>samples/</em> directory of the SDK.</p>
     *
     * <p class="note"><strong>Note:</strong> this class assumes
     * monotonically increasing version numbers for upgrades.</p>
     */
    interface ISQLiteOpenHelper {
        /**
         * Return the name of the SQLite database being opened, as given to
         * the constructor.
         */
        GetDatabaseName(
            [out] String* name);

        /**
         * Enables or disables the use of write-ahead logging for the database.
         *
         * Write-ahead logging cannot be used with read-only databases so the value of
         * this flag is ignored if the database is opened read-only.
         *
         * @param enabled True if write-ahead logging should be enabled, false if it
         * should be disabled.
         *
         * @see SQLiteDatabase#enableWriteAheadLogging()
         */
        SetWriteAheadLoggingEnabled(
            [in] Boolean enabled);

        /**
         * Create and/or open a database that will be used for reading and writing.
         * The first time this is called, the database will be opened and
         * {@link #onCreate}, {@link #onUpgrade} and/or {@link #onOpen} will be
         * called.
         *
         * <p>Once opened successfully, the database is cached, so you can
         * call this method every time you need to write to the database.
         * (Make sure to call {@link #close} when you no longer need the database.)
         * Errors such as bad permissions or a full disk may cause this method
         * to fail, but future attempts may succeed if the problem is fixed.</p>
         *
         * <p class="caution">Database upgrade may take a long time, you
         * should not call this method from the application main thread, including
         * from {@link android.content.ContentProvider#onCreate ContentProvider.onCreate()}.
         *
         * @throws SQLiteException if the database cannot be opened for writing
         * @return a read/write database object valid until {@link #close} is called
         */
        GetWritableDatabase(
            [out] ISQLiteDatabase** database);

        /**
         * Create and/or open a database.  This will be the same object returned by
         * {@link #getWritableDatabase} unless some problem, such as a full disk,
         * requires the database to be opened read-only.  In that case, a read-only
         * database object will be returned.  If the problem is fixed, a future call
         * to {@link #getWritableDatabase} may succeed, in which case the read-only
         * database object will be closed and the read/write object will be returned
         * in the future.
         *
         * <p class="caution">Like {@link #getWritableDatabase}, this method may
         * take a long time to return, so you should not call it from the
         * application main thread, including from
         * {@link android.content.ContentProvider#onCreate ContentProvider.onCreate()}.
         *
         * @throws SQLiteException if the database cannot be opened
         * @return a database object valid until {@link #getWritableDatabase}
         *     or {@link #close} is called.
         */
        GetReadableDatabase(
            [out] ISQLiteDatabase** database);

        /**
         * Close any open database object.
         */
        Close();

        /**
         * Called when the database connection is being configured, to enable features
         * such as write-ahead logging or foreign key support.
         * <p>
         * This method is called before {@link #onCreate}, {@link #onUpgrade},
         * {@link #onDowngrade}, or {@link #onOpen} are called.  It should not modify
         * the database except to configure the database connection as required.
         * </p><p>
         * This method should only call methods that configure the parameters of the
         * database connection, such as {@link SQLiteDatabase#enableWriteAheadLogging}
         * {@link SQLiteDatabase#setForeignKeyConstraintsEnabled},
         * {@link SQLiteDatabase#setLocale}, {@link SQLiteDatabase#setMaximumSize},
         * or executing PRAGMA statements.
         * </p>
         *
         * @param db The database.
         */
        OnConfigure(
            [in] ISQLiteDatabase* db);

        /**
         * Called when the database is created for the first time. This is where the
         * creation of tables and the initial population of the tables should happen.
         *
         * @param db The database.
         */
        OnCreate(
            [in] ISQLiteDatabase* db);

        /**
         * Called when the database needs to be upgraded. The implementation
         * should use this method to drop tables, add tables, or do anything else it
         * needs to upgrade to the new schema version.
         *
         * <p>
         * The SQLite ALTER TABLE documentation can be found
         * <a href="http://sqlite.org/lang_altertable.html">here</a>. If you add new columns
         * you can use ALTER TABLE to insert them into a live table. If you rename or remove columns
         * you can use ALTER TABLE to rename the old table, then create the new table and then
         * populate the new table with the contents of the old table.
         * </p><p>
         * This method executes within a transaction.  If an exception is thrown, all changes
         * will automatically be rolled back.
         * </p>
         *
         * @param db The database.
         * @param oldVersion The old database version.
         * @param newVersion The new database version.
         */
        OnUpgrade(
            [in] ISQLiteDatabase* db,
            [in] Int32 oldVersion,
            [in] Int32 newVersion);

        /**
         * Called when the database needs to be downgraded. This is strictly similar to
         * {@link #onUpgrade} method, but is called whenever current version is newer than requested one.
         * However, this method is not abstract, so it is not mandatory for a customer to
         * implement it. If not overridden, default implementation will reject downgrade and
         * throws SQLiteException
         *
         * <p>
         * This method executes within a transaction.  If an exception is thrown, all changes
         * will automatically be rolled back.
         * </p>
         *
         * @param db The database.
         * @param oldVersion The old database version.
         * @param newVersion The new database version.
         */
        OnDowngrade(
            [in] ISQLiteDatabase* db,
            [in] Int32 oldVersion,
            [in] Int32 newVersion);

        /**
         * Called when the database has been opened.  The implementation
         * should check {@link SQLiteDatabase#isReadOnly} before updating the
         * database.
         * <p>
         * This method is called after the database connection has been configured
         * and after the database schema has been created, upgraded or downgraded as necessary.
         * If the database connection must be configured in some way before the schema
         * is created, upgraded, or downgraded, do it in {@link #onConfigure} instead.
         * </p>
         *
         * @param db The database.
         */
        OnOpen(
            [in] ISQLiteDatabase* db);
    }

    } // namespace Sqlite
    } // namespace Database
    } // namespace Droid
    } // namespace Elastos
}
