
module
{
    interface Elastos.Droid.View.IView;

    namespace Elastos {
    namespace Droid {
    namespace Widget {

    /**
     * Callback invoked when the drawer is opened.
     */
    interface IOnDrawerOpenListener {
        /**
         * Invoked when the drawer becomes fully open.
         */
        OnDrawerOpened();
    }

    /**
     * Callback invoked when the drawer is closed.
     */
    interface IOnDrawerCloseListener {
        /**
         * Invoked when the drawer becomes fully closed.
         */
        OnDrawerClosed();
    }

    /**
     * Callback invoked when the drawer is scrolled.
     */
    interface IOnDrawerScrollListener {
        /**
         * Invoked when the user starts dragging/flinging the drawer's handle.
         */
        OnScrollStarted();

        /**
         * Invoked when the user stops dragging/flinging the drawer's handle.
         */
        OnScrollEnded();
    }

    /**
     * @Involve
     * extends Elastos.Droid.View.IView
     * extends Elastos.Droid.View.IViewGroup
     *
     * interface Elastos.Droid.View.IViewParent
     * interface Elastos.Droid.View.IViewManager
     * interface Elastos.Droid.View.IKeyEventCallback
     * interface Elastos.Droid.View.Accessibility.IAccessibilityEventSource
     * interface Elastos.Droid.Graphics.Drawable.IDrawableCallback
     */
     [local]
    interface ISlidingDrawer {
        const Int32 ORIENTATION_HORIZONTAL = 0;
        const Int32 ORIENTATION_VERTICAL = 1;

        /**
         * Toggles the drawer open and close. Takes effect immediately.
         *
         * @see #open()
         * @see #close()
         * @see #animateClose()
         * @see #animateOpen()
         * @see #animateToggle()
         */
        Toggle();

        /**
         * Toggles the drawer open and close with an animation.
         *
         * @see #open()
         * @see #close()
         * @see #animateClose()
         * @see #animateOpen()
         * @see #toggle()
         */
        AnimateToggle();

        /**
         * Opens the drawer immediately.
         *
         * @see #toggle()
         * @see #close()
         * @see #animateOpen()
         */
        Open();


        /**
         * Closes the drawer immediately.
         *
         * @see #toggle()
         * @see #open()
         * @see #animateClose()
         */
        Close();

        /**
         * Closes the drawer with an animation.
         *
         * @see #close()
         * @see #open()
         * @see #animateOpen()
         * @see #animateToggle()
         * @see #toggle()
         */
        AnimateClose();

        /**
         * Opens the drawer with an animation.
         *
         * @see #close()
         * @see #open()
         * @see #animateClose()
         * @see #animateToggle()
         * @see #toggle()
         */
        AnimateOpen();

        /**
         * Sets the listener that receives a notification when the drawer becomes open.
         *
         * @param onDrawerOpenListener The listener to be notified when the drawer is opened.
         */
        SetOnDrawerOpenListener(
            [in] IOnDrawerOpenListener* onDrawerOpenListener);

        /**
         * Sets the listener that receives a notification when the drawer becomes close.
         *
         * @param onDrawerCloseListener The listener to be notified when the drawer is closed.
         */
        SetOnDrawerCloseListener(
            [in] IOnDrawerCloseListener* onDrawerCloseListener);

        /**
         * Sets the listener that receives a notification when the drawer starts or ends
         * a scroll. A fling is considered as a scroll. A fling will also trigger a
         * drawer opened or drawer closed event.
         *
         * @param onDrawerScrollListener The listener to be notified when scrolling
         *        starts or stops.
         */
        SetOnDrawerScrollListener(
            [in] IOnDrawerScrollListener* onDrawerScrollListener);

        /**
         * Returns the handle of the drawer.
         *
         * @return The View reprenseting the handle of the drawer, identified by
         *         the "handle" id in XML.
         */
        GetHandle(
            [out] IView** handle);

        /**
         * Returns the content of the drawer.
         *
         * @return The View reprenseting the content of the drawer, identified by
         *         the "content" id in XML.
         */
        GetContent(
            [out] IView** content);

        /**
         * Unlocks the SlidingDrawer so that touch events are processed.
         *
         * @see #lock()
         */
        Unlock();

        /**
         * Locks the SlidingDrawer so that touch events are ignores.
         *
         * @see #unlock()
         */
        Lock();

        /**
         * Indicates whether the drawer is currently fully opened.
         *
         * @return True if the drawer is opened, false otherwise.
         */
        IsOpened(
            [out] Boolean* opened);

        /**
         * Indicates whether the drawer is scrolling or flinging.
         *
         * @return True if the drawer is scroller or flinging, false otherwise.
         */
        IsMoving(
            [out] Boolean* moving);
    }

    } // namespace Widget
    } // namespace Droid
    } // namespace Elastos
}
