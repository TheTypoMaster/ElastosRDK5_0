
module
{
    interface Elastos.Droid.Graphics.ISurfaceTexture;
    interface Elastos.Droid.Graphics.IMatrix;
    interface Elastos.Droid.Graphics.ICanvas;
    interface Elastos.Droid.Graphics.IBitmap;
    interface Elastos.Droid.Graphics.IRect;

    namespace Elastos {
    namespace Droid {
    namespace View {

    /**
     * This listener can be used to be notified when the surface texture
     * associated with this texture view is available.
     */
    interface ISurfaceTextureListener {
        OnSurfaceTextureAvailable(
            [in] ISurfaceTexture* surfaceTexture,
            [in] Int32 width,
            [in] Int32 height);

        OnSurfaceTextureDestroyed(
            [in] ISurfaceTexture* surfaceTexture,
            [out] Boolean* res);

        OnSurfaceTextureSizeChanged(
            [in] ISurfaceTexture* surfaceTexture,
            [in] Int32 width,
            [in] Int32 height);

        OnSurfaceTextureUpdated(
            [in] ISurfaceTexture* surfaceTexture);
    }

    /**
     * @Involve
     * interface IView
     */
    [local]
    interface ITextureView {
        /**
         * Indicates whether the content of this TextureView is opaque. The
         * content is assumed to be opaque by default.
         *
         * @param opaque True if the content of this TextureView is opaque,
         *               false otherwise
         */
        SetOpaque(
            [in] Boolean opaque);

        /**
         * <p>Sets the transform to associate with this texture view.
         * The specified transform applies to the underlying surface
         * texture and does not affect the size or position of the view
         * itself, only of its content.</p>
         *
         * <p>Some transforms might prevent the content from drawing
         * all the pixels contained within this view's bounds. In such
         * situations, make sure this texture view is not marked opaque.</p>
         *
         * @param transform The transform to apply to the content of
         *        this view.
         *
         * @see #getTransform(android.graphics.Matrix)
         * @see #isOpaque()
         * @see #setOpaque(boolean)
         */
        SetTransform(
            [in] IMatrix* transform);

        /**
         * Returns the transform associated with this texture view.
         *
         * @param transform The {@link Matrix} in which to copy the current
         *        transform. Can be null.
         *
         * @return The specified matrix if not null or a new {@link Matrix}
         *         instance otherwise.
         *
         * @see #setTransform(android.graphics.Matrix)
         */
        GetTransform(
            [in] IMatrix* transform,
            [out] IMatrix** result);

        /**
         * <p>Returns a {@link android.graphics.Bitmap} representation of the content
         * of the associated surface texture. If the surface texture is not available,
         * this method returns null.</p>
         *
         * <p>The bitmap returned by this method uses the {@link Bitmap.Config#ARGB_8888}
         * pixel format and its dimensions are the same as this view's.</p>
         *
         * <p><strong>Do not</strong> invoke this method from a drawing method
         * ({@link #onDraw(android.graphics.Canvas)} for instance).</p>
         *
         * <p>If an error occurs during the copy, an empty bitmap will be returned.</p>
         *
         * @return A valid {@link Bitmap.Config#ARGB_8888} bitmap, or null if the surface
         *         texture is not available or the width &lt;= 0 or the height &lt;= 0
         *
         * @see #isAvailable()
         * @see #getBitmap(android.graphics.Bitmap)
         * @see #getBitmap(int, int)
         */
        GetBitmap(
            [out] IBitmap** bitmap);

        /**
         * <p>Returns a {@link android.graphics.Bitmap} representation of the content
         * of the associated surface texture. If the surface texture is not available,
         * this method returns null.</p>
         *
         * <p>The bitmap returned by this method uses the {@link Bitmap.Config#ARGB_8888}
         * pixel format.</p>
         *
         * <p><strong>Do not</strong> invoke this method from a drawing method
         * ({@link #onDraw(android.graphics.Canvas)} for instance).</p>
         *
         * <p>If an error occurs during the copy, an empty bitmap will be returned.</p>
         *
         * @param width The width of the bitmap to create
         * @param height The height of the bitmap to create
         *
         * @return A valid {@link Bitmap.Config#ARGB_8888} bitmap, or null if the surface
         *         texture is not available or width is &lt;= 0 or height is &lt;= 0
         *
         * @see #isAvailable()
         * @see #getBitmap(android.graphics.Bitmap)
         * @see #getBitmap()
         */
        GetBitmap(
            [in] Int32 width,
            [in] Int32 height,
            [out] IBitmap** bitmap);

        /**
         * <p>Copies the content of this view's surface texture into the specified
         * bitmap. If the surface texture is not available, the copy is not executed.
         * The content of the surface texture will be scaled to fit exactly inside
         * the specified bitmap.</p>
         *
         * <p><strong>Do not</strong> invoke this method from a drawing method
         * ({@link #onDraw(android.graphics.Canvas)} for instance).</p>
         *
         * <p>If an error occurs, the bitmap is left unchanged.</p>
         *
         * @param bitmap The bitmap to copy the content of the surface texture into,
         *               cannot be null, all configurations are supported
         *
         * @return The bitmap specified as a parameter
         *
         * @see #isAvailable()
         * @see #getBitmap(int, int)
         * @see #getBitmap()
         *
         * @throws IllegalStateException if the hardware rendering context cannot be
         *         acquired to capture the bitmap
         */
        GetBitmap(
            [in] IBitmap* bitmap,
            [out] IBitmap** result);

        /**
         * Returns true if the {@link SurfaceTexture} associated with this
         * TextureView is available for rendering. When this method returns
         * true, {@link #getSurfaceTexture()} returns a valid surface texture.
         */
        IsAvailable(
            [out] Boolean* available);

        /**
         * <p>Start editing the pixels in the surface.  The returned Canvas can be used
         * to draw into the surface's bitmap.  A null is returned if the surface has
         * not been created or otherwise cannot be edited. You will usually need
         * to implement
         * {@link SurfaceTextureListener#onSurfaceTextureAvailable(android.graphics.SurfaceTexture, int, int)}
         * to find out when the Surface is available for use.</p>
         *
         * <p>The content of the Surface is never preserved between unlockCanvas()
         * and lockCanvas(), for this reason, every pixel within the Surface area
         * must be written. The only exception to this rule is when a dirty
         * rectangle is specified, in which case, non-dirty pixels will be
         * preserved.</p>
         *
         * <p>This method can only be used if the underlying surface is not already
         * owned by another producer. For instance, if the TextureView is being used
         * to render the camera's preview you cannot invoke this method.</p>
         *
         * @return A Canvas used to draw into the surface.
         *
         * @see #lockCanvas(android.graphics.Rect)
         * @see #unlockCanvasAndPost(android.graphics.Canvas)
         */
        LockCanvas(
            [out] ICanvas** canvas);

        /**
         * Just like {@link #lockCanvas()} but allows specification of a dirty
         * rectangle. Every pixel within that rectangle must be written; however
         * pixels outside the dirty rectangle will be preserved by the next call
         * to lockCanvas().
         *
         * This method can return null if the underlying surface texture is not
         * available (see {@link #isAvailable()} or if the surface texture is
         * already connected to an image producer (for instance: the camera,
         * OpenGL, a media player, etc.)
         *
         * @param dirty Area of the surface that will be modified.

         * @return A Canvas used to draw into the surface.
         *
         * @see #lockCanvas()
         * @see #unlockCanvasAndPost(android.graphics.Canvas)
         * @see #isAvailable()
         */
        LockCanvas(
            [in] IRect* rect,
            [out] ICanvas** canvas);

        /**
         * Finish editing pixels in the surface. After this call, the surface's
         * current pixels will be shown on the screen, but its content is lost,
         * in particular there is no guarantee that the content of the Surface
         * will remain unchanged when lockCanvas() is called again.
         *
         * @param canvas The Canvas previously returned by lockCanvas()
         *
         * @see #lockCanvas()
         * @see #lockCanvas(android.graphics.Rect)
         */
        UnlockCanvasAndPost(
            [in] ICanvas* canvas);

        /**
         * Returns the {@link SurfaceTexture} used by this view. This method
         * may return null if the view is not attached to a window or if the surface
         * texture has not been initialized yet.
         *
         * @see #isAvailable()
         */
        GetSurfaceTexture(
            [out] ISurfaceTexture** texture);

        /**
         * Set the {@link SurfaceTexture} for this view to use. If a {@link
         * SurfaceTexture} is already being used by this view, it is immediately
         * released and not be usable any more.  The {@link
         * SurfaceTextureListener#onSurfaceTextureDestroyed} callback is <b>not</b>
         * called for the previous {@link SurfaceTexture}.  Similarly, the {@link
         * SurfaceTextureListener#onSurfaceTextureAvailable} callback is <b>not</b>
         * called for the {@link SurfaceTexture} passed to setSurfaceTexture.
         *
         * The {@link SurfaceTexture} object must be detached from all OpenGL ES
         * contexts prior to calling this method.
         *
         * @param surfaceTexture The {@link SurfaceTexture} that the view should use.
         * @see SurfaceTexture#detachFromGLContext()
         */
        SetSurfaceTexture(
            [in] ISurfaceTexture* texture);

        /**
         * Returns the {@link SurfaceTextureListener} currently associated with this
         * texture view.
         *
         * @see #setSurfaceTextureListener(android.view.TextureView.SurfaceTextureListener)
         * @see SurfaceTextureListener
         */
        GetSurfaceTextureListener(
            [out] ISurfaceTextureListener** listener);

        /**
         * Sets the {@link SurfaceTextureListener} used to listen to surface
         * texture events.
         *
         * @see #getSurfaceTextureListener()
         * @see SurfaceTextureListener
         */
        SetSurfaceTextureListener(
            [in] ISurfaceTextureListener* listener);
    }

    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
