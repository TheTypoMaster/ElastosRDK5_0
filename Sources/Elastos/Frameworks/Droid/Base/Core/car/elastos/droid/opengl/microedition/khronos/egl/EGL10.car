
module
{
    interface Elastosx.Microedition.Khronos.Egl.IEGLConfig;
    interface Elastosx.Microedition.Khronos.Egl.IEGLContext;
    interface Elastosx.Microedition.Khronos.Egl.IEGLDisplay;
    interface Elastosx.Microedition.Khronos.Egl.IEGLSurface;

    namespace Elastosx {
    namespace Microedition {
    namespace Khronos {
    namespace Egl {

    /**
     * @Involve
     * interface Elastosx.Microedition.Khronos.Egl.IEGL
     */
    [deprecated]
    interface IEGL10 {
        const Int32 _EGL_SUCCESS                     = 0x3000;
        const Int32 _EGL_NOT_INITIALIZED             = 0x3001;
        const Int32 _EGL_BAD_ACCESS                  = 0x3002;
        const Int32 _EGL_BAD_ALLOC                   = 0x3003;
        const Int32 _EGL_BAD_ATTRIBUTE               = 0x3004;
        const Int32 _EGL_BAD_CONFIG                  = 0x3005;
        const Int32 _EGL_BAD_CONTEXT                 = 0x3006;
        const Int32 _EGL_BAD_CURRENT_SURFACE         = 0x3007;
        const Int32 _EGL_BAD_DISPLAY                 = 0x3008;
        const Int32 _EGL_BAD_MATCH                   = 0x3009;
        const Int32 _EGL_BAD_NATIVE_PIXMAP           = 0x300A;
        const Int32 _EGL_BAD_NATIVE_WINDOW           = 0x300B;
        const Int32 _EGL_BAD_PARAMETER               = 0x300C;
        const Int32 _EGL_BAD_SURFACE                 = 0x300D;
        const Int32 _EGL_BUFFER_SIZE                 = 0x3020;
        const Int32 _EGL_ALPHA_SIZE                  = 0x3021;
        const Int32 _EGL_BLUE_SIZE                   = 0x3022;
        const Int32 _EGL_GREEN_SIZE                  = 0x3023;
        const Int32 _EGL_RED_SIZE                    = 0x3024;
        const Int32 _EGL_DEPTH_SIZE                  = 0x3025;
        const Int32 _EGL_STENCIL_SIZE                = 0x3026;
        const Int32 _EGL_CONFIG_CAVEAT               = 0x3027;
        const Int32 _EGL_CONFIG_ID                   = 0x3028;
        const Int32 _EGL_LEVEL                       = 0x3029;
        const Int32 _EGL_MAX_PBUFFER_HEIGHT          = 0x302A;
        const Int32 _EGL_MAX_PBUFFER_PIXELS          = 0x302B;
        const Int32 _EGL_MAX_PBUFFER_WIDTH           = 0x302C;
        const Int32 _EGL_NATIVE_RENDERABLE           = 0x302D;
        const Int32 _EGL_NATIVE_VISUAL_ID            = 0x302E;
        const Int32 _EGL_NATIVE_VISUAL_TYPE          = 0x302F;
        const Int32 _EGL_SAMPLES                     = 0x3031;
        const Int32 _EGL_SAMPLE_BUFFERS              = 0x3032;
        const Int32 _EGL_SURFACE_TYPE                = 0x3033;
        const Int32 _EGL_TRANSPARENT_TYPE            = 0x3034;
        const Int32 _EGL_TRANSPARENT_BLUE_VALUE      = 0x3035;
        const Int32 _EGL_TRANSPARENT_GREEN_VALUE     = 0x3036;
        const Int32 _EGL_TRANSPARENT_RED_VALUE       = 0x3037;
        const Int32 _EGL_NONE                  = 0x3038;
        const Int32 _EGL_LUMINANCE_SIZE              = 0x303D;
        const Int32 _EGL_ALPHA_MASK_SIZE             = 0x303E;
        const Int32 _EGL_COLOR_BUFFER_TYPE           = 0x303F;
        const Int32 _EGL_RENDERABLE_TYPE       = 0x3040;
        const Int32 _EGL_SLOW_CONFIG                 = 0x3050;
        const Int32 _EGL_NON_CONFORMANT_CONFIG       = 0x3051;
        const Int32 _EGL_TRANSPARENT_RGB             = 0x3052;
        const Int32 _EGL_RGB_BUFFER                  = 0x308E;
        const Int32 _EGL_LUMINANCE_BUFFER            = 0x308F;
        const Int32 _EGL_VENDOR                      = 0x3053;
        const Int32 _EGL_VERSION                     = 0x3054;
        const Int32 _EGL_EXTENSIONS                  = 0x3055;
        const Int32 _EGL_HEIGHT                      = 0x3056;
        const Int32 _EGL_WIDTH                       = 0x3057;
        const Int32 _EGL_LARGEST_PBUFFER             = 0x3058;
        const Int32 _EGL_RENDER_BUFFER               = 0x3086;
        const Int32 _EGL_COLORSPACE                  = 0x3087;
        const Int32 _EGL_ALPHA_FORMAT                = 0x3088;
        const Int32 _EGL_HORIZONTAL_RESOLUTION       = 0x3090;
        const Int32 _EGL_VERTICAL_RESOLUTION         = 0x3091;
        const Int32 _EGL_PIXEL_ASPECT_RATIO          = 0x3092;
        const Int32 _EGL_SINGLE_BUFFER               = 0x3085;
        const Int32 _EGL_CORE_NATIVE_ENGINE          = 0x305B;
        const Int32 _EGL_DRAW                        = 0x3059;
        const Int32 _EGL_READ                        = 0x305A;

        const Int32 _EGL_DONT_CARE                   = -1;

        const Int32 _EGL_PBUFFER_BITEGL10_                 = 0x01;
        const Int32 _EGL_PIXMAP_BIT                  = 0x02;
        const Int32 _EGL_WINDOW_BIT                  = 0x04;

        EglChooseConfig(
            [in] IEGLDisplay* display,
            [in] ArrayOf<Int32>* attrib_list,
            [in] ArrayOf<IEGLConfig*>* configs,
            [in] Int32 config_size,
            [in] ArrayOf<Int32>* num_config,
            [out] Boolean* result);

        EglCopyBuffers(
            [in] IEGLDisplay* display,
            [in] IEGLSurface* surface,
            [in] IInterface* native_pixmap,
            [out] Boolean* result);

        EglCreateContext(
            [in] IEGLDisplay* display,
            [in] IEGLConfig* config,
            [in] IEGLContext* share_context,
            [in] ArrayOf<Int32>* attrib_list,
            [out] IEGLContext** context);

        EglCreatePbufferSurface(
            [in] IEGLDisplay* display,
            [in] IEGLConfig* config,
            [in] ArrayOf<Int32>* attrib_list,
            [out] IEGLSurface** surface);

        EglCreatePixmapSurface(
            [in] IEGLDisplay* display,
            [in] IEGLConfig* config,
            [in] IInterface* native_pixmap,
            [in] ArrayOf<Int32>* attrib_list,
            [out] IEGLSurface** surface);

        EglCreateWindowSurface(
            [in] IEGLDisplay* display,
            [in] IEGLConfig* config,
            [in] IInterface* native_window,
            [in] ArrayOf<Int32>* attrib_list,
            [out] IEGLSurface** surface);

        EglDestroyContext(
            [in] IEGLDisplay* display,
            [in] IEGLContext* context,
            [out] Boolean* result);

        EglDestroySurface(
            [in] IEGLDisplay* display,
            [in] IEGLSurface* surface,
            [out] Boolean* result);

        EglGetConfigAttrib(
            [in] IEGLDisplay* display,
            [in] IEGLConfig* config,
            [in] Int32 attribute,
            [in] ArrayOf<Int32>* value,
            [out] Boolean* result);

        EglGetConfigs(
            [in] IEGLDisplay* display,
            [in] ArrayOf<IEGLConfig*>* configs,
            [in] Int32 config_size,
            [in] ArrayOf<Int32>* num_config,
            [out] Boolean* result);

        EglGetCurrentContext(
            [out] IEGLContext** context);

        EglGetCurrentDisplay(
            [out] IEGLDisplay** display);

        EglGetCurrentSurface(
            [in] Int32 readdraw,
            [out] IEGLSurface** surface);

        EglGetDisplay(
            [in] IInterface* native_display,
            [out] IEGLDisplay** display);

        EglGetError(
            [out] Int32* error);

        EglInitialize(
            [in] IEGLDisplay* display,
            [in] ArrayOf<Int32>* major_minor,
            [out] Boolean* result);

        EglMakeCurrent(
            [in] IEGLDisplay* display,
            [in] IEGLSurface* draw,
            [in] IEGLSurface* read,
            [in] IEGLContext* context,
            [out] Boolean* result);

        EglQueryContext(
            [in] IEGLDisplay* display,
            [in] IEGLContext* context,
            [in] Int32 attribute,
            [in] ArrayOf<Int32>* value,
            [out] Boolean* result);

        EglQueryString(
            [in] IEGLDisplay* display,
            [in] Int32 name,
            [out] String* str);

        EglQuerySurface(
            [in] IEGLDisplay* display,
            [in] IEGLSurface* surface,
            [in] Int32 attribute,
            [in] ArrayOf<Int32>* value,
            [out] Boolean* result);

        /** @hide **/
        EglReleaseThread(
            [out] Boolean* result);

        EglSwapBuffers(
            [in] IEGLDisplay* display,
            [in] IEGLSurface* surface,
            [out] Boolean* result);

        EglTerminate(
            [in] IEGLDisplay* display,
            [out] Boolean* result);

        EglWaitGL(
            [out] Boolean* result);

        EglWaitNative(
            [in] Int32 engine,
            [in] IInterface* bindTarget,
            [out] Boolean* result);
    }

    interface IEGL10Helper {
        GetDefaultDisplay(
            [out] IInterface** disp);

        GetNoDisplay(
            [out] IEGLDisplay** disp);

        GetNoContext(
            [out] IEGLContext** disp);

        GetNoSurface(
            [out] IEGLSurface** disp);
    }

    } // namepsace Egl
    } // namepsace Khronos
    } // namepsace Microedition
    } // namespace Elastosx
}
