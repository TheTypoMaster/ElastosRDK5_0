module
{
    namespace Elastos {
    namespace Droid {
    namespace Text {

    /**
     * PackedIntVector stores a two-dimensional array of integers,
     * optimized for inserting and deleting rows and for
     * offsetting the values in segments of a given column.
     */
    [deprecated]
    interface IPackedIntVector {
        /**
         * Returns the value at the specified row and column.
         *
         * @param row the index of the row to return.
         * @param column the index of the column to return.
         *
         * @return the value stored at the specified position.
         *
         * @throws IndexOutOfBoundsException if the row is out of range
         *         (row &lt; 0 || row >= size()) or the column is out of range
         *         (column &lt; 0 || column >= width()).
         */
        GetValue(
            [in] Int32 row,
            [in] Int32 column,
            [out] Int32* value);

        /**
         * Sets the value at the specified row and column.
         *
         * @param row the index of the row to set.
         * @param column the index of the column to set.
         *
         * @throws IndexOutOfBoundsException if the row is out of range
         *         (row &lt; 0 || row >= size()) or the column is out of range
         *         (column &lt; 0 || column >= width()).
         */
        SetValue(
            [in] Int32 row,
            [in] Int32 column,
            [in] Int32 value);

        /**
         * Increments all values in the specified column whose row >= the
         * specified row by the specified delta.
         *
         * @param startRow the row at which to begin incrementing.
         *        This may be == size(), which case there is no effect.
         * @param column the index of the column to set.
         *
         * @throws IndexOutOfBoundsException if the row is out of range
         *         (startRow &lt; 0 || startRow > size()) or the column
         *         is out of range (column &lt; 0 || column >= width()).
         */
        AdjustValuesBelow(
            [in] Int32 startRow,
            [in] Int32 column,
            [in] Int32 delta);

        /**
         * Inserts a new row of values at the specified row offset.
         *
         * @param row the row above which to insert the new row.
         *        This may be == size(), which case the new row is added
         *        at the end.
         * @param values the new values to be added.  If this is null,
         *        a row of zeroes is added.
         *
         * @throws IndexOutOfBoundsException if the row is out of range
         *         (row &lt; 0 || row > size()) or if the length of the
         *         values array is too small (values.length < width()).
         */
        InsertAt(
            [in] Int32 row,
            [in] ArrayOf<Int32>* values);

        /**
         * Deletes the specified number of rows starting with the specified
         * row.
         *
         * @param row the index of the first row to be deleted.
         * @param count the number of rows to delete.
         *
         * @throws IndexOutOfBoundsException if any of the rows to be deleted
         *         are out of range (row &lt; 0 || count &lt; 0 ||
         *         row + count > size()).
         */
        DeleteAt(
            [in] Int32 row,
            [in] Int32 count);

        /**
         * Returns the number of rows in the PackedIntVector.  This number
         * will change as rows are inserted and deleted.
         *
         * @return the number of rows.
         */
        GetSize(
            [out] Int32* size);

        /**
         * Returns the width of the PackedIntVector.  This number is set
         * at construction and will not change.
         *
         * @return the number of columns.
         */
        GetWidth(
            [out] Int32* width);
    }

    }//namespace Text
    }//namespace Droid
    }//namespace Elastos
}
