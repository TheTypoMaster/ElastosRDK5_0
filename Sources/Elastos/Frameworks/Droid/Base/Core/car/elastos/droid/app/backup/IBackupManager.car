module
{
    interface Elastos.Droid.Os.IBinder;
    interface Elastos.Droid.Os.IParcelFileDescriptor;
    interface Elastos.Droid.App.Backup.IIRestoreSession;
    interface Elastos.Droid.App.Backup.IIFullBackupRestoreObserver;
    interface Elastos.Droid.Content.IIntent;

    namespace Elastos {
    namespace Droid {
    namespace App {
    namespace Backup {

    /**
     * Direct interface to the Backup Manager Service that applications invoke on.  The only
     * operation currently needed is a simple notification that the app has made changes to
     * data it wishes to back up, so the system should run a backup pass.
     *
     * Apps will use the android.app.backup.BackupManager class rather than going through
     * this Binder interface directly.
     *
     * @sa android.app.backup.BackupManager
     *
     * {@hide}
     */
    [deprecated]
    interface IIBackupManager {
        /**
         * Tell the system service that the caller has made changes to its
         * data, and therefore needs to undergo an incremental backup pass.
         *
         * Any application can invoke this method for its own package, but
         * only callers who hold the android.permission.BACKUP permission
         * may invoke it for arbitrary packages.
         */
        DataChanged(
            [in] String packageName);

        /**
         * Erase all backed-up data for the given package from the storage
         * destination.
         *
         * Any application can invoke this method for its own package, but
         * only callers who hold the android.permission.BACKUP permission
         * may invoke it for arbitrary packages.
         */
        ClearBackupData(
            [in] String packageName);

        /**
         * Notifies the Backup Manager Service that an agent has become available.  This
         * method is only invoked by the Activity Manager.
         */
        AgentConnected(
            [in] String packageName,
            [in] IBinder* agent);

        /**
         * Notify the Backup Manager Service that an agent has unexpectedly gone away.
         * This method is only invoked by the Activity Manager.
         */
        AgentDisconnected(
            [in] String packageName);

        /**
         * Notify the Backup Manager Service that an application being installed will
         * need a data-restore pass.  This method is only invoked by the Package Manager.
         */
        RestoreAtInstall(
            [in] String packageName,
            [in] Int32 token);

        /**
         * Enable/disable the backup service entirely.  When disabled, no backup
         * or restore operations will take place.  Data-changed notifications will
         * still be observed and collected, however, so that changes made while the
         * mechanism was disabled will still be backed up properly if it is enabled
         * at some point in the future.
         *
         * <p>Callers must hold the android.permission.BACKUP permission to use this method.
         */
        SetBackupEnabled(
            [in] Boolean isEnabled);

        /**
         * Enable/disable automatic restore of application data at install time.  When
         * enabled, installation of any package will involve the Backup Manager.  If data
         * exists for the newly-installed package, either from the device's current [enabled]
         * backup dataset or from the restore set used in the last wholesale restore operation,
         * that data will be supplied to the new package's restore agent before the package
         * is made generally available for launch.
         *
         * <p>Callers must hold  the android.permission.BACKUP permission to use this method.
         *
         * @param doAutoRestore When true, enables the automatic app-data restore facility.  When
         *   false, this facility will be disabled.
         */
        SetAutoRestore(
            [in] Boolean doAutoRestore);

        /**
         * Indicate that any necessary one-time provisioning has occurred.
         *
         * <p>Callers must hold the android.permission.BACKUP permission to use this method.
         */
        SetBackupProvisioned(
            [in] Boolean isProvisioned);

        /**
         * Report whether the backup mechanism is currently enabled.
         *
         * <p>Callers must hold the android.permission.BACKUP permission to use this method.
         */
        IsBackupEnabled(
            [out] Boolean* isEnabled);

        /**
         * Set the device's backup password.  Returns {true} if the password was set
         * successfully, {false} otherwise.  Typically a failure means that an incorrect
         * current password was supplied.
         *
         * <p>Callers must hold the android.permission.BACKUP permission to use this method.
         */
        SetBackupPassword(
            [in] String currentPw,
            [in] String newPw,
            [out] Boolean* res);

        /**
         * Reports whether a backup password is currently set.  If not, then a null or empty
         * "current password" argument should be passed to setBackupPassword().
         *
         * <p>Callers must hold the android.permission.BACKUP permission to use this method.
         */
        HasBackupPassword(
            [out] Boolean* res);

        /**
         * Schedule an immediate backup attempt for all pending updates.  This is
         * primarily intended for transports to use when they detect a suitable
         * opportunity for doing a backup pass.  If there are no pending updates to
         * be sent, no action will be taken.  Even if some updates are pending, the
         * transport will still be asked to confirm via the usual requestBackupTime()
         * method.
         *
         * <p>Callers must hold the android.permission.BACKUP permission to use this method.
         */
        BackupNow();

        /**
         * Write a full backup of the given package to the supplied file descriptor.
         * The fd may be a socket or other non-seekable destination.  If no package names
         * are supplied, then every application on the device will be backed up to the output.
         *
         * <p>This method is <i>synchronous</i> -- it does not return until the backup has
         * completed.
         *
         * <p>Callers must hold the android.permission.BACKUP permission to use this method.
         *
         * @param fd The file descriptor to which a 'tar' file stream is to be written
         * @param includeApks If <code>true</code>, the resulting tar stream will include the
         *     application .apk files themselves as well as their data.
         * @param includeShared If <code>true</code>, the resulting tar stream will include
         *     the contents of the device's shared storage (SD card or equivalent).
         * @param allApps If <code>true</code>, the resulting tar stream will include all
         *     installed applications' data, not just those named in the <code>packageNames</code>
         *     parameter.
         * @param allIncludesSystem If {true}, then {allApps} will be interpreted
         *     as including packages pre-installed as part of the system. If {false},
         *     then setting {allApps} to {true} will mean only that all 3rd-party
         *     applications will be included in the dataset.
         * @param packageNames The package names of the apps whose data (and optionally .apk files)
         *     are to be backed up.  The <code>allApps</code> parameter supersedes this.
         */
        FullBackup(
            [in] IParcelFileDescriptor* fd,
            [in] Boolean includeApks,
            [in] Boolean includeShared,
            [in] Boolean doWidgets,
            [in] Boolean allApps,
            [in] Boolean allIncludesSystem,
            [in] Boolean doCompress,
            [in] ArrayOf<String>* packageNames);

        /**
         * Perform a full-dataset backup of the given applications via the currently active
         * transport.
         *
         * @param packageNames The package names of the apps whose data are to be backed up.
         */
        FullTransportBackup(
            [in] ArrayOf<String>* packageNames);

        /**
         * Restore device content from the data stream passed through the given socket.  The
         * data stream must be in the format emitted by fullBackup().
         *
         * <p>Callers must hold the android.permission.BACKUP permission to use this method.
         */
        FullRestore(
            [in] IParcelFileDescriptor* fd);

        /**
         * Confirm that the requested full backup/restore operation can proceed.  The system will
         * not actually perform the operation described to fullBackup() / fullRestore() unless the
         * UI calls back into the Backup Manager to confirm, passing the correct token.  At
         * the same time, the UI supplies a callback Binder for progress notifications during
         * the operation.
         *
         * <p>The password passed by the confirming entity must match the saved backup or
         * full-device encryption password in order to perform a backup.  If a password is
         * supplied for restore, it must match the password used when creating the full
         * backup dataset being used for restore.
         *
         * <p>Callers must hold the android.permission.BACKUP permission to use this method.
         */
        AcknowledgeFullBackupOrRestore(
            [in] Int32 token,
            [in] Boolean allow,
            [in] String curPassword,
            [in] String encryptionPassword,
            [in] IIFullBackupRestoreObserver* observer);

        /**
         * Identify the currently selected transport.  Callers must hold the
         * android.permission.BACKUP permission to use this method.
         */
        GetCurrentTransport(
            [out] String* transport);

        /**
         * Request a list of all available backup transports' names.  Callers must
         * hold the android.permission.BACKUP permission to use this method.
         */
        ListAllTransports(
            [out, callee] ArrayOf<String>* transports);

        /**
         * Specify the current backup transport.  Callers must hold the
         * android.permission.BACKUP permission to use this method.
         *
         * @param transport The name of the transport to select.  This should be one
         * of BackupManager.TRANSPORT_GOOGLE or BackupManager.TRANSPORT_ADB.
         * @return The name of the previously selected transport.  If the given transport
         *   name is not one of the currently available transports, no change is made to
         *   the current transport setting and the method returns null.
         *
         * @sa BackupManager.TRANSPORT_GOOGLE
         * @sa BackupManager.TRANSPORT_ADB
         */
        SelectBackupTransport(
            [in] String transport,
            [out] String* selectedTransport);

        /**
         * Get the configuration Intent, if any, from the given transport.  Callers must
         * hold the android.permission.BACKUP permission in order to use this method.
         *
         * @param transport The name of the transport to query.
         * @return An Intent to use with Activity#startActivity() to bring up the configuration
         *   UI supplied by the transport.  If the transport has no configuration UI, it should
         *   return {null} here.
         */
        GetConfigurationIntent(
            [in] String transport,
            [out] IIntent** intent);

        /**
         * Get the destination string supplied by the given transport.  Callers must
         * hold the android.permission.BACKUP permission in order to use this method.
         *
         * @param transport The name of the transport to query.
         * @return A string describing the current backup destination.  This string is used
         *   verbatim by the Settings UI as the summary text of the "configure..." item.
         */
        GetDestinationString(
            [in] String transport,
            [out] String* string);

        /**
         * Get the manage-data UI intent, if any, from the given transport.  Callers must
         * hold the android.permission.BACKUP permission in order to use this method.
         */
        GetDataManagementIntent(
            [in] String transport,
            [out] IIntent** intent);

        /**
         * Get the manage-data menu label, if any, from the given transport.  Callers must
         * hold the android.permission.BACKUP permission in order to use this method.
         */
        GetDataManagementLabel(
            [in] String transport,
            [out] String* label);

        /**
         * Begin a restore session.  Either or both of packageName and transportID
         * may be null.  If packageName is non-null, then only the given package will be
         * considered for restore.  If transportID is null, then the restore will use
         * the current active transport.
         * <p>
         * This method requires the android.permission.BACKUP permission <i>except</i>
         * when transportID is null and packageName is the name of the caller's own
         * package.  In that case, the restore session returned is suitable for supporting
         * the BackupManager.requestRestore() functionality via RestoreSession.restorePackage()
         * without requiring the app to hold any special permission.
         *
         * @param packageName The name of the single package for which a restore will
         *        be requested.  May be null, in which case all packages in the restore
         *        set can be restored.
         * @param transportID The name of the transport to use for the restore operation.
         *        May be null, in which case the current active transport is used.
         * @return An interface to the restore session, or null on error.
         */
        BeginRestoreSession(
            [in] String packageName,
            [in] String transportID,
            [out] IIRestoreSession** session);

        /**
         * Notify the backup manager that a BackupAgent has completed the operation
         * corresponding to the given token.
         *
         * @param token The transaction token passed to a BackupAgent's doBackup() or
         *        doRestore() method.
         * {@hide}
         */
        OpComplete(
            [in] Int32 token);
    }

    } // namespace Backup
    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
