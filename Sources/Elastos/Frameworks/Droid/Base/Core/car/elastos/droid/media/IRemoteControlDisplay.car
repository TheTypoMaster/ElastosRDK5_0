
module
{
    interface Elastos.Droid.App.IPendingIntent;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Graphics.IBitmap;

    namespace Elastos {
    namespace Droid {
    namespace Media {

    [oneway]
    interface IIRemoteControlDisplay {
        /**
         * Sets the generation counter of the current client that is displayed on the remote control.
         * @param clientGeneration the new RemoteControlClient generation
         * @param clientMediaIntent the PendingIntent associated with the client.
         *    May be null, which implies there is no registered media button event receiver.
         * @param clearing true if the new client generation value maps to a remote control update
         *    where the display should be cleared.
         */
        SetCurrentClientId(
            [in] Int32 clientGeneration,
            [in] IPendingIntent* clientMediaIntent,
            [in] Boolean clearing);

        /**
         * Sets whether the controls of this display are enabled
         * @param if false, the display shouldn't any commands
         */
        SetEnabled(
            [in] Boolean enabled);

        /**
         * Sets the playback information (state, position and speed) of a client.
         * @param generationId the current generation ID as known by this client
         * @param state the current playback state, one of the following values:
         *       {@link RemoteControlClient#PLAYSTATE_STOPPED},
         *       {@link RemoteControlClient#PLAYSTATE_PAUSED},
         *       {@link RemoteControlClient#PLAYSTATE_PLAYING},
         *       {@link RemoteControlClient#PLAYSTATE_FAST_FORWARDING},
         *       {@link RemoteControlClient#PLAYSTATE_REWINDING},
         *       {@link RemoteControlClient#PLAYSTATE_SKIPPING_FORWARDS},
         *       {@link RemoteControlClient#PLAYSTATE_SKIPPING_BACKWARDS},
         *       {@link RemoteControlClient#PLAYSTATE_BUFFERING},
         *       {@link RemoteControlClient#PLAYSTATE_ERROR}.
         * @param stateChangeTimeMs the time at which the client reported the playback information
         * @param currentPosMs a 0 or positive value for the current media position expressed in ms
         *    Strictly negative values imply that position is not known:
         *    a value of {@link RemoteControlClient#PLAYBACK_POSITION_INVALID} is intended to express
         *    that an application doesn't know the position (e.g. listening to a live stream of a radio)
         *    or that the position information is not applicable (e.g. when state
         *    is {@link RemoteControlClient#PLAYSTATE_BUFFERING} and nothing had played yet);
         *    a value of {@link RemoteControlClient#PLAYBACK_POSITION_ALWAYS_UNKNOWN} implies that the
         *    application uses {@link RemoteControlClient#setPlaybackState(int)} (legacy API) and will
         *    never pass a playback position.
         * @param speed a value expressed as a ratio of 1x playback: 1.0f is normal playback,
         *    2.0f is 2x, 0.5f is half-speed, -2.0f is rewind at 2x speed. 0.0f means nothing is
         *    playing (e.g. when state is {@link RemoteControlClient#PLAYSTATE_ERROR}).
         */
        SetPlaybackState(
            [in] Int32 generationId,
            [in] Int32 state,
            [in] Int64 stateChangeTimeMs,
            [in] Int64 currentPosMs,
            [in] Float speed);

        /**
         * Sets the transport control flags and playback position capabilities of a client.
         * @param generationId the current generation ID as known by this client
         * @param transportControlFlags bitmask of the transport controls this client supports, see
         *         {@link RemoteControlClient#setTransportControlFlags(int)}
         * @param posCapabilities a bit mask for playback position capabilities, see
         *         {@link RemoteControlClient#MEDIA_POSITION_READABLE} and
         *         {@link RemoteControlClient#MEDIA_POSITION_WRITABLE}
         */
        SetTransportControlInfo(
            [in] Int32 generationId,
            [in] Int32 transportControlFlags,
            [in] Int32 posCapabilities);

        SetMetadata(
            [in] Int32 generationId,
            [in] IBundle* metadata);

        SetArtwork(
            [in] Int32 generationId,
            [in] IBitmap* artwork);

        /**
         * To combine metadata text and artwork in one binder call
         */
        SetAllMetadata(
            [in] Int32 generationId,
            [in] IBundle* metadata,
            [in] IBitmap* artwork);
    }

    } // namespace Media
    } // namepsace Droid
    } // namespace Elastos
}
