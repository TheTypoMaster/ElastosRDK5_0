
module
{
    namespace Elastos {
    namespace Droid {
    namespace Graphics {
    namespace Drawable {

        /**
         * <p>A Drawable that can rotate another Drawable based on the current level
         * value. The start and end angles of rotation can be controlled to map any
         * circular arc to the level values range.</p>
         *
         * <p>It can be defined in an XML file with the <code>&lt;rotate></code> element. For more
         * information, see the guide to <a
         * href="{@docRoot}guide/topics/resources/animation-resource.html">Animation Resources</a>.</p>
         *
         * @attr ref android.R.styleable#RotateDrawable_visible
         * @attr ref android.R.styleable#RotateDrawable_fromDegrees
         * @attr ref android.R.styleable#RotateDrawable_toDegrees
         * @attr ref android.R.styleable#RotateDrawable_pivotX
         * @attr ref android.R.styleable#RotateDrawable_pivotY
         * @attr ref android.R.styleable#RotateDrawable_drawable
         */


         /**
    * A Drawable is a general abstraction for "something that can be drawn." Most often
    * you will deal with Drawable as the type of resource retrieved for drawing things
    * to the screen; the Drawable class provides a generic API for dealing with an
    * underlying visual resource that may take a variety of forms. Unlike a View, a
    * Drawable does not have any facility to receive events or otherwise interact with
    * the user.
    *
    * @sa  View
    * <p>
    * In addition to simple drawing, Drawable provides a number of generic mechanisms
    * for its client to interact with what is being drawn:
    * <p>
    * The setBounds(Rect) method must be called to tell the Drawable where it is drawn
    * and how large it should be. All Drawables should respect the requested size,
    * often simply by scaling their imagery. A client can find the preferred size for
    * some Drawables with the getIntrinsicHeight() and getIntrinsicWidth() methods.
    *
    * @sa setBounds(Rect)
    * @sa getIntrinsicHeight()
    * @sa getIntrinsicWidth()
    * <p>
    * The getPadding(Rect) method can return from some Drawables information about how
    * to frame content that is placed inside of them. For example, a Drawable that is
    * intended to be the frame for a button widget would need to return padding that
    * correctly places the label inside of itself.
    *
    * @sa getPadding(Rect)
    * <p>
    * The setState(int[]) method allows the client to tell the Drawable in which state
    * it is to be drawn, such as "focused", "selected", etc. Some drawables may modify
    * their imagery based on the selected state.
    *
    * @sa setState(int[])
    * <p>
    * The setLevel(int) method allows the client to supply a single continuous
    * controller that can modify the Drawable is displayed, such as a battery level or
    * progress level. Some drawables may modify their imagery based on the current
    * level.
    *
    * @sa setLevel(int)
    * <p>
    * A Drawable can perform animations by calling back to its client through the
    * Drawable.Callback interface. All clients should support this interface
    * (via setCallback(Drawable.Callback)) so that animations will work. A simple way
    * to do this is through the system facilities such as
    * (setBackgroundDrawable(Drawable) and ImageView.
    *
    * @sa Drawable.Callback
    * @sa setCallback(Drawable.Callback
    * @sa setBackgroundDrawable(Drawable)
    * @sa ImageView
    * <p>
    * Though usually not visible to the application, Drawables may take a variety of
    * forms:
    * Bitmap: the simplest Drawable, a PNG or JPEG image.
    * Nine Patch: an extension to the PNG format allows it to specify information about
    * how to stretch it and place things inside of it.
    * Shape: contains simple drawing commands instead of a raw bitmap, allowing it to
    * resize better in some cases.
    * Layers: a compound drawable, which draws multiple underlying drawables on top of
    * each other.
    * States: a compound drawable that selects one of a set of drawables based on its
    * state.
    * Levels: a compound drawable that selects one of a set of drawables based on its
    * level.
    * Scale: a compound drawable with a single child drawable, whose overall size is
    * modified based on the current level.
    *
    * @implements Elastos.Droid.Graphics.Drawable.IDrawable
    */
    /**
     * @Involve
     * interface IDrawable
     */
    interface IRotateDrawable {
        /**
         * Returns the drawable rotated by this RotateDrawable.
         */
        GetDrawable(
            [out] IDrawable** drawable);

        /**
         * Sets the drawable rotated by this RotateDrawable.
         *
         * @param drawable The drawable to rotate
         */
        SetDrawable(
            [in] IDrawable* drawable);

        /**
         * Sets the start angle for rotation.
         *
         * @param fromDegrees Starting angle in degrees
         *
         * @see #getFromDegrees()
         * @attr ref android.R.styleable#RotateDrawable_fromDegrees
         */
        SetFromDegrees(
            [in] Float fromDegrees);

        /**
         * @return The starting angle for rotation in degrees
         *
         * @see #setFromDegrees(float)
         * @attr ref android.R.styleable#RotateDrawable_fromDegrees
         */
        GetFromDegrees(
            [out] Float* fromDegrees);

        /**
         * Sets the end angle for rotation.
         *
         * @param toDegrees Ending angle in degrees
         *
         * @see #getToDegrees()
         * @attr ref android.R.styleable#RotateDrawable_toDegrees
         */
        SetToDegrees(
            [in] Float toDegrees);

        /**
         * @return The ending angle for rotation in degrees
         *
         * @see #setToDegrees(float)
         * @attr ref android.R.styleable#RotateDrawable_toDegrees
         */
        GetToDegrees(
            [out] Float* toDegrees);

        /**
         * Sets the X position around which the drawable is rotated.
         *
         * @param pivotX X position around which to rotate. If the X pivot is
         *            relative, the position represents a fraction of the drawable
         *            width. Otherwise, the position represents an absolute value in
         *            pixels.
         *
         * @see #setPivotXRelative(boolean)
         * @attr ref android.R.styleable#RotateDrawable_pivotX
         */
        SetPivotX(
            [in] Float pivotX);

        /**
         * @return X position around which to rotate
         *
         * @see #setPivotX(float)
         * @attr ref android.R.styleable#RotateDrawable_pivotX
         */
        GetPivotX(
            [out] Float* pivotX);

        /**
         * Sets whether the X pivot value represents a fraction of the drawable
         * width or an absolute value in pixels.
         *
         * @param relative True if the X pivot represents a fraction of the drawable
         *            width, or false if it represents an absolute value in pixels
         *
         * @see #isPivotXRelative()
         */
        SetPivotXRelative(
            [in] Boolean relative);

        /**
         * @return True if the X pivot represents a fraction of the drawable width,
         *         or false if it represents an absolute value in pixels
         *
         * @see #setPivotXRelative(boolean)
         */
        IsPivotXRelative(
            [out] Boolean* isPivotXRelative);

        /**
         * Sets the Y position around which the drawable is rotated.
         *
         * @param pivotY Y position around which to rotate. If the Y pivot is
         *            relative, the position represents a fraction of the drawable
         *            height. Otherwise, the position represents an absolute value
         *            in pixels.
         *
         * @see #getPivotY()
         * @attr ref android.R.styleable#RotateDrawable_pivotY
         */
        SetPivotY(
            [in] Float pivotY);

        /**
         * @return Y position around which to rotate
         *
         * @see #setPivotY(float)
         * @attr ref android.R.styleable#RotateDrawable_pivotY
         */
        GetPivotY(
            [out] Float* pivotY);

        /**
         * Sets whether the Y pivot value represents a fraction of the drawable
         * height or an absolute value in pixels.
         *
         * @param relative True if the Y pivot represents a fraction of the drawable
         *            height, or false if it represents an absolute value in pixels
         *
         * @see #isPivotYRelative()
         */
        SetPivotYRelative(
            [in] Boolean relative);

        /**
         * @return True if the Y pivot represents a fraction of the drawable height,
         *         or false if it represents an absolute value in pixels
         *
         * @see #setPivotYRelative(boolean)
         */
        IsPivotYRelative(
            [out] Boolean* isPivotYRelative);
    }

    } // namespace Drawable
    } // namespace Graphics
    } // namespace Droid
    } // namespace Elastos
}
