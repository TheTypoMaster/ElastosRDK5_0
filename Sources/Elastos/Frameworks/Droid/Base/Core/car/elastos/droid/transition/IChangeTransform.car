
module
{
    namespace Elastos {
    namespace Droid {
    namespace Transition {

    /**
     * This Transition captures scale and rotation for Views before and after the
     * scene change and animates those changes during the transition.
     *
     * A change in parent is handled as well by capturing the transforms from
     * the parent before and after the scene change and animating those during the
     * transition.
     */

    /**
     * involve interface ITransition
     */
    interface IChangeTransform {

        /**
         * Returns whether changes to parent should use an overlay or not. When the parent
         * change doesn't use an overlay, it affects the transforms of the child. The
         * default value is <code>true</code>.
         *
         * <p>Note: when Overlays are not used when a parent changes, a view can be clipped when
         * it moves outside the bounds of its parent. Setting
         * {@link android.view.ViewGroup#setClipChildren(boolean)} and
         * {@link android.view.ViewGroup#setClipToPadding(boolean)} can help. Also, when
         * Overlays are not used and the parent is animating its location, the position of the
         * child view will be relative to its parent's final position, so it may appear to "jump"
         * at the beginning.</p>
         *
         * @return <code>true</code> when a changed parent should execute the transition
         * inside the scene root's overlay or <code>false</code> if a parent change only
         * affects the transform of the transitioning view.
         * @attr ref android.R.styleable#ChangeTransform_reparentWithOverlay
         */
        GetReparentWithOverlay(
            [out] Boolean* result);

        /**
         * Sets whether changes to parent should use an overlay or not. When the parent
         * change doesn't use an overlay, it affects the transforms of the child. The
         * default value is <code>true</code>.
         *
         * <p>Note: when Overlays are not used when a parent changes, a view can be clipped when
         * it moves outside the bounds of its parent. Setting
         * {@link android.view.ViewGroup#setClipChildren(boolean)} and
         * {@link android.view.ViewGroup#setClipToPadding(boolean)} can help. Also, when
         * Overlays are not used and the parent is animating its location, the position of the
         * child view will be relative to its parent's final position, so it may appear to "jump"
         * at the beginning.</p>
         *
         * @return <code>true</code> when a changed parent should execute the transition
         * inside the scene root's overlay or <code>false</code> if a parent change only
         * affects the transform of the transitioning view.
         * @attr ref android.R.styleable#ChangeTransform_reparentWithOverlay
         */
        SetReparentWithOverlay(
            [in] Boolean reparentWithOverlay);

        /**
         * Returns whether parent changes will be tracked by the ChangeTransform. If parent
         * changes are tracked, then the transform will adjust to the transforms of the
         * different parents. If they aren't tracked, only the transforms of the transitioning
         * view will be tracked. Default is true.
         *
         * @return whether parent changes will be tracked by the ChangeTransform.
         * @attr ref android.R.styleable#ChangeTransform_reparent
         */
        GetReparent(
            [out] Boolean* result);

        /**
         * Sets whether parent changes will be tracked by the ChangeTransform. If parent
         * changes are tracked, then the transform will adjust to the transforms of the
         * different parents. If they aren't tracked, only the transforms of the transitioning
         * view will be tracked. Default is true.
         *
         * @param reparent Set to true to track parent changes or false to only track changes
         *                 of the transitioning view without considering the parent change.
         * @attr ref android.R.styleable#ChangeTransform_reparent
         */
        SetReparent(
            [in] Boolean reparent);
    }

    } // Transition
    } // Droid
    } // Elastos
}
