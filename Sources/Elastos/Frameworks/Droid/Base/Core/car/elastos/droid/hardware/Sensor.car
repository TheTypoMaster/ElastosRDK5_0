
module
{
    namespace Elastos {
    namespace Droid {
    namespace Hardware {

    /**
     * Class representing a sensor. Use {@link SensorManager#getSensorList} to get
     * the list of available Sensors.
     *
     * @see SensorManager
     * @see SensorEventListener
     * @see SensorEvent
     *
     */
    interface ISensor {
        /**
         * A constant describing an accelerometer sensor type.
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}
         * for more details.
         */
        const Int32 TYPE_ACCELEROMETER = 1;

        /**
         * A constant string describing an accelerometer sensor type.
         *
         * @see #TYPE_ACCELEROMETER
         */
        const String STRING_TYPE_ACCELEROMETER = "android.sensor.accelerometer";

        /**
         * A constant describing a magnetic field sensor type.
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}
         * for more details.
         */
        const Int32 TYPE_MAGNETIC_FIELD = 2;

        /**
         * A constant string describing a magnetic field sensor type.
         *
         * @see #TYPE_MAGNETIC_FIELD
         */
        const String STRING_TYPE_MAGNETIC_FIELD = "android.sensor.magnetic_field";

        /**
         * A constant describing an orientation sensor type.
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}
         * for more details.
         *
         * @deprecated use {@link android.hardware.SensorManager#getOrientation
         *             SensorManager.getOrientation()} instead.
         */
        //@Deprecated
        const Int32 TYPE_ORIENTATION = 3;

        /**
         * A constant string describing an orientation sensor type.
         *
         * @see #TYPE_ORIENTATION
         * @deprecated use {@link android.hardware.SensorManager#getOrientation
         *             SensorManager.getOrientation()} instead.
         */
        //@Deprecated
        const String STRING_TYPE_ORIENTATION = "android.sensor.orientation";

        /**
         * A constant describing a gyroscope sensor type.
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}
         * for more details. */
        const Int32 TYPE_GYROSCOPE = 4;

        /**
         * A constant string describing a gyroscope sensor type.
         *
         * @see #TYPE_GYROSCOPE
         */
        const String STRING_TYPE_GYROSCOPE = "android.sensor.gyroscope";

        /**
         * A constant describing a light sensor type.
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}
         * for more details.
         */
        const Int32 TYPE_LIGHT = 5;

        /**
         * A constant string describing a light sensor type.
         *
         * @see #TYPE_LIGHT
         */
        const String STRING_TYPE_LIGHT = "android.sensor.light";

        /**
         * A constant describing a pressure sensor type.
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}
         * for more details.
         */
        const Int32 TYPE_PRESSURE = 6;

        /**
         * A constant string describing a pressure sensor type.
         *
         * @see #TYPE_PRESSURE
         */
        const String STRING_TYPE_PRESSURE = "android.sensor.pressure";

        /**
         * A constant describing a temperature sensor type
         *
         * @deprecated use
         *             {@link android.hardware.Sensor#TYPE_AMBIENT_TEMPERATURE
         *             Sensor.TYPE_AMBIENT_TEMPERATURE} instead.
         */
        //@Deprecated
        const Int32 TYPE_TEMPERATURE = 7;

        /**
         * A constant string describing a temperature sensor type
         *
         * @see #TYPE_TEMPERATURE
         * @deprecated use
         *             {@link android.hardware.Sensor#STRING_TYPE_AMBIENT_TEMPERATURE
         *             Sensor.STRING_TYPE_AMBIENT_TEMPERATURE} instead.
         */
        //@Deprecated
        const String STRING_TYPE_TEMPERATURE = "android.sensor.temperature";

        /**
         * A constant describing a proximity sensor type. This is a wake up sensor.
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}
         * for more details.
         * @see #isWakeUpSensor()
         */
        const Int32 TYPE_PROXIMITY = 8;

        /**
         * A constant string describing a proximity sensor type.
         *
         * @see #TYPE_PROXIMITY
         */
        const String STRING_TYPE_PROXIMITY = "android.sensor.proximity";

        /**
         * A constant describing a gravity sensor type.
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}
         * for more details.
         */
        const Int32 TYPE_GRAVITY = 9;

        /**
         * A constant string describing a gravity sensor type.
         *
         * @see #TYPE_GRAVITY
         */
        const String STRING_TYPE_GRAVITY = "android.sensor.gravity";

        /**
         * A constant describing a linear acceleration sensor type.
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}
         * for more details.
         */
        const Int32 TYPE_LINEAR_ACCELERATION = 10;

        /**
         * A constant string describing a linear acceleration sensor type.
         *
         * @see #TYPE_LINEAR_ACCELERATION
         */
        const String STRING_TYPE_LINEAR_ACCELERATION =
            "android.sensor.linear_acceleration";

        /**
         * A constant describing a rotation vector sensor type.
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}
         * for more details.
         */
        const Int32 TYPE_ROTATION_VECTOR = 11;

        /**
         * A constant string describing a rotation vector sensor type.
         *
         * @see #TYPE_ROTATION_VECTOR
         */
        const String STRING_TYPE_ROTATION_VECTOR = "android.sensor.rotation_vector";

        /**
         * A constant describing a relative humidity sensor type.
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}
         * for more details.
         */
        const Int32 TYPE_RELATIVE_HUMIDITY = 12;

        /**
         * A constant string describing a relative humidity sensor type
         *
         * @see #TYPE_RELATIVE_HUMIDITY
         */
        const String STRING_TYPE_RELATIVE_HUMIDITY = "android.sensor.relative_humidity";

        /**
         * A constant describing an ambient temperature sensor type.
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values}
         * for more details.
         */
        const Int32 TYPE_AMBIENT_TEMPERATURE = 13;

        /**
         * A constant string describing an ambient temperature sensor type.
         *
         * @see #TYPE_AMBIENT_TEMPERATURE
         */
        const String STRING_TYPE_AMBIENT_TEMPERATURE =
            "android.sensor.ambient_temperature";

        /**
         * A constant describing an uncalibrated magnetic field sensor type.
         * <p>
         * Similar to {@link #TYPE_MAGNETIC_FIELD} but the hard iron calibration (device calibration
         * due to distortions that arise from magnetized iron, steel or permanent magnets on the
         * device) is not considered in the given sensor values. However, such hard iron bias values
         * are returned to you separately in the result {@link android.hardware.SensorEvent#values}
         * so you may use them for custom calibrations.
         * <p>Also, no periodic calibration is performed
         * (i.e. there are no discontinuities in the data stream while using this sensor) and
         * assumptions that the magnetic field is due to the Earth's poles is avoided, but
         * factory calibration and temperature compensation have been performed.
         * </p>
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values} for more
         * details.
         */
        const Int32 TYPE_MAGNETIC_FIELD_UNCALIBRATED = 14;
        /**
         * A constant string describing an uncalibrated magnetic field sensor type.
         *
         * @see #TYPE_MAGNETIC_FIELD_UNCALIBRATED
         */
        const String STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED =
            "android.sensor.magnetic_field_uncalibrated";

        /**
         * A constant describing an uncalibrated rotation vector sensor type.
         * <p>Identical to {@link #TYPE_ROTATION_VECTOR} except that it doesn't
         * use the geomagnetic field. Therefore the Y axis doesn't
         * point north, but instead to some other reference, that reference is
         * allowed to drift by the same order of magnitude as the gyroscope
         * drift around the Z axis.
         * <p>
         * In the ideal case, a phone rotated and returning to the same real-world
         * orientation should report the same game rotation vector
         * (without using the earth's geomagnetic field). However, the orientation
         * may drift somewhat over time.
         * </p>
         * <p>See {@link android.hardware.SensorEvent#values SensorEvent.values} for more
         * details.
         */
        const Int32 TYPE_GAME_ROTATION_VECTOR = 15;

        /**
         * A constant string describing an uncalibrated rotation vector sensor type.
         *
         * @see #TYPE_GAME_ROTATION_VECTOR
         */
        const String STRING_TYPE_GAME_ROTATION_VECTOR =
            "android.sensor.game_rotation_vector";

        /**
         * A constant describing an uncalibrated gyroscope sensor type.
         * <p>Similar to {@link #TYPE_GYROSCOPE} but no gyro-drift compensation has been performed
         * to adjust the given sensor values. However, such gyro-drift bias values
         * are returned to you separately in the result {@link android.hardware.SensorEvent#values}
         * so you may use them for custom calibrations.
         * <p>Factory calibration and temperature compensation is still applied
         * to the rate of rotation (angular speeds).
         * </p>
         * <p> See {@link android.hardware.SensorEvent#values SensorEvent.values} for more
         * details.
         */
        const Int32 TYPE_GYROSCOPE_UNCALIBRATED = 16;

        /**
         * A constant string describing an uncalibrated gyroscope sensor type.
         *
         * @see #TYPE_GYROSCOPE_UNCALIBRATED
         */
        const String STRING_TYPE_GYROSCOPE_UNCALIBRATED =
            "android.sensor.gyroscope_uncalibrated";

        /**
         * A constant describing a significant motion trigger sensor.
         * <p>
         * It triggers when an event occurs and then automatically disables
         * itself. The sensor continues to operate while the device is asleep
         * and will automatically wake the device to notify when significant
         * motion is detected. The application does not need to hold any wake
         * locks for this sensor to trigger. This is a wake up sensor.
         * <p>See {@link TriggerEvent} for more details.
         *
         * @see #isWakeUpSensor()
         */
        const Int32 TYPE_SIGNIFICANT_MOTION = 17;

        /**
         * A constant string describing a significant motion trigger sensor.
         *
         * @see #TYPE_SIGNIFICANT_MOTION
         */
        const String STRING_TYPE_SIGNIFICANT_MOTION =
            "android.sensor.significant_motion";

        /**
         * A constant describing a step detector sensor.
         * <p>
         * A sensor of this type triggers an event each time a step is taken by the user. The only
         * allowed value to return is 1.0 and an event is generated for each step. Like with any other
         * event, the timestamp indicates when the event (here the step) occurred, this corresponds to
         * when the foot hit the ground, generating a high variation in acceleration.
         * <p>
         * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.
         */
        const Int32 TYPE_STEP_DETECTOR = 18;

        /**
         * A constant string describing a step detector sensor.
         *
         * @see #TYPE_STEP_DETECTOR
         */
        const String STRING_TYPE_STEP_DETECTOR = "android.sensor.step_detector";

        /**
         * A constant describing a step counter sensor.
         * <p>
         * A sensor of this type returns the number of steps taken by the user since the last reboot
         * while activated. The value is returned as a float (with the fractional part set to zero) and
         * is reset to zero only on a system reboot. The timestamp of the event is set to the time when
         * the last step for that event was taken. This sensor is implemented in hardware and is
         * expected to be low power.
         * <p>
         * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.
         */
        const Int32 TYPE_STEP_COUNTER = 19;

        /**
         * A constant string describing a step counter sensor.
         *
         * @see #TYPE_STEP_COUNTER
         */
        const String STRING_TYPE_STEP_COUNTER = "android.sensor.step_counter";

        /**
         * A constant describing a geo-magnetic rotation vector.
         * <p>
         * Similar to {@link #TYPE_ROTATION_VECTOR}, but using a magnetometer instead of using a
         * gyroscope. This sensor uses lower power than the other rotation vectors, because it doesn't
         * use the gyroscope. However, it is more noisy and will work best outdoors.
         * <p>
         * See {@link android.hardware.SensorEvent#values SensorEvent.values} for more details.
         */
        const Int32 TYPE_GEOMAGNETIC_ROTATION_VECTOR = 20;

        /**
         * A constant string describing a geo-magnetic rotation vector.
         *
         * @see #TYPE_GEOMAGNETIC_ROTATION_VECTOR
         */
        const String STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR =
            "android.sensor.geomagnetic_rotation_vector";

        /**
         * A constant describing a heart rate monitor.
         * <p>
         * The reported value is the heart rate in beats per minute.
         * <p>
         * The reported accuracy represents the status of the monitor during the reading. See the
         * {@code SENSOR_STATUS_*} constants in {@link android.hardware.SensorManager SensorManager}
         * for more details on accuracy/status values. In particular, when the accuracy is
         * {@code SENSOR_STATUS_UNRELIABLE} or {@code SENSOR_STATUS_NO_CONTACT}, the heart rate
         * value should be discarded.
         * <p>
         * This sensor requires permission {@code android.permission.BODY_SENSORS}.
         * It will not be returned by {@code SensorManager.getSensorsList} nor
         * {@code SensorManager.getDefaultSensor} if the application doesn't have this permission.
         */
        const Int32 TYPE_HEART_RATE = 21;

        /**
         * A constant string describing a heart rate monitor.
         *
         * @see #TYPE_HEART_RATE
         */
        const String STRING_TYPE_HEART_RATE = "android.sensor.heart_rate";

        /**
         * A sensor of this type generates an event each time a tilt event is detected. A tilt event
         * is generated if the direction of the 2-seconds window average gravity changed by at
         * least 35 degrees since the activation of the sensor. It is a wake up sensor.
         *
         * @hide
         * @see #isWakeUpSensor()
         */
        const Int32 TYPE_TILT_DETECTOR = 22;

        /**
         * A constant string describing a wake up tilt detector sensor type.
         *
         * @hide
         * @see #TYPE_WAKE_UP_TILT_DETECTOR
         */
        const String SENSOR_STRING_TYPE_TILT_DETECTOR =
                "android.sensor.tilt_detector";

        /**
         * A constant describing a wake gesture sensor.
         * <p>
         * Wake gesture sensors enable waking up the device based on a device specific motion.
         * <p>
         * When this sensor triggers, the device behaves as if the power button was pressed, turning the
         * screen on. This behavior (turning on the screen when this sensor triggers) might be
         * deactivated by the user in the device settings. Changes in settings do not impact the
         * behavior of the sensor: only whether the framework turns the screen on when it triggers.
         * <p>
         * The actual gesture to be detected is not specified, and can be chosen by the manufacturer of
         * the device. This sensor must be low power, as it is likely to be activated 24/7.
         * Values of events created by this sensors should not be used.
         *
         * @see #isWakeUpSensor()
         * @hide This sensor is expected to only be used by the system ui
         */
        const Int32 TYPE_WAKE_GESTURE = 23;

        /**
         * A constant string describing a wake gesture sensor.
         *
         * @hide This sensor is expected to only be used by the system ui
         * @see #TYPE_WAKE_GESTURE
         */
        const String STRING_TYPE_WAKE_GESTURE = "android.sensor.wake_gesture";

        /**
         * A constant describing a wake gesture sensor.
         * <p>
         * A sensor enabling briefly turning the screen on to enable the user to
         * glance content on screen based on a specific motion.  The device should
         * turn the screen off after a few moments.
         * <p>
         * When this sensor triggers, the device turns the screen on momentarily
         * to allow the user to glance notifications or other content while the
         * device remains locked in a non-interactive state (dozing). This behavior
         * (briefly turning on the screen when this sensor triggers) might be deactivated
         * by the user in the device settings. Changes in settings do not impact the
         * behavior of the sensor: only whether the framework briefly turns the screen on
         * when it triggers.
         * <p>
         * The actual gesture to be detected is not specified, and can be chosen by the manufacturer of
         * the device. This sensor must be low power, as it is likely to be activated 24/7.
         * Values of events created by this sensors should not be used.
         *
         * @see #isWakeUpSensor()
         * @hide This sensor is expected to only be used by the system ui
         */
        const Int32 TYPE_GLANCE_GESTURE = 24;

        /**
         * A constant string describing a wake gesture sensor.
         *
         * @hide This sensor is expected to only be used by the system ui
         * @see #TYPE_GLANCE_GESTURE
         */
        const String STRING_TYPE_GLANCE_GESTURE = "android.sensor.glance_gesture";

         /**
         * A constant describing a pick up sensor.
         *
         * A sensor of this type triggers when the device is picked up regardless of wherever it was
         * before (desk, pocket, bag). The only allowed return value is 1.0. This sensor deactivates
         * itself immediately after it triggers.
         *
         * @hide Expected to be used internally for always on display.
         */
        const Int32 TYPE_PICK_UP_GESTURE = 25;

        /**
         * A constant string describing a pick up sensor.
         *
         * @hide This sensor is expected to be used internally for always on display.
         * @see #TYPE_PICK_UP_GESTURE
         */
        const String STRING_TYPE_PICK_UP_GESTURE = "android.sensor.pick_up_gesture";

        /**
         * A constant describing all sensor types.
         */
        const Int32 TYPE_ALL = -1;

        /**
         * Events are reported at a constant rate which is set by the rate parameter of
         * {@link SensorManager#registerListener(SensorEventListener, Sensor, int)}. Note: If other
         * applications are requesting a higher rate, the sensor data might be delivered at faster rates
         * than requested.
         */
        const Int32 REPORTING_MODE_CONTINUOUS = 0;

        /**
         * Events are reported only when the value changes. Event delivery rate can be limited by
         * setting appropriate value for rate parameter of
         * {@link SensorManager#registerListener(SensorEventListener, Sensor, int)} Note: If other
         * applications are requesting a higher rate, the sensor data might be delivered at faster rates
         * than requested.
         */
        const Int32 REPORTING_MODE_ON_CHANGE = 1;

        /**
         * Events are reported in one-shot mode. Upon detection of an event, the sensor deactivates
         * itself and then sends a single event. Sensors of this reporting mode must be registered to
         * using {@link SensorManager#requestTriggerSensor(TriggerEventListener, Sensor)}.
         */
        const Int32 REPORTING_MODE_ONE_SHOT = 2;

        /**
         * Events are reported as described in the description of the sensor. The rate passed to
         * registerListener might not have an impact on the rate of event delivery. See the sensor
         * definition for more information on when and how frequently the events are reported. For
         * example, step detectors report events when a step is detected.
         *
         * @see SensorManager#registerListener(SensorEventListener, Sensor, int, int)
         */
        const Int32 REPORTING_MODE_SPECIAL_TRIGGER = 3;


        /**
         * Each sensor has exactly one reporting mode associated with it. This method returns the
         * reporting mode constant for this sensor type.
         *
         * @return Reporting mode for the input sensor, one of REPORTING_MODE_* constants.
         * @see #REPORTING_MODE_CONTINUOUS
         * @see #REPORTING_MODE_ON_CHANGE
         * @see #REPORTING_MODE_ONE_SHOT
         * @see #REPORTING_MODE_SPECIAL_TRIGGER
         */
        GetReportingMode(
            [out] Int32* mode);

        /**
         * @return name string of the sensor.
         */
        GetName(
            [out] String* value);

        /**
         * @return vendor string of this sensor.
         */
        GetVendor(
            [out] String* value);

        /**
         * @return generic type of this sensor.
         */
        GetType(
            [out] Int32* value);

        /**
         * @return version of the sensor's module.
         */
        GetVersion(
            [out] Int32* value);

        /**
         * @return maximum range of the sensor in the sensor's unit.
         */
        GetMaximumRange(
            [out] Float* value);

        /**
         * @return resolution of the sensor in the sensor's unit.
         */
        GetResolution(
            [out] Float* value);

        /**
         * @return the power in mA used by this sensor while in use
         */
        GetPower(
            [out] Float* value);

        /**
         * @return the minimum delay allowed between two events in microsecond
         * or zero if this sensor only returns a value when the data it's measuring
         * changes.
         */
        GetMinDelay(
            [out] Int32* delay);

        /**
         * @return Number of events reserved for this sensor in the batch mode FIFO. This gives a
         * guarantee on the minimum number of events that can be batched.
         */
        GetFifoReservedEventCount(
            [out] Int32* count);

        /**
         * @return Maximum number of events of this sensor that could be batched. If this value is zero
         * it indicates that batch mode is not supported for this sensor. If other applications
         * registered to batched sensors, the actual number of events that can be batched might be
         * smaller because the hardware FiFo will be partially used to batch the other sensors.
         */
        GetFifoMaxEventCount(
            [out] Int32* count);

        /**
         * @return The type of this sensor as a string.
         */
        GetStringType(
            [out] String* type);

        /**
         * @hide
         * @return The permission required to access this sensor. If empty, no permission is required.
         */
        GetRequiredPermission(
            [out] String* permission);

        /** @hide */
        GetHandle(
            [out] Int32* handle);

        /**
         * This value is defined only for continuous and on-change sensors. It is the delay between two
         * sensor events corresponding to the lowest frequency that this sensor supports. When lower
         * frequencies are requested through registerListener() the events will be generated at this
         * frequency instead. It can be used to estimate when the batch FIFO may be full. Older devices
         * may set this value to zero. Ignore this value in case it is negative or zero.
         *
         * @return The max delay for this sensor in microseconds.
         */
        GetMaxDelay(
            [out] Int32* delay);

        /**
         * Returns whether this sensor is a wake-up sensor.
         * <p>
         * Wake up sensors wake the application processor up when they have events to deliver. When a
         * wake up sensor is registered to without batching enabled, each event will wake the
         * application processor up.
         * <p>
         * When a wake up sensor is registered to with batching enabled, it
         * wakes the application processor up when maxReportingLatency has elapsed or when the hardware
         * FIFO storing the events from wake up sensors is getting full.
         * <p>
         * Non-wake up sensors never wake the application processor up. Their events are only reported
         * when the application processor is awake, for example because the application holds a wake
         * lock, or another source woke the application processor up.
         * <p>
         * When a non-wake up sensor is registered to without batching enabled, the measurements made
         * while the application processor is asleep might be lost and never returned.
         * <p>
         * When a non-wake up sensor is registered to with batching enabled, the measurements made while
         * the application processor is asleep are stored in the hardware FIFO for non-wake up sensors.
         * When this FIFO gets full, new events start overwriting older events. When the application
         * then wakes up, the latest events are returned, and some old events might be lost. The number
         * of events actually returned depends on the hardware FIFO size, as well as on what other
         * sensors are activated. If losing sensor events is not acceptable during batching, you must
         * use the wake-up version of the sensor.
         * @return true if this is a wake up sensor, false otherwise.
         */
        IsWakeUpSensor(
            [out] Boolean* result);
    }

    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
