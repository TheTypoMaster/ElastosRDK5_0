
module
{
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.View.IViewGroup;
    interface Elastos.Droid.View.Menu.IMenuView;
    interface Elastos.Droid.View.Menu.ISubMenuBuilder;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace View {
    namespace Menu {

        /**
         * Called by menu implementation to notify another component of open/close events.
         */
        [local]
        interface IMenuPresenterCallback {
            /**
             * Called when a menu is closing.
             * @param menu
             * @param allMenusAreClosing
             */
            OnCloseMenu(
                [in] IMenuBuilder* menu,
                [in] Boolean allMenusAreClosing);

            /**
             * Called when a submenu opens. Useful for notifying the application
             * of menu state so that it does not attempt to hide the action bar
             * while a submenu is open or similar.
             *
             * @param subMenu Submenu currently being opened
             * @return true if the Callback will handle presenting the submenu, false if
             *         the presenter should attempt to do so.
             */
            OnOpenSubMenu(
                [in] IMenuBuilder* subMenu,
                [out] Boolean* handle);
        }

        /**
         * A MenuPresenter is responsible for building views for a Menu object.
         * It takes over some responsibility from the old style monolithic MenuBuilder class.
         */
        [local]
        interface IMenuPresenter {
            /**
             * Initialize this presenter for the given context and menu.
             * This method is called by MenuBuilder when a presenter is
             * added. See {@link MenuBuilder#addMenuPresenter(MenuPresenter)}
             *
             * @param context Context for this presenter; used for view creation and resource management
             * @param menu Menu to host
             */
            InitForMenu(
                [in] IContext* ctx,
                [in] IMenuBuilder* menu);

            /**
             * Retrieve a MenuView to display the menu specified in
             * {@link #initForMenu(Context, Menu)}.
             *
             * @param root Intended parent of the MenuView.
             * @return A freshly created MenuView.
             */
            GetMenuView(
                [in] IViewGroup* root,
                [out] IMenuView** view);

            /**
             * Update the menu UI in response to a change. Called by
             * MenuBuilder during the normal course of operation.
             *
             * @param cleared true if the menu was entirely cleared
             */
            UpdateMenuView(
                [in] Boolean cleared);

            /**
             * Set a callback object that will be notified of menu events
             * related to this specific presentation.
             * @param cb Callback that will be notified of future events
             */
            SetCallback(
                [in] IMenuPresenterCallback* cb);

            /**
             * Called by Menu implementations to indicate that a submenu item
             * has been selected. An active Callback should be notified, and
             * if applicable the presenter should present the submenu.
             *
             * @param subMenu SubMenu being opened
             * @return true if the the event was handled, false otherwise.
             */
            OnSubMenuSelected(
                [in] ISubMenuBuilder* subMenu,
                [out] Boolean* handled);

            /**
             * Called by Menu implementations to indicate that a menu or submenu is
             * closing. Presenter implementations should close the representation
             * of the menu indicated as necessary and notify a registered callback.
             *
             * @param menu Menu or submenu that is closing.
             * @param allMenusAreClosing True if all associated menus are closing.
             */
            OnCloseMenu(
                [in] IMenuBuilder* menu,
                [in] Boolean allMenusAreClosing);

            /**
             * Called by Menu implementations to flag items that will be shown as actions.
             * @return true if this presenter changed the action status of any items.
             */
            FlagActionItems(
                [out] Boolean* shown);

            /**
             * Called when a menu item with a collapsable action view should expand its action view.
             *
             * @param menu Menu containing the item to be expanded
             * @param item Item to be expanded
             * @return true if this presenter expanded the action view, false otherwise.
             */
            ExpandItemActionView(
                [in] IMenuBuilder* menu,
                [in] IMenuItemImpl* item,
                [out] Boolean* expanded);

            /**
             * Called when a menu item with a collapsable action view should collapse its action view.
             *
             * @param menu Menu containing the item to be collapsed
             * @param item Item to be collapsed
             * @return true if this presenter collapsed the action view, false otherwise.
             */
            CollapseItemActionView(
                [in] IMenuBuilder* menu,
                [in] IMenuItemImpl* item,
                [out] Boolean* collapsed);

            /**
             * Returns an ID for determining how to save/restore instance state.
             * @return a valid ID value.
             */
            GetId(
                [out] Int32* id);

            /**
             * Returns a Parcelable describing the current state of the presenter.
             * It will be passed to the {@link #onRestoreInstanceState(Parcelable)}
             * method of the presenter sharing the same ID later.
             * @return The saved instance state
             */
            OnSaveInstanceState(
                [out] IParcelable** pa);

            /**
             * Supplies the previously saved instance state to be restored.
             * @param state The previously saved instance state
             */
            OnRestoreInstanceState(
                [in] IParcelable* state);
        }

    } // namespace Menu
    } // namespace View
    } // namespace Internal
    } // namepsace Droid
    } // namespace Elastos
}
