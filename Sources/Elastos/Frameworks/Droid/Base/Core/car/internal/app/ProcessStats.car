module
{
    using interface Elastos.IO.IInputStream;
    using interface Elastos.IO.IPrintWriter;
    using interface Elastos.Utility.IArrayList;
    using interface Elastos.Utility.IList;
    interface Elastos.Droid.Utility.IArrayMap;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace App {

    [local]
    interface IDurationsTable {
    }

    [local]
    interface IProcessStateHolder {
    }

    /**
     * @Involve
     * interface IDurationsTable
     */
    [local]
    interface IProcessState {
        MakeActive();

        MakeInactive();

        IsInUse(
            [out] Boolean* isInUse);

        /**
         * Update the current state of the given list of processes.
         *
         * @param state Current ActivityManager.PROCESS_STATE_*
         * @param memFactor Current mem factor constant.
         * @param now Current time.
         * @param pkgList Processes to update.
         */
        SetState(
            [in] Int32 state,
            [in] Int32 memFactor,
            [in] Int64 now,
            [in] IArrayMap* pkgList);

        AddPss(
            [in] Int64 pss,
            [in] Int64 uss,
            [in] Boolean always,
            [in] IArrayMap* pkgList);

        ReportExcessiveWake(
            [in] IArrayMap* pkgList);

        ReportExcessiveCpu(
            [in] IArrayMap* pkgList);

        ReportCachedKill(
            [in] IArrayMap* pkgList,
            [in] Int64 pss);
    }

    /**
     * @Involve
     * interface IDurationsTable
     */
    [local]
    interface IServiceState {
        const Int32 SERVICE_RUN = 0;
        const Int32 SERVICE_STARTED = 1;
        const Int32 SERVICE_BOUND = 2;
        const Int32 SERVICE_EXEC = 3;

        ApplyNewOwner(
            [in] IInterface* newOwner);

        ClearCurrentOwner(
            [in] IInterface* owner,
            [in] Boolean silently);

        IsInUse(
            [out] Boolean* isInUse);

        IsRestarting(
            [out] Boolean* isRestarting);

        SetStarted(
            [in] Boolean started,
            [in] Int32 memFactor,
            [in] Int64 now);

        SetRestarting(
            [in] Boolean restarting,
            [in] Int32 memFactor,
            [in] Int64 now);

        SetBound(
            [in] Boolean bound,
            [in] Int32 memFactor,
            [in] Int64 now);

        SetExecuting(
            [in] Boolean executing,
            [in] Int32 memFactor,
            [in] Int64 now);
    }

    [local]
    interface IPackageState {
    }

    [local]
    interface IProcessDataCollection {
    }

    [local]
    interface ITotalMemoryUseCollection {
    }

    /**
     * @Involve
     * interface IParcelable
     */
    [deprecated, local, parcelable]
    interface IProcessStats {
        const String SERVICE_NAME = "procstats";
        const Int32 STATE_NOTHING = -1;
        const Int32 STATE_PERSISTENT = 0;
        const Int32 STATE_TOP = 1;
        const Int32 STATE_IMPORTANT_FOREGROUND = 2;
        const Int32 STATE_IMPORTANT_BACKGROUND = 3;
        const Int32 STATE_BACKUP = 4;
        const Int32 STATE_HEAVY_WEIGHT = 5;
        const Int32 STATE_SERVICE = 6;
        const Int32 STATE_SERVICE_RESTARTING = 7;
        const Int32 STATE_RECEIVER = 8;
        const Int32 STATE_HOME = 9;
        const Int32 STATE_LAST_ACTIVITY = 10;
        const Int32 STATE_CACHED_ACTIVITY = 11;
        const Int32 STATE_CACHED_ACTIVITY_CLIENT = 12;
        const Int32 STATE_CACHED_EMPTY = 13;
        const Int32 STATE_COUNT = 14;//STATE_CACHED_EMPTY+1;

        const Int32 PSS_SAMPLE_COUNT = 0;
        const Int32 PSS_MINIMUM = 1;
        const Int32 PSS_AVERAGE = 2;
        const Int32 PSS_MAXIMUM = 3;
        const Int32 PSS_USS_MINIMUM = 4;
        const Int32 PSS_USS_AVERAGE = 5;
        const Int32 PSS_USS_MAXIMUM = 6;
        const Int32 PSS_COUNT = 7;//PSS_USS_MAXIMUM+1;

        const Int32 SYS_MEM_USAGE_SAMPLE_COUNT = 0;
        const Int32 SYS_MEM_USAGE_CACHED_MINIMUM = 1;
        const Int32 SYS_MEM_USAGE_CACHED_AVERAGE = 2;
        const Int32 SYS_MEM_USAGE_CACHED_MAXIMUM = 3;
        const Int32 SYS_MEM_USAGE_FREE_MINIMUM = 4;
        const Int32 SYS_MEM_USAGE_FREE_AVERAGE = 5;
        const Int32 SYS_MEM_USAGE_FREE_MAXIMUM = 6;
        const Int32 SYS_MEM_USAGE_ZRAM_MINIMUM = 7;
        const Int32 SYS_MEM_USAGE_ZRAM_AVERAGE = 8;
        const Int32 SYS_MEM_USAGE_ZRAM_MAXIMUM = 9;
        const Int32 SYS_MEM_USAGE_KERNEL_MINIMUM = 10;
        const Int32 SYS_MEM_USAGE_KERNEL_AVERAGE = 11;
        const Int32 SYS_MEM_USAGE_KERNEL_MAXIMUM = 12;
        const Int32 SYS_MEM_USAGE_NATIVE_MINIMUM = 13;
        const Int32 SYS_MEM_USAGE_NATIVE_AVERAGE = 14;
        const Int32 SYS_MEM_USAGE_NATIVE_MAXIMUM = 15;
        const Int32 SYS_MEM_USAGE_COUNT = 16;//SYS_MEM_USAGE_NATIVE_MAXIMUM+1;

        const Int32 ADJ_NOTHING = -1;
        const Int32 ADJ_MEM_FACTOR_NORMAL = 0;
        const Int32 ADJ_MEM_FACTOR_MODERATE = 1;
        const Int32 ADJ_MEM_FACTOR_LOW = 2;
        const Int32 ADJ_MEM_FACTOR_CRITICAL = 3;
        const Int32 ADJ_MEM_FACTOR_COUNT = 4;//ADJ_MEM_FACTOR_CRITICAL+1;
        const Int32 ADJ_SCREEN_MOD = ADJ_MEM_FACTOR_COUNT;
        const Int32 ADJ_SCREEN_OFF = 0;
        const Int32 ADJ_SCREEN_ON = ADJ_SCREEN_MOD;
        const Int32 ADJ_COUNT = ADJ_SCREEN_ON*2;

        const Int32 FLAG_COMPLETE = 1<<0;
        const Int32 FLAG_SHUTDOWN = 1<<1;
        const Int32 FLAG_SYSPROPS = 1<<2;

        Add(
            [in] IProcessStats* other);

        AddSysMemUsage(
            [in] Int64 cachedMem,
            [in] Int64 freeMem,
            [in] Int64 zramMem,
            [in] Int64 kernelMem,
            [in] Int64 nativeMem);

        Reset();

        ResetSafely();

        EvaluateSystemProperties(
            [in] Boolean update,
            [out] Boolean* result);

        Read(
            [in] IInputStream* stream);

        GetPackageStateLocked(
            [in] String packageName,
            [in] Int32 uid,
            [in] Int32 vers,
            [out] IPackageState** state);

        GetProcessStateLocked(
            [in] String packageName,
            [in] Int32 uid,
            [in] Int32 vers,
            [in] String processName,
            [out] IPackageState** state);

        GetServiceStateLocked(
            [in] String packageName,
            [in] Int32 uid,
            [in] Int32 vers,
            [in] String processName,
            [in] String className,
            [out] IServiceState** state);

        DumpLocked(
            [in] IPrintWriter* pw,
            [in] String reqPackage,
            [in] Int64 now,
            [in] Boolean dumpSummary,
            [in] Boolean dumpAll,
            [in] Boolean activeOnly);

        DumpSummaryLocked(
            [in] IPrintWriter* pw,
            [in] String reqPackage,
            [in] Int64 now,
            [in] Boolean activeOnly);

        CollectProcessesLocked(
            [in] ArrayOf<Int32>* screenStates,
            [in] ArrayOf<Int32>* memStates,
            [in] ArrayOf<Int32>* procStates,
            [in] ArrayOf<Int32>* sortProcStates,
            [in] Int64 now,
            [in] String reqPackage,
            [in] Boolean activeOnly,
            [out] IArrayList** processes);

        DumpCheckinLocked(
            [in] IPrintWriter* pw,
            [in] String reqPackage);
    }

    [deprecated, local]
    interface IProcessStatsHelper {
        PrintScreenLabelCsv(
            [in] IPrintWriter* pw,
            [in] Int32 offset);

        PrintMemLabelCsv(
            [in] IPrintWriter* pw,
            [in] Int32 offset);

        DumpSingleTime(
            [in] IPrintWriter* pw,
            [in] String prefix,
            [in] ArrayOf<Int64>* durations,
            [in] Int32 curState,
            [in] Int64 curStartTime,
            [in] Int64 now,
            [out] Int64* result);

        ComputeProcessData(
            [in] IProcessState* proc,
            [in] IProcessDataCollection* data,
            [in] Int64 now);

        ComputeTotalMemoryUse(
            [in] ITotalMemoryUseCollection* data,
            [in] Int64 now);

        DumpProcessListCsv(
            [in] IPrintWriter* pw,
            [in] IArrayList* procs,
            [in] Boolean sepScreenStates,
            [in] ArrayOf<Int32>* screenStates,
            [in] Boolean sepMemStates,
            [in] ArrayOf<Int32>* memStates,
            [in] Boolean sepProcStates,
            [in] ArrayOf<Int32>* procStates,
            [in] Int64 now);

        DumpSingleServiceTime(
            [in] IPrintWriter* pw,
            [in] String prefix,
            [in] IServiceState* service,
            [in] Int32 serviceType,
            [in] Int32 curState,
            [in] Int64 curStartTime,
            [in] Int64 now,
            [out] Int64* result);
    }

    }//namespace App
    }//namespace Internal
    }//namespace Droid
    }//namespace Elastos
}
