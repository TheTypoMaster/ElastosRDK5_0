
module
{
    namespace Elastos {
    namespace Droid {
    namespace Utility {
    /**
     * Immutable class for describing width and height dimensions in pixels.
     */
    interface ISize {
        /**
         * Get the width of the size (in pixels).
         * @return width
         */
        GetWidth(
            [out] Int32* value);

        /**
         * Get the height of the size (in pixels).
         * @return height
         */
        GetHeight(
            [out] Int32* value);

        /**
         * Check if this size is equal to another size.
         * <p>
         * Two sizes are equal if and only if both their widths and heights are
         * equal.
         * </p>
         * <p>
         * A size object is never equal to any other type of object.
         * </p>
         *
         * @return {@code true} if the objects were equal, {@code false} otherwise
         */
        // @Override
        Equals(
            [in] IInterface* obj,
            [out] Boolean* value);

        /**
         * Return the size represented as a string with the format {@code "WxH"}
         *
         * @return string representation of the size
         */
        // @Override
        ToString(
            [out] String* str);

        /**
         * {@inheritDoc}
         */
        // @Override
        GetHashCode(
            [out] Int32* value);
    }

    interface ISizeHelper {
        /**
         * Parses the specified string as a size value.
         * <p>
         * The ASCII characters {@code \}{@code u002a} ('*') and
         * {@code \}{@code u0078} ('x') are recognized as separators between
         * the width and height.</p>
         * <p>
         * For any {@code Size s}: {@code Size.parseSize(s.toString()).equals(s)}.
         * However, the method also handles sizes expressed in the
         * following forms:</p>
         * <p>
         * "<i>width</i>{@code x}<i>height</i>" or
         * "<i>width</i>{@code *}<i>height</i>" {@code => new Size(width, height)},
         * where <i>width</i> and <i>height</i> are string integers potentially
         * containing a sign, such as "-10", "+7" or "5".</p>
         *
         * <pre>{@code
         * Size.parseSize("3*+6").equals(new Size(3, 6)) == true
         * Size.parseSize("-3x-6").equals(new Size(-3, -6)) == true
         * Size.parseSize("4 by 3") => throws NumberFormatException
         * }</pre>
         *
         * @param string the string representation of a size value.
         * @return the size value represented by {@code string}.
         *
         * @throws NumberFormatException if {@code string} cannot be parsed
         * as a size value.
         * @throws NullPointerException if {@code string} was {@code null}
         */
        ParseSize(
            [in] String string,
            [out] ISize** outsize);
    }

    } // namespace Utility
    } // namepsace Droid
    } // namespace Elastos
}
