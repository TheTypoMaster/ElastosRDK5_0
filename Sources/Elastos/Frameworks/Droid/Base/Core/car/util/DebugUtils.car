module
{
    namespace Elastos {
    namespace Droid {
    namespace Utility {
    /**
     * <p>Various utilities for debugging and logging.</p>
     */
    interface IDebugUtilsHelper {
        /**
         * <p>Filters objects against the <code>ANDROID_OBJECT_FILTER</code>
         * environment variable. This environment variable can filter objects
         * based on their class name and attribute values.</p>
         *
         * <p>Here is the syntax for <code>ANDROID_OBJECT_FILTER</code>:</p>
         *
         * <p><code>ClassName@attribute1=value1@attribute2=value2...</code></p>
         *
         * <p>Examples:</p>
         * <ul>
         * <li>Select TextView instances: <code>TextView</code></li>
         * <li>Select TextView instances of text "Loading" and bottom offset of 22:
         * <code>TextView@text=Loading.*@bottom=22</code></li>
         * </ul>
         *
         * <p>The class name and the values are regular expressions.</p>
         *
         * <p>This class is useful for debugging and logging purpose:</p>
         * <pre>
         * if (DEBUG) {
         *   if (DebugUtils.isObjectSelected(childView) && LOGV_ENABLED) {
         *     Log.v(TAG, "Object " + childView + " logged!");
         *   }
         * }
         * </pre>
         *
         * <p><strong>NOTE</strong>: This method is very expensive as it relies
         * heavily on regular expressions and reflection. Calls to this method
         * should always be stripped out of the release binaries and avoided
         * as much as possible in debug mode.</p>
         *
         * @param object any object to match against the ANDROID_OBJECT_FILTER
         *        environement variable
         * @return true if object is selected by the ANDROID_OBJECT_FILTER
         *         environment variable, false otherwise
         */
        IsObjectSelected(
            [in] IInterface* object,
            [out] Boolean* value);
    }

    } // namespace Utility
    } // namespace Droid
    } // namespace Elastos
}
