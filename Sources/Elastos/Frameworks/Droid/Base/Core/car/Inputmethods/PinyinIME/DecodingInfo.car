
module
{
    using interface Elastos.Core.IStringBuffer;
    using interface Elastos.Core.ICharSequence;
    interface Elastos.Droid.View.InputMethod.ICompletionInfo;

    namespace Elastos {
    namespace Droid {
    namespace Inputmethods {
    namespace PinyinIME {

    [deprecated]
    interface IDecodingInfo {
        SetTotalChoicesNum(
            [in] Int32 totalChoicesNum);

        GetTotalChoicesNum(
            [out] Int32* totalChoicesNum);

        SetPosDelSpl(
            [in] Int32 posDelSpl);

        GetPosDelSpl(
            [out] Int32* posDelSpl);

        SetPosInSpl(
            [in] Boolean posDelSpl);

        GetPosInSpl(
            [out] Boolean* posDelSpl);

        SetCandidatesList(
            [in] ArrayOf<String>* candidatesList);

        GetCandidatesList(
            [out, callee] ArrayOf<String>* candidatesList);

        SetPageStartList(
            [in] ArrayOf<Int32>* pageStartList);

        GetPageStartList(
            [out, callee] ArrayOf<Int32>* pageStartList);

        SetCnToPageList(
            [in] ArrayOf<Int32>* cnToPageList);

        GetCnToPageList(
            [out, callee] ArrayOf<Int32>* cnToPageList);

        Reset();

        IsCandidatesListEmpty(
            [out] Boolean* empty);

        IsSplStrFull(
            [out] Boolean* full);

        AddSplChar(
            [in] Char32 ch,
            [in] Boolean reset);

        PrepareDeleteBeforeCursor();

        GetLength(
            [out] Int32* length);

        GetCharAt(
            [in] Int32 index,
            [out] Char32* ch);

        GetOrigianlSplStr(
            [out] IStringBuffer** str);

        GetSplStrDecodedLen(
            [out] Int32* len);

        GetSplStart(
            [out, callee] ArrayOf<Int32>* splStart);

        GetComposingStr(
            [out] String* str);

        GetComposingStrActivePart(
            [out] String* part);

        GetActiveCmpsLen(
            [out] Int32* len);

        GetComposingStrForDisplay(
            [out] String* str);

        GetActiveCmpsDisplayLen(
            [out] Int32* len);

        GetFullSent(
            [out] String* value);

        GetCurrentFullSent(
            [in] Int32 activeCandPos,
            [out] String* value);

        ResetCandidates();

        CandidatesFromApp(
            [out] Boolean* state);

        CanDoPrediction(
            [out] Boolean* state);

        SelectionFinished(
            [out] Boolean* state);

        GetCandidate(
            [in] Int32 candId,
            [out] String* candidate);

        PageReady(
            [in] Int32 pageNo,
            [out] Boolean* state);

        PreparePage(
            [in] Int32 pageNo,
            [out] Boolean* state);

        PreparePredicts(
            [in] ICharSequence* history);

        GetCurrentPageSize(
            [in] Int32 currentPage,
            [out] Int32* value);

        GetCurrentPageStart(
            [in] Int32 currentPage,
            [out] Int32* value);

        PageForwardable(
            [in] Int32 currentPage,
            [out] Boolean* state);

        PageBackwardable(
            [in] Int32 currentPage,
            [out] Boolean* state);

        CharBeforeCursorIsSeparator(
            [out] Boolean* state);

        GetCursorPos(
            [out] Int32* pos);

        GetCursorPosInCmps(
            [out] Int32* pos);

        GetCursorPosInCmpsDisplay(
            [out] Int32* pos);

        MoveCursorToEdge(
            [in] Boolean left);

        MoveCursor(
            [in] Int32 offset);

        GetSplNum(
            [out] Int32* value);

        GetFixedLen(
            [out] Int32* value);

        SetPinyinDecoderService(
            [in] IPinyinDecoderService* pinyinService);

        GetPinyinDecoderService(
            [out] IPinyinDecoderService** pinyinService);

        PrepareAppCompletions(
            [in] ArrayOf<ICompletionInfo*>* completions);

        GetAppCompletions(
            [out, callee] ArrayOf<ICompletionInfo*>* completions);

        ChooseDecodingCandidate(
            [in] Int32 candId);

        ChoosePredictChoice(
            [in] Int32 choiceId);
    }

    } // namespace PinyinIME
    } // namespace Inputmethods
    } // namespace Droid
    } // namespace Elastos
}
