module {

    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Accounts.IAccount;
    interface Elastos.Droid.Content.IContentProviderClient;
    interface Elastos.Droid.Content.IContentProviderOperation;

    namespace Elastos {
    namespace Droid {
    namespace Provider {

    /**
     * @Involve
     * interface IBaseColumns
     */
    interface ISyncStateContractColumns {
        /**
         * A reference to the name of the account to which this data belongs
         * <P>Type: STRING</P>
         */
        const String ACCOUNT_NAME = "account_name";

        /**
         * A reference to the type of the account to which this data belongs
         * <P>Type: STRING</P>
         */
        const String ACCOUNT_TYPE = "account_type";

        /**
         * The sync data associated with this account.
         * <P>Type: NONE</P>
         */
        const String DATA = "data";
    }

    /**
     * @Involve
     * interface ISyncStateContractColumns
     */
    interface ISyncStateContractConstants {
        const String CONTENT_DIRECTORY = "syncstate";
    }

    interface ISyncStateContractHelpers {
        /**
         * Get the sync state that is associated with the account or null.
         * @param provider the {@link ContentProviderClient} that is to be used to communicate
         * with the {@link android.content.ContentProvider} that contains the sync state.
         * @param uri the uri of the sync state
         * @param account the {@link Account} whose sync state should be returned
         * @return the sync state or null if there is no sync state associated with the account
         * @throws RemoteException if there is a failure communicating with the remote
         * {@link android.content.ContentProvider}
         */
        Get(
            [in] IContentProviderClient* provider,
            [in] IUri* uri,
            [in] IAccount* account,
            [out, callee] ArrayOf<Byte>* value);

        /**
         * Assigns the data array as the sync state for the given account.
         * @param provider the {@link ContentProviderClient} that is to be used to communicate
         * with the {@link android.content.ContentProvider} that contains the sync state.
         * @param uri the uri of the sync state
         * @param account the {@link Account} whose sync state should be set
         * @param data the byte[] that contains the sync state
         * @throws RemoteException if there is a failure communicating with the remote
         * {@link android.content.ContentProvider}
         */
        Set(
            [in] IContentProviderClient* provider,
            [in] IUri* uri,
            [in] IAccount* account,
            [in] ArrayOf<Byte> data);

        Insert(
            [in] IContentProviderClient* provider,
            [in] IUri* uri,
            [in] IAccount* account,
            [in] ArrayOf<Byte> data,
            [out] IUri** retUri);

        Update(
            [in] IContentProviderClient* provider,
            [in] IUri* uri,
            [in] ArrayOf<Byte> data);

        /*GetWithUri(
            [in] IContentProviderClient* provider,
            [in] IUri* uri,
            [in] IAccount* account,
            [out] Pair<IUri*, ArrayOf<Byte> >* value);*/

        /**
         * Creates and returns a ContentProviderOperation that assigns the data array as the
         * sync state for the given account.
         * @param uri the uri of the sync state
         * @param account the {@link Account} whose sync state should be set
         * @param data the byte[] that contains the sync state
         * @return the new ContentProviderOperation that assigns the data array as the
         * account's sync state
         */
        NewSetOperation(
            [in] IUri* uri,
            [in] IAccount* account,
            [in] ArrayOf<Byte> data,
            [out] IContentProviderOperation** operation);

        /**
         * Creates and returns a ContentProviderOperation that assigns the data array as the
         * sync state for the given account.
         * @param uri the uri of the specific sync state to set
         * @param data the byte[] that contains the sync state
         * @return the new ContentProviderOperation that assigns the data array as the
         * account's sync state
         */
        NewUpdateOperation(
            [in] IUri* uri,
            [in] ArrayOf<Byte> data,
            [out] IContentProviderOperation** operation);
    }

    } // namespace Provider
    } // namespace Droid
    } // namespace Elastos

}
