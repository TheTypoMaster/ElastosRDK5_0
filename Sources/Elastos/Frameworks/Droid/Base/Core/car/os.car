module
{
    // merge("os/storage/ExternalStorageFormatter.car");
    // merge("os/storage/IMountService.car");
    // merge("os/storage/IMountServiceListener.car");
    // merge("os/storage/IMountShutdownObserver.car");
    // merge("os/storage/IObbActionListener.car");
    // merge("os/storage/OnObbStateChangeListener.car");
    // merge("os/storage/StorageEventListener.car");
    // merge("os/storage/StorageManager.car");
    // merge("os/storage/StorageVolume.car");
    // merge("os/BatteryManager.car");
    // merge("os/BatteryStats.car");
    merge("os/Binder.car");
    //merge("os/Bundle.car");
    // merge("os/MessageQueue.car");
    // merge("os/FileObserver.car");
    // merge("os/Handler.car");
    // merge("os/HandlerThread.car");
    // merge("os/IdleHandler.car");
    // merge("os/HandlerCaller.car");
    // merge("os/IHardwareService.car");
    // merge("os/INetworkManagementService.car");
    // merge("os/IRemoteCallback.car");
    // merge("os/IUpdateLock.car");
    // merge("os/IUserManager.car");
    // merge("os/IVibrator.car");
    //merge("os/Looper.car");
    //merge("os/Message.car");
    //merge("os/Messenger.car");
    //merge("os/IMessenger.car");
    // merge("os/ParcelFileDescriptor.car");
    // merge("os/ParcelStringList.car");
    // merge("os/PatternMatcher.car");
    // merge("os/Process.car");
    // merge("os/ProcessStats.car");
    // merge("os/RemoteCallbackList.car");
    // merge("os/ResultReceiver.car");
    // merge("os/IResultReceiver.car");
    // merge("os/ServiceManager.car");
    // merge("os/UpdateLock.car");
    // merge("os/UserHandle.car");
    // merge("os/UserManager.car");
    // merge("os/WorkSource.car");
    // merge("os/ZygoteInit.car");
    // merge("os/PowerManager.car");
    // merge("os/IPowerManager.car");
    // merge("os/IVibratorService.car");
    // merge("os/StatFs.car");
    // merge("os/DropBoxManager.car");
    // merge("os/IDropBoxManagerService.car");
    // merge("os/CancellationSignal.car");
    // merge("os/RuntimeInit.car");
    // merge("os/SystemProperties.car");
    // merge("os/SystemService.car");
    // merge("os/Environment.car");
    // merge("os/Debug.car");
    // merge("os/DebugMemoryInfo.car");
    // merge("os/StrictMode.car");
    // merge("os/ParcelUuid.car");
    // merge("os/PkgUsageStats.car");
    // merge("os/IZigbeeService.car");
    // merge("os/ZigbeeManager.car");
    // merge("os/IKortideRemoteService.car");

    // using interface Elastos.Core.IClassLoader;
    // using interface Elastos.IO.IFileDescriptor;
    // using interface Elastos.IO.IFile;
    // using interface Elastos.IO.ICloseable;
    // using interface Elastos.IO.IFlushable;
    // using interface Elastos.Utility.IObjectStringMap;
    // interface Elastos.Droid.Os.ILooper;
    // interface Elastos.Droid.Os.IUserHandle;
    // interface Elastos.Droid.Content.IContext;
    // interface Elastos.Droid.Internal.Os.IDropBoxManagerService;

    namespace Elastos {
    namespace Droid {
    namespace Os {

    // namespace Storage {
    //     //class CStorageEventListener {
    //     //  interface IStorageEventListener;
    //     //}

    //     class CStorageManager {
    //         constructor(
    //             [in] ILooper* tgtLooper);

    //         interface IStorageManager;
    //     }

    //     singleton class CStorageManagerHelper {
    //         interface IStorageManagerHelper;
    //     }

    //     class CMountServiceBinderListener {
    //         constructor(
    //             [in] IStorageManager* host);

    //         interface IMountServiceListener;
    //     }

    //     class CObbActionListener {
    //         constructor(
    //             [in] IStorageManager* host);

    //         interface IObbActionListener;
    //     }

    //     class CStorageVolume {
    //         constructor();

    //         constructor(
    //             [in] IFile* path,
    //             [in] Int32 descriptionId,
    //             [in] Boolean primary,
    //             [in] Boolean removable,
    //             [in] Boolean emulated,
    //             [in] Int32 mtpReserveSpace,
    //             [in] Boolean allowMassStorage,
    //             [in] Int64 maxFileSize,
    //             [in] IUserHandle* owner);

    //         interface IStorageVolume;
    //         interface IParcelable;
    //     }

    //     singleton class CStorageVolumeHelper {
    //         interface IStorageVolumeHelper;
    //     }
    // }

    // class CBinderDeathRecipient {
    //     interface IProxyDeathRecipient;
    // }

    class CBinder {
        constructor();

        interface IBinder;
    }

    // singleton class CBinderHelper {
    //     interface IBinderHelper;
    // }

    // [local]
    // class CBundle {

    //     constructor();

    //     constructor(
    //         [in] IClassLoader* loader);

    //     constructor(
    //         [in] Int32 capacity);

    //     constructor(
    //         [in] IBundle* b);

    //     interface IBundle;
    //     interface IParcelable;
    // }

    // singleton class CBundleHelper {
    //     interface IBundleHelper;
    // }

    // class CHandler {
    //     constructor();

    //     constructor(
    //         [in] Boolean async);

    //     constructor(
    //         [in] ILooper* looper);

    //     constructor(
    //         [in] IHandlerCallback* cb,
    //         [in] Boolean takeStrongRefOfCallback);

    //     constructor(
    //         [in] ILooper* looper,
    //         [in] IHandlerCallback* cb,
    //         [in] Boolean takeStrongRefOfCallback);

    //     constructor(
    //         [in] IHandlerCallback* cb,
    //         [in] Boolean takeStrongRefOfCallback,
    //         [in] Boolean async);

    //     constructor(
    //         [in] ILooper* looper,
    //         [in] IHandlerCallback* cb,
    //         [in] Boolean takeStrongRefOfCallback,
    //         [in] Boolean async);

    //     interface IHandler;
    // }

    // class CHandlerThread {
    //     constructor(
    //         [in] String name);

    //     /**
    //      * Constructs a HandlerThread.
    //      * @param name
    //      * @param priority The priority to run the thread at. The value supplied must be from
    //      * {@link android.os.Process} and not from java.lang.Thread.
    //      */
    //     constructor(
    //         [in] String name,
    //         [in] Int32 priority);

    //     interface IHandlerThread;
    // }

    // class CMessageQueue {
    //     constructor(
    //         [in] Boolean quitAllowed);

    //     interface IMessageQueue;
    // }

    // class CMessage {
    //     constructor();

    //     interface IMessage;
    //     interface IParcelable;
    // }

    // class CMessenger {
    //     constructor();

    //     constructor(
    //         [in] IHandler* handler);

    //     constructor(
    //         [in] IIMessenger* target);

    //     interface IMessenger;
    //     interface IParcelable;
    // }

    // class CMessengerImpl {
    //     constructor(
    //         [in] IHandler* handler);

    //     interface IIMessenger;
    // }

    // singleton class CMessageHelper {
    //     interface IMessageHelper;
    // }

    // singleton class CServiceManager {
    //     interface IServiceManager;
    // }

    // class CUserHandle {
    //     constructor();

    //     constructor(
    //         [in] Int32 h);

    //     interface IUserHandle;
    //     interface IParcelable;
    // }

    // singleton class CUserHandleHelper {
    //     interface IUserHandleHelper;
    // }

    // class CPatternMatcher {
    //     constructor();

    //     constructor(
    //         [in] String pattern,
    //         [in] Int32 type);

    //     interface IPatternMatcher;
    //     interface IParcelable;
    // }

    // singleton class CLooperHelper {
    //     interface ILooperHelper;
    // }

    // class CParcel {
    //     constructor();

    //     interface IParcel;
    // }

    // class CParcelFileDescriptor {
    //     constructor();

    //     constructor(
    //         [in] IParcelFileDescriptor* pfd);

    //     /*package*/ constructor(
    //         [in] IFileDescriptor* fd);

    //     interface IParcelFileDescriptor;
    //     interface IParcelable;
    // }

    // singleton class CParcelFileDescriptorHelper {
    //     interface IParcelFileDescriptorHelper;
    // }

    // class CParcelFileDescriptorAutoCloseInputStream {
    //     constructor(
    //        [in] IParcelFileDescriptor* pfd);

    //     interface IParcelFileDescriptorAutoCloseInputStream;
    // }

    // class CParcelFileDescriptorAutoCloseOutputStream {
    //     constructor(
    //        [in] IParcelFileDescriptor* pfd);

    //     interface IParcelFileDescriptorAutoCloseOutputStream;
    //     interface IFlushable;
    // }

    // class CProcessStartResult {
    //     interface IProcessStartResult;
    // }

    // class CRemoteCallbackList {
    //     interface IRemoteCallbackList;
    // }

    // [local]
    // class CPowerManager {
    //     constructor(
    //         [in] IContext* ctx,
    //         [in] IIPowerManager* service,
    //         [in] IHandler* handler);

    //     interface IPowerManager;
    // }

    // singleton class CPowerManagerHelper {
    //     interface IPowerManagerHelper;
    // }

    // class CPowerManagerWakeLock {
    //     constructor(
    //         [in] Int32 flags,
    //         [in] String tag,
    //         [in] Handle32 host);

    //     interface IPowerManagerWakeLock;
    // }

    // class CStatFs {
    //     constructor(
    //         [in] String path);

    //     interface IStatFs;
    // }

    // [deprecated]
    // class CDropBoxManagerEntry {
    //     constructor();

    //     constructor(
    //         [in] String tag,
    //         [in] Int64 millis);

    //     constructor(
    //         [in] String tag,
    //         [in] Int64 millis,
    //         [in] String text);

    //     constructor(
    //         [in] String tag,
    //         [in] Int64 millis,
    //         [in] ArrayOf<Byte>* arrayData,
    //         [in] Int32 flags);

    //     constructor(
    //         [in] String pfdtag,
    //         [in] Int64 pfdmillis,
    //         [in] IParcelFileDescriptor* pfdData,
    //         [in] Int32 pfdflags);

    //     constructor(
    //         [in] String filetag,
    //         [in] Int64 filemillis,
    //         [in] IFile* fileData,
    //         [in] Int32 fileflags);

    //     interface IParcelable;
    //     interface ICloseable;
    //     interface IDropBoxManagerEntry;
    // }


    // [local]
    // class CDropBoxManager {
    //     constructor(
    //         [in] IDropBoxManagerService* service);

    //     constructor();

    //     interface IDropBoxManager;
    // }

    // class CWorkSource {
    //     constructor();

    //     constructor(
    //         [in] IWorkSource* orig);

    //     constructor(
    //         [in] Int32 uid);

    //     interface IWorkSource;
    //     interface IParcelable;
    // }

    // singleton class CSystemProperties {
    //     interface ISystemProperties;
    // }

    // singleton class CSystemService {
    //     interface ISystemService;
    // }

    // [local]
    // class CSystemVibrator {
    //     constructor();

    //     interface IVibrator;
    // }

    // [local]
    // class CUpdateLock {
    //     constructor(
    //         [in] String tag);

    //     interface IUpdateLock;
    // }

    // class CCancellationSignal {
    //     constructor();

    //     interface ICancellationSignal;
    // }

    // singleton class CCancellationSignalHelper {
    //     interface ICancellationSignalHelper;
    // }

    // singleton class CEnvironment {
    //     interface IEnvironment;
    // }

    // class CUserEnvironment {
    //     constructor(
    //         [in] Int32 userId);

    //     interface IUserEnvironment;
    // }

    // class CUserManager {
    //     constructor(
    //         [in] IContext* ctx,
    //         [in] IIUserManager* service);

    //     interface IUserManager;
    // }

    // singleton class CUserManagerHelper {
    //     interface IUserManagerHelper;
    // }

    // singleton class CDebug {
    //     interface IDebug;
    // }

    // class CDebugMemoryInfo {
    //     constructor();

    //     interface IDebugMemoryInfo;
    //     interface IParcelable;
    // }

    // singleton class CDebugMemoryInfoHelper {
    //     interface IDebugMemoryInfoHelper;
    // }

    // class CStrictModeThreadPolicyBuilder {
    //     constructor();

    //     constructor(
    //         [in] IStrictModeThreadPolicy* policy);

    //     interface IStrictModeThreadPolicyBuilder;
    // }

    // class CStrictModeVmPolicyBuilder {
    //     constructor();

    //     constructor(
    //         [in] IStrictModeVmPolicy* policy);

    //     interface IStrictModeVmPolicyBuilder;
    // }

    // singleton class CStrictMode {
    //     interface IStrictMode;
    // }

    // class CStrictModeSpan {
    //     constructor();

    //     constructor(
    //         [in] Handle32 threadState);

    //     interface IStrictModeSpan;
    // }


    // class CStrictModeViolationInfo {
    //     constructor();

    //     constructor(
    //         //[in] IThrowable* tr,
    //         [in] Int32 policy);

    //     constructor(
    //         [in] IParcel* pin);

    //     constructor(
    //         [in] IParcel* pin,
    //         [in] Boolean unsetGatheringBit);

    //     interface IStrictModeViolationInfo;
    // }

    // [deprecated]
    // class CParcelStringList {
    //     constructor(
    //         [in] ArrayOf<String>* list);

    //     interface IParcelStringList;
    //     interface IParcelable;
    // }

    // singleton class CZigbeeManager {
    //     interface IZigbeeManager;
    // }

    } // namespace Os
    } // namespace Droid
    } // namespace Elastos

    // namespace Elastos {
    // namespace Droid {
    // namespace Internal {
    // namespace Os {

    // singleton class CZygoteInit {
    //     interface IZygoteInit;
    // }

    // singleton class CRuntimeInit {
    //     interface IRuntimeInit;
    // }

    // class CProcessStats {
    //     constructor(
    //         [in] Boolean includeThreads);

    //     interface IProcessStats;
    // }

    // class CPkgUsageStats {
    //     constructor(
    //         [in] String pkgName,
    //         [in] Int32 count,
    //         [in] Int64 time,
    //         [in] IObjectStringMap* lastResumeTimes);

    //     constructor(
    //         [in] IParcel* source);

    //     constructor(
    //         [in] Handle32 pStats);

    //     interface IPkgUsageStats;
    //     interface IParcelable;
    // }

    // } // namespace Os
    // } // namespace Internal
    // } // namespace Droid
    // } // namespace Elastos

}
