module
{
    namespace Elastos {
    namespace Droid {
    namespace Database {

    /**
     * The result of a call to next().
     */
    enum CursorJoinerResult {
        /** The row currently pointed to by the left cursor is unique */
        CursorJoinerResult_RIGHT,
        /** The row currently pointed to by the right cursor is unique */
        CursorJoinerResult_LEFT,
        /** The rows pointed to by both cursors are the same */
        CursorJoinerResult_BOTH
    }

    /**
     * Does a join on two cursors using the specified columns. The cursors must already
     * be sorted on each of the specified columns in ascending order. This joiner only
     * supports the case where the tuple of key column values is unique.
     * <p>
     * Typical usage:
     *
     * <pre>
     * CursorJoiner joiner = new CursorJoiner(cursorA, keyColumnsofA, cursorB, keyColumnsofB);
     * for (CursorJointer.Result joinerResult : joiner) {
     *     switch (joinerResult) {
     *         case LEFT:
     *             // handle case where a row in cursorA is unique
     *             break;
     *         case RIGHT:
     *             // handle case where a row in cursorB is unique
     *             break;
     *         case BOTH:
     *             // handle case where a row with the same key is in both cursors
     *             break;
     *     }
     * }
     * </pre>
     *
     * @Involve
     * interface Elastos.IO.IIterator
     * interface Elastos.IO.IIterable
     */
    interface ICursorJoiner {
    }

    } // namespace Database
    } // namespace Droid
    } // namespace Elastos
}