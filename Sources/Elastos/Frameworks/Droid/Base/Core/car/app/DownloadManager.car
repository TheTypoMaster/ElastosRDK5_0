module
{
    using interface Elastos.Core.ICharSequence;

    interface Elastos.Droid.Os.IParcelFileDescriptor;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Database.ICursor;
    interface Elastos.Droid.Net.IUri;

    namespace Elastos {
    namespace Droid {
    namespace App {

    interface IDownloadManagerRequest;
    interface IDownloadManagerQuery;

    /**
     * The download manager is a system service that handles long-running HTTP
     * downloads. Clients may request that a URI be downloaded to a particular
     * destination file. The download manager will conduct the download in the
     * background, taking care of HTTP interactions and retrying downloads after
     * failures or across connectivity changes and system reboots. Instances of this
     * class should be obtained through getSystemService(String) by passing
     * DOWNLOAD_SERVICE. Apps that request downloads through this API should register
     * a broadcast receiver for ACTION_NOTIFICATION_CLICKED to appropriately handle
     * when the user clicks on a running download in a notification or from the
     * downloads UI. Note that the application must have the INTERNET permission to
     * use this class.
     *
     * @sa getSystemService(String)
     * @sa DOWNLOAD_SERVICE
     * @sa ACTION_NOTIFICATION_CLICKE
     * @sa INTERNET
     */

    [deprecated]
    interface IDownloadManager {
        /**
         * An identifier for a particular download, unique across the system.  Clients use this ID to
         * make subsequent calls related to the download.
         */
        const String COLUMN_ID = "_id"; // Downloads.Impl._ID;

        /**
         * The client-supplied title for this download.  This will be displayed in system notifications.
         * Defaults to the empty string.
         */
        const String COLUMN_TITLE = "title"; // Downloads.Impl.COLUMN_TITLE;

        /**
         * The client-supplied description of this download.  This will be displayed in system
         * notifications.  Defaults to the empty string.
         */
        const String COLUMN_DESCRIPTION = "description"; // Downloads.Impl.COLUMN_DESCRIPTION;

        /**
         * URI to be downloaded.
         */
        const String COLUMN_URI = "uri"; // Downloads.Impl.COLUMN_URI;

        /**
         * Internet Media Type of the downloaded file.  If no value is provided upon creation, this will
         * initially be null and will be filled in based on the server's response once the download has
         * started.
         *
         * @see <a href="http://www.ietf.org/rfc/rfc1590.txt">RFC 1590, defining Media Types</a>
         */
        const String COLUMN_MEDIA_TYPE = "media_type";

        /**
         * Total size of the download in bytes.  This will initially be -1 and will be filled in once
         * the download starts.
         */
        const String COLUMN_TOTAL_SIZE_BYTES = "total_size";

        /**
         * Uri where downloaded file will be stored.  If a destination is supplied by client, that URI
         * will be used here.  Otherwise, the value will initially be null and will be filled in with a
         * generated URI once the download has started.
         */
        const String COLUMN_LOCAL_URI = "local_uri";

        /**
         * The pathname of the file where the download is stored.
         */
        const String COLUMN_LOCAL_FILENAME = "local_filename";

        /**
         * Current status of the download, as one of the STATUS_* constants.
         */
        const String COLUMN_STATUS = "status"; // Downloads.Impl.COLUMN_STATUS;

        /**
         * Provides more detail on the status of the download.  Its meaning depends on the value of
         * #COLUMN_STATUS.
         *
         * @sa #COLUMN_STATUS
         *
         * When #COLUMN_STATUS is #STATUS_FAILED, this indicates the type of error that
         * occurred.  If an HTTP error occurred, this will hold the HTTP status code as defined in RFC
         * 2616.  Otherwise, it will hold one of the ERROR_* constants.
         *
         * @sa #COLUMN_STATUS
         * @sa #STATUS_FAILED
         *
         * When #COLUMN_STATUS is #STATUS_PAUSED, this indicates why the download is
         * paused.  It will hold one of the PAUSED_* constants.
         *
         * If #COLUMN_STATUS is neither #STATUS_FAILED nor #STATUS_PAUSED, this
         * column's value is undefined.
         *
         * @sa #COLUMN_STATUS
         * @sa #STATUS_PAUSED
         * @sa #COLUMN_STATUS}
         * @sa #STATUS_FAILED
         * @sa #STATUS_PAUSED
         *
         * @see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1.1">RFC 2616
         * status codes</a>
         */
        const String COLUMN_REASON = "reason";

        /**
         * Number of bytes download so far.
         */
        const String COLUMN_BYTES_DOWNLOADED_SO_FAR = "bytes_so_far";

        /**
         * Timestamp when the download was last modified, in System#currentTimeMillis
         * System.currentTimeMillis() (wall clock time in UTC).
         *
         * @sa System#currentTimeMillis System.currentTimeMillis()
         */
        const String COLUMN_LAST_MODIFIED_TIMESTAMP = "last_modified_timestamp";

        /**
         * The URI to the corresponding entry in MediaProvider for this downloaded entry. It is
         * used to delete the entries from MediaProvider database when it is deleted from the
         * downloaded list.
         */
        const String COLUMN_MEDIAPROVIDER_URI = "mediaprovider_uri"; // Downloads.Impl.COLUMN_MEDIAPROVIDER_URI;

        /**
         * Value of #COLUMN_STATUS when the download is waiting to start.
         *
         * @sa #COLUMN_STATUS
         */
        const Int32 STATUS_PENDING = 1 << 0;

        /**
         * Value of #COLUMN_STATUS when the download is currently running.
         *
         * @sa #COLUMN_STATUS
         */
        const Int32 STATUS_RUNNING = 1 << 1;

        /**
         * Value of #COLUMN_STATUS when the download is waiting to retry or resume.
         *
         * @sa #COLUMN_STATUS
         */
        const Int32 STATUS_PAUSED = 1 << 2;

        /**
         * Value of #COLUMN_STATUS when the download has successfully completed.
         *
         * @sa #COLUMN_STATUS
         */
        const Int32 STATUS_SUCCESSFUL = 1 << 3;

        /**
         * Value of #COLUMN_STATUS when the download has failed (and will not be retried).
         *
         * @sa #COLUMN_STATUS
         */
        const Int32 STATUS_FAILED = 1 << 4;

        /**
         * Value of COLUMN_ERROR_CODE when the download has completed with an error that doesn't fit
         * under any other error code.
         */
        const Int32 ERROR_UNKNOWN = 1000;

        /**
         * Value of #COLUMN_REASON when a storage issue arises which doesn't fit under any
         * other error code. Use the more specific #ERROR_INSUFFICIENT_SPACE and
         * #ERROR_DEVICE_NOT_FOUND when appropriate.
         *
         * @sa #COLUMN_REASON
         * @sa #ERROR_INSUFFICIENT_SPACE
         * @sa #ERROR_DEVICE_NOT_FOUND
         */
        const Int32 ERROR_FILE_ERROR = 1001;

        /**
         * Value of #COLUMN_REASON when an HTTP code was received that download manager
         * can't handle.
         *
         * @sa #COLUMN_REASON
         */
        const Int32 ERROR_UNHANDLED_HTTP_CODE = 1002;

        /**
         * Value of #COLUMN_REASON when an error receiving or processing data occurred at
         * the HTTP level.
         *
         * @sa #COLUMN_REASON
         */
        const Int32 ERROR_HTTP_DATA_ERROR = 1004;

        /**
         * Value of #COLUMN_REASON when there were too many redirects.
         *
         * @sa #COLUMN_REASON
         */
        const Int32 ERROR_TOO_MANY_REDIRECTS = 1005;

        /**
         * Value of #COLUMN_REASON when there was insufficient storage space. Typically,
         * this is because the SD card is full.
         *
         * @sa #COLUMN_REASON
         */
        const Int32 ERROR_INSUFFICIENT_SPACE = 1006;

        /**
         * Value of #COLUMN_REASON when no external storage device was found. Typically,
         * this is because the SD card is not mounted.
         *
         * @sa #COLUMN_REASON
         */
        const Int32 ERROR_DEVICE_NOT_FOUND = 1007;

        /**
         * Value of #COLUMN_REASON when some possibly transient error occurred but we can't
         * resume the download.
         *
         * @sa #COLUMN_REASON
         */
        const Int32 ERROR_CANNOT_RESUME = 1008;

        /**
         * Value of #COLUMN_REASON when the requested destination file already exists (the
         * download manager will not overwrite an existing file).
         *
         * @sa #COLUMN_REASON
         */
        const Int32 ERROR_FILE_ALREADY_EXISTS = 1009;

        /**
         * Value of #COLUMN_REASON when the download has failed because of
         * NetworkPolicyManager controls on the requesting application.
         *
         * @sa #COLUMN_REASON
         * @sa NetworkPolicyManager
         * @hide
         */
        const Int32 ERROR_BLOCKED = 1010;

        /**
         * Value of #COLUMN_REASON when the download is paused because some network error
         * occurred and the download manager is waiting before retrying the request.
         *
         * @sa #COLUMN_REASON
         */
        const Int32 PAUSED_WAITING_TO_RETRY = 1;

        /**
         * Value of #COLUMN_REASON when the download is waiting for network connectivity to
         * proceed.
         *
         * @sa #COLUMN_REASON
         */
        const Int32 PAUSED_WAITING_FOR_NETWORK = 2;

        /**
         * Value of #COLUMN_REASON when the download exceeds a size limit for downloads over
         * the mobile network and the download manager is waiting for a Wi-Fi connection to proceed.
         *
         * @sa #COLUMN_REASON
         */
        const Int32 PAUSED_QUEUED_FOR_WIFI = 3;

        /**
         * Value of #COLUMN_REASON when the download is paused for some other reason.
         *
         * @sa #COLUMN_REASON
         */
        const Int32 PAUSED_UNKNOWN = 4;

        /**
         * Broadcast intent action sent by the download manager when a download completes.
         */
        const String ACTION_DOWNLOAD_COMPLETE = "android.intent.action.DOWNLOAD_COMPLETE";

        /**
         * Broadcast intent action sent by the download manager when the user clicks on a running
         * download, either from a system notification or from the downloads UI.
         */
        const String ACTION_NOTIFICATION_CLICKED =
                "android.intent.action.DOWNLOAD_NOTIFICATION_CLICKED";

        /**
         * Intent action to launch an activity to display all downloads.
         */
        const String ACTION_VIEW_DOWNLOADS = "android.intent.action.VIEW_DOWNLOADS";

        /**
         * Intent extra included with #ACTION_VIEW_DOWNLOADS to start DownloadApp in
         * sort-by-size mode.
         *
         * @sa #ACTION_VIEW_DOWNLOADS
         */
        const String INTENT_EXTRAS_SORT_BY_SIZE =
                "android.app.DownloadManager.extra_sortBySize";

        /**
         * Intent extra included with #ACTION_DOWNLOAD_COMPLETE intents, indicating the ID (as a
         * long) of the download that just completed.
         *
         * @sa #ACTION_DOWNLOAD_COMPLETE
         */
        const String EXTRA_DOWNLOAD_ID = "extra_download_id";

        /**
         * When clicks on multiple notifications are received, the following
         * provides an array of download ids corresponding to the download notification that was
         * clicked. It can be retrieved by the receiver of this
         * Intent using android.content.Intent#getLongArrayExtra(String).
         *
         * @sa android.content.Intent#getLongArrayExtra(String)
         */
        const String EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS = "extra_click_download_ids";

        /**
         * Makes this object access the download provider through /all_downloads URIs rather than
         * /my_downloads URIs, for clients that have permission to do so.
         * @hide
         */
        SetAccessAllDownloads(
            [in] Boolean accessAllDownloads);

        /**
         * Enqueue a new download.  The download will start automatically once the download manager is
         * ready to execute it and connectivity is available.
         *
         * @param request the parameters specifying this download
         * @return an ID for the download, unique across the system.  This ID is used to make future
         * calls related to this download.
         */
        Enqueue(
            [in] IDownloadManagerRequest* request,
            [out] Int64* id);

        /**
         * Marks the specified download as 'to be deleted'. This is done when a completed download
         * is to be removed but the row was stored without enough info to delete the corresponding
         * metadata from Mediaprovider database. Actual cleanup of this row is done in DownloadService.
         *
         * @param ids the IDs of the downloads to be marked 'deleted'
         * @return the number of downloads actually updated
         * @hide
         */
        MarkRowDeleted(
            [in] ArrayOf<Int64>* ids,
            [out] Int32* number);

        /**
         * Cancel downloads and remove them from the download manager.  Each download will be stopped if
         * it was running, and it will no longer be accessible through the download manager.
         * If there is a downloaded file, partial or complete, it is deleted.
         *
         * @param ids the IDs of the downloads to remove
         * @return the number of downloads actually removed
         */
        Remove(
            [in] ArrayOf<Int64>* ids,
            [out] Int32* number);

        /**
         * Query the download manager about downloads that have been requested.
         * @param query parameters specifying filters for this query
         * @return a Cursor over the result set of downloads, with columns consisting of all the
         * COLUMN_* constants.
         */
        Query(
            [in] IDownloadManagerQuery* query,
            [out] ICursor** cursor);

        /**
         * Open a downloaded file for reading.  The download must have completed.
         * @param id the ID of the download
         * @return a read-only ParcelFileDescriptor
         *
         * @sa ParcelFileDescriptor
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * FileNotFoundException | if the destination file does not already exist
         */
        OpenDownloadedFile(
            [in] Int64 id,
            [out] IParcelFileDescriptor** descriptor);

        /**
         * Returns Uri for the given downloaded file id, if the file is
         * downloaded successfully. otherwise, null is returned.
         *
         * @sa Uri
         *<p>
         * If the specified downloaded file is in external storage (for example, /sdcard dir),
         * then it is assumed to be safe for anyone to read and the returned Uri corresponds
         * to the filepath on sdcard.
         *
         * @sa Uri
         *
         * @param id the id of the downloaded file.
         * @return the Uri for the given downloaded file id, if download was successful. null
         * otherwise.
         *
         * @sa Uri
         */
        GetUriForDownloadedFile(
            [in] Int64 id,
            [out] IUri** uri);

        /**
         * Returns Uri for the given downloaded file id, if the file is
         * downloaded successfully. otherwise, null is returned.
         *
         * @sa Uri
         *<p>
         * If the specified downloaded file is in external storage (for example, /sdcard dir),
         * then it is assumed to be safe for anyone to read and the returned Uri corresponds
         * to the filepath on sdcard.
         *
         * @sa Uri
         *
         * @param id the id of the downloaded file.
         * @return the Uri for the given downloaded file id, if download was successful. null
         * otherwise.
         *
         * @sa Uri
         */
        GetMimeTypeForDownloadedFile(
            [in] Int64 id,
            [out] String* uri);

        /**
         * Restart the given downloads, which must have already completed (successfully or not).  This
         * method will only work when called from within the download manager's process.
         * @param ids the IDs of the downloads
         * @hide
         */
        RestartDownload(
            [in] ArrayOf<Int64>* ids);

        /**
         * Adds a file to the downloads database system, so it could appear in Downloads App
         * (and thus become eligible for management by the Downloads App).
         * <p>
         * It is helpful to make the file scannable by MediaScanner by setting the param
         * isMediaScannerScannable to true. It makes the file visible in media managing
         * applications such as Gallery App, which could be a useful purpose of using this API.
         *
         * @param title the title that would appear for this file in Downloads App.
         * @param description the description that would appear for this file in Downloads App.
         * @param isMediaScannerScannable true if the file is to be scanned by MediaScanner. Files
         * scanned by MediaScanner appear in the applications used to view media (for example,
         * Gallery app).
         * @param mimeType mimetype of the file.
         * @param path absolute pathname to the file. The file should be world-readable, so that it can
         * be managed by the Downloads App and any other app that is used to read it (for example,
         * Gallery app to display the file, if the file contents represent a video/image).
         * @param length length of the downloaded file
         * @param showNotification true if a notification is to be sent, false otherwise
         * @return  an ID for the download entry added to the downloads app, unique across the system
         * This ID is used to make future calls related to this download.
         */
        AddCompletedDownload(
            [in] String title,
            [in] String description,
            [in] Boolean isMediaScannerScannable,
            [in] String mimeType,
            [in] String path,
            [in] Int64 length,
            [in] Boolean showNotification,
            [out] Int64* id);
    }

    [local]
    interface IDownloadManagerHelper {
        GetUNDERLYINGCOLUMNS(
            [out, callee] ArrayOf<String>* columns);

        /**
         * Returns maximum size, in bytes, of downloads that may go over a mobile connection; or null if
         * there's no limit
         *
         * @param context the Context to use for accessing the ContentResolver
         * @return maximum size, in bytes, of downloads that may go over a mobile connection; or null if
         * there's no limit
         *
         * @sa Context
         * @sa ContentResolver
         */
        GetMaxBytesOverMobile(
            [in] IContext* ctx,
            [out] Int64* size);

        /**
         * Returns recommended maximum size, in bytes, of downloads that may go over a mobile
         * connection; or null if there's no recommended limit.  The user will have the option to bypass
         * this limit.
         *
         * @param context the Context to use for accessing the ContentResolver
         * @return recommended maximum size, in bytes, of downloads that may go over a mobile
         * connection; or null if there's no recommended limit.
         *
         * @sa Context
         * @sa ContentResolver
         */
        GetRecommendedMaxBytesOverMobile(
            [in] IContext* ctx,
            [out] Int64* size);

        /** {@hide} */
        IsActiveNetworkExpensive(
            [in] IContext* ctx,
            [out] Boolean* actived);

        /** {@hide} */
        GetActiveNetworkWarningBytes(
            [in] IContext* ctx,
            [out] Int64* bytes);
    }

    /**
     * This class contains all the information necessary to request a new download. The URI is the
     * only required parameter.
     *
     * Note that the default download destination is a shared volume where the system might delete
     * your file if it needs to reclaim space for system use. If this is a problem, use a location
     * on external storage (see #setDestinationUri(Uri).
     *
     * @sa #setDestinationUri(Uri)
     */
    [local]
    interface IDownloadManagerRequest {
        /**
         * Bit flag for #setAllowedNetworkTypes corresponding to
         * ConnectivityManager#TYPE_MOBILE.
         *
         * @sa #setAllowedNetworkTypes
         * @sa ConnectivityManager#TYPE_MOBILE
         */
        const Int32 NETWORK_MOBILE = 1 << 0;

        /**
         * Bit flag for #setAllowedNetworkTypes corresponding to
         * ConnectivityManager#TYPE_WIFI.
         *
         * @sa #setAllowedNetworkTypes
         * @sa ConnectivityManager#TYPE_WIFI
         */
        const Int32 NETWORK_WIFI = 1 << 1;

        /**
         * Bit flag for #setAllowedNetworkTypes corresponding to
         * ConnectivityManager#TYPE_BLUETOOTH.
         *
         * @sa #setAllowedNetworkTypes
         * @sa ConnectivityManager#TYPE_BLUETOOTH
         * @hide
         */
        const Int32 NETWORK_BLUETOOTH = 1 << 2;

        /**
         * This download is visible but only shows in the notifications
         * while it's in progress.
         */
        const Int32 VISIBILITY_VISIBLE = 0;

        /**
         * This download is visible and shows in the notifications while
         * in progress and after completion.
         */
        const Int32 VISIBILITY_VISIBLE_NOTIFY_COMPLETED = 1;

        /**
         * This download doesn't show in the UI or in the notifications.
         */
        const Int32 VISIBILITY_HIDDEN = 2;

        /**
         * This download shows in the notifications after completion ONLY.
         * It is usuable only with
         * DownloadManager#addCompletedDownload(String, String,
         * boolean, String, String, long, boolean).
         *
         * @sa DownloadManager#addCompletedDownload(String, String, boolean, String, String, long, boolean)
         */
        const Int32 VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION = 3;

        /**
         * Set the local destination for the downloaded file. Must be a file URI to a path on
         * external storage, and the calling application must have the WRITE_EXTERNAL_STORAGE
         * permission.
         * <p>
         * The downloaded file is not scanned by MediaScanner.
         * But it can be made scannable by calling #allowScanningByMediaScanner().
         *
         * @sa #allowScanningByMediaScanner()
         * <p>
         * By default, downloads are saved to a generated filename in the shared download cache and
         * may be deleted by the system at any time to reclaim space.
         *
         * @return this object
         */
        SetDestinationUri(
            [in] IUri* uri);

        /**
         * Set the local destination for the downloaded file to the system cache dir (/cache).
         * This is only available to System apps with the permission
         * android.Manifest.permission#ACCESS_CACHE_FILESYSTEM.
         *
         * @sa android.Manifest.permission#ACCESS_CACHE_FILESYSTEM
         * <p>
         * The downloaded file is not scanned by MediaScanner.
         * But it can be made scannable by calling #allowScanningByMediaScanner().
         *
         * @sa #allowScanningByMediaScanner()
         * <p>
         * Files downloaded to /cache may be deleted by the system at any time to reclaim space.
         *
         * @return this object
         * @hide
         */
        SetDestinationToSystemCache();

        /**
         * Set the local destination for the downloaded file to a path within the application's
         * external files directory (as returned by Context#getExternalFilesDir(String).
         *
         * @sa Context#getExternalFilesDir(String)
         * <p>
         * The downloaded file is not scanned by MediaScanner.
         * But it can be made scannable by calling #allowScanningByMediaScanner().
         *
         * @sa #allowScanningByMediaScanner()
         *
         * @param context the Context to use in determining the external files directory
         *
         * @sa Context
         * @param dirType the directory type to pass to Context#getExternalFilesDir(String)
         *
         * @sa Context#getExternalFilesDir(String)
         * @param subPath the path within the external directory, including the destination filename
         * @return this object
         */
        SetDestinationInExternalFilesDir(
            [in] IContext* ctx,
            [in] String dirType,
            [in] String subPath);

        /**
         * Set the local destination for the downloaded file to a path within the public external
         * storage directory (as returned by
         * Environment#getExternalStoragePublicDirectory(String).
         *
         * @sa Environment#getExternalStoragePublicDirectory(String)
         *<p>
         * The downloaded file is not scanned by MediaScanner.
         * But it can be made scannable by calling #allowScanningByMediaScanner().
         *
         * @sa #allowScanningByMediaScanner()
         *
         * @param dirType the directory type to pass to
         *        Environment#getExternalStoragePublicDirectory(String)
         *
         * @sa Environment#getExternalStoragePublicDirectory(String)
         * @param subPath the path within the external directory, including the destination filename
         * @return this object
         */
        SetDestinationInExternalPublicDir(
            [in] String dirType,
            [in] String subPath);

        /**
         * If the file to be downloaded is to be scanned by MediaScanner, this method
         * should be called before DownloadManager#enqueue(Request) is called.
         *
         * @sa DownloadManager#enqueue(Request)
         */
        AllowScanningByMediaScanner();

        /**
         * Add an HTTP header to be included with the download request.  The header will be added to
         * the end of the list.
         * @param header HTTP header name
         * @param value header value
         * @return this object
         * @see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2">HTTP/1.1
         *      Message Headers</a>
         */
        AddRequestHeader(
            [in] String header,
            [in] String value);

        /**
         * Set the title of this download, to be displayed in notifications (if enabled).  If no
         * title is given, a default one will be assigned based on the download filename, once the
         * download starts.
         * @return this object
         */
        SetTitle(
            [in] ICharSequence* title);

        /**
         * Set a description of this download, to be displayed in notifications (if enabled)
         * @return this object
         */
        SetDescription(
            [in] ICharSequence* description);

        /**
         * Set the MIME content type of this download.  This will override the content type declared
         * in the server's response.
         * @see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.7">HTTP/1.1
         *      Media Types</a>
         * @return this object
         */
        SetMimeType(
            [in] String mimeType);

        /**
         * Control whether a system notification is posted by the download manager while this
         * download is running or when it is completed.
         * If enabled, the download manager posts notifications about downloads
         * through the system android.app.NotificationManager.
         * By default, a notification is shown only when the download is in progress.
         *
         * @sa android.app.NotificationManager
         *<p>
         * It can take the following values: #VISIBILITY_HIDDEN,
         * #VISIBILITY_VISIBLE,
         * #VISIBILITY_VISIBLE_NOTIFY_COMPLETED.
         *
         * @sa #VISIBILITY_HIDDEN
         * @sa #VISIBILITY_VISIBLE
         * @sa #VISIBILITY_VISIBLE_NOTIFY_COMPLETED
         *<p>
         * If set to #VISIBILITY_HIDDEN, this requires the permission
         * android.permission.DOWNLOAD_WITHOUT_NOTIFICATION.
         *
         * @sa #VISIBILITY_HIDDEN
         *
         * @param visibility the visibility setting value
         * @return this object
         */
        SetNotificationVisibility(
            [in] Int32 visibility);

        /**
         * Restrict the types of networks over which this download may proceed.
         * By default, all network types are allowed. Consider using
         * #setAllowedOverMetered(boolean) instead, since it's more
         * flexible.
         *
         * @sa #setAllowedOverMetered(boolean)
         *
         * @param flags any combination of the NETWORK_* bit flags.
         * @return this object
         */
        SetAllowedNetworkTypes(
            [in] Int32 flags);

        /**
         * Set whether this download may proceed over a roaming connection.  By default, roaming is
         * allowed.
         * @param allowed whether to allow a roaming connection to be used
         * @return this object
         */
        SetAllowedOverRoaming(
            [in] Boolean allowed);

        /**
         * Set whether this download may proceed over a metered network
         * connection. By default, metered networks are allowed.
         *
         * @see ConnectivityManager#isActiveNetworkMetered()
         */
        SetAllowedOverMetered(
            [in] Boolean allow);

        /**
         * Set whether this download should be displayed in the system's Downloads UI. True by
         * default.
         * @param isVisible whether to display this download in the Downloads UI
         * @return this object
         */
        SetVisibleInDownloadsUi(
            [in] Boolean isVisible);
    }

    /**
     * This class may be used to filter download manager queries.
     */
    [deprecated]
    interface IDownloadManagerQuery {
        /**
         * Constant for use with #orderBy
         *
         * @sa #orderBy
         * @hide
         */
        const Int32 ORDER_ASCENDING = 1;

        /**
         * Constant for use with #orderBy
         *
         * @sa #orderBy
         * @hide
         */
        const Int32 ORDER_DESCENDING = 2;

        /**
         * Include only the downloads with the given IDs.
         * @return this object
         */
        SetFilterById(
            [in] ArrayOf<Int64>* ids);

        /**
         * Include only downloads with status matching any the given status flags.
         * @param flags any combination of the STATUS_* bit flags
         * @return this object
         */
        SetFilterByStatus(
            [in] Int32 flags);

        /**
         * Controls whether this query includes downloads not visible in the system's Downloads UI.
         * @param value if true, this query will only include downloads that should be displayed in
         *            the system's Downloads UI; if false (the default), this query will include
         *            both visible and invisible downloads.
         * @return this object
         * @hide
         */
        SetOnlyIncludeVisibleInDownloadsUi(
            [in] Boolean value);

        /**
         * Change the sort order of the returned Cursor.
         *
         * @param column one of the COLUMN_* constants; currently, only
         *         #COLUMN_LAST_MODIFIED_TIMESTAMP and #COLUMN_TOTAL_SIZE_BYTES are
         *         supported.
         *
         * @sa #COLUMN_LAST_MODIFIED_TIMESTAMP
         * @sa #COLUMN_TOTAL_SIZE_BYTES
         * @param direction either #ORDER_ASCENDING or #ORDER_DESCENDING
         *
         * @sa #ORDER_ASCENDING
         * @sa #ORDER_DESCENDING
         * @return this object
         * @hide
         */
        OrderBy(
            [in] String column,
            [in] Int32 direction);
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
