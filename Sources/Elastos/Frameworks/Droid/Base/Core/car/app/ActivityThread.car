module
{
    interface Elastos.Droid.Os.IBinder;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Os.ILooper;
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Content.IIContentProvider;
    interface Elastos.Droid.Content.Res.IConfiguration;
    interface Elastos.Droid.Content.Pm.IProviderInfo;
    interface Elastos.Droid.Content.Pm.IIPackageManager;
    interface Elastos.Droid.Content.Pm.IActivityInfo;
    interface Elastos.Droid.Content.Pm.IApplicationInfo;
    interface Elastos.Droid.App.IResultInfo;
    interface Elastos.Droid.App.IOnActivityPausedListener;
    interface Elastos.Droid.App.IApplicationThread;
    interface Elastos.Droid.App.IContextImpl;

    namespace Elastos {
    namespace Droid {
    namespace App {

    [deprecated, local]
    interface IActivityThread {
        GetHandler(
            [out] IHandler** h);

        GetApplicationThread(
            [out] IApplicationThread** thread);

        GetInstrumentation(
            [out] IInstrumentation** instrumentation);

        GetConfiguration(
            [out] IConfiguration** configuration);

        IsProfiling(
            [out] Boolean* profiled);

        GetProfileFilePath(
            [out] String* path);

        GetLooper(
            [out] ILooper** looper);

        GetApplication(
            [out] IApplication** app);

        GetProcessName(
            [out] String* name);

        GetSystemContext(
            [out] IContextImpl** context);

        InstallSystemApplicationInfo(
            [in] IApplicationInfo* info);

        RegisterOnActivityPausedListener(
            [in] IActivity* activity,
            [in] IOnActivityPausedListener* listener);

        UnregisterOnActivityPausedListener(
            [in] IActivity* activity,
            [in] IOnActivityPausedListener* listener);

        ResolveActivityInfo(
            [in] IIntent* intent,
            [out] IActivityInfo** info);

        StartActivityNow(
            [in] IActivity* parent,
            [in] String id,
            [in] IIntent* intent,
            [in] IActivityInfo* activityInfo,
            [in] IBinder* token,
            [in] IBundle* state,
            [in] IActivityNonConfigurationInstances* lastNonConfigurationInstances,
            [out] IActivity** activity);

        GetActivity(
            [in] IBinder* token,
            [out] IActivity** activity);

        SendActivityResult(
            [in] IBinder* token,
            [in] String id,
            [in] Int32 requestCode,
            [in] Int32 resultCode,
            [in] IIntent* data);

        PerformNewIntents(
            [in] IBinder* token,
            [in] ArrayOf<IIntent*>* intents);

        RequestRelaunchActivity(
            [in] IBinder* token,
            [in] ArrayOf<IResultInfo*>* pendingResults,
            [in] ArrayOf<IIntent*>* pendingNewIntents,
            [in] Int32 configChanges,
            [in] Boolean notResumed,
            [in] IConfiguration* config,
            [in] Boolean fromServer);

        ApplyConfigurationToResources(
            [in] IConfiguration* config);

        AcquireProvider(
            [in] IContext* ctx,
            [in] String auth,
            [in] Int32 userId,
            [in] Boolean stable,
            [out] IIContentProvider** provider);

        AcquireExistingProvider(
            [in] IContext* ctx,
            [in] String auth,
            [in] Int32 userId,
            [in] Boolean stable,
            [out] IIContentProvider** provider);

        ReleaseProvider(
            [in] IIContentProvider* provider,
            [in] Boolean stable,
            [out] Boolean* released);

        InstallSystemProviders(
            [in] ArrayOf<IProviderInfo*>* providers);

        GetIntCoreSetting(
            [in] String key,
            [in] Int32 defaultValue,
            [out] Int32* setting);

        FinishInstrumentation(
            [in] Int32 resultCode,
            [in] IBundle* results);
    }

    [local]
    interface IActivityThreadHelper {
        GetCurrentActivityThread(
            [out] IActivityThread** thread);

        GetCurrentPackageName(
            [out] String* name);

        GetCurrentApplication(
            [out] IApplication** app);

        GetPackageManager(
            [out] IIPackageManager** manager);

        GetIntentBeingBroadcast(
            [out] IIntent** intent);

        GetSystemMain(
            [out] IActivityThread** thread);

        Main(
            [in] ArrayOf<String> args);
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
