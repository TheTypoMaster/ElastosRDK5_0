module
{

    interface Elastos.Droid.View.IActionMode;
    interface Elastos.Droid.View.IActionModeCallback;
    interface Elastos.Droid.Content.Res.IConfiguration;

    namespace Elastos {
    namespace Droid {
    namespace App {

    /**
     * Callback for notification of changes to operation state.
     */
    interface IAppOpsManagerOnOpChangedListener {
        OnOpChanged(
            [in] String op,
            [in] String packageName);
    }

    /**
     * API for interacting with "application operation" tracking.
     *
     * <p>This API is not generally intended for third party application developers; most
     * features are only available to system applications.  Obtain an instance of it through
     * {@link Context#getSystemService(String) Context.getSystemService} with
     * {@link Context#APP_OPS_SERVICE Context.APP_OPS_SERVICE}.</p>
     */
    interface IAppOpsManager {

        /**
         * Result from {@link #checkOp}, {@link #noteOp}, {@link #startOp}: the given caller is
         * allowed to perform the given operation.
         */
        const Int32 MODE_ALLOWED = 0;

        /**
         * Result from {@link #checkOp}, {@link #noteOp}, {@link #startOp}: the given caller is
         * not allowed to perform the given operation, and this attempt should
         * <em>silently fail</em> (it should not cause the app to crash).
         */
        const Int32 MODE_IGNORED = 1;

        /**
         * Result from {@link #checkOpNoThrow}, {@link #noteOpNoThrow}, {@link #startOpNoThrow}: the
         * given caller is not allowed to perform the given operation, and this attempt should
         * cause it to have a fatal error, typically a {@link SecurityException}.
         */
        const Int32 MODE_ERRORED = 2;

        /**
         * Result from {@link #checkOp}, {@link #noteOp}, {@link #startOp}: the given caller should
         * use its default security check.  This mode is not normally used; it should only be used
         * with appop permissions, and callers must explicitly check for it and deal with it.
         */
        const Int32 MODE_DEFAULT = 3;

        // when adding one of these:
        //  - increment _NUM_OP
        //  - add rows to sOpToSwitch, sOpToString, sOpNames, sOpPerms, sOpDefaultMode
        //  - add descriptive strings to Settings/res/values/arrays.xml
        //  - add the op to the appropriate template in AppOpsState.OpsTemplate (settings app)

        /** Access to coarse location information. */
        const String OPSTR_COARSE_LOCATION =
                "android:coarse_location";
        /** Access to fine location information. */
        const String OPSTR_FINE_LOCATION =
                "android:fine_location";
        /** Continually monitoring location data. */
        const String OPSTR_MONITOR_LOCATION
                = "android:monitor_location";
        /** Continually monitoring location data with a relatively high power request. */
        const String OPSTR_MONITOR_HIGH_POWER_LOCATION
                = "android:monitor_location_high_power";
        /** Access to {@link android.app.usage.UsageStatsManager}. */
        const String OPSTR_GET_USAGE_STATS
                = "android:get_usage_stats";
        /** Activate a VPN connection without user intervention. @hide */
        //@SystemApi
        const String OPSTR_ACTIVATE_VPN = "android:activate_vpn";

        /**
         * Monitor for changes to the operating mode for the given op in the given app package.
         * @param op The operation to monitor, one of OPSTR_*.
         * @param packageName The name of the application to monitor.
         * @param callback Where to report changes.
         */
        StartWatchingMode(
            [in] String op,
            [in] String packageName,
            [in] IAppOpsManagerOnOpChangedListener* cb);

        /**
         * Stop monitoring that was previously started with {@link #startWatchingMode}.  All
         * monitoring associated with this callback will be removed.
         */
        StopWatchingMode(
            [in] IAppOpsManagerOnOpChangedListener* cb);

        /**
         * Do a quick check for whether an application might be able to perform an operation.
         * This is <em>not</em> a security check; you must use {@link #noteOp(String, int, String)}
         * or {@link #startOp(String, int, String)} for your actual security checks, which also
         * ensure that the given uid and package name are consistent.  This function can just be
         * used for a quick check to see if an operation has been disabled for the application,
         * as an early reject of some work.  This does not modify the time stamp or other data
         * about the operation.
         * @param op The operation to check.  One of the OPSTR_* constants.
         * @param uid The user id of the application attempting to perform the operation.
         * @param packageName The name of the application attempting to perform the operation.
         * @return Returns {@link #MODE_ALLOWED} if the operation is allowed, or
         * {@link #MODE_IGNORED} if it is not allowed and should be silently ignored (without
         * causing the app to crash).
         * @throws SecurityException If the app has been configured to crash on this op.
         */
        CheckOp(
            [in] String op,
            [in] Int32 uid,
            [in] String packageName,
            [out] Int32* result);

        /**
         * Like {@link #checkOp} but instead of throwing a {@link SecurityException} it
         * returns {@link #MODE_ERRORED}.
         */
        CheckOpNoThrow(
            [in] String op,
            [in] Int32 uid,
            [in] String packageName,
            [out] Int32* result);

        /**
         * Make note of an application performing an operation.  Note that you must pass
         * in both the uid and name of the application to be checked; this function will verify
         * that these two match, and if not, return {@link #MODE_IGNORED}.  If this call
         * succeeds, the last execution time of the operation for this app will be updated to
         * the current time.
         * @param op The operation to note.  One of the OPSTR_* constants.
         * @param uid The user id of the application attempting to perform the operation.
         * @param packageName The name of the application attempting to perform the operation.
         * @return Returns {@link #MODE_ALLOWED} if the operation is allowed, or
         * {@link #MODE_IGNORED} if it is not allowed and should be silently ignored (without
         * causing the app to crash).
         * @throws SecurityException If the app has been configured to crash on this op.
         */
        NoteOp(
            [in] String op,
            [in] Int32 uid,
            [in] String packageName,
            [out] Int32* result);

        /**
         * Like {@link #noteOp} but instead of throwing a {@link SecurityException} it
         * returns {@link #MODE_ERRORED}.
         */
        NoteOpNoThrow(
            [in] String op,
            [in] Int32 uid,
            [in] String packageName,
            [out] Int32* result);

        /**
         * Report that an application has started executing a long-running operation.  Note that you
         * must pass in both the uid and name of the application to be checked; this function will
         * verify that these two match, and if not, return {@link #MODE_IGNORED}.  If this call
         * succeeds, the last execution time of the operation for this app will be updated to
         * the current time and the operation will be marked as "running".  In this case you must
         * later call {@link #finishOp(String, int, String)} to report when the application is no
         * longer performing the operation.
         * @param op The operation to start.  One of the OPSTR_* constants.
         * @param uid The user id of the application attempting to perform the operation.
         * @param packageName The name of the application attempting to perform the operation.
         * @return Returns {@link #MODE_ALLOWED} if the operation is allowed, or
         * {@link #MODE_IGNORED} if it is not allowed and should be silently ignored (without
         * causing the app to crash).
         * @throws SecurityException If the app has been configured to crash on this op.
         */
        StartOp(
            [in] String op,
            [in] Int32 uid,
            [in] String packageName,
            [out] Int32* result);

        /**
         * Like {@link #startOp} but instead of throwing a {@link SecurityException} it
         * returns {@link #MODE_ERRORED}.
         */
        StartOpNoThrow(
            [in] String op,
            [in] Int32 uid,
            [in] String packageName,
            [out] Int32* result);

        /**
         * Report that an application is no longer performing an operation that had previously
         * been started with {@link #startOp(String, int, String)}.  There is no validation of input
         * or result; the parameters supplied here must be the exact same ones previously passed
         * in when starting the operation.
         */
        FinishOp(
            [in] String op,
            [in] Int32 uid,
            [in] String packageName,
            [out] Int32* result);

        /**
         * Do a quick check to validate if a package name belongs to a UID.
         *
         * @throws SecurityException if the package name doesn't belong to the given
         *             UID, or if ownership cannot be verified.
         */
        CheckPackage(
            [in] Int32 uid,
            [in] String packageName);
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
