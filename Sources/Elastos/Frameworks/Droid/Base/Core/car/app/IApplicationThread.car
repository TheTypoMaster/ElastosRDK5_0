module
{
    using interface Elastos.Utility.IMap;
    using interface Elastos.Utility.IList;
    using interface Elastos.IO.IFileDescriptor;

    interface Elastos.Droid.Os.IBinder;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Os.IPersistableBundle;
    interface Elastos.Droid.Os.IParcelFileDescriptor;
    interface Elastos.Droid.Os.IDebugMemoryInfo;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Content.IComponentName;
    interface Elastos.Droid.Content.IIntentReceiver;
    interface Elastos.Droid.Content.Pm.IActivityInfo;
    interface Elastos.Droid.Content.Pm.IApplicationInfo;
    interface Elastos.Droid.Content.Pm.IProviderInfo;
    interface Elastos.Droid.Content.Pm.IServiceInfo;
    interface Elastos.Droid.Content.Res.IConfiguration;
    interface Elastos.Droid.Content.Res.ICompatibilityInfo;
    interface Elastos.Droid.App.IInstrumentationWatcher;
    interface Elastos.Droid.App.IResultInfo;
    interface Elastos.Droid.App.IIUiAutomationConnection;
    interface Elastos.Droid.Internal.App.IIVoiceInteractor;

    namespace Elastos {
    namespace Droid {
    namespace App {

    /**
     * System private API for communicating with the application.  This is given to
     * the activity manager by an application  when it starts up, for the activity
     * manager to tell the application about things it needs to do.
     *
     * {@hide}
     */
    [deprecated]
    interface IApplicationThread {
        SchedulePauseActivity(
            [in] IBinder* token,
            [in] Boolean finished,
            [in] Boolean userLeaving,
            [in] Int32 configChanges,
            [in] Boolean dontReport);

        ScheduleStopActivity(
            [in] IBinder* token,
            [in] Boolean showWindow,
            [in] Int32 configChanges);

        ScheduleWindowVisibility(
            [in] IBinder* token,
            [in] Boolean showWindow);

        ScheduleSleeping(
            [in] IBinder* token,
            [in] Boolean sleeping);

        ScheduleResumeActivity(
            [in] IBinder* token,
            [in] Int32 procState,
            [in] Boolean isForward,
            [in] IBundle* resumeArgs);

        ScheduleSendResult(
            [in] IBinder* token,
            [in] IList* results); //ResultInfo

        ScheduleLaunchActivity(
            [in] IIntent* intent,
            [in] IBinder* token,
            [in] Int32 ident,
            [in] IActivityInfo* info,
            [in] IConfiguration* curConfig,
            [in] ICompatibilityInfo* compatInfo,
            [in] IIVoiceInteractor* voiceInteractor,
            [in] Int32 procState,
            [in] IBundle* state,
            [in] IPersistableBundle* persistentState,
            [in] IList* pendingResults, //ResultInfo
            [in] IList* pendingNewIntents, //IIntent
            [in] Boolean notResumed,
            [in] Boolean isForward,
            [in] IProfilerInfo* profilerInfo);

        ScheduleRelaunchActivity(
            [in] IBinder* token,
            [in] IList* pendingResults, //ResultInfo
            [in] IList* pendingNewIntents, //IIntent
            [in] Int32 configChanges,
            [in] Boolean notResumed,
            [in] IConfiguration* config);

        ScheduleNewIntent(
            [in] IList* intents, //IIntent
            [in] IBinder* token);

        ScheduleDestroyActivity(
            [in] IBinder* token,
            [in] Boolean finished,
            [in] Int32 configChanges);

        ScheduleReceiver(
            [in] IIntent* intent,
            [in] IActivityInfo* info,
            [in] ICompatibilityInfo* compatInfo,
            [in] Int32 resultCode,
            [in] String data,
            [in] IBundle* extras,
            [in] Boolean sync,
            [in] Int32 sendingUser,
            [in] Int32 processState);

        const Int32 BACKUP_MODE_INCREMENTAL = 0;
        const Int32 BACKUP_MODE_FULL = 1;
        const Int32 BACKUP_MODE_RESTORE = 2;
        const Int32 BACKUP_MODE_RESTORE_FULL = 3;

        ScheduleCreateBackupAgent(
            [in] IApplicationInfo* app,
            [in] ICompatibilityInfo* compatInfo,
            [in] Int32 backupMode);

        ScheduleDestroyBackupAgent(
            [in] IApplicationInfo* app,
            [in] ICompatibilityInfo* compatInfo);

        ScheduleCreateService(
            [in] IBinder* token,
            [in] IServiceInfo* info,
            [in] ICompatibilityInfo* compatInfo,
            [in] Int32 processState);

        ScheduleBindService(
            [in] IBinder* token,
            [in] IIntent* intent,
            [in] Boolean rebind,
            [in] Int32 processState);

        ScheduleUnbindService(
            [in] IBinder* token,
            [in] IIntent* intent);

        ScheduleServiceArgs(
            [in] IBinder* token,
            [in] Boolean taskRemoved,
            [in] Int32 startId,
            [in] Int32 flags,
            [in] IIntent* args);

        ScheduleStopService(
            [in] IBinder* token);

        const Int32 DEBUG_OFF = 0;
        const Int32 DEBUG_ON = 1;
        const Int32 DEBUG_WAIT = 2;

        BindApplication(
            [in] String packageName,
            [in] IApplicationInfo* info,
            [in] IList* providers,
            [in] IComponentName* testName,
            [in] IProfilerInfo* profilerInfo,
            [in] IBundle* testArguments,
            [in] IInstrumentationWatcher* testWatcher,
            [in] IIUiAutomationConnection* uiAutomationConnection,
            [in] Int32 debugMode,
            [in] Boolean openGlTrace,
            [in] Boolean restrictedBackupMode,
            [in] Boolean persistent,
            [in] IConfiguration* config,
            [in] ICompatibilityInfo* compatInfo,
            [in] IMap* services,
            [in] IBundle* coreSettings);

        ScheduleExit();

        ScheduleSuicide();

        ScheduleConfigurationChanged(
            [in] IConfiguration* config);

        UpdateTimeZone();

        ClearDnsCache();

        SetHttpProxy(
            [in] String proxy,
            [in] String port,
            [in] String exclList,
            [in] IUri* pacFileUrl);

        ProcessInBackground();

        DumpService(
            [in] IFileDescriptor* fd,
            [in] IBinder* servicetoken,
            [in] ArrayOf<String>* args);

        DumpProvider(
            [in] IFileDescriptor* fd,
            [in] IBinder* servicetoken,
            [in] ArrayOf<String>* args);

        ScheduleRegisteredReceiver(
            [in] IIntentReceiver* receiver,
            [in] IIntent* intent,
            [in] Int32 resultCode,
            [in] String data,
            [in] IBundle* extras,
            [in] Boolean ordered,
            [in] Boolean sticky,
            [in] Int32 sendingUser,
            [in] Int32 processState);

        ScheduleLowMemory();

        ScheduleActivityConfigurationChanged(
            [in] IBinder* token);

        ProfilerControl(
            [in] Boolean start,
            [in] IProfilerInfo* profilerInfo,
            [in] Int32 profileType);

        DumpHeap(
            [in] Boolean managed,
            [in] String path,
            [in] IParcelFileDescriptor* fd);

        SetSchedulingGroup(
            [in] Int32 group);

        const Int32 PACKAGE_REMOVED = 0;
        const Int32 EXTERNAL_STORAGE_UNAVAILABLE = 1;

        DispatchPackageBroadcast(
            [in] Int32 cmd,
            [in] ArrayOf<String>* packages);

        ScheduleCrash(
            [in] String msg);

        DumpActivity(
            [in] IFileDescriptor* fd,
            [in] IBinder* servicetoken,
            [in] String prefix,
            [in] ArrayOf<String>* args);

        SetCoreSettings(
            [in] IBundle* coreSettings);

        UpdatePackageCompatibilityInfo(
            [in] String pkg,
            [in] ICompatibilityInfo* info);

        ScheduleTrimMemory(
            [in] Int32 level);

        DumpMemInfo(
            [in] IFileDescriptor* fd,
            [in] IDebugMemoryInfo* mem,
            [in] Boolean checkin,
            [in] Boolean dumpInfo,
            [in] Boolean dumpDalvik,
            [in] ArrayOf<String>* args);

        DumpGfxInfo(
            [in] IFileDescriptor* fd,
            [in] ArrayOf<String>* args);

        DumpDbInfo(
            [in] IFileDescriptor* fd,
            [in] ArrayOf<String>* args);

        UnstableProviderDied(
            [in] IBinder* provider);

        RequestAssistContextExtras(
            [in] IBinder* activityToken,
            [in] IBinder* requestToken,
            [in] Int32 requestType);

        ScheduleTranslucentConversionComplete(
            [in] IBinder* token,
            [in] Boolean timeout);

        ScheduleOnNewActivityOptions(
            [in] IBinder* token,
            [in] IActivityOptions* options);

        SetProcessState(
            [in] Int32 state);

        ScheduleInstallProvider(
            [in] IProviderInfo* provider);

        UpdateTimePrefs(
            [in] Boolean is24Hour);

        ScheduleCancelVisibleBehind(
            [in] IBinder* token);

        ScheduleBackgroundVisibleBehindChanged(
            [in] IBinder* token,
            [in] Boolean enabled);

        ScheduleEnterAnimationComplete(
            [in] IBinder* token);
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
