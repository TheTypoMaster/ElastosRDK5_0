module
{
    using interface Elastos.IO.IFile;

    interface Elastos.Droid.Os.IParcelFileDescriptor;

    namespace Elastos {
    namespace Droid {
    namespace App {
    namespace Backup {

    interface IFullBackup {

        const String APK_TREE_TOKEN = "a";
        const String OBB_TREE_TOKEN = "obb";
        const String ROOT_TREE_TOKEN = "r";
        const String DATA_TREE_TOKEN = "f";
        const String NO_BACKUP_TREE_TOKEN = "nb";
        const String DATABASE_TREE_TOKEN = "db";
        const String SHAREDPREFS_TREE_TOKEN = "sp";
        const String MANAGED_EXTERNAL_TREE_TOKEN = "ef";
        const String CACHE_TREE_TOKEN = "c";
        const String SHARED_STORAGE_TOKEN = "shared";

        const String APPS_PREFIX = "apps/";
        const String SHARED_PREFIX = "shared/";//SHARED_STORAGE_TOKEN + "/";

        const String FULL_BACKUP_INTENT_ACTION = "fullback";
        const String FULL_RESTORE_INTENT_ACTION = "fullrest";
        const String CONF_TOKEN_INTENT_EXTRA = "conftoken";


        BackupToTar(
            [in] String packageName,
            [in] String domainName,
            [in] String linkdomain,
            [in] String rootpath,
            [in] String path,
            [in] IBackupDataOutput* output,
            [out] Int32* result);

        /**
         * Copy data from a socket to the given File location on permanent storage.  The
         * modification time and access mode of the resulting file will be set if desired,
         * although group/all rwx modes will be stripped: the restored file will not be
         * accessible from outside the target application even if the original file was.
         * If the {type} parameter indicates that the result should be a directory,
         * the socket parameter may be {null}; even if it is valid, no data will be
         * read from it in this case.
         * <p>
         * If the {mode} argument is negative, then the resulting output file will not
         * have its access mode or last modification time reset as part of this operation.
         *
         * @param data Socket supplying the data to be copied to the output file.  If the
         *    output is a directory, this may be {null}.
         * @param size Number of bytes of data to copy from the socket to the file.  At least
         *    this much data must be available through the {data} parameter.
         * @param type Must be either BackupAgent#TYPE_FILE for ordinary file data
         *    or BackupAgent#TYPE_DIRECTORY for a directory.
         * @param mode Unix-style file mode (as used by the chmod(2) syscall) to be set on
         *    the output file or directory.  group/all rwx modes are stripped even if set
         *    in this parameter.  If this parameter is negative then neither
         *    the mode nor the mtime values will be applied to the restored file.
         *
         * @sa BackupAgent#TYPE_FILE
         * @sa BackupAgent#TYPE_DIRECTORY
         * @param mtime A timestamp in the standard Unix epoch that will be imposed as the
         *    last modification time of the output file.  if the {mode} parameter is
         *    negative then this parameter will be ignored.
         * @param outFile Location within the filesystem to place the data.  This must point
         *    to a location that is writeable by the caller, prefereably using an absolute path.
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException |
         */
        RestoreFile(
            [in] IParcelFileDescriptor* data,
            [in] Int64 size,
            [in] Int32 type,
            [in] Int64 mode,
            [in] Int64 mtime,
            [in] IFile* outFile);
    }



    } // namespace Backup
    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}