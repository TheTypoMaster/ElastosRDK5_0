module
{
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.App.IDialog;

    namespace Elastos {
    namespace Droid {
    namespace App {

    [local]
    interface IDialogFragment {
        /**
         * Style for {@link #setStyle(int, int)}: a basic,
         * normal dialog.
         */
        const Int32 STYLE_NORMAL = 0;

        /**
         * Style for {@link #setStyle(int, int)}: don't include
         * a title area.
         */
        const Int32 STYLE_NO_TITLE = 1;

        /**
         * Style for {@link #setStyle(int, int)}: don't draw
         * any frame at all; the view hierarchy returned by {@link #onCreateView}
         * is entirely responsible for drawing the dialog.
         */
        const Int32 STYLE_NO_FRAME = 2;

        /**
         * Style for {@link #setStyle(int, int)}: like
         * {@link #STYLE_NO_FRAME}, but also disables all input to the dialog.
         * The user can not touch it, and its window will not receive input focus.
         */
        const Int32 STYLE_NO_INPUT = 3;

        /**
         * Call to customize the basic appearance and behavior of the
         * fragment's dialog.  This can be used for some common dialog behaviors,
         * taking care of selecting flags, theme, and other options for you.  The
         * same effect can be achieve by manually setting Dialog and Window
         * attributes yourself.  Calling this after the fragment's Dialog is
         * created will have no effect.
         *
         * @param style Selects a standard style: may be {@link #STYLE_NORMAL},
         * {@link #STYLE_NO_TITLE}, {@link #STYLE_NO_FRAME}, or
         * {@link #STYLE_NO_INPUT}.
         * @param theme Optional custom theme.  If 0, an appropriate theme (based
         * on the style) will be selected for you.
         */
        SetStyle(
            [in] Int32 style,
            [in] Int32 theme);

        /**
         * Display the dialog, adding the fragment to the given FragmentManager.  This
         * is a convenience for explicitly creating a transaction, adding the
         * fragment to it with the given tag, and committing it.  This does
         * <em>not</em> add the transaction to the back stack.  When the fragment
         * is dismissed, a new transaction will be executed to remove it from
         * the activity.
         * @param manager The FragmentManager this fragment will be added to.
         * @param tag The tag for this fragment, as per
         * {@link FragmentTransaction#add(Fragment, String) FragmentTransaction.add}.
         */
        Show(
            [in] IFragmentManager* manager,
            [in] String tag);

        /**
         * Display the dialog, adding the fragment using an existing transaction
         * and then committing the transaction.
         * @param transaction An existing transaction in which to add the fragment.
         * @param tag The tag for this fragment, as per
         * {@link FragmentTransaction#add(Fragment, String) FragmentTransaction.add}.
         * @return Returns the identifier of the committed transaction, as per
         * {@link FragmentTransaction#commit() FragmentTransaction.commit()}.
         */
        Show(
            [in] IFragmentTransaction* transaction,
            [in] String tag,
            [out] Int32* id);

        /**
         * Dismiss the fragment and its dialog.  If the fragment was added to the
         * back stack, all back stack state up to and including this entry will
         * be popped.  Otherwise, a new transaction will be committed to remove
         * the fragment.
         */
        Dismiss();

        /**
         * Version of {@link #dismiss()} that uses
         * {@link FragmentTransaction#commitAllowingStateLoss()
         * FragmentTransaction.commitAllowingStateLoss()}.  See linked
         * documentation for further details.
         */
        DismissAllowingStateLoss();

        GetDialog(
            [out] IDialog** dialog);

        GetTheme(
            [out] Int32* theme);

        /**
         * Control whether the shown Dialog is cancelable.  Use this instead of
         * directly calling {@link Dialog#setCancelable(boolean)
         * Dialog.setCancelable(boolean)}, because DialogFragment needs to change
         * its behavior based on this.
         *
         * @param cancelable If true, the dialog is cancelable.  The default
         * is true.
         */
        SetCancelable(
            [in] Boolean cancelable);

        /**
         * Return the current value of {@link #setCancelable(boolean)}.
         */
        IsCancelable(
            [out] Boolean* cancelable);

        /**
         * Controls whether this fragment should be shown in a dialog.  If not
         * set, no Dialog will be created in {@link #onActivityCreated(Bundle)},
         * and the fragment's view hierarchy will thus not be added to it.  This
         * allows you to instead use it as a normal fragment (embedded inside of
         * its activity).
         *
         * <p>This is normally set for you based on whether the fragment is
         * associated with a container view ID passed to
         * {@link FragmentTransaction#add(int, Fragment) FragmentTransaction.add(int, Fragment)}.
         * If the fragment was added with a container, setShowsDialog will be
         * initialized to false; otherwise, it will be true.
         *
         * @param showsDialog If true, the fragment will be displayed in a Dialog.
         * If false, no Dialog will be created and the fragment's view hierarchly
         * left undisturbed.
         */
        SetShowsDialog(
            [in] Boolean showsDialog);

        /**
         * Return the current value of {@link #setShowsDialog(boolean)}.
         */
        GetShowsDialog(
            [out] Boolean* showsDialog);

        /**
         * Override to build your own custom Dialog container.  This is typically
         * used to show an AlertDialog instead of a generic Dialog; when doing so,
         * {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)} does not need
         * to be implemented since the AlertDialog takes care of its own content.
         *
         * <p>This method will be called after {@link #onCreate(Bundle)} and
         * before {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)}.  The
         * default implementation simply instantiates and returns a {@link Dialog}
         * class.
         *
         * <p><em>Note: DialogFragment own the {@link Dialog#setOnCancelListener
         * Dialog.setOnCancelListener} and {@link Dialog#setOnDismissListener
         * Dialog.setOnDismissListener} callbacks.  You must not set them yourself.</em>
         * To find out about these events, override {@link #onCancel(DialogInterface)}
         * and {@link #onDismiss(DialogInterface)}.</p>
         *
         * @param savedInstanceState The last saved instance state of the Fragment,
         * or null if this is a freshly created Fragment.
         *
         * @return Return a new Dialog instance to be displayed by the Fragment.
         */
        OnCreateDialog(
            [in] IBundle* savedInstanceState,
            [out] IDialog** dialog);
    }

    } // namespace App
    } // namespace Droid
    } // namespace Elastos
}
