
module
{
    using interface Elastos.IO.IByteBuffer;
    using interface Elastos.Utility.IObjectStringMap;

    namespace Elastos {
    namespace Droid {
    namespace Media {

    /**
     * Encapsulates the information describing the format of media data,
     * be it audio or video.
     *
     * The format of the media data is specified as string/value pairs.
     *
     * Keys common to all formats, <b>all keys not marked optional are mandatory</b>:
     *
     * <table>
     * <tr><th>Name</th><th>Value Type</th><th>Description</th></tr>
     * <tr><td>{@link #KEY_MIME}</td><td>String</td><td>The type of the format.</td></tr>
     * <tr><td>{@link #KEY_MAX_INPUT_SIZE}</td><td>Integer</td><td>optional, maximum size of a buffer of input data</td></tr>
     * <tr><td>{@link #KEY_BIT_RATE}</td><td>Integer</td><td><b>encoder-only</b>, desired bitrate in bits/second</td></tr>
     * </table>
     *
     * Video formats have the following keys:
     * <table>
     * <tr><th>Name</th><th>Value Type</th><th>Description</th></tr>
     * <tr><td>{@link #KEY_WIDTH}</td><td>Integer</td><td></td></tr>
     * <tr><td>{@link #KEY_HEIGHT}</td><td>Integer</td><td></td></tr>
     * <tr><td>{@link #KEY_COLOR_FORMAT}</td><td>Integer</td><td><b>encoder-only</b></td></tr>
     * <tr><td>{@link #KEY_FRAME_RATE}</td><td>Integer or Float</td><td><b>encoder-only</b></td></tr>
     * <tr><td>{@link #KEY_I_FRAME_INTERVAL}</td><td>Integer</td><td><b>encoder-only</b></td></tr>
     * </table>
     *
     * Audio formats have the following keys:
     * <table>
     * <tr><th>Name</th><th>Value Type</th><th>Description</th></tr>
     * <tr><td>{@link #KEY_CHANNEL_COUNT}</td><td>Integer</td><td></td></tr>
     * <tr><td>{@link #KEY_SAMPLE_RATE}</td><td>Integer</td><td></td></tr>
     * <tr><td>{@link #KEY_IS_ADTS}</td><td>Integer</td><td>optional, if <em>decoding</em> AAC audio content, setting this key to 1 indicates that each audio frame is prefixed by the ADTS header.</td></tr>
     * <tr><td>{@link #KEY_AAC_PROFILE}</td><td>Integer</td><td><b>encoder-only</b>, optional, if content is AAC audio, specifies the desired profile.</td></tr>
     * <tr><td>{@link #KEY_CHANNEL_MASK}</td><td>Integer</td><td>optional, a mask of audio channel assignments</td></tr>
     * <tr><td>{@link #KEY_FLAC_COMPRESSION_LEVEL}</td><td>Integer</td><td><b>encoder-only</b>, optional, if content is FLAC audio, specifies the desired compression level.</td></tr>
     * </table>
     *
     */
    interface IMediaFormat {
        /**
         * A key describing the mime type of the MediaFormat.
         * The associated value is a string.
         */
        const String KEY_MIME = "mime";

        /**
         * A key describing the sample rate of an audio format.
         * The associated value is an integer
         */
        const String KEY_SAMPLE_RATE = "sample-rate";

        /**
         * A key describing the number of channels in an audio format.
         * The associated value is an integer
         */
        const String KEY_CHANNEL_COUNT = "channel-count";

        /**
         * A key describing the width of the content in a video format.
         * The associated value is an integer
         */
        const String KEY_WIDTH = "width";

        /**
         * A key describing the height of the content in a video format.
         * The associated value is an integer
         */
        const String KEY_HEIGHT = "height";

        /** A key describing the maximum size in bytes of a buffer of data
         * described by this MediaFormat.
         * The associated value is an integer
         */
        const String KEY_MAX_INPUT_SIZE = "max-input-size";

        /**
         * A key describing the bitrate in bits/sec.
         * The associated value is an integer
         */
        const String KEY_BIT_RATE = "bitrate";

        /**
         * A key describing the color format of the content in a video format.
         * Constants are declared in {@link android.media.MediaCodecInfo.CodecCapabilities}.
         */
        const String KEY_COLOR_FORMAT = "color-format";

        /**
         * A key describing the frame rate of a video format in frames/sec.
         * The associated value is an integer or a float.
         */
        const String KEY_FRAME_RATE = "frame-rate";

        /**
         * A key describing the frequency of I frames expressed in secs
         * between I frames.
         * The associated value is an integer.
         */
        const String KEY_I_FRAME_INTERVAL = "i-frame-interval";

        /**
         * @hide
         */
        const String KEY_STRIDE = "stride";
        /**
         * @hide
         */
        const String KEY_SLICE_HEIGHT = "slice-height";

        /**
         * A key describing the duration (in microseconds) of the content.
         * The associated value is a long.
         */
        const String KEY_DURATION = "durationUs";

        /**
         * A key mapping to a value of 1 if the content is AAC audio and
         * audio frames are prefixed with an ADTS header.
         * The associated value is an integer (0 or 1).
         */
        const String KEY_IS_ADTS = "is-adts";

        /**
         * A key describing the channel composition of audio content. This mask
         * is composed of bits drawn from channel mask definitions in {@link android.media.AudioFormat}.
         * The associated value is an integer.
         */
        const String KEY_CHANNEL_MASK = "channel-mask";

        /**
         * A key describing the AAC profile to be used (AAC audio formats only).
         * Constants are declared in {@link android.media.MediaCodecInfo.CodecCapabilities}.
         */
        const String KEY_AAC_PROFILE = "aac-profile";

        /**
         * A key describing the FLAC compression level to be used (FLAC audio format only).
         * The associated value is an integer ranging from 0 (fastest, least compression)
         * to 8 (slowest, most compression).
         */
        const String KEY_FLAC_COMPRESSION_LEVEL = "flac-compression-level";


        /**
         * Returns true iff a key of the given name exists in the format.
         */
        ContainsKey(
            [in] String name,
            [out] Boolean* result);

        /**
         * Returns the value of an integer key.
         */
        GetInt32(
            [in] String name,
            [out] Int32* result);

        /**
         * Returns the value of a long key.
         */
        GetInt64(
            [in] String name,
            [out] Int64* result);

        /**
         * Returns the value of a float key.
         */
        GetFloat(
            [in] String name,
            [out] Float* result);

        /**
         * Returns the value of a string key.
         */
        GetString(
            [in] String name,
            [out] String* result);

        /**
         * Returns the value of a ByteBuffer key.
         */
        GetByteBuffer(
            [in] String name,
            [out] IByteBuffer** result);

        /**
         * Sets the value of an integer key.
         */
        SetInt32(
            [in] String name,
            [in] Int32 value);

        /**
         * Sets the value of a long key.
         */
        SetInt64(
            [in] String name,
            [in] Int64 value);

        /**
         * Sets the value of a float key.
         */
        SetFloat(
            [in] String name,
            [in] Float value);

        /**
         * Sets the value of a string key.
         */
        SetString(
            [in] String name,
            [in] String value);

        /**
         * Sets the value of a ByteBuffer key.
         */
        SetByteBuffer(
            [in] String name,
            [in] IByteBuffer* bytes);

        ToString(
            [out] String* result);

        GetMap(
            [out] IObjectStringMap** result);
    }

    interface IMediaFormatHelper{
        /**
         * Creates a minimal audio format.
         * @param mime The mime type of the content.
         * @param sampleRate The sampling rate of the content.
         * @param channelCount The number of audio channels in the content.
         */
        CreateAudioFormat(
            [in] String mime,
            [in] Int32 sampleRate,
            [in] Int32 channelCount,
            [out] IMediaFormat** result);

        /**
         * Creates a minimal video format.
         * @param mime The mime type of the content.
         * @param width The width of the content (in pixels)
         * @param height The height of the content (in pixels)
         */
        CreateVideoFormat(
            [in] String mime,
            [in] Int32 width,
            [in] Int32 height,
            [out] IMediaFormat** result);
    }

    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
