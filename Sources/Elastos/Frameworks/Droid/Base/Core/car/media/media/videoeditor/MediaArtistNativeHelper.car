module
{
    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Videoeditor {

    interface IMediaArtistNativeHelperOnProgressUpdateListener {
        /**
         * Called when there is an update.
         *
         * @param taskId id of the task reporting an update.
         * @param progress progress of the task [0..100].
         * @see BasicEdit#TASK_ENCODING
         */
        OnProgressUpdate(
            [in] Int32 taskId,
            [in] Int32 progress);
    }

    interface IMediaArtistNativeHelperAudioFormat {
        /** No audio present in output clip. Used to generate video only clip */
        const Int32 NO_AUDIO = 0;

        /** AMR Narrow Band. */
        const Int32 AMR_NB = 1;

        /** Advanced Audio Coding (AAC). */
        const Int32 AAC = 2;

        /** Advanced Audio Codec Plus (HE-AAC v1). */
        const Int32 AAC_PLUS = 3;

        /** Advanced Audio Codec Plus (HE-AAC v2). */
        const Int32 ENHANCED_AAC_PLUS = 4;

        /** MPEG layer 3 (MP3). */
        const Int32 MP3 = 5;

        /** Enhanced Variable RateCodec (EVRC). */
        const Int32 EVRC = 6;

        /** PCM (PCM). */
        const Int32 PCM = 7;

        /** No transcoding. Output audio format is same as input audio format */
        const Int32 NULL_AUDIO = 254;

        /** Unsupported audio format. */
        const Int32 UNSUPPORTED_AUDIO = 255;
    }

    interface IMediaArtistNativeHelperAudioSamplingFrequency {
        /**
         * Default sampling frequency. Uses the default frequency for a specific
         * audio format. For AAC the only supported (and thus default) sampling
         * frequency is 16 kHz. For this audio format the sampling frequency in
         * the OutputParams.
         **/
        const Int32 FREQ_DEFAULT = 0;

        /** Audio sampling frequency of 8000 Hz. */
        const Int32 FREQ_8000 = 8000;

        /** Audio sampling frequency of 11025 Hz. */
        const Int32 FREQ_11025 = 11025;

        /** Audio sampling frequency of 12000 Hz. */
        const Int32 FREQ_12000 = 12000;

        /** Audio sampling frequency of 16000 Hz. */
        const Int32 FREQ_16000 = 16000;

        /** Audio sampling frequency of 22050 Hz. */
        const Int32 FREQ_22050 = 22050;

        /** Audio sampling frequency of 24000 Hz. */
        const Int32 FREQ_24000 = 24000;

        /** Audio sampling frequency of 32000 Hz. */
        const Int32 FREQ_32000 = 32000;

        /** Audio sampling frequency of 44100 Hz. */
        const Int32 FREQ_44100 = 44100;

        /** Audio sampling frequency of 48000 Hz. Not available for output file. */
        const Int32 FREQ_48000 = 48000;
    }

    interface IMediaArtistNativeHelperBitrate {
        /** Variable bitrate. Means no bitrate regulation */
        const Int32 VARIABLE = -1;

        /** An undefined bitrate. */
        const Int32 UNDEFINED = 0;

        /** A bitrate of 9.2 kbits/s. */
        const Int32 BR_9_2_KBPS = 9200;

        /** A bitrate of 12.2 kbits/s. */
        const Int32 BR_12_2_KBPS = 12200;

        /** A bitrate of 16 kbits/s. */
        const Int32 BR_16_KBPS = 16000;

        /** A bitrate of 24 kbits/s. */
        const Int32 BR_24_KBPS = 24000;

        /** A bitrate of 32 kbits/s. */
        const Int32 BR_32_KBPS = 32000;

        /** A bitrate of 48 kbits/s. */
        const Int32 BR_48_KBPS = 48000;

        /** A bitrate of 64 kbits/s. */
        const Int32 BR_64_KBPS = 64000;

        /** A bitrate of 96 kbits/s. */
        const Int32 BR_96_KBPS = 96000;

        /** A bitrate of 128 kbits/s. */
        const Int32 BR_128_KBPS = 128000;

        /** A bitrate of 192 kbits/s. */
        const Int32 BR_192_KBPS = 192000;

        /** A bitrate of 256 kbits/s. */
        const Int32 BR_256_KBPS = 256000;

        /** A bitrate of 288 kbits/s. */
        const Int32 BR_288_KBPS = 288000;

        /** A bitrate of 384 kbits/s. */
        const Int32 BR_384_KBPS = 384000;

        /** A bitrate of 512 kbits/s. */
        const Int32 BR_512_KBPS = 512000;

        /** A bitrate of 800 kbits/s. */
        const Int32 BR_800_KBPS = 800000;

        /** A bitrate of 2 Mbits/s. */
        const Int32 BR_2_MBPS = 2000000;

        /** A bitrate of 5 Mbits/s. */
        const Int32 BR_5_MBPS = 5000000;

        /** A bitrate of 8 Mbits/s. */
        const Int32 BR_8_MBPS = 8000000;
    }

    interface IMediaArtistNativeHelperFileType {
        /** 3GPP file type. */
        const Int32 THREE_GPP = 0;

        /** MP4 file type. */
        const Int32 MP4 = 1;

        /** AMR file type. */
        const Int32 AMR = 2;

        /** MP3 audio file type. */
        const Int32 MP3 = 3;

        /** PCM audio file type. */
        const Int32 PCM = 4;

        /** JPEG image file type. */
        const Int32 JPG = 5;

        /** GIF image file type. */
        const Int32 GIF = 7;

        /** PNG image file type. */
        const Int32 PNG = 8;

        /** M4V file type. */
        const Int32 M4V = 10;

        /** Unsupported file type. */
        const Int32 UNSUPPORTED = 255;
    }

    interface IMediaArtistNativeHelperMediaRendering {
        /**
         * Resize to fit the output video with changing the aspect ratio if
         * needed.
         */
        const Int32 RESIZING = 0;

        /**
         * Crop the input video to fit it with the output video resolution.
         **/
        const Int32 CROPPING = 1;

        /**
         * Resize to fit the output video resolution but maintain the aspect
         * ratio. This framing type adds black borders if needed.
         */
        const Int32 BLACK_BORDERS = 2;
    }

    interface IMediaArtistNativeHelperResult {
        /** No error. result OK */
        const Int32 NO_ERROR = 0;

        /** File not found */
        const Int32 ERR_FILE_NOT_FOUND = 1;

        /**
         * In case of UTF8 conversion, the size of the converted path will be
         * more than the corresponding allocated buffer.
         */
        const Int32 ERR_BUFFER_OUT_TOO_SMALL = 2;

        /** Invalid file type. */
        const Int32 ERR_INVALID_FILE_TYPE = 3;

        /** Invalid effect kind. */
        const Int32 ERR_INVALID_EFFECT_KIND = 4;

        /** Invalid video effect. */
        const Int32 ERR_INVALID_VIDEO_EFFECT_TYPE = 5;

        /** Invalid audio effect. */
        const Int32 ERR_INVALID_AUDIO_EFFECT_TYPE = 6;

        /** Invalid video transition. */
        const Int32 ERR_INVALID_VIDEO_TRANSITION_TYPE = 7;

        /** Invalid audio transition. */
        const Int32 ERR_INVALID_AUDIO_TRANSITION_TYPE = 8;

        /** Invalid encoding frame rate. */
        const Int32 ERR_INVALID_VIDEO_ENCODING_FRAME_RATE = 9;

        /** External effect is called but this function is not set. */
        const Int32 ERR_EXTERNAL_EFFECT_NULL = 10;

        /** External transition is called but this function is not set. */
        const Int32 ERR_EXTERNAL_TRANSITION_NULL = 11;

        /** Begin time cut is larger than the video clip duration. */
        const Int32 ERR_BEGIN_CUT_LARGER_THAN_DURATION = 12;

        /** Begin cut time is larger or equal than end cut. */
        const Int32 ERR_BEGIN_CUT_LARGER_THAN_END_CUT = 13;

        /** Two consecutive transitions are overlapping on one clip. */
        const Int32 ERR_OVERLAPPING_TRANSITIONS = 14;

        /** Internal error, type size mismatch. */
        const Int32 ERR_ANALYSIS_DATA_SIZE_TOO_SMALL = 15;

        /** An input 3GPP file is invalid/corrupted. */
        const Int32 ERR_INVALID_3GPP_FILE = 16;

        /** A file contains an unsupported video format. */
        const Int32 ERR_UNSUPPORTED_INPUT_VIDEO_FORMAT = 17;

        /** A file contains an unsupported audio format. */
        const Int32 ERR_UNSUPPORTED_INPUT_AUDIO_FORMAT = 18;

        /** A file format is not supported. */
        const Int32 ERR_AMR_EDITING_UNSUPPORTED = 19;

        /** An input clip has an unexpectedly large Video AU. */
        const Int32 ERR_INPUT_VIDEO_AU_TOO_LARGE = 20;

        /** An input clip has an unexpectedly large Audio AU. */
        const Int32 ERR_INPUT_AUDIO_AU_TOO_LARGE = 21;

        /** An input clip has a corrupted Audio AU. */
        const Int32 ERR_INPUT_AUDIO_CORRUPTED_AU = 22;

        /** The video encoder encountered an Access Unit error. */
        const Int32 ERR_ENCODER_ACCES_UNIT_ERROR = 23;

        /** Unsupported video format for Video Editing. */
        const Int32 ERR_EDITING_UNSUPPORTED_VIDEO_FORMAT = 24;

        /** Unsupported H263 profile for Video Editing. */
        const Int32 ERR_EDITING_UNSUPPORTED_H263_PROFILE = 25;

        /** Unsupported MPEG-4 profile for Video Editing. */
        const Int32 ERR_EDITING_UNSUPPORTED_MPEG4_PROFILE = 26;

        /** Unsupported MPEG-4 RVLC tool for Video Editing. */
        const Int32 ERR_EDITING_UNSUPPORTED_MPEG4_RVLC = 27;

        /** Unsupported audio format for Video Editing. */
        const Int32 ERR_EDITING_UNSUPPORTED_AUDIO_FORMAT = 28;

        /** File contains no supported stream. */
        const Int32 ERR_EDITING_NO_SUPPORTED_STREAM_IN_FILE = 29;

        /** File contains no video stream or an unsupported video stream. */
        const Int32 ERR_EDITING_NO_SUPPORTED_VIDEO_STREAM_IN_FILE = 30;

        /** Internal error, clip analysis version mismatch. */
        const Int32 ERR_INVALID_CLIP_ANALYSIS_VERSION = 31;

        /**
         * At least one of the clip analysis has been generated on another
         * platform (WIN32, ARM, etc.).
         */
        const Int32 ERR_INVALID_CLIP_ANALYSIS_PLATFORM = 32;

        /** Clips don't have the same video format (H263 or MPEG4). */
        const Int32 ERR_INCOMPATIBLE_VIDEO_FORMAT = 33;

        /** Clips don't have the same frame size. */
        const Int32 ERR_INCOMPATIBLE_VIDEO_FRAME_SIZE = 34;

        /** Clips don't have the same MPEG-4 time scale. */
        const Int32 ERR_INCOMPATIBLE_VIDEO_TIME_SCALE = 35;

        /** Clips don't have the same use of MPEG-4 data partitioning. */
        const Int32 ERR_INCOMPATIBLE_VIDEO_DATA_PARTITIONING = 36;

        /** MP3 clips can't be assembled. */
        const Int32 ERR_UNSUPPORTED_MP3_ASSEMBLY = 37;

        /**
         * The input 3GPP file does not contain any supported audio or video
         * track.
         */
        const Int32 ERR_NO_SUPPORTED_STREAM_IN_FILE = 38;

        /**
         * The Volume of the added audio track (AddVolume) must be strictly
         * superior than zero.
         */
        const Int32 ERR_ADDVOLUME_EQUALS_ZERO = 39;

        /**
         * The time at which an audio track is added can't be higher than the
         * input video track duration..
         */
        const Int32 ERR_ADDCTS_HIGHER_THAN_VIDEO_DURATION = 40;

        /** The audio track file format setting is undefined. */
        const Int32 ERR_UNDEFINED_AUDIO_TRACK_FILE_FORMAT = 41;

        /** The added audio track stream has an unsupported format. */
        const Int32 ERR_UNSUPPORTED_ADDED_AUDIO_STREAM = 42;

        /** The audio mixing feature doesn't support the audio track type. */
        const Int32 ERR_AUDIO_MIXING_UNSUPPORTED = 43;

        /** The audio mixing feature doesn't support MP3 audio tracks. */
        const Int32 ERR_AUDIO_MIXING_MP3_UNSUPPORTED = 44;

        /**
         * An added audio track limits the available features: uiAddCts must be
         * 0 and bRemoveOriginal must be true.
         */
        const Int32 ERR_FEATURE_UNSUPPORTED_WITH_AUDIO_TRACK = 45;

        /**
         * An added audio track limits the available features: uiAddCts must be
         * 0 and bRemoveOriginal must be true.
         */
        const Int32 ERR_FEATURE_UNSUPPORTED_WITH_AAC = 46;

        /** Input audio track is not of a type that can be mixed with output. */
        const Int32 ERR_AUDIO_CANNOT_BE_MIXED = 47;

        /** Input audio track is not AMR-NB, so it can't be mixed with output. */
        const Int32 ERR_ONLY_AMRNB_INPUT_CAN_BE_MIXED = 48;

        /**
         * An added EVRC audio track limit the available features: uiAddCts must
         * be 0 and bRemoveOriginal must be true.
         */
        const Int32 ERR_FEATURE_UNSUPPORTED_WITH_EVRC = 49;

        /** H263 profiles other than 0 are not supported. */
        const Int32 ERR_H263_PROFILE_NOT_SUPPORTED = 51;

        /** File contains no video stream or an unsupported video stream. */
        const Int32 ERR_NO_SUPPORTED_VIDEO_STREAM_IN_FILE = 52;

        /** Transcoding of the input file(s) is necessary. */
        const Int32 WAR_TRANSCODING_NECESSARY = 53;

        /**
         * The size of the output file will exceed the maximum configured value.
         */
        const Int32 WAR_MAX_OUTPUT_SIZE_EXCEEDED = 54;

        /** The time scale is too big. */
        const Int32 WAR_TIMESCALE_TOO_BIG = 55;

        /** The year is out of range */
        const Int32 ERR_CLOCK_BAD_REF_YEAR = 56;

        /** The directory could not be opened */
        const Int32 ERR_DIR_OPEN_FAILED = 57;

        /** The directory could not be read */
        const Int32 ERR_DIR_READ_FAILED = 58;

        /** There are no more entries in the current directory */
        const Int32 ERR_DIR_NO_MORE_ENTRY = 59;

        /** The input parameter/s has error */
        const Int32 ERR_PARAMETER = 60;

        /** There is a state machine error */
        const Int32 ERR_STATE = 61;

        /** Memory allocation failed */
        const Int32 ERR_ALLOC = 62;

        /** Context is invalid */
        const Int32 ERR_BAD_CONTEXT = 63;

        /** Context creation failed */
        const Int32 ERR_CONTEXT_FAILED = 64;

        /** Invalid stream ID */
        const Int32 ERR_BAD_STREAM_ID = 65;

        /** Invalid option ID */
        const Int32 ERR_BAD_OPTION_ID = 66;

        /** The option is write only */
        const Int32 ERR_WRITE_ONLY = 67;

        /** The option is read only */
        const Int32 ERR_READ_ONLY = 68;

        /** The feature is not implemented in this version */
        const Int32 ERR_NOT_IMPLEMENTED = 69;

        /** The media type is not supported */
        const Int32 ERR_UNSUPPORTED_MEDIA_TYPE = 70;

        /** No data to be encoded */
        const Int32 WAR_NO_DATA_YET = 71;

        /** No data to be decoded */
        const Int32 WAR_NO_MORE_STREAM = 72;

        /** Time stamp is invalid */
        const Int32 WAR_INVALID_TIME = 73;

        /** No more data to be decoded */
        const Int32 WAR_NO_MORE_AU = 74;

        /** Semaphore timed out */
        const Int32 WAR_TIME_OUT = 75;

        /** Memory buffer is full */
        const Int32 WAR_BUFFER_FULL = 76;

        /** Server has asked for redirection */
        const Int32 WAR_REDIRECT = 77;

        /** Too many streams in input */
        const Int32 WAR_TOO_MUCH_STREAMS = 78;

        /** The file cannot be opened/ written into as it is locked */
        const Int32 ERR_FILE_LOCKED = 79;

        /** The file access mode is invalid */
        const Int32 ERR_FILE_BAD_MODE_ACCESS = 80;

        /** The file pointer points to an invalid location */
        const Int32 ERR_FILE_INVALID_POSITION = 81;

        /** Invalid string */
        const Int32 ERR_STR_BAD_STRING = 94;

        /** The input string cannot be converted */
        const Int32 ERR_STR_CONV_FAILED = 95;

        /** The string size is too large */
        const Int32 ERR_STR_OVERFLOW = 96;

        /** Bad string arguments */
        const Int32 ERR_STR_BAD_ARGS = 97;

        /** The string value is larger than maximum size allowed */
        const Int32 WAR_STR_OVERFLOW = 98;

        /** The string value is not present in this comparison operation */
        const Int32 WAR_STR_NOT_FOUND = 99;

        /** The thread is not started */
        const Int32 ERR_THREAD_NOT_STARTED = 100;

        /** Trancoding done warning */
        const Int32 WAR_TRANSCODING_DONE = 101;

        /** Unsupported mediatype */
        const Int32 WAR_MEDIATYPE_NOT_SUPPORTED = 102;

        /** Input file contains invalid/unsupported streams */
        const Int32 ERR_INPUT_FILE_CONTAINS_NO_SUPPORTED_STREAM = 103;

        /** Invalid input file */
        const Int32 ERR_INVALID_INPUT_FILE = 104;

        /** Invalid output video format */
        const Int32 ERR_UNDEFINED_OUTPUT_VIDEO_FORMAT = 105;

        /** Invalid output video frame size */
        const Int32 ERR_UNDEFINED_OUTPUT_VIDEO_FRAME_SIZE = 106;

        /** Invalid output video frame rate */
        const Int32 ERR_UNDEFINED_OUTPUT_VIDEO_FRAME_RATE = 107;

        /** Invalid output audio format */
        const Int32 ERR_UNDEFINED_OUTPUT_AUDIO_FORMAT = 108;

        /** Invalid video frame size for H.263 */
        const Int32 ERR_INVALID_VIDEO_FRAME_SIZE_FOR_H263 = 109;

        /** Invalid video frame rate for H.263 */
        const Int32 ERR_INVALID_VIDEO_FRAME_RATE_FOR_H263 = 110;

        /** invalid playback duration */
        const Int32 ERR_DURATION_IS_NULL = 111;

        /** Invalid H.263 profile in file */
        const Int32 ERR_H263_FORBIDDEN_IN_MP4_FILE = 112;

        /** Invalid AAC sampling frequency */
        const Int32 ERR_INVALID_AAC_SAMPLING_FREQUENCY = 113;

        /** Audio conversion failure */
        const Int32 ERR_AUDIO_CONVERSION_FAILED = 114;

        /** Invalid trim start and end times */
        const Int32 ERR_BEGIN_CUT_EQUALS_END_CUT = 115;

        /** End time smaller than start time for trim */
        const Int32 ERR_END_CUT_SMALLER_THAN_BEGIN_CUT = 116;

        /** Output file size is small */
        const Int32 ERR_MAXFILESIZE_TOO_SMALL = 117;

        /** Output video bitrate is too low */
        const Int32 ERR_VIDEOBITRATE_TOO_LOW = 118;

        /** Output audio bitrate is too low */
        const Int32 ERR_AUDIOBITRATE_TOO_LOW = 119;

        /** Output video bitrate is too high */
        const Int32 ERR_VIDEOBITRATE_TOO_HIGH = 120;

        /** Output audio bitrate is too high */
        const Int32 ERR_AUDIOBITRATE_TOO_HIGH = 121;

        /** Output file size is too small */
        const Int32 ERR_OUTPUT_FILE_SIZE_TOO_SMALL = 122;

        /** Unknown stream type */
        const Int32 ERR_READER_UNKNOWN_STREAM_TYPE = 123;

        /** Invalid metadata in input stream */
        const Int32 WAR_READER_NO_METADATA = 124;

        /** Invalid file reader info warning */
        const Int32 WAR_READER_INFORMATION_NOT_PRESENT = 125;

        /** Warning to indicate the the writer is being stopped */
        const Int32 WAR_WRITER_STOP_REQ = 131;

        /** Video decoder failed to provide frame for transcoding */
        const Int32 WAR_VIDEORENDERER_NO_NEW_FRAME = 132;

        /** Video deblocking filter is not implemented */
        const Int32 WAR_DEBLOCKING_FILTER_NOT_IMPLEMENTED = 133;

        /** H.263 decoder profile not supported */
        const Int32 ERR_DECODER_H263_PROFILE_NOT_SUPPORTED = 134;

        /** The input file contains unsupported H.263 profile */
        const Int32 ERR_DECODER_H263_NOT_BASELINE = 135;

        /** There is no more space to store the output file */
        const Int32 ERR_NOMORE_SPACE_FOR_FILE = 136;

        /** Internal error. */
        const Int32 ERR_INTERNAL = 255;
    }

    interface IMediaArtistNativeHelperVideoFormat {
        /** No video present in output clip. Used to generate audio only clip */
        const Int32 NO_VIDEO = 0;

        /** H263 video format. */
        const Int32 H263 = 1;

        /** H264 video */
        const Int32 H264 = 2;

        /** MPEG4 video format. */
        const Int32 MPEG4 = 3;

        /** No transcoding. Output video format is same as input video format */
        const Int32 NULL_VIDEO = 254;

        /** Unsupported video format. */
        const Int32 UNSUPPORTED = 255;
    }

    interface IMediaArtistNativeHelperVideoFrameSize {

        const Int32 SIZE_UNDEFINED = -1;

        /** SQCIF 128 x 96 pixels. */
        const Int32 SQCIF = 0;

        /** QQVGA 160 x 120 pixels. */
        const Int32 QQVGA = 1;

        /** QCIF 176 x 144 pixels. */
        const Int32 QCIF = 2;

        /** QVGA 320 x 240 pixels. */
        const Int32 QVGA = 3;

        /** CIF 352 x 288 pixels. */
        const Int32 CIF = 4;

        /** VGA 640 x 480 pixels. */
        const Int32 VGA = 5;

        /** WVGA 800 X 480 pixels */
        const Int32 WVGA = 6;

        /** NTSC 720 X 480 pixels */
        const Int32 NTSC = 7;

        /** 640 x 360 */
        const Int32 nHD = 8;

        /** 854 x 480 */
        const Int32 WVGA16x9 = 9;

        /** 720p 1280 X 720 */
        const Int32 V720p = 10;

        /** W720p 1080 x 720 */
        const Int32 W720p = 11;

        /** S720p 960 x 720 */
        const Int32 S720p = 12;

        /** 1080p 1920 x 1080 */
        const Int32 V1080p = 13;
    }

    interface IMediaArtistNativeHelperVideoFrameRate {
        /** Frame rate of 5 frames per second. */
        const Int32 FR_5_FPS = 0;

        /** Frame rate of 7.5 frames per second. */
        const Int32 FR_7_5_FPS = 1;

        /** Frame rate of 10 frames per second. */
        const Int32 FR_10_FPS = 2;

        /** Frame rate of 12.5 frames per second. */
        const Int32 FR_12_5_FPS = 3;

        /** Frame rate of 15 frames per second. */
        const Int32 FR_15_FPS = 4;

        /** Frame rate of 20 frames per second. */
        const Int32 FR_20_FPS = 5;

        /** Frame rate of 25 frames per second. */
        const Int32 FR_25_FPS = 6;

        /** Frame rate of 30 frames per second. */
        const Int32 FR_30_FPS = 7;
    }

    interface IMediaArtistNativeHelperVideoEffect {

        const Int32 NONE = 0;

        const Int32 FADE_FROM_BLACK = 8;

        const Int32 FADE_TO_BLACK = 16;

        const Int32 EXTERNAL = 256;

        const Int32 BLACK_AND_WHITE = 257;

        const Int32 PINK = 258;

        const Int32 GREEN = 259;

        const Int32 SEPIA = 260;

        const Int32 NEGATIVE = 261;

        const Int32 FRAMING = 262;

        const Int32 TEXT = 263;

        const Int32 ZOOM_IN = 264;

        const Int32 ZOOM_OUT = 265;

        const Int32 FIFTIES = 266;

        const Int32 COLORRGB16 = 267;

        const Int32 GRADIENT = 268;
    }

    interface IMediaArtistNativeHelperVideoTransition {
        /** No transition */
        const Int32 NONE = 0;

        /** Cross fade transition */
        const Int32 CROSS_FADE = 1;

        /** External transition. Currently not available. */
        const Int32 EXTERNAL = 256;

        /** AlphaMagic transition. */
        const Int32 ALPHA_MAGIC = 257;

        /** Slide transition. */
        const Int32 SLIDE_TRANSITION = 258;

        /** Fade to black transition. */
        const Int32 FADE_BLACK = 259;
    }

    interface IMediaArtistNativeHelperSlideDirection {

        /** Right out left in. */
        const Int32 RIGHT_OUT_LEFT_IN = 0;

        /** Left out right in. */
        const Int32 LEFT_OUT_RIGTH_IN = 1;

        /** Top out bottom in. */
        const Int32 TOP_OUT_BOTTOM_IN = 2;

        /** Bottom out top in */
        const Int32 BOTTOM_OUT_TOP_IN = 3;
    }

    interface IMediaArtistNativeHelperAudioTransition {
        /** No audio transition. */
        const Int32 NONE = 0;

        /** Cross-fade audio transition. */
        const Int32 CROSS_FADE = 1;
    }

    interface IMediaArtistNativeHelperTransitionBehaviour {

        /** The transition uses an increasing speed. */
        const Int32 SPEED_UP = 0;

        /** The transition uses a linear (constant) speed. */
        const Int32 LINEAR = 1;

        /** The transition uses a decreasing speed. */
        const Int32 SPEED_DOWN = 2;

        /**
         * The transition uses a constant speed, but slows down in the middle
         * section.
         */
        const Int32 SLOW_MIDDLE = 3;

        /**
         * The transition uses a constant speed, but increases speed in the
         * middle section.
         */
        const Int32 FAST_MIDDLE = 4;
    }

    interface IMediaArtistNativeHelperAudioEffect {
        /** No audio effect. */
        const Int32 NONE = 0;

        /** Fade-in effect. */
        const Int32 FADE_IN = 8;

        /** Fade-out effect. */
        const Int32 FADE_OUT = 16;
    }

    interface IMediaArtistNativeHelperNativeGetPixelsListCallback{
        OnThumbnail(
            [in] Int32 index);
    }

    } // namespace videoeditor
    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}