
module
{
    interface Elastos.Droid.Media.ITimedText;
    interface Elastos.Droid.Media.IMetadata;
    interface Elastos.Droid.Media.IMediaPlayer;
    interface Elastos.Droid.View.ISurfaceHolder;
    using interface Elastos.Net.IInetSocketAddress;
    interface Elastos.Droid.View.ISurface;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Graphics.IBitmap;

    using interface Elastos.IO.IFileDescriptor;
    interface Elastos.Utility.IObjectStringMap;

    namespace Elastos {
    namespace Droid {
    namespace Media {

    /**
     * Class for MediaPlayer to return each audio/video/subtitle track's metadata.
     *
     * @see android.media.MediaPlayer#getTrackInfo
     */
    interface IMediaPlayerTrackInfo { // implements Parcelable

        const Int32 MEDIA_TRACK_TYPE_UNKNOWN = 0;
        const Int32 MEDIA_TRACK_TYPE_VIDEO = 1;
        const Int32 MEDIA_TRACK_TYPE_AUDIO = 2;
        const Int32 MEDIA_TRACK_TYPE_TIMEDTEXT = 3;

        /**
         * Gets the track type.
         * @return TrackType which indicates if the track is video, audio, timed text.
         */
        GetTrackType(
            [out] Int32* type);

        SetTrackType(
            [in] Int32 type);

        /**
         * Gets the language code of the track.
         * @return a language code in either way of ISO-639-1 or ISO-639-2.
         * When the language is unknown or could not be determined,
         * ISO-639-2 language code, "und", is returned.
         */
        GetLanguage(
            [out] String* language);

        SetLanguage(
            [in] String language);
    }

    /*Start by Bevis. Detect http data source from other application.*/
    interface IDlnaSourceDetector {
        OnSourceDetected(
            [in] String url);
    }

    /**
     * Interface definition for a callback to be invoked when the media
     * source is ready for playback.
     */
    interface IMediaPlayerOnPreparedListener {
        /**
         * Called when the media file is ready for playback.
         *
         * @param mp the MediaPlayer that is ready for playback
         */
        OnPrepared(
            [in] IMediaPlayer* mp);
    }

    /**
     * Interface definition for a callback to be invoked when playback of
     * a media source has completed.
     */
    interface IMediaPlayerOnCompletionListener {
        /**
         * Called when the end of a media source is reached during playback.
         *
         * @param mp the MediaPlayer that reached the end of the file
         */
        OnCompletion(
            [in] IMediaPlayer* mp);
    }

    /**
     * Interface definition of a callback to be invoked indicating buffering
     * status of a media resource being streamed over the network.
     */
    interface IMediaPlayerOnBufferingUpdateListener {
        /**
         * Called to update status in buffering a media stream.
         *
         * @param mp      the MediaPlayer the update pertains to
         * @param percent the percentage (0-100) of the buffer
         *                that has been filled thus far
         */
        OnBufferingUpdate(
            [in] IMediaPlayer* mp,
            [in] Int32 percent);
    }

    /**
     * Interface definition of a callback to be invoked indicating
     * the completion of a seek operation.
     */
    interface IMediaPlayerOnSeekCompleteListener {
        /**
         * Called to indicate the completion of a seek operation.
         *
         * @param mp the MediaPlayer that issued the seek operation
         */
        OnSeekComplete(
            [in] IMediaPlayer* mp);
    }

    /**
     * Interface definition of a callback to be invoked when the
     * video size is first known or updated
     */
    interface IMediaPlayerOnVideoSizeChangedListener {
        /**
         * Called to indicate the video size
         *
         * @param mp        the MediaPlayer associated with this callback
         * @param width     the width of the video
         * @param height    the height of the video
         */
        OnVideoSizeChanged(
            [in] IMediaPlayer* mp,
            [in] Int32 width,
            [in] Int32 height);
    }

    /**
     * Interface definition of a callback to be invoked when a
     * timed text is available for display.
     */
    interface IMediaPlayerOnTimedTextListener {
        /**
         * Called to indicate an avaliable timed text
         *
         * @param mp             the MediaPlayer associated with this callback
         * @param text           the timed text sample which contains the text
         *                       needed to be displayed and the display format.
         */
        OnTimedText(
            [in] IMediaPlayer* mp,
            [in] ITimedText* text);
    }

    /**
     * Interface definition of a callback to be invoked when there
     * has been an error during an asynchronous operation (other errors
     * will throw exceptions at method call time).
     */
    interface IMediaPlayerOnErrorListener {
        /**
         * Called to indicate an error.
         *
         * @param mp      the MediaPlayer the error pertains to
         * @param what    the type of error that has occurred:
         * <ul>
         * <li>{@link #MEDIA_ERROR_UNKNOWN}
         * <li>{@link #MEDIA_ERROR_SERVER_DIED}
         * </ul>
         * @param extra an extra code, specific to the error. Typically
         * implementation dependant.
         * @return True if the method handled the error, FALSE if it didn't.
         * Returning FALSE, or not having an OnErrorListener at all, will
         * cause the OnCompletionListener to be called.
         */
        OnError(
            [in] IMediaPlayer* mp,
            [in] Int32 what,
            [in] Int32 extra,
            [out] Boolean* result);
    }

    /**
     * Interface definition of a callback to be invoked to communicate some
     * info and/or warning about the media or its playback.
     */
    interface IMediaPlayerOnInfoListener {
        /**
         * Called to indicate an info or a warning.
         *
         * @param mp      the MediaPlayer the info pertains to.
         * @param what    the type of info or warning.
         * <ul>
         * <li>{@link #MEDIA_INFO_UNKNOWN}
         * <li>{@link #MEDIA_INFO_VIDEO_TRACK_LAGGING}
         * <li>{@link #MEDIA_INFO_BAD_INTERLEAVING}
         * <li>{@link #MEDIA_INFO_NOT_SEEKABLE}
         * <li>{@link #MEDIA_INFO_METADATA_UPDATE}
         * </ul>
         * @param extra an extra code, specific to the info. Typically
         * implementation dependant.
         * @return True if the method handled the info, FALSE if it didn't.
         * Returning FALSE, or not having an OnErrorListener at all, will
         * cause the info to be discarded.
         */
        OnInfo(
            [in] IMediaPlayer* mp,
            [in] Int32 what,
            [in] Int32 extra,
            [out] Boolean* result);
    }

    [deprecated]
    interface IMediaPlayerSubInfo {
        SetName(
            [in] ArrayOf<Byte>* name);

        GetName(
            [out, callee] ArrayOf<Byte>* name);

        SetCharset(
            [in] String charset);

        GetCharset(
            [out] String* charset);

        SetType(
            [in] Int32 type);

        GetType(
            [out] Int32* type);
    }

    interface IMediaPlayerSubInfoN {
        SetLang(
            [in] String lang);

        GetLang(
            [out] String* lang);

        SetFormat(
            [in] String format);

        GetFormat(
            [out] String* format);

        SetInline(
            [in] Int32 inline);

        GetInline(
            [out] Int32* inline);

        SetNum(
            [in] Int32 num);

        GetNum(
            [out] Int32* num);
    }

    interface IMediaPlayerAudioInfoN {
        SetLang(
            [in] String lang);

        GetLang(
            [out] String* lang);

        SetFormat(
            [in] String format);

        GetFormat(
            [out] String* format);

        SetChannlel(
            [in] Int32 channlel);

        GetChannlel(
            [out] Int32* channlel);

        SetAudiochannel(
            [in] Int32 audiochannel);

        GetAudiochannel(
            [out] Int32* audiochannel);

        SetSample(
            [in] Int32 sample);

        GetSample(
            [out] Int32* sample);

        SetNum(
            [in] Int32 num);

        GetNum(
            [out] Int32* num);
    }

    [deprecated]
    interface ITrackInfoVendor {
        SetName(
            [in] ArrayOf<Byte>* name);

        GetName(
            [out, callee] ArrayOf<Byte>* name);

        SetCharset(
            [in] String charset);

        GetCharset(
            [out] String* charset);
    }

    [local]
    interface IMediaPlayer {
        /**
           Constant to retrieve only the new metadata since the last
           call.
           // FIXME: unhide.
           // FIXME: add link to getMetadata(boolean, boolean)
           {@hide}
         */
        const Boolean METADATA_UPDATE_ONLY = TRUE;

        /**
           Constant to retrieve all the metadata.
           // FIXME: unhide.
           // FIXME: add link to getMetadata(boolean, boolean)
           {@hide}
         */
        const Boolean METADATA_ALL = FALSE;

        /**
           Constant to enable the metadata filter during retrieval.
           // FIXME: unhide.
           // FIXME: add link to getMetadata(boolean, boolean)
           {@hide}
         */
        const Boolean APPLY_METADATA_FILTER = TRUE;

        /**
           Constant to disable the metadata filter during retrieval.
           // FIXME: unhide.
           // FIXME: add link to getMetadata(boolean, boolean)
           {@hide}
         */
        const Boolean BYPASS_METADATA_FILTER = FALSE;

        /**
         *  screen name
         */
        const Int32 MASTER_SCREEN = 0;
        const Int32 SLAVE_SCREEN  = 1;

        /* Do not change these values without updating their counterparts
         * in include/media/mediaplayer.h!
         */
        /** Unspecified media player error.
         * @see android.media.MediaPlayer.OnErrorListener
         */
        const Int32 MEDIA_ERROR_UNKNOWN = 1;

        /** Media server died. In this case, the application must release the
         * MediaPlayer object and instantiate a new one.
         * @see android.media.MediaPlayer.OnErrorListener
         */
        const Int32 MEDIA_ERROR_SERVER_DIED = 100;

        /** The video is streamed and its container is not valid for progressive
         * playback i.e the video's index (e.g moov atom) is not at the start of the
         * file.
         * @see android.media.MediaPlayer.OnErrorListener
         */
        const Int32 MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK = 200;

        /** File or network related operation errors. */
        const Int32 MEDIA_ERROR_IO = -1004;
        /** Bitstream is not conforming to the related coding standard or file spec. */
        const Int32 MEDIA_ERROR_MALFORMED = -1007;
        /** Bitstream is conforming to the related coding standard or file spec, but
         * the media framework does not support the feature. */
        const Int32 MEDIA_ERROR_UNSUPPORTED = -1010;
        /** Some operation takes too long to complete, usually more than 3-5 seconds. */
        const Int32 MEDIA_ERROR_TIMED_OUT = -110;

        /* Do not change these values without updating their counterparts
         * in include/media/mediaplayer.h!
         */
        /** Unspecified media player info.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_UNKNOWN = 1;

        /** The player was started because it was used as the next player for another
         * player, which just completed playback.
         * @see android.media.MediaPlayer.OnInfoListener
         * @hide
         */
        const Int32 MEDIA_INFO_STARTED_AS_NEXT = 2;

        /** The player just pushed the very first video frame for rendering.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_VIDEO_RENDERING_START = 3;

        /** The video is too complex for the decoder: it can't decode frames fast
         *  enough. Possibly only the audio plays fine at this stage.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_VIDEO_TRACK_LAGGING = 700;

        /** MediaPlayer is temporarily pausing playback internally in order to
         * buffer more data.
         */
        const Int32 MEDIA_INFO_BUFFERING_START = 701;

        /** MediaPlayer is resuming playback after filling buffers.
         */
        const Int32 MEDIA_INFO_BUFFERING_END = 702;

        /** Bad interleaving means that a media has been improperly interleaved or
         * not interleaved at all, e.g has all the video samples first then all the
         * audio ones. Video is playing but a lot of disk seeks may be happening.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_BAD_INTERLEAVING = 800;

        /** The media cannot be seeked (e.g live stream)
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_NOT_SEEKABLE = 801;

        /** A new set of metadata is available.
         * @see android.media.MediaPlayer.OnInfoListener
         */
        const Int32 MEDIA_INFO_METADATA_UPDATE = 802;

        /** Failed to handle timed text track properly.
         * @see android.media.MediaPlayer.OnInfoListener
         *
         * {@hide}
         */
        const Int32 MEDIA_INFO_TIMED_TEXT_ERROR = 900;

        /** MediaPlayer cannot connect to network while playing.
         * @see android.media.MediaPlayer.OnInfoListener
         *
         * {@hide}
         */
        const Int32 MEDIA_INFO_NETWORK_ERROR = 901;

        /* expend interfaces about subtitle, track and so on */
        const Int32 SUBTITLE_TYPE_TEXT = 0;
        const Int32 SUBTITLE_TYPE_BITMAP = 1;

        /* Do not change these video scaling mode values below without updating
         * their counterparts in system/window.h! Please do not forget to update
         * {@link #isVideoScalingModeSupported} when new video scaling modes
         * are added.
         */
        /**
         * Specifies a video scaling mode. The content is stretched to the
         * surface rendering area. When the surface has the same aspect ratio
         * as the content, the aspect ratio of the content is maintained;
         * otherwise, the aspect ratio of the content is not maintained when video
         * is being rendered. Unlike {@link #VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING},
         * there is no content cropping with this video scaling mode.
         */
        const Int32 VIDEO_SCALING_MODE_SCALE_TO_FIT = 1;

        /**
         * Specifies a video scaling mode. The content is scaled, maintaining
         * its aspect ratio. The whole surface area is always used. When the
         * aspect ratio of the content is the same as the surface, no content
         * is cropped; otherwise, content is cropped to fit the surface.
         */
        const Int32 VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING = 2;

        /* Do not change these values (starting with KEY_PARAMETER) without updating
         * their counterparts in include/media/mediaplayer.h!
         */

        // There are currently no defined keys usable from Java with get*Parameter.
        // But if any keys are defined, the order must be kept in sync with include/media/mediaplayer.h.
        // private static final int KEY_PARAMETER_... = ...;

        /*
        info video surface layout info,
        format:left=%d;top=%d;right=%d,...
        */
        const Int32 KEY_PARAMETER_AML_VIDEO_POSITION_INFO = 2000;

        /*
        AMLOGIC_PLAYER?
        or others
        */
        const Int32 KEY_PARAMETER_AML_PLAYER_TYPE_STR = 2001;

        /*
            int value;
        */
        const Int32 KEY_PARAMETER_AML_PLAYER_VIDEO_OUT_TYPE = 2002;

        //amlogic private API,set only.
        //switch sound track
        const Int32 KEY_PARAMETER_AML_PLAYER_SWITCH_SOUND_TRACK = 2003;//string,refer to lmono,rmono,stereo,set only
        //switch audio track
        const Int32 KEY_PARAMETER_AML_PLAYER_SWITCH_AUDIO_TRACK = 2004;//string,refer to audio track index,set only

        const Int32 KEY_PARAMETER_AML_PLAYER_TRICKPLAY_FORWARD=2005;//string,refer to forward:speed
        const Int32 KEY_PARAMETER_AML_PLAYER_TRICKPLAY_BACKWARD=2006;//string,refer to  backward:speed
        const Int32 KEY_PARAMETER_AML_PLAYER_FORCE_HARD_DECODE=2007;//string,refer to mp3,etc.
        const Int32 KEY_PARAMETER_AML_PLAYER_FORCE_SOFT_DECODE=2008;//string,refer to mp3,etc.

        const Int32 VIDEO_OUT_SOFT_RENDER = 0;
        const Int32 VIDEO_OUT_HARDWARE  =   1;

        /* Do not change these values without updating their counterparts
         * in include/media/stagefright/MediaDefs.h and media/libstagefright/MediaDefs.cpp!
         */
        /**
         * MIME type for SubRip (SRT) container. Used in addTimedTextSource APIs.
         */
        const String MEDIA_MIMETYPE_TEXT_SUBRIP = "application/x-subrip";

        /**
         * charset list
         */
        const String CHARSET_UNKNOWN                   = "UNKNOWN";                       //??????????
        const String CHARSET_BIG5                      = "Big5";                          //????
        const String CHARSET_BIG5_HKSCS                = "Big5-HKSCS";                    //
        const String CHARSET_BOCU_1                    = "BOCU-1";                        //
        const String CHARSET_CESU_8                    = "CESU-8";                        //
        const String CHARSET_CP864                     = "cp864";                         //
        const String CHARSET_EUC_JP                    = "EUC-JP";                        //
        const String CHARSET_EUC_KR                    = "EUC-KR";                        //
        const String CHARSET_GB18030                   = "GB18030";                       //
        const String CHARSET_GBK                       = "GBK";                           //????
        const String CHARSET_HZ_GB_2312                = "HZ-GB-2312";                    //
        const String CHARSET_ISO_2022_CN               = "ISO-2022-CN";                   //
        const String CHARSET_ISO_2022_CN_EXT           = "ISO-2022-CN-EXT";               //
        const String CHARSET_ISO_2022_JP               = "ISO-2022-JP";                   //
        const String CHARSET_ISO_2022_KR               = "ISO-2022-KR";                   //??
        const String CHARSET_ISO_8859_1                = "ISO-8859-1";                    //????
        const String CHARSET_ISO_8859_10               = "ISO-8859-10";                   //??????????
        const String CHARSET_ISO_8859_13               = "ISO-8859-13";                   //??????
        const String CHARSET_ISO_8859_14               = "ISO-8859-14";                   //??????
        const String CHARSET_ISO_8859_15               = "ISO-8859-15";                   //??????????????
        const String CHARSET_ISO_8859_16               = "ISO-8859-16";                   //????????
        const String CHARSET_ISO_8859_2                = "ISO-8859-2";                    //????
        const String CHARSET_ISO_8859_3                = "ISO-8859-3";                    //????
        const String CHARSET_ISO_8859_4                = "ISO-8859-4";                    //????
        const String CHARSET_ISO_8859_5                = "ISO-8859-5";                    //?????
        const String CHARSET_ISO_8859_6                = "ISO-8859-6";                    //????
        const String CHARSET_ISO_8859_7                = "ISO-8859-7";                    //???
        const String CHARSET_ISO_8859_8                = "ISO-8859-8";                    //????
        const String CHARSET_ISO_8859_9                = "ISO-8859-9";                    //????
        const String CHARSET_KOI8_R                    = "KOI8-R";                        //??
        const String CHARSET_KOI8_U                    = "KOI8-U";                        //
        const String CHARSET_MACINTOSH                 = "macintosh";                     //
        const String CHARSET_SCSU                      = "SCSU";                          //
        const String CHARSET_SHIFT_JIS                 = "Shift_JIS";                     //??
        const String CHARSET_TIS_620                   = "TIS-620";                       //??
        const String CHARSET_US_ASCII                  = "US-ASCII";                      //
        const String CHARSET_UTF_16                    = "UTF-16";                        //
        const String CHARSET_UTF_16BE                  = "UTF-16BE";                      //UTF16 big endian
        const String CHARSET_UTF_16LE                  = "UTF-16LE";                      //UTF16 little endian
        const String CHARSET_UTF_32                    = "UTF-32";                        //
        const String CHARSET_UTF_32BE                  = "UTF-32BE";                      //
        const String CHARSET_UTF_32LE                  = "UTF-32LE";                      //
        const String CHARSET_UTF_7                     = "UTF-7";                         //
        const String CHARSET_UTF_8                     = "UTF-8";                         //UTF8
        const String CHARSET_WINDOWS_1250              = "windows-1250";                  //??
        const String CHARSET_WINDOWS_1251              = "windows-1251";                  //????
        const String CHARSET_WINDOWS_1252              = "windows-1252";                  //????
        const String CHARSET_WINDOWS_1253              = "windows-1253";                  //???
        const String CHARSET_WINDOWS_1254              = "windows-1254";                  //????
        const String CHARSET_WINDOWS_1255              = "windows-1255";                  //????
        const String CHARSET_WINDOWS_1256              = "windows-1256";                  //????
        const String CHARSET_WINDOWS_1257              = "windows-1257";                  //?????
        const String CHARSET_WINDOWS_1258              = "windows-1258";                  //??
        const String CHARSET_X_DOCOMO_SHIFT_JIS_2007   = "x-docomo-shift_jis-2007";       //
        const String CHARSET_X_GSM_03_38_2000          = "x-gsm-03.38-2000";              //
        const String CHARSET_X_IBM_1383_P110_1999      = "x-ibm-1383_P110-1999";          //
        const String CHARSET_X_IMAP_MAILBOX_NAME       = "x-IMAP-mailbox-name";           //
        const String CHARSET_X_ISCII_BE                = "x-iscii-be";                    //
        const String CHARSET_X_ISCII_DE                = "x-iscii-de";                    //
        const String CHARSET_X_ISCII_GU                = "x-iscii-gu";                    //
        const String CHARSET_X_ISCII_KA                = "x-iscii-ka";                    //
        const String CHARSET_X_ISCII_MA                = "x-iscii-ma";                    //
        const String CHARSET_X_ISCII_OR                = "x-iscii-or";                    //
        const String CHARSET_X_ISCII_PA                = "x-iscii-pa";                    //
        const String CHARSET_X_ISCII_TA                = "x-iscii-ta";                    //
        const String CHARSET_X_ISCII_TE                = "x-iscii-te";                    //
        const String CHARSET_X_ISO_8859_11_2001        = "x-iso-8859_11-2001";            //
        const String CHARSET_X_JAVAUNICODE             = "x-JavaUnicode";                 //
        const String CHARSET_X_KDDI_SHIFT_JIS_2007     = "x-kddi-shift_jis-2007";         //
        const String CHARSET_X_MAC_CYRILLIC            = "x-mac-cyrillic";                //
        const String CHARSET_X_SOFTBANK_SHIFT_JIS_2007 = "x-softbank-shift_jis-2007";     //
        const String CHARSET_X_UNICODEBIG              = "x-UnicodeBig";                  //
        const String CHARSET_X_UTF_16LE_BOM            = "x-UTF-16LE-BOM";                //
        const String CHARSET_X_UTF16_OPPOSITEENDIAN    = "x-UTF16_OppositeEndian";        //
        const String CHARSET_X_UTF16_PLATFORMENDIAN    = "x-UTF16_PlatformEndian";        //
        const String CHARSET_X_UTF32_OPPOSITEENDIAN    = "x-UTF32_OppositeEndian";        //
        const String CHARSET_X_UTF32_PLATFORMENDIAN    = "x-UTF32_PlatformEndian";        //

        /*
         * input 3D picture format list.
         * defined by ChenXiaoChuan.
         */
        const Int32 PICTURE_3D_MODE_NONE                    = 0;        //* 2D
        const Int32 PICTURE_3D_MODE_DOUBLE_STREAM           = 1;        //* ????
        const Int32 PICTURE_3D_MODE_SIDE_BY_SIDE            = 2;        //* ????
        const Int32 PICTURE_3D_MODE_TOP_TO_BOTTOM           = 3;        //* ????
        const Int32 PICTURE_3D_MODE_LINE_INTERLEAVE         = 4;        //* ?????
        const Int32 PICTURE_3D_MODE_COLUME_INTERLEAVE       = 5;        //* ?????

        /*
         * 3D picture display method, defined how to display pictures.
         * defined by ChenXiaoChuan.
         */
        const Int32 DISPLAY_3D_MODE_2D              = 0;    //* ??2D??,??????,??????,?????????,?????
        const Int32 DISPLAY_3D_MODE_3D              = 1;    //* ??3D??
        const Int32 DISPLAY_3D_MODE_HALF_PICTURE    = 2;    //* ????,??????????????
        const Int32 DISPLAY_3D_MODE_ANAGLAGH        = 3;    //* ??????,???????????????????????

        /*
         * anaglagh type list
         */
        const Int32 ANAGLAGH_RED_BLUE       = 0;
        const Int32 ANAGLAGH_RED_GREEN      = 1;
        const Int32 ANAGLAGH_RED_CYAN       = 2;
        const Int32 ANAGLAGH_COLOR          = 3;
        const Int32 ANAGLAGH_HALF_COLOR     = 4;
        const Int32 ANAGLAGH_OPTIMIZED      = 5;
        const Int32 ANAGLAGH_YELLOW_BLUE    = 6;

        /* set audio channel mute */
        const Int32 AUDIO_CHANNEL_MUTE_NONE  = 0;
        const Int32 AUDIO_CHANNEL_MUTE_LEFT  = 1;
        const Int32 AUDIO_CHANNEL_MUTE_RIGHT = 2;
        const Int32 AUDIO_CHANNEL_MUTE_ALL   = 3;

        const Int32 AUDIO_DATA_MODE_PCM       = 1;
        const Int32 AUDIO_DATA_MODE_HDMI_RAW  = 2;
        const Int32 AUDIO_DATA_MODE_SPDIF_RAW = 3;

        /**
         * Create a request parcel which can be routed to the native media
         * player using {@link #invoke(Parcel, Parcel)}. The Parcel
         * returned has the proper InterfaceToken set. The caller should
         * not overwrite that token, i.e it can only append data to the
         * Parcel.
         *
         * @return A parcel suitable to hold a request for the native
         * player.
         * {@hide}
         */
        NewRequest(
            [out] IParcel** parcel);

        /**
         * Invoke a generic method on the native player using opaque
         * parcels for the request and reply. Both payloads' format is a
         * convention between the java caller and the native player.
         * Must be called after setDataSource to make sure a native player
         * exists.
         *
         * @param request Parcel with the data for the extension. The
         * caller must use {@link #newRequest()} to get one.
         *
         * @param reply Output parcel with the data returned by the
         * native player.
         *
         * @return The status code see utils/Errors.h
         * {@hide}
         */
        Invoke(
            [in] IParcel* request,
            [in] IParcel* reply);

        /**
         * Sets the SurfaceHolder to use for displaying the video portion of the media.
         * This call is optional. Not calling it when playing back a video will
         * result in only the audio track being played.
         *
         * @param sh the SurfaceHolder to use for video display
         */
        SetDisplay(
            [in] ISurfaceHolder* sh);

        /**
         * Sets the {@link Surface} to be used as the sink for the video portion of
         * the media. This is similar to {@link #setDisplay(SurfaceHolder)}, but
         * does not support {@link #setScreenOnWhilePlaying(boolean)}.  Setting a
         * Surface will un-set any Surface or SurfaceHolder that was previously set.
         * A null surface will result in only the audio track being played.
         *
         * If the Surface sends frames to a {@link SurfaceTexture}, the timestamps
         * returned from {@link SurfaceTexture#getTimestamp()} will have an
         * unspecified zero point.  These timestamps cannot be directly compared
         * between different media sources, different instances of the same media
         * source, or multiple runs of the same program.  The timestamp is normally
         * monotonically increasing and is unaffected by time-of-day adjustments,
         * but it is reset when the position is set.
         *
         * @param surface The {@link Surface} to be used for the video portion of
         * the media.
         */
        SetSurface(
            [in] ISurface* surface);

        /**
         * Sets video scaling mode. To make the target video scaling mode
         * effective during playback, this method must be called after
         * data source is set. If not called, the default video
         * scaling mode is {@link #VIDEO_SCALING_MODE_SCALE_TO_FIT}.
         *
         * <p> The supported video scaling modes are:
         * <ul>
         * <li> {@link #VIDEO_SCALING_MODE_SCALE_TO_FIT}
         * <li> {@link #VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING}
         * </ul>
         *
         * @param mode target video scaling mode. Most be one of the supported
         * video scaling modes; otherwise, IllegalArgumentException will be thrown.
         *
         * @see MediaPlayer#VIDEO_SCALING_MODE_SCALE_TO_FIT
         * @see MediaPlayer#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING
         */
        SetVideoScalingMode(
            [in] Int32 mode);

        /**
         * Sets the data source as a content Uri.
         *
         * @param context the Context to use when resolving the Uri
         * @param uri the Content URI of the data you want to play
         * @throws IllegalStateException if it is called in an invalid state
         */
        SetDataSource(
            [in] IContext* ctx,
            [in] IUri* uri);

        /**
         * Sets the data source as a content Uri.
         *
         * @param context the Context to use when resolving the Uri
         * @param uri the Content URI of the data you want to play
         * @param headers the headers to be sent together with the request for the data
         * @throws IllegalStateException if it is called in an invalid state
         * @hide pending API council
         */
        SetDataSourceEx(
            [in] IContext* ctx,
            [in] IUri* uri,
            [in] IObjectStringMap* headers);

        /**
         * Sets the data source (file-path or http/rtsp URL) to use.
         *
         * @param path the path of the file, or the http/rtsp URL of the stream you want to play
         * @throws IllegalStateException if it is called in an invalid state
         */
        SetDataSourceEx2(
            [in] String path);

        /**
         * Sets the data source (file-path or http/rtsp URL) to use.
         *
         * @param path the path of the file, or the http/rtsp URL of the stream you want to play
         * @param headers the headers associated with the http request for the stream you want to play
         * @throws IllegalStateException if it is called in an invalid state
         * @hide pending API council
         */
        SetDataSourceEx3(
            [in] String path,
            [in] IObjectStringMap* headers);

        /**
         * Sets the data source (FileDescriptor) to use. It is the caller's responsibility
         * to close the file descriptor. It is safe to do so as soon as this call returns.
         *
         * @param fd the FileDescriptor for the file you want to play
         * @throws IllegalStateException if it is called in an invalid state
         */
        SetDataSourceEx4(
            [in] IFileDescriptor* fd);

        /**
         * Sets the data source (FileDescriptor) to use.  The FileDescriptor must be
         * seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility
         * to close the file descriptor. It is safe to do so as soon as this call returns.
         *
         * @param fd the FileDescriptor for the file you want to play
         * @param offset the offset into the file where the data to be played starts, in bytes
         * @param length the length in bytes of the data to be played
         * @throws IllegalStateException if it is called in an invalid state
         */
        SetDataSourceEx5(
            [in] IFileDescriptor* fd,
            [in] Int64 offset,
            [in] Int64 length);

        /**
         * Prepares the player for playback, synchronously.
         *
         * After setting the datasource and the display surface, you need to either
         * call prepare() or prepareAsync(). For files, it is OK to call prepare(),
         * which blocks until MediaPlayer is ready for playback.
         *
         * @throws IllegalStateException if it is called in an invalid state
         */
        Prepare();

        /**
         * Prepares the player for playback, asynchronously.
         *
         * After setting the datasource and the display surface, you need to either
         * call prepare() or prepareAsync(). For streams, you should call prepareAsync(),
         * which returns immediately, rather than blocking until enough data has been
         * buffered.
         *
         * @throws IllegalStateException if it is called in an invalid state
         */
        PrepareAsync();

        /**
         * Starts or resumes playback. If playback had previously been paused,
         * playback will continue from where it was paused. If playback had
         * been stopped, or never started before, playback will start at the
         * beginning.
         *
         * @throws IllegalStateException if it is called in an invalid state
         */
        Start();

        /**
         * Stops playback after playback has been stopped or paused.
         *
         * @throws IllegalStateException if the internal player engine has not been
         * initialized.
         */
        Stop();

        /**
         * Pauses playback. Call start() to resume.
         *
         * @throws IllegalStateException if the internal player engine has not been
         * initialized.
         */
        Pause();

        /**
         * Set the low-level power management behavior for this MediaPlayer.  This
         * can be used when the MediaPlayer is not playing through a SurfaceHolder
         * set with {@link #setDisplay(SurfaceHolder)} and thus can use the
         * high-level {@link #setScreenOnWhilePlaying(Boolean)} feature.
         *
         * <p>This function has the MediaPlayer access the low-level power manager
         * service to control the device's power usage while playing is occurring.
         * The parameter is a combination of {@link android.os.PowerManager} wake flags.
         * Use of this method requires {@link android.Manifest.permission#WAKE_LOCK}
         * permission.
         * By default, no attempt is made to keep the device awake during playback.
         *
         * @param context the Context to use
         * @param mode    the power/wake mode to set
         * @see android.os.PowerManager
         */
        SetWakeMode(
            [in] IContext* ctx,
            [in] Int32 mode);

        /**
         * Control whether we should use the attached SurfaceHolder to keep the
         * screen on while video playback is occurring.  This is the preferred
         * method over {@link #setWakeMode} where possible, since it doesn't
         * require that the application have permission for low-level wake lock
         * access.
         *
         * @param screenOn Supply TRUE to keep the screen on, FALSE to allow it
         * to turn off.
         */
        SetScreenOnWhilePlaying(
            [in] Boolean screenOn);

        /**
         * Returns the width of the video.
         *
         * @return the width of the video, or 0 if there is no video,
         * no display surface was set, or the width has not been determined
         * yet. The OnVideoSizeChangedListener can be registered via
         * {@link #setOnVideoSizeChangedListener(OnVideoSizeChangedListener)}
         * to provide a notification when the width is available.
         */
        GetVideoWidth(
            [out] Int32* width);

        /**
         * Returns the height of the video.
         *
         * @return the height of the video, or 0 if there is no video,
         * no display surface was set, or the height has not been determined
         * yet. The OnVideoSizeChangedListener can be registered via
         * {@link #setOnVideoSizeChangedListener(OnVideoSizeChangedListener)}
         * to provide a notification when the height is available.
         */
        GetVideoHeight(
            [out] Int32* height);

        /**
         * Checks whether the MediaPlayer is playing.
         *
         * @return true if currently playing, false otherwise
         */
        IsPlaying(
            [out] Boolean* isPlaying);

        /**
         * Seeks to specified time position.
         *
         * @param msec the offset in milliseconds from the start to seek to
         * @throws IllegalStateException if the internal player engine has not been
         * initialized
         */
        SeekTo(
            [in] Int32 msec);

        /**
         * Gets the current playback position.
         *
         * @return the current position in milliseconds
         */
        GetCurrentPosition(
            [out] Int32* position);

        /**
         * Gets the duration of the file.
         *
         * @return the duration in milliseconds
         */
        GetDuration(
            [out] Int32* duration);

        /**
         * Gets the media metadata.
         *
         * @param update_only controls whether the full set of available
         * metadata is returned or just the set that changed since the
         * last call. See {@see #METADATA_UPDATE_ONLY} and {@see
         * #METADATA_ALL}.
         *
         * @param apply_filter if TRUE only metadata that matches the
         * filter is returned. See {@see #APPLY_METADATA_FILTER} and {@see
         * #BYPASS_METADATA_FILTER}.
         *
         * @return The metadata, possibly empty. NULL if an error occured.
         // FIXME: unhide.
         * {@hide}
         */
        GetMetadata(
            [in] Boolean update_only,
            [in] Boolean apply_filter,
            [out] IMetadata** metadata);

        /**
         * Set a filter for the metadata update notification and update
         * retrieval. The caller provides 2 set of metadata keys, allowed
         * and blocked. The blocked set always takes precedence over the
         * allowed one.
         * Metadata.MATCH_ALL and Metadata.MATCH_NONE are 2 sets available as
         * shorthands to allow/block all or no metadata.
         *
         * By default, there is no filter set.
         *
         * @param allow Is the set of metadata the client is interested
         *              in receiving new notifications for.
         * @param block Is the set of metadata the client is not interested
         *              in receiving new notifications for.
         *
         // FIXME: unhide.
         * {@hide}
         */
        SetMetadataFilter(
            [in] IObjectContainer* allow,
            [in] IObjectContainer* block);

        /**
         * Set the MediaPlayer to start when this MediaPlayer finishes playback
         * (i.e. reaches the end of the stream).
         * The media framework will attempt to transition from this player to
         * the next as seamlessly as possible. The next player can be set at
         * any time before completion. The next player must be prepared by the
         * app, and the application should not call start() on it.
         * The next MediaPlayer must be different from 'this'. An exception
         * will be thrown if next == this.
         * The application may call setNextMediaPlayer(null) to indicate no
         * next player should be started at the end of playback.
         * If the current player is looping, it will keep looping and the next
         * player will not be started.
         *
         * @param next the player to start after this one completes playback.
         *
         */
        SetNextMediaPlayer(
            [in] IMediaPlayer* next);

        /**
         * Releases resources associated with this MediaPlayer object.
         * It is considered good practice to call this method when you're
         * done using the MediaPlayer.
         */
        ReleaseResources();

        /**
         * Resets the MediaPlayer to its uninitialized state. After calling
         * this method, you will have to initialize it again by setting the
         * data source and calling prepare().
         */
        Reset();

        /**
         * Sets the audio stream type for this MediaPlayer. See {@link AudioManager}
         * for a list of stream types. Must call this method before prepare() or
         * prepareAsync() in order for the target stream type to become effective
         * thereafter.
         *
         * @param streamtype the audio stream type
         * @see android.media.AudioManager
         */
        SetAudioStreamType(
            [in] Int32 streamtype);

        /**
         * Sets the player to be looping or non-looping.
         *
         * @param looping whether to loop or not
         */
        SetLooping(
            [in] Boolean looping);

        /**
         * Checks whether the MediaPlayer is looping or non-looping.
         *
         * @return true if the MediaPlayer is currently looping, false otherwise
         */
        IsLooping(
            [out] Boolean* isLooping);

        /**
         * Sets the volume on this player.
         * This API is recommended for balancing the output of audio streams
         * within an application. Unless you are writing an application to
         * control user settings, this API should be used in preference to
         * {@link AudioManager#setStreamVolume(int, int, int)} which sets the volume of ALL streams of
         * a particular type. Note that the passed volume values are raw scalars.
         * UI controls should be scaled logarithmically.
         *
         * @param leftVolume left volume scalar
         * @param rightVolume right volume scalar
         */
        SetVolume(
            [in] Float leftVolume,
            [in] Float rightVolume);

        /**
         * Currently not implemented, returns null.
         * @deprecated
         * @hide
         */
        GetFrameAt(
            [in] Int32 msec,
            [out] IBitmap** frame);

        /**
         * Sets the audio session ID.
         *
         * @param sessionId the audio session ID.
         * The audio session ID is a system wide unique identifier for the audio stream played by
         * this MediaPlayer instance.
         * The primary use of the audio session ID  is to associate audio effects to a particular
         * instance of MediaPlayer: if an audio session ID is provided when creating an audio effect,
         * this effect will be applied only to the audio content of media players within the same
         * audio session and not to the output mix.
         * When created, a MediaPlayer instance automatically generates its own audio session ID.
         * However, it is possible to force this player to be part of an already existing audio session
         * by calling this method.
         * This method must be called before one of the overloaded <code> setDataSource </code> methods.
         * @throws IllegalStateException if it is called in an invalid state
         */
        SetAudioSessionId(
            [in] Int32 sessionId);

        /**
         * Returns the audio session ID.
         *
         * @return the audio session ID. {@see #setAudioSessionId(int)}
         * Note that the audio session ID is 0 only if a problem occured when the MediaPlayer was contructed.
         */
        GetAudioSessionId(
            [out] Int32* sessionID);

        /**
         * Attaches an auxiliary effect to the player. A typical auxiliary effect is a reverberation
         * effect which can be applied on any sound source that directs a certain amount of its
         * energy to this effect. This amount is defined by setAuxEffectSendLevel().
         * {@see #setAuxEffectSendLevel(float)}.
         * <p>After creating an auxiliary effect (e.g.
         * {@link android.media.audiofx.EnvironmentalReverb}), retrieve its ID with
         * {@link android.media.audiofx.AudioEffect#getId()} and use it when calling this method
         * to attach the player to the effect.
         * <p>To detach the effect from the player, call this method with a null effect id.
         * <p>This method must be called after one of the overloaded <code> setDataSource </code>
         * methods.
         * @param effectId system wide unique id of the effect to attach
         */
        AttachAuxEffect(
            [in] Int32 effectId);

        /**
         * Sets the parameter indicated by key.
         * @param key key indicates the parameter to be set.
         * @param value value of the parameter to be set.
         * @return true if the parameter is set successfully, false otherwise
         * {@hide}
         */
        SetParameter(
            [in] Int32 key,
            [in] IParcel* value,
            [out] Boolean* result);

        /**
         * Sets the parameter indicated by key.
         * @param key key indicates the parameter to be set.
         * @param value value of the parameter to be set.
         * @return true if the parameter is set successfully, false otherwise
         * {@hide}
         */
        SetParameterEx(
            [in] Int32 key,
            [in] String value,
            [out] Boolean* result);

        /**
         * Sets the parameter indicated by key.
         * @param key key indicates the parameter to be set.
         * @param value value of the parameter to be set.
         * @return true if the parameter is set successfully, false otherwise
         * {@hide}
         */
        SetParameterEx2(
            [in] Int32 key,
            [in] Int32 value,
            [out] Boolean* result);

        /**
         * Gets the value of the parameter indicated by key.
         * The caller is responsible for recycling the returned parcel.
         * @param key key indicates the parameter to get.
         * @return value of the parameter.
         * {@hide}
         */
        GetParcelParameter(
            [in] Int32 key,
            [out] IParcel** result);

        /**
         * Gets the value of the parameter indicated by key.
         * @param key key indicates the parameter to get.
         * @return value of the parameter.
         * {@hide}
         */
        GetStringParameter(
            [in] Int32 key,
            [out] String* result);

        /**
         * Gets the value of the parameter indicated by key.
         * @param key key indicates the parameter to get.
         * @return value of the parameter.
         * {@hide}
         */
        GetInt32Parameter(
            [in] Int32 key,
            [out] Int32* result);

        GetSubInfo(
            [out, callee] ArrayOf<IMediaPlayerSubInfoN*>* subInfoN);

        GetAudioInfo(
            [out, callee] ArrayOf<IMediaPlayerAudioInfoN*>* subInfoN);

        /**
         * Sets the send level of the player to the attached auxiliary effect
         * {@see #attachAuxEffect(int)}. The level value range is 0 to 1.0.
         * <p>By default the send level is 0, so even if an effect is attached to the player
         * this method must be called for the effect to be applied.
         * <p>Note that the passed level value is a raw scalar. UI controls should be scaled
         * logarithmically: the gain applied by audio framework ranges from -72dB to 0dB,
         * so an appropriate conversion from linear UI input x to level is:
         * x == 0 -> level = 0
         * 0 < x <= R -> level = 10^(72*(x-R)/20/R)
         * @param level send level scalar
         */
        SetAuxEffectSendLevel(
            [in] Float level);

        /**
         * Returns an array of track information.
         *
         * @return Array of track info. The total number of tracks is the array length.
         * Must be called again if an external timed text source has been added after any of the
         * addTimedTextSource methods are called.
         * @throws IllegalStateException if it is called in an invalid state.
         */
        GetTrackInfo(
            [out, callee] ArrayOf<IMediaPlayerTrackInfo>* result);

        /* TODO: Limit the total number of external timed text source to a reasonable number.
         */
        /**
         * Adds an external timed text source file.
         *
         * Currently supported format is SubRip with the file extension .srt, case insensitive.
         * Note that a single external timed text source may contain multiple tracks in it.
         * One can find the total number of available tracks using {@link #getTrackInfo()} to see what
         * additional tracks become available after this method call.
         *
         * @param path The file path of external timed text source file.
         * @param mimeType The mime type of the file. Must be one of the mime types listed above.
         * @throws IOException if the file cannot be accessed or is corrupted.
         * @throws IllegalArgumentException if the mimeType is not supported.
         * @throws IllegalStateException if called in an invalid state.
         */
        AddTimedTextSource(
            [in] String path,
            [in] String mimeType);

        /**
         * Adds an external timed text source file (Uri).
         *
         * Currently supported format is SubRip with the file extension .srt, case insensitive.
         * Note that a single external timed text source may contain multiple tracks in it.
         * One can find the total number of available tracks using {@link #getTrackInfo()} to see what
         * additional tracks become available after this method call.
         *
         * @param context the Context to use when resolving the Uri
         * @param uri the Content URI of the data you want to play
         * @param mimeType The mime type of the file. Must be one of the mime types listed above.
         * @throws IOException if the file cannot be accessed or is corrupted.
         * @throws IllegalArgumentException if the mimeType is not supported.
         * @throws IllegalStateException if called in an invalid state.
         */
        AddTimedTextSourceEx(
            [in] IContext* ctx,
            [in] IUri* uri,
            [in] String mimeType);

        /**
         * Adds an external timed text source file (FileDescriptor).
         *
         * It is the caller's responsibility to close the file descriptor.
         * It is safe to do so as soon as this call returns.
         *
         * Currently supported format is SubRip. Note that a single external timed text source may
         * contain multiple tracks in it. One can find the total number of available tracks
         * using {@link #getTrackInfo()} to see what additional tracks become available
         * after this method call.
         *
         * @param fd the FileDescriptor for the file you want to play
         * @param mimeType The mime type of the file. Must be one of the mime types listed above.
         * @throws IllegalArgumentException if the mimeType is not supported.
         * @throws IllegalStateException if called in an invalid state.
         */
        AddTimedTextSourceEx2(
            [in] IFileDescriptor* fd,
            [in] String mimeType);

        /**
         * Adds an external timed text file (FileDescriptor).
         *
         * It is the caller's responsibility to close the file descriptor.
         * It is safe to do so as soon as this call returns.
         *
         * Currently supported format is SubRip. Note that a single external timed text source may
         * contain multiple tracks in it. One can find the total number of available tracks
         * using {@link #getTrackInfo()} to see what additional tracks become available
         * after this method call.
         *
         * @param fd the FileDescriptor for the file you want to play
         * @param offset the offset into the file where the data to be played starts, in bytes
         * @param length the length in bytes of the data to be played
         * @param mimeType The mime type of the file. Must be one of the mime types listed above.
         * @throws IllegalArgumentException if the mimeType is not supported.
         * @throws IllegalStateException if called in an invalid state.
         */
        AddTimedTextSourceEx3(
            [in] IFileDescriptor* fd,
            [in] Int64 offset,
            [in] Int64 length,
            [in] String mimeType);

        /**
         * Selects a track.
         * <p>
         * If a MediaPlayer is in invalid state, it throws an IllegalStateException exception.
         * If a MediaPlayer is in <em>Started</em> state, the selected track is presented immediately.
         * If a MediaPlayer is not in Started state, it just marks the track to be played.
         * </p>
         * <p>
         * In any valid state, if it is called multiple times on the same type of track (ie. Video,
         * Audio, Timed Text), the most recent one will be chosen.
         * </p>
         * <p>
         * The first audio and video tracks are selected by default if available, even though
         * this method is not called. However, no timed text track will be selected until
         * this function is called.
         * </p>
         * <p>
         * Currently, only timed text tracks or audio tracks can be selected via this method.
         * In addition, the support for selecting an audio track at runtime is pretty limited
         * in that an audio track can only be selected in the <em>Prepared</em> state.
         * </p>
         * @param index the index of the track to be selected. The valid range of the index
         * is 0..total number of track - 1. The total number of tracks as well as the type of
         * each individual track can be found by calling {@link #getTrackInfo()} method.
         * @throws IllegalStateException if called in an invalid state.
         *
         * @see android.media.MediaPlayer#getTrackInfo
         */
        SelectTrack(
            [in] Int32 index);

        /**
         * Deselect a track.
         * <p>
         * Currently, the track must be a timed text track and no audio or video tracks can be
         * deselected. If the timed text track identified by index has not been
         * selected before, it throws an exception.
         * </p>
         * @param index the index of the track to be deselected. The valid range of the index
         * is 0..total number of tracks - 1. The total number of tracks as well as the type of
         * each individual track can be found by calling {@link #getTrackInfo()} method.
         * @throws IllegalStateException if called in an invalid state.
         *
         * @see android.media.MediaPlayer#getTrackInfo
         */
        DeselectTrack(
            [in] Int32 index);

        /**
         * @param reply Parcel with audio/video duration info for battery
                        tracking usage
         * @return The status code.
         * {@hide}
         */
        NativePullBatteryData(
            [in] IParcel* reply,
            [out] Int32* result);

        /**
         * Sets the target UDP re-transmit endpoint for the low level player.
         * Generally, the address portion of the endpoint is an IP multicast
         * address, although a unicast address would be equally valid.  When a valid
         * retransmit endpoint has been set, the media player will not decode and
         * render the media presentation locally.  Instead, the player will attempt
         * to re-multiplex its media data using the Android@Home RTP profile and
         * re-transmit to the target endpoint.  Receiver devices (which may be
         * either the same as the transmitting device or different devices) may
         * instantiate, prepare, and start a receiver player using a setDataSource
         * URL of the form...
         *
         * aahRX://&lt;multicastIP&gt;:&lt;port&gt;
         *
         * to receive, decode and render the re-transmitted content.
         *
         * setRetransmitEndpoint may only be called before setDataSource has been
         * called; while the player is in the Idle state.
         *
         * @param endpoint the address and UDP port of the re-transmission target or
         * null if no re-transmission is to be performed.
         * @throws IllegalStateException if it is called in an invalid state
         * @throws IllegalArgumentException if the retransmit endpoint is supplied,
         * but invalid.
         *
         * {@hide} pending API council
         */
        SetRetransmitEndpoint(
            [in] IInetSocketAddress* endpoint);

        /**
         * Register a callback to be invoked when the media source is ready
         * for playback.
         *
         * @param listener the callback that will be run
         */
        SetOnPreparedListener(
            [in] IMediaPlayerOnPreparedListener* listener);

        /**
         * Register a callback to be invoked when the end of a media source
         * has been reached during playback.
         *
         * @param listener the callback that will be run
         */
        SetOnCompletionListener(
            [in] IMediaPlayerOnCompletionListener* listener);

        /**
         * Register a callback to be invoked when the status of a network
         * stream's buffer has changed.
         *
         * @param listener the callback that will be run.
         */
        SetOnBufferingUpdateListener(
            [in] IMediaPlayerOnBufferingUpdateListener* listener);

        /**
         * Register a callback to be invoked when a seek operation has been
         * completed.
         *
         * @param listener the callback that will be run
         */
        SetOnSeekCompleteListener(
            [in] IMediaPlayerOnSeekCompleteListener* listener);

        /**
         * Register a callback to be invoked when the video size is
         * known or updated.
         *
         * @param listener the callback that will be run
         */
        SetOnVideoSizeChangedListener(
            [in] IMediaPlayerOnVideoSizeChangedListener* listener);

        /**
         * Register a callback to be invoked when a timed text is available
         * for display.
         *
         * @param listener the callback that will be run
         */
        SetOnTimedTextListener(
            [in] IMediaPlayerOnTimedTextListener* listener);

        /**
         * Register a callback to be invoked when an error has happened
         * during an asynchronous operation.
         *
         * @param listener the callback that will be run
         */
        SetOnErrorListener(
            [in] IMediaPlayerOnErrorListener* listener);

        /**
         * Register a callback to be invoked when an info/warning is available.
         *
         * @param listener the callback that will be run
         */
        SetOnInfoListener(
            [in] IMediaPlayerOnInfoListener* listener);

        /* add by Gary. start {{----------------------------------- */

        SetScreen(
            [in] Int32 screen);

        GetScreen(
            [out] Int32* screen);

        IsPlayingVideo(
            [out] Boolean* result);

        /**
         * Get the subtitle list of the current playing video.
         * <p>
         *
         * @return subtitle list. null means there is no subtitle.
         */
        GetSubList(
            [out, callee] ArrayOf<IMediaPlayerSubInfo*>* infos);

        /**
         * get the index of the current showing subtitle in the subtitle list.
         * <p>
         *
         * @return the index of the current showing subtitle in the subtitle list. <0 means no subtitle.
         */
        GetCurSub(
            [out] Int32* index);

        /**
         * switch another subtitle to show.
         * <p>
         *
         * @param index the subtitle's index in the subtitle list?
         */
         SwitchSub(
            [in] Int32 index);

        /**
         *@deprecated Use {@link #setGlobalSubGate(boolean)} instead
         * show or hide a subitle.
         * <p>
         *
         * @param showSub  whether to show subtitle or not
         */
        SetSubGate(
            [in] Boolean showSub);

        /**
         *@deprecated Use {@link #getGlobalSubGate()} instead
         * check whether subtitles is allowed showing.
         * <p>
         *
         * @return true if subtitles is allowed showing, false otherwise.
         */
        GetSubGate(
            [out] Boolean* showSub);

        /**
         * Set the subtitle's color.
         * <p>
         *
         * @param color  subtitle's color.
         */
        SetSubColor(
            [in] Int32 color);

        /**
         * Get the subtitle's color.
         * <p>
         *
         * @return the subtitle's color.
         */
        GetSubColor(
           [out] Int32* color);

        /**
         * Set the subtitle frame's color.
         * <p>
         *
         * @param color  subtitle frame's color.
         */
        SetSubFrameColor(
            [in] Int32 color);

        /**
         * Get the subtitle frame's color.
         * <p>
         *
         * @return the subtitle frame's color.
         */
        GetSubFrameColor(
            [out] Int32* color);

        /**
         * Set the subtitle's font size.
         * <p>
         *
         * @param size  font size in pixel.
         */
        SetSubFontSize(
            [in] Int32 size);

        /**
         * Get the subtitle's font size.
         * <p>
         *
         * @return the subtitle's font size. <0 means failed.
         */
        GetSubFontSize(
            [out] Int32* color);

        SetSubFontPath(
            [in] String charset);

        /**
         * Set the subtitle's charset. If the underlying mediaplayer can absolutely parse the charset
         * of the subtitles, still use the parsed charset; otherwise, use the charset argument.
         * <p>
         *
         * @param charset  the canonical name of a charset.
         */
        SetSubCharset(
            [in] String charset);

        /**
        * Get the subtitle's charset.
        * <p>
        *
        * @return the canonical name of a charset.
        */
        GetSubCharset(
            [out] String* charset);

        /**
         * Set the subtitle's position vertically in the screen.
         * <p>
         *
         * @param percent  ????????????????????????????????,???,10%,?????10.
         */
        SetSubPosition(
            [in] Int32 percent);

        /**
         * Get the subtitle's position vertically in the screen.
         * <p>
         *
         * @return percent  ????????????????????????????????,???,10%,????10.
         */
        GetSubPosition(
            [out] Int32* percent);

        /**
         * Set the subtitle's delay time.
         * <p>
         *
         * @param time delay time in milliseconds. It can be <0.
         */
        SetSubDelay(
            [in] Int32 time);

        /**
         * Get the subtitle's delay time.
         * <p>
         *
         * @return delay time in milliseconds.
         */
        GetSubDelay(
            [out] Int32* time);

        /**
         * Get the track list of the current playing video.
         * <p>
         *
         * @return track list. null means there is no track.
         */
        GetTrackList(
            [out, callee] ArrayOf<ITrackInfoVendor*>* tracks);

        /**
         * get the index of the current track in the track list.
         * <p>
         *
         * @return the index of the current track in the track list. <0 means no track.
         */
        GetCurTrack(
            [out] Int32* index);

        /**
         * switch another track to play.
         * <p>
         *
         * @param index the track's index in the track list?
         */
        SwitchTrack(
            [in] Int32 index);

        /**
         * set the dimension type of the source file.
         * <p>
         *
         * @param type the  3D picture format of the source file
         */
        SetInputDimensionType(
            [in] Int32 type);

        /**
         * get the dimension type of the source file.
         * <p>
         *
         * @return the 3D picture format of the source file. -1 means failed.
         */
        GetInputDimensionType(
            [out] Int32* type);

        /**
         * set the dimension type of the source file.
         * <p>
         *
         * @param type  the  3D picture format of the source file
         * @param value the  3D picture interlace range
         */
        SetInputDimensionValue(
            [in] Int32 type,
            [in] Int32 value);

        /**
         * set display method of the 3D pictures.
         * <p>
         *
         * @param type the display method of the 3D pictures
         */
        SetOutputDimensionType(
            [in] Int32 type);

        /**
         * set display method of the 3D pictures.
         * <p>
         *
         * @param type the display method of the 3D pictures
         * @param value the  3D picture interlace range
         */
        SetOutputDimensionValue(
            [in] Int32 type,
            [in] Int32 value);

        /**
         * get the dimension type of the output.
         * <p>
         *
         * @return the dimension type of the output. -1 means failed.
         */
        GetOutputDimensionType(
            [out] Int32* type);

        /**
         * set the anaglagh type of the output.
         * <p>
         *
         * @param type the anaglagh type of the output
         */
        SetAnaglaghType(
            [in] Int32 type);

        /**
         * get the anaglagh type of the output.
         * <p>
         *
         * @return the anaglagh type of the output. -1 means failed.
         */
        GetAnaglaghType(
            [out] Int32* type);

        /**
         * get the video encode.
         * <p>
         *
         * @return the name of the video encode. null means unknown.
         */
        GetVideoEncode(
            [out] String* encode);

        /**
         * get the video frame rate.
         * <p>
         *
         * @return the video frame rate. <0 means unknown.
         */
        GetVideoFrameRate(
            [out] Int32* rate);

        /**
         * get the audio encode.
         * <p>
         *
         * @return the name of the audio encode. null means unknown.
         */
        GetAudioEncode(
            [out] String* encode);

        /**
         * get the audio bit rate.
         * <p>
         *
         * @return the audio bit rate. <0 means unknown.
         */
        GetAudioBitRate(
            [out] Int32* rate);

        /**
         * get the audio sample rate.
         * <p>
         *
         * @return the audio sample rate. <0 means unknown.
         */
        GetAudioSampleRate(
            [out] Int32* rate);

        /* support scale mode */

        /**
         * enable or disable scale mode for playing video.
         * <p>
         *
         * @param enable if true, enable the scale mode, else disable the scale mode.
         * @param width  the expected width of the video. Only valid when enable.
         * @param height  the expected height of the video. Only valid when enable.
         */
        EnableScaleMode(
            [in] Boolean enableScale,
            [in] Int32 width,
            [in] Int32 height);

        /* support adjusting colors while playing video */
        /**
         * enable or disable VPP for playing video.
         * <p>
         *
         * @param enableVpp if true, enable VPP, else disable VPP.
         */
        SetVppGate(
            [in] Boolean enableVpp);

        /**
         * get the VPP's status.
         * <p>
         *
         * @return the VPP's status.
         */
        GetVppGate(
            [out] Boolean* enableVpp);

        /**
         * adjust the luma.
         * <p>
         *
         * @param value the value of luma. value ranges 0~~4.
         */
        SetLumaSharp(
            [in] Int32 value);

        /**
         * get the value of the luma.
         * <p>
         *
         * @return the value of the luma.
         */
        GetLumaSharp(
            [out] Int32* value);

        /**
         * adjust the chroma.
         * <p>
         *
         * @param value the value of chroma. value ranges 0~~4.
         */
        SetChromaSharp(
            [in] Int32 value);

        /**
         * get the value of the chroma.
         * <p>
         *
         * @return the value of the chroma.
         */
        GetChromaSharp(
            [out] Int32* value);

        /**
         * adjust the white extended.
         * <p>
         *
         * @param value the value of white extended. value ranges 0~~4.
         */
        SetWhiteExtend(
            [in] Int32 value);

        /**
         * get the value of the white extended.
         * <p>
         *
         * @return the value of the white extended.
         */
        GetWhiteExtend(
            [out] Int32* value);

        /**
         * adjust the black extended.
         * <p>
         *
         * @param value the value of black extended. value ranges 0~~4.
         */
        SetBlackExtend(
            [in] Int32 value);

        /**
         * get the value of the black extended.
         * <p>
         *
         * @return the value of the black extended.
         */
        GetBlackExtend(
            [out] Int32* value);

        /**
         * set the audio channel mute mode
         * <p>
         *
         * @param muteMode  mute mode
         */
        SetChannelMuteMode(
            [in] Int32 mode);

        /**
         * get the audio channel mute mode
         * <p>
         *
         * @return the audio channel mute mode.
         */
        GetChannelMuteMode(
            [out] Int32* mode);

         /* add the global interfaces to control the subtitle gate  */

        /**
         * show or hide a subitle.
         * <p>
         *
         * @param showSub  whether to show subtitle or not
         */
        SetGlobalSubGate(
            [in] Boolean showSub);

        /**
         * check whether subtitles is allowed showing.
         * <p>
         *
         * @return true if subtitles is allowed showing, false otherwise.
         */
        GetGlobalSubGate(
            [out] Boolean* showSub);

        /* add two general interfaces for expansibility */

        /**
         * show or hide a subitle.
         * <p>
         *
         * @param enable  whether to start the BD folder play mode.
         */
        SetBdFolderPlayMode(
            [in] Boolean enableBDFolder);

        /**
         * check whether is in BD folder play mode.
         * <p>
         *
         * @return true if is in BD folder play mode, false otherwise.
         */
        GetBdFolderPlayMode(
            [out] Boolean* enableBDFolder);

        /* Detect http data source from other application. */
        SetDlnaSourceDetector(
            [in] IDlnaSourceDetector* detector);
    }

    [local]
    interface IMediaPlayerHelper {
        /**
         * Convenience method to create a MediaPlayer for a given Uri.
         * On success, {@link #prepare()} will already have been called and must not be called again.
         * <p>When done with the MediaPlayer, you should call  {@link #release()},
         * to free the resources. If not released, too many MediaPlayer instances will
         * result in an exception.</p>
         *
         * @param context the Context to use
         * @param uri the Uri from which to get the datasource
         * @return a MediaPlayer object, or NULL if creation failed
         */
        Create(
            [in] IContext* ctx,
            [in] IUri* uri,
            [out] IMediaPlayer** player);

        /**
         * Convenience method to create a MediaPlayer for a given Uri.
         * On success, {@link #prepare()} will already have been called and must not be called again.
         * <p>When done with the MediaPlayer, you should call  {@link #release()},
         * to free the resources. If not released, too many MediaPlayer instances will
         * result in an exception.</p>
         *
         * @param context the Context to use
         * @param uri the Uri from which to get the datasource
         * @param holder the SurfaceHolder to use for displaying the video
         * @return a MediaPlayer object, or NULL if creation failed
         */
        CreateEx(
            [in] IContext* ctx,
            [in] IUri* uri,
            [in] ISurfaceHolder* holder,
            [out] IMediaPlayer** player);

        /**
         * Convenience method to create a MediaPlayer for a given resource id.
         * On success, {@link #prepare()} will already have been called and must not be called again.
         * <p>When done with the MediaPlayer, you should call  {@link #release()},
         * to free the resources. If not released, too many MediaPlayer instances will
         * result in an exception.</p>
         *
         * @param context the Context to use
         * @param resid the raw resource id (<var>R.raw.&lt;something></var>) for
         *              the resource to use as the datasource
         * @return a MediaPlayer object, or NULL if creation failed
         */
        CreateEx2(
            [in] IContext* ctx,
            [in] Int32 resid,
            [out] IMediaPlayer** player);

        /**
         * set the status of the raw data mode.
         * <p>
         *
         * @param enable  whether to enable the raw data mode.
         */
        SetRawDataMode(
            [in] Int32 rawDataMode);

        GetRawDataMode(
            [out] Int32* rawDataMode);

        /* Rotate the video. */
        IsRotatable(
            [out] Boolean* rotatable);

        SetRotation(
            [in] Int32 value);

        /*  Notify hdmi status. */
        SetHdmiState(
            [in] Boolean bHdmiPlugged);
    }

    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
