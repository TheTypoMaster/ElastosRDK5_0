
module
{
    using interface Elastos.IO.IByteBuffer;

    interface Elastos.Droid.Media.IMediaCodec;
    interface Elastos.Droid.Media.IMediaFormat;
    interface Elastos.Droid.Media.IMediaCrypto;
    interface Elastos.Droid.Media.IMediaCodecCryptoInfo;
    interface Elastos.Droid.View.ISurface;

    namespace Elastos {
    namespace Droid {
    namespace Media {

    /**
     * Per buffer metadata includes an offset and size specifying
     * the range of valid data in the associated codec buffer.
     */
    interface IMediaCodecBufferInfo {
        Set(
            [in] Int32 newOffset,
            [in] Int32 newSize,
            [in] Int64 newPresentationTimeUs,
            [in] Int32 newFlags);

        SetOffset(
            [in] Int32 offset);

        SetNewSize(
            [in] Int32 newSize);

        SetPresentationTimeUs(
            [in] Int64 newTimeUs);

        SetFlags(
            [in] Int32 flags);

        GetOffset(
            [out] Int32* offset);

        GetNewSize(
            [out] Int32* newSize);

        GetPresentationTimeUs(
            [out] Int64* newTimeUs);

        GetFlags(
            [out] Int32* flags);
    }

    /**
     * Metadata describing the structure of a (at least partially) encrypted
     * input sample.
     * A buffer's data is considered to be partitioned into "subSamples",
     * each subSample starts with a (potentially empty) run of plain,
     * unencrypted bytes followed by a (also potentially empty) run of
     * encrypted bytes.
     * numBytesOfClearData can be null to indicate that all data is encrypted.
     * This information encapsulates per-sample metadata as outlined in
     * ISO/IEC FDIS 23001-7:2011 "Common encryption in ISO base media file format files".
     */
    [deprecated]
    interface IMediaCodecCryptoInfo {
        Set(
            [in] Int32 newNumSubSamples,
            [in] ArrayOf<Int32>* newNumBytesOfClearData,
            [in] ArrayOf<Int32>* newNumBytesOfEncryptedData,
            [in] ArrayOf<Byte>* newKey,
            [in] ArrayOf<Byte>* newIV,
            [in] Int32 newMode);

        SetNumSubSamples(
            [in] Int32 samples);

        SetNumBytesOfClearData(
            [in] ArrayOf<Int32>* result);

        SetNumBytesOfEncryptedData(
            [in] ArrayOf<Int32>* result);

        SetKey(
            [in] ArrayOf<Byte>* result);

        SetInitVector(
            [in] ArrayOf<Byte>* result);

        SetMode(
            [in] Int32 mode);

        GetNumSubSamples(
            [out] Int32 *result);

        GetNumBytesOfClearData(
            [out, callee] ArrayOf<Int32>* result);

        GetNumBytesOfEncryptedData(
            [out, callee] ArrayOf<Int32>* result);

        GetKey(
            [out, callee] ArrayOf<Byte>* result);

        GetInitVector(
            [out, callee] ArrayOf<Byte>* result);

        GetMode(
            [out] Int32 *result);
    }

    interface IMediaCodecHelper {
        /**
         * Instantiate a decoder supporting input data of the given mime type.
         *
         * The following is a partial list of defined mime types and their semantics:
         * <ul>
         * <li>"video/x-vnd.on2.vp8" - VPX video (i.e. video in .webm)
         * <li>"video/avc" - H.264/AVC video
         * <li>"video/mp4v-es" - MPEG4 video
         * <li>"video/3gpp" - H.263 video
         * <li>"audio/3gpp" - AMR narrowband audio
         * <li>"audio/amr-wb" - AMR wideband audio
         * <li>"audio/mpeg" - MPEG1/2 audio layer III
         * <li>"audio/mp4a-latm" - AAC audio
         * <li>"audio/vorbis" - vorbis audio
         * <li>"audio/g711-alaw" - G.711 alaw audio
         * <li>"audio/g711-mlaw" - G.711 ulaw audio
         * </ul>
         *
         * @param type The mime type of the input data.
         */
        CreateDecoderByType(
            [in] String type,
            [out] IMediaCodec** result);

        /**
         * Instantiate an encoder supporting output data of the given mime type.
         * @param type The desired mime type of the output data.
         */
        CreateEncoderByType(
            [in] String type,
            [out] IMediaCodec** result);

        /**
         * If you know the exact name of the component you want to instantiate
         * use this method to instantiate it. Use with caution.
         * Likely to be used with information obtained from {@link android.media.MediaCodecList}
         * @param name The name of the codec to be instantiated.
         */
        CreateByCodecName(
            [in] String name,
            [out] IMediaCodec** result);
    }

    interface IMediaCodec {

        /**
         * This indicates that the buffer marked as such contains the data
         * for a sync frame.
         */
        const Int32 BUFFER_FLAG_SYNC_FRAME   = 1;

        /**
         * This indicated that the buffer marked as such contains codec
         * initialization / codec specific data instead of media data.
         */
        const Int32 BUFFER_FLAG_CODEC_CONFIG = 2;

        /**
         * This signals the end of stream, i.e. no buffers will be available
         * after this, unless of course, {@link #flush} follows.
         */
        const Int32 BUFFER_FLAG_END_OF_STREAM         = 4;

        /**
         * If this codec is to be used as an encoder, pass this flag.
         */
        const Int32 CONFIGURE_FLAG_ENCODE = 1;

        /**
         * If a non-negative timeout had been specified in the call
         * to {@link #dequeueOutputBuffer}, indicates that the call timed out.
         */
        const Int32 INFO_TRY_AGAIN_LATER        = -1;

        /**
         * The output format has changed, subsequent data will follow the new
         * format. {@link #getOutputFormat} returns the new format.
         */
        const Int32 INFO_OUTPUT_FORMAT_CHANGED  = -2;

        /**
         * The output buffers have changed, the client must refer to the new
         * set of output buffers returned by {@link #getOutputBuffers} from
         * this point on.
         */
        const Int32 INFO_OUTPUT_BUFFERS_CHANGED = -3;

        /**
         * The content is scaled to the surface dimensions
         */
        const Int32 VIDEO_SCALING_MODE_SCALE_TO_FIT               = 1;

        /**
         * The content is scaled, maintaining its aspect ratio, the whole
         * surface area is used, content may be cropped
         */
        const Int32 VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING = 2;


        /**
         * Make sure you call this when you're done to free up any opened
         * component instance instead of relying on the garbage collector
         * to do this for you at some point in the future.
         */
        ReleaseResources();

        /**
         * Configures a component.
         *
         * @param format The format of the input data (decoder) or the desired
         *               format of the output data (encoder).
         * @param surface Specify a surface on which to render the output of this
         *                decoder.
         * @param crypto  Specify a crypto object to facilitate secure decryption
         *                of the media data.
         * @param flags   Specify {@link #CONFIGURE_FLAG_ENCODE} to configure the
         *                component as an encoder.
         */
        Configure(
            [in] IMediaFormat* format,
            [in] ISurface* surface,
            [in] IMediaCrypto* crypto,
            [in] Int32 flags);

        /**
         * After successfully configuring the component, call start. On return
         * you can query the component for its input/output buffers.
         */
        Start();

        /**
         * Finish the decode/encode session, note that the codec instance
         * remains active and ready to be {@link #start}ed again.
         * To ensure that it is available to other client call {@link #release}
         * and don't just rely on garbage collection to eventually do this for you.
         */
        Stop();

        /**
         * Flush both input and output ports of the component, all indices
         * previously returned in calls to {@link #dequeueInputBuffer} and
         * {@link #dequeueOutputBuffer} become invalid.
         */
        Flush();

        /**
         * Similar to {@link #queueInputBuffer} but submits a buffer that is
         * potentially encrypted.
         * @param index The index of a client-owned input buffer previously returned
         *              in a call to {@link #dequeueInputBuffer}.
         * @param offset The byte offset into the input buffer at which the data starts.
         * @param info Metadata required to facilitate decryption, the object can be
         *             reused immediately after this call returns.
         * @param presentationTimeUs The time at which this buffer should be rendered.
         * @param flags A bitmask of flags {@link #BUFFER_FLAG_SYNC_FRAME},
         *              {@link #BUFFER_FLAG_CODEC_CONFIG} or {@link #BUFFER_FLAG_END_OF_STREAM}.
         */
        QueueSecureInputBuffer(
            [in] Int32 index,
            [in] Int32 offset,
            [in] IMediaCodecCryptoInfo* info,
            [in] Int64 presentationTimeUs,
            [in] Int32 flags);

        /**
         * Returns the index of an input buffer to be filled with valid data
         * or -1 if no such buffer is currently available.
         * This method will return immediately if timeoutUs == 0, wait indefinitely
         * for the availability of an input buffer if timeoutUs &lt; 0 or wait up
         * to "timeoutUs" microseconds if timeoutUs &gt; 0.
         * @param timeoutUs The timeout in microseconds, a negative timeout indicates "infinite".
         */
        DequeueInputBuffer(
            [in] Int64 timeoutUs,
            [out] Int32* result);

        /**
         * Dequeue an output buffer, block at most "timeoutUs" microseconds.
         * Returns the index of an output buffer that has been successfully
         * decoded or one of the INFO_* constants below.
         * @param info Will be filled with buffer meta data.
         * @param timeoutUs The timeout in microseconds, a negative timeout indicates "infinite".
         */
        DequeueOutputBuffer(
            [in] IMediaCodecBufferInfo* info,
            [in] Int64 timeoutUs,
            [out] Int32* index);

        /**
         * If you are done with a buffer, use this call to return the buffer to
         * the codec. If you previously specified a surface when configuring this
         * video decoder you can optionally render the buffer.
         * @param index The index of a client-owned output buffer previously returned
         *              in a call to {@link #dequeueOutputBuffer}.
         * @param render If a valid surface was specified when configuring the codec,
         *               passing true renders this output buffer to the surface.
         */
        ReleaseOutputBuffer(
            [in] Int32 index,
            [in] Boolean render);

        /**
         * Call this after dequeueOutputBuffer signals a format change by returning
         * {@link #INFO_OUTPUT_FORMAT_CHANGED}
         */
        GetOutputFormat(
            [out] IMediaFormat** result);

        /**
         * Call this after start() returns.
         */
        GetInputBuffers(
            [out, callee] ArrayOf<IByteBuffer*>* result);

        /**
         * Call this after start() returns and whenever dequeueOutputBuffer
         * signals an output buffer change by returning
         * {@link #INFO_OUTPUT_BUFFERS_CHANGED}
         */
        GetOutputBuffers(
            [out, callee] ArrayOf<IByteBuffer*>* result);

        /**
         * If a surface has been specified in a previous call to {@link #configure}
         * specifies the scaling mode to use. The default is "scale to fit".
         */
        SetVideoScalingMode(
            [in] Int32 mode);

    }

    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
