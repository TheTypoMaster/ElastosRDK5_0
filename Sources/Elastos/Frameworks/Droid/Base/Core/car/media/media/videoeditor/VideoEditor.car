module
{
    interface Elastos.Droid.Graphics.IBitmap;
    interface Elastos.Droid.Media.Videoeditor.IVideoEditor;
    interface Elastos.Droid.Media.Videoeditor.IAudioTrack2;
    interface Elastos.Droid.View.ISurfaceHolder;

    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Videoeditor {

    /**
     * The overlay data
     */
    interface IVideoEditorOverlayData {
        /**
         * Releases the bitmap
         */
        ReleaseResources();

        /**
         * Check if the overlay needs to be rendered
         *
         * @return true if rendering is needed
         */
        NeedsRendering(
            [out] Boolean* result);

        /**
        * Render the overlay by either clearing it or by
        * rendering the overlay bitmap with the specified
        * rendering mode
        *
        * @param destBitmap The destination bitmap
        */
        RenderOverlay(
            [in] IBitmap* destBitmap);
    }

    /**
     * This listener interface is used by the VideoEditor to emit preview
     * progress notifications. This callback should be invoked after the number
     * of frames specified by
     * {@link #startPreview(SurfaceHolder surfaceHolder, long fromMs,
     *           int callbackAfterFrameCount, PreviewProgressListener listener)}
     */
    interface IVideoEditorPreviewProgressListener {
        /**
         * This method notifies the listener of the current time position while
         * previewing a project.
         *
         * @param videoEditor The VideoEditor instance
         * @param timeMs The current preview position (expressed in milliseconds
         *        since the beginning of the storyboard timeline).
         * @param overlayData The overlay data (null if the overlay data
         *      is unchanged)
         */
        OnProgress(
            [in] IVideoEditor* videoEditor,
            [in] Int64 timeMs,
            [in] IVideoEditorOverlayData* overlayData);
        /**
         * This method notifies the listener when the preview is started
         * previewing a project.
         *
         * @param videoEditor The VideoEditor instance
         */
        OnStart(
            [in] IVideoEditor* videoEditor);

        /**
         * This method notifies the listener when the preview is stopped
         * previewing a project.
         *
         * @param videoEditor The VideoEditor instance
         */
        OnStop(
            [in] IVideoEditor* videoEditor);

        /**
         * This method notifies the listener when error has occurred during
         * previewing a project.
         *
         * @param videoEditor The VideoEditor instance
         * @param error The error that has occurred
         * FIXME: We should pass well-defined error code to the application;
         * but for now, we just pass whatever error code reported by the native layer.
         */
        OnError(
            [in] IVideoEditor* videoEditor,
            [in] Int32 error);
    }

    /**
     * This listener interface is used by the VideoEditor to emit export status
     * notifications.
     * {@link #export(String filename, ExportProgressListener listener,
     *                int height, int bitrate)}
     */
    interface IVideoEditorExportProgressListener {
        /**
         * This method notifies the listener of the progress status of a export
         * operation.
         *
         * @param videoEditor The VideoEditor instance
         * @param filename The name of the file which is in the process of being
         *        exported.
         * @param progress The progress in %. At the beginning of the export,
         *        this value is set to 0; at the end, the value is set to 100.
         */
        OnProgress(
            [in] IVideoEditor* videoEditor,
            [in] String filename,
            [in] Int32 progress);
    }

    interface IVideoEditorMediaProcessingProgressListener {

        const Int32 ACTION_ENCODE = 1;
        const Int32 ACTION_DECODE = 2;

        /**
         * This method notifies the listener of the progress status of
         * processing a media object such as a Transition, AudioTrack & Kenburns
         * This method may be called maximum 100 times for one operation.
         *
         * @param object The object that is being processed such as a Transition
         *               or AudioTrack
         * @param action The type of processing being performed
         * @param progress The progress in %. At the beginning of the operation,
         *          this value is set to 0; at the end, the value is set to 100.
         */
        OnProgress(
            [in] IInterface* item,
            [in] Int32 action,
            [in] Int32 progress);
    }

    interface IVideoEditor {
        /**
         *  The file name of the project thumbnail
         */
        const String THUMBNAIL_FILENAME = "thumbnail.jpg";

        /**
         *  Use this value instead of the specific end of the storyboard timeline
         *  value.
         */
        const Int32 DURATION_OF_STORYBOARD = -1;

        /**
         *  Maximum supported file size
         */
        const Int32 MAX_SUPPORTED_FILE_SIZE = 2147483648; //2147483648L

        /**
         * @return The path where the VideoEditor stores all files related to the
         *         project
         */
        GetPath(
            [out] String* result);

        /**
         * This method releases all in-memory resources used by the VideoEditor
         * instance. All pending operations such as preview, export and extract
         * audio waveform must be canceled.
         */
        ReleaseResources();

        /**
         * Persist the current internal state of VideoEditor to the project path.
         * The VideoEditor state may be restored by invoking the
         * {@link VideoEditorFactory#load(String)} method. This method does not
         * release the internal in-memory state of the VideoEditor. To release
         * the in-memory state of the VideoEditor the {@link #release()} method
         * must be invoked.
         *
         * Pending transition generations must be allowed to complete before the
         * state is saved.
         * Pending audio waveform generations must be allowed to complete.
         * Pending export operations must be allowed to continue.
         *
         * @throws IOException if the internal state cannot be saved to project file
         */
        Save();

        /**
         * Create the output movie based on all media items added and the applied
         * storyboard items. This method can take a long time to execute and is
         * blocking. The application will receive progress notifications via the
         * ExportProgressListener. Specific implementations may not support multiple
         * simultaneous export operations. Note that invoking methods which would
         * change the contents of the output movie throw an IllegalStateException
         * while an export operation is pending.
         *
         * The audio and video codecs are automatically selected by the underlying
         * implementation.
         *
         * @param filename The output file name (including the full path)
         * @param height The height of the output video file. The supported values
         *        for height are described in the MediaProperties class, for
         *        example: HEIGHT_480. The width will be automatically computed
         *        according to the aspect ratio provided by
         *        {@link #setAspectRatio(int)}
         * @param bitrate The bitrate of the output video file. This is approximate
         *        value for the output movie. Supported bitrate values are
         *        described in the MediaProperties class for example: BITRATE_384K
         * @param listener The listener for progress notifications. Use null if
         *        export progress notifications are not needed.
         *
         * @throws IllegalArgumentException if height or bitrate are not supported
         *        or if the audio or video codecs are not supported
         * @throws IOException if output file cannot be created
         * @throws IllegalStateException if a preview or an export is in progress or
         *        if no MediaItem has been added
         * @throws CancellationException if export is canceled by calling
         *        {@link #cancelExport()}
         * @throws UnsupportOperationException if multiple simultaneous export() are
         *        not allowed
         */
        Export(
            [in] String filename,
            [in] Int32 height,
            [in] Int32 bitrate,
            [in] IVideoEditorExportProgressListener* listener);

        /**
         * Create the output movie based on all media items added and the applied
         * storyboard items. This method can take a long time to execute and is
         * blocking. The application will receive progress notifications via the
         * ExportProgressListener. Specific implementations may not support multiple
         * simultaneous export operations. Note that invoking methods which would
         * change the contents of the output movie throw an IllegalStateException
         * while an export operation is pending.
         *
         * @param filename The output file name (including the full path)
         * @param height The height of the output video file. The supported values
         *        for height are described in the MediaProperties class, for
         *        example: HEIGHT_480. The width will be automatically computed
         *        according to the aspect ratio provided by
         *        {@link #setAspectRatio(int)}
         * @param bitrate The bitrate of the output video file. This is approximate
         *        value for the output movie. Supported bitrate values are
         *        described in the MediaProperties class for example: BITRATE_384K
         * @param audioCodec The audio codec to be used for the export. The audio
         *        codec values are defined in the MediaProperties class (e.g.
         *        ACODEC_AAC_LC). Note that not all audio codec types are
         *        supported for export purposes.
         * @param videoCodec The video codec to be used for the export. The video
         *        codec values are defined in the MediaProperties class (e.g.
         *        VCODEC_H264). Note that not all video codec types are
         *        supported for export purposes.
         * @param listener The listener for progress notifications. Use null if
         *        export progress notifications are not needed.
         *
         * @throws IllegalArgumentException if height or bitrate are not supported
         *        or if the audio or video codecs are not supported
         * @throws IOException if output file cannot be created
         * @throws IllegalStateException if a preview or an export is in progress or
         *        if no MediaItem has been added
         * @throws CancellationException if export is cancelled by calling
         *        {@link #cancelExport()}
         * @throws UnsupportOperationException if multiple simultaneous export() are
         *        not allowed
         */
        ExportEx(
            [in] String filename,
            [in] Int32 height,
            [in] Int32 bitrate,
            [in] Int32 audioCodec,
            [in] Int32 videoCodec,
            [in] IVideoEditorExportProgressListener* listener);

        /**
         * Cancel the running export operation. This method blocks until the export
         * is cancelled and the exported file (if any) is deleted. If the export
         * completed by the time this method is invoked, the export file will be
         * deleted.
         *
         * @param filename The filename which identifies the export operation to be
         *            canceled.
         **/
        CancelExport(
            [in] String filename);

        /**
         * Add a media item at the end of the storyboard.
         *
         * @param mediaItem The media item object to add
         *
         * @throws IllegalStateException if a preview or an export is in progress or
         *        if the media item id is not unique across all the media items
         *        added.
         */
        AddMediaItem(
            [in] IMediaItem* mediaItem);

        /**
         * Insert a media item after the media item with the specified id.
         *
         * @param mediaItem The media item object to insert
         * @param afterMediaItemId Insert the mediaItem after the media item
         *        identified by this id. If this parameter is null, the media
         *        item is inserted at the beginning of the timeline.
         *
         * @throws IllegalStateException if a preview or an export is in progress
         * @throws IllegalArgumentException if media item with the specified id does
         *        not exist (null is a valid value) or if the media item id is
         *        not unique across all the media items added.
         */
        InsertMediaItem(
            [in] IMediaItem* mediaItem,
            [in] String afterMediaItemId);

        /**
         * Move a media item after the media item with the specified id.
         *
         * Note: The project thumbnail is regenerated if the media item is or
         * becomes the first media item in the storyboard timeline.
         *
         * @param mediaItemId The id of the media item to move
         * @param afterMediaItemId Move the media item identified by mediaItemId
         *        after the media item identified by this parameter. If this
         *        parameter is null, the media item is moved at the beginning of
         *        the timeline.
         *
         * @throws IllegalStateException if a preview or an export is in progress
         * @throws IllegalArgumentException if one of media item ids is invalid
         *        (null is a valid value)
         */
        MoveMediaItem(
            [in] String mediaItemId,
            [in] String afterMediaItemId);

        /**
         * Remove the media item with the specified id. If there are transitions
         * before or after this media item, then this/these transition(s) are
         * removed from the storyboard. If the extraction of the audio waveform is
         * in progress, the extraction is canceled and the file is deleted.
         *
         * Effects and overlays associated with the media item will also be removed.
         *
         * Note: The project thumbnail is regenerated if the media item which is
         * removed is the first media item in the storyboard or if the media item is
         * the only one in the storyboard. If the media item is the only one in the
         * storyboard, the project thumbnail will be set to a black frame and the
         * aspect ratio will revert to the default aspect ratio and this method is
         * equivalent to removeAllMediaItems() in this case.
         *
         * @param mediaItemId The unique id of the media item to be removed
         *
         * @return The media item that was removed
         *
         * @throws IllegalStateException if a preview or an export is in progress
         * @throws IllegalArgumentException if media item with the specified id does
         *        not exist
         */
        RemoveMediaItem(
            [in] String mediaItemId,
            [out] IMediaItem** result);

        /**
         * Remove all media items in the storyboard. All effects, overlays and all
         * transitions are also removed.
         *
         * Note: The project thumbnail will be set to a black frame and the aspect
         * ratio will revert to the default aspect ratio.
         *
         * @throws IllegalStateException if a preview or an export is in progress
         */
        RemoveAllMediaItems();

        /**
         * Get the list of media items in the order in which it they appear in the
         * storyboard timeline.
         *
         * Note that if any media item source files are no longer
         * accessible, this method will still provide the full list of media items.
         *
         * @return The list of media items. If no media item exist an empty list
         *        will be returned.
         */
        GetAllMediaItems(
           [out] IObjectContainer** result);

        /**
         * Find the media item with the specified id
         *
         * @param mediaItemId The media item id
         *
         * @return The media item with the specified id (null if it does not exist)
         */
        GetMediaItem(
            [in] String mediaItemId,
            [out] IMediaItem** result);

        /**
         * Add a transition between the media items specified by the transition.
         * If a transition existed at the same position it is invalidated and then
         * the transition is replaced. Note that the new transition video clip is
         * not automatically generated by this method. The
         * {@link Transition#generate()} method must be invoked to generate
         * the transition video clip.
         *
         * Note that the TransitionAtEnd and TransitionAtStart are special kinds
         * that can not be applied between two media items.
         *
         * A crossfade audio transition will be automatically applied regardless of
         * the video transition.
         *
         * @param transition The transition to apply
         *
         * @throws IllegalStateException if a preview or an export is in progress
         * @throws IllegalArgumentException if the transition duration is larger
         *        than the smallest duration of the two media item files or if
         *        the two media items specified in the transition are not
         *        adjacent
         */
        AddTransition(
            [in] ITransition* transition);

        /**
         * Remove the transition with the specified id.
         *
         * @param transitionId The id of the transition to be removed
         *
         * @return The transition that was removed
         *
         * @throws IllegalStateException if a preview or an export is in progress
         * @throws IllegalArgumentException if transition with the specified id does
         *        not exist
         */
        RemoveTransition(
            [in] String transitionId,
            [out] ITransition** result);

        /**
         * Get the list of transitions
         *
         * @return The list of transitions. If no transitions exist an empty list
         *        will be returned.
         */
        GetAllTransitions(
           [out] IObjectContainer** result);

        /**
         * Find the transition with the specified transition id.
         *
         * @param transitionId The transition id
         *
         * @return The transition
         */
        GetTransition(
            [in] String transitionId,
            [out] ITransition** result);

        /**
         * Add the specified AudioTrack to the storyboard. Note: Specific
         * implementations may support a limited number of audio tracks (e.g. only
         * one audio track)
         *
         * @param audioTrack The AudioTrack to add
         *
         * @throws UnsupportedOperationException if the implementation supports a
         *        limited number of audio tracks.
         * @throws IllegalArgumentException if media item is not unique across all
         *        the audio tracks already added.
         */
        AddAudioTrack(
            [in] IAudioTrack2* audioTrack);

        /**
         * Insert an audio track after the audio track with the specified id. Use
         * addAudioTrack to add an audio track at the end of the storyboard
         * timeline.
         *
         * @param audioTrack The audio track object to insert
         * @param afterAudioTrackId Insert the audio track after the audio track
         *        identified by this parameter. If this parameter is null the
         *        audio track is added at the beginning of the timeline.
         *
         * @throws IllegalStateException if a preview or an export is in progress
         * @throws IllegalArgumentException if media item with the specified id does
         *        not exist (null is a valid value). if media item is not unique
         *        across all the audio tracks already added.
         * @throws UnsupportedOperationException if the implementation supports a
         *        limited number of audio tracks
         */
        InsertAudioTrack(
            [in] IAudioTrack2* audioTrack,
            [in] String afterAudioTrackId);

        /**
         * Move an AudioTrack after the AudioTrack with the specified id.
         *
         * @param audioTrackId The id of the AudioTrack to move
         * @param afterAudioTrackId Move the AudioTrack identified by audioTrackId
         *        after the AudioTrack identified by this parameter. If this
         *        parameter is null the audio track is added at the beginning of
         *        the timeline.
         *
         * @throws IllegalStateException if a preview or an export is in progress
         * @throws IllegalArgumentException if one of media item ids is invalid
         *        (null is a valid value)
         */
        MoveAudioTrack(
            [in] String audioTrackId,
            [in] String afterAudioTrackId);

        /**
         * Remove the audio track with the specified id. If the extraction of the
         * audio waveform is in progress, the extraction is canceled and the file is
         * deleted.
         *
         * @param audioTrackId The id of the audio track to be removed
         *
         * @return The audio track that was removed
         * @throws IllegalStateException if a preview or an export is in progress
         */
        RemoveAudioTrack(
            [in] String audioTrackId,
            [out] IAudioTrack2** result);

        /**
         * Get the list of AudioTracks in order in which they appear in the
         * storyboard.
         *
         * Note that if any AudioTrack source files are not accessible anymore,
         * this method will still provide the full list of audio tracks.
         *
         * @return The list of AudioTracks. If no audio tracks exist an empty list
         *        will be returned.
         */
        GetAllAudioTracks(
           [out] IObjectContainer** result);

        /**
         * Find the AudioTrack with the specified id
         *
         * @param audioTrackId The AudioTrack id
         *
         * @return The AudioTrack with the specified id (null if it does not exist)
         */
        GetAudioTrack(
            [in] String audioTrackId,
            [out] IAudioTrack2** result);

        /**
         * Set the aspect ratio used in the preview and the export movie.
         *
         * The default aspect ratio is ASPECTRATIO_16_9 (16:9).
         *
         * @param aspectRatio to apply. If aspectRatio is the same as the current
         *        aspect ratio, then this function just returns. The supported
         *        aspect ratio are defined in the MediaProperties class for
         *        example: ASPECTRATIO_16_9
         *
         * @throws IllegalStateException if a preview or an export is in progress
         * @throws IllegalArgumentException if aspect ratio is not supported
         */
        SetAspectRatio(
            [in] Int32 aspectRatio);

        /**
         * Get current aspect ratio.
         *
         * @return The aspect ratio as described in MediaProperties
         */
        GetAspectRatio(
            [out] Int32* result);

        /**
         * Get the preview (and output movie) duration.
         *
         * @return The duration of the preview (and output movie)
         */
        GetDuration(
            [out] Int64* result);

        /**
         * Render a frame according to the preview aspect ratio and activating all
         * storyboard items relative to the specified time.
         *
         * @param surfaceHolder SurfaceHolder used by the application
         * @param timeMs time corresponding to the frame to display
         * @param overlayData The overlay data
         *
         * @return The accurate time stamp of the frame that is rendered.
         *
         * @throws IllegalStateException if a preview or an export is already in
         *        progress
         * @throws IllegalArgumentException if time is negative or beyond the
         *        preview duration
         */
        RenderPreviewFrame(
            [in] ISurfaceHolder* surfaceHolder,
            [in] Int64 timeMs,
            [in] IVideoEditorOverlayData* overlayData,
            [out] Int64* result);

        /**
         * This method must be called after any changes made to the storyboard
         * and before startPreview is called. Note that this method may block for an
         * extensive period of time.
         */
        GeneratePreview(
            [in] IVideoEditorMediaProcessingProgressListener* listener);

        /**
         * Start the preview of all the storyboard items applied on all MediaItems
         * This method does not block (does not wait for the preview to complete).
         * The PreviewProgressListener allows to track the progress at the time
         * interval determined by the callbackAfterFrameCount parameter. The
         * SurfaceHolder has to be created and ready for use before calling this
         * method. The method is a no-op if there are no MediaItems in the
         * storyboard.
         *
         * @param surfaceHolder SurfaceHolder where the preview is rendered.
         * @param fromMs The time (relative to the timeline) at which the preview
         *        will start
         * @param toMs The time (relative to the timeline) at which the preview will
         *        stop. Use -1 to play to the end of the timeline
         * @param loop true if the preview should be looped once it reaches the end
         * @param callbackAfterFrameCount The listener interface should be invoked
         *        after the number of frames specified by this parameter.
         * @param listener The listener which will be notified of the preview
         *        progress
         *
         * @throws IllegalArgumentException if fromMs is beyond the preview duration
         * @throws IllegalStateException if a preview or an export is already in
         *        progress
         */
        StartPreview(
            [in] ISurfaceHolder* surfaceHolder,
            [in] Int64 fromMs,
            [in] Int64 toMs,
            [in] Boolean loop,
            [in] Int32 callbackAfterFrameCount,
            [in] IVideoEditorPreviewProgressListener* listener);

        /**
         * Stop the current preview. This method blocks until ongoing preview is
         * stopped. Ignored if there is no preview running.
         *
         * @return The accurate current time when stop is effective expressed in
         *        milliseconds
         */
        StopPreview(
            [out] Int64* result);

        /**
         * Clears the preview surface
         *
         * @param surfaceHolder SurfaceHolder where the preview is rendered
         * and needs to be cleared.
         */
        ClearSurface(
            [in] ISurfaceHolder* surfaceHolder);
    }
    } // namespace videoeditor
    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}