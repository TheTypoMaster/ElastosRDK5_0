module
{
    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Videoeditor {

    interface IVideoEditorFactory {

    }

    interface IVideoEditorFactoryHelper {
        /**
         * This is the factory method for creating a new VideoEditor instance.
         *
         * @param projectPath The path where all VideoEditor internal
         *            files are stored. When a project is deleted the application is
         *            responsible for deleting the path and its contents.
         *
         * @return The VideoEditor instance
         *
         * @throws IOException if path does not exist or if the path can
         *             not be accessed in read/write mode
         */
        Create(
            [in] String projectPath,
            [out] IVideoEditor** result);

        /**
         * This is the factory method for instantiating a VideoEditor from the
         * internal state previously saved with the
         * {@link VideoEditor#save(String)} method.
         *
         * @param projectPath The path where all VideoEditor internal files
         *            are stored. When a project is deleted the application is
         *            responsible for deleting the path and its contents.
         * @param generatePreview if set to true the
         *      {@link MediaEditor#generatePreview(MediaProcessingProgressListener
         *             listener)}
         *      will be called internally to generate any needed transitions.
         *
         * @return The VideoEditor instance
         *
         * @throws IOException if path does not exist or if the path can
         *             not be accessed in read/write mode or if one of the resource
         *             media files cannot be retrieved
         */
        Load(
            [in] String projectPath,
            [in] Boolean generatePreview,
            [out] IVideoEditor** result);
    }
    } // namespace videoeditor
    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}