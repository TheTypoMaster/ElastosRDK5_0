module
{
    interface Elastos.Droid.Media.Videoeditor.ITransition;
    interface Elastos.Droid.Media.Videoeditor.IOverlay;
    interface Elastos.Droid.Graphics.IBitmap;

    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Videoeditor {

    interface IMediaItemGetThumbnailListCallback {
        OnThumbnail(
            [in] IBitmap* bitmap,
            [in] Int32 index);
    }

    [deprecated]
    interface IMediaItem {
        /**
         *  A constant which can be used to specify the end of the file (instead of
         *  providing the actual duration of the media item).
         */
        const Int32 END_OF_FILE = -1;

        /**
         *  Rendering modes
         */
        /**
         * When using the RENDERING_MODE_BLACK_BORDER rendering mode video frames
         * are resized by preserving the aspect ratio until the movie matches one of
         * the dimensions of the output movie. The areas outside the resized video
         * clip are rendered black.
         */
        const Int32 RENDERING_MODE_BLACK_BORDER = 0;

        /**
         * When using the RENDERING_MODE_STRETCH rendering mode video frames are
         * stretched horizontally or vertically to match the current aspect ratio of
         * the video editor.
         */
        const Int32 RENDERING_MODE_STRETCH = 1;

        /**
         * When using the RENDERING_MODE_CROPPING rendering mode video frames are
         * scaled horizontally or vertically by preserving the original aspect ratio
         * of the media item.
         */
        const Int32 RENDERING_MODE_CROPPING = 2;

            /**
         * @return The id of the media item
         */
        GetId(
            [out] String* result);

        /**
         * @return The media source file name
         */
        GetFilename(
            [out] String* result);

        /**
         * If aspect ratio of the MediaItem is different from the aspect ratio of
         * the editor then this API controls the rendering mode.
         *
         * @param renderingMode rendering mode. It is one of:
         *            {@link #RENDERING_MODE_BLACK_BORDER},
         *            {@link #RENDERING_MODE_STRETCH}
         */
        SetRenderingMode(
            [in] Int32 renderingMode);

        /**
         * @return The rendering mode
         */
        GetRenderingMode(
            [out] Int32* result);

        /**
         * @return The begin transition
         */
        GetBeginTransition(
            [out] ITransition** result);

        /**
         * @return The end transition
         */
        GetEndTransition(
            [out] ITransition** result);

        /**
         * @return The timeline duration. This is the actual duration in the
         *         timeline (trimmed duration)
         */
        GetTimelineDuration(
            [out] Int64* result);

        /**
         * @return The is the full duration of the media item (not trimmed)
         */
        GetDuration(
            [out] Int64* result);

        /**
         * @return The source file type
         */
        GetFileType(
            [out] Int32* result);

        /**
         * @return Get the native width of the media item
         */
        GetWidth(
            [out] Int32* result);

        /**
         * @return Get the native height of the media item
         */
        GetHeight(
            [out] Int32* result);

        /**
         * Get aspect ratio of the source media item.
         *
         * @return the aspect ratio as described in MediaProperties.
         *         MediaProperties.ASPECT_RATIO_UNDEFINED if aspect ratio is not
         *         supported as in MediaProperties
         */
        GetAspectRatio(
            [out] Int32* result);

        /**
         * Add the specified effect to this media item.
         *
         * Note that certain types of effects cannot be applied to video and to
         * image media items. For example in certain implementation a Ken Burns
         * implementation cannot be applied to video media item.
         *
         * This method invalidates transition video clips if the
         * effect overlaps with the beginning and/or the end transition.
         *
         * @param effect The effect to apply
         * @throws IllegalStateException if a preview or an export is in progress
         * @throws IllegalArgumentException if the effect start and/or duration are
         *      invalid or if the effect cannot be applied to this type of media
         *      item or if the effect id is not unique across all the Effects
         *      added.
         */
        AddEffect(
            [in] IEffect* effect);


        /**
         * Remove the effect with the specified id.
         *
         * This method invalidates a transition video clip if the effect overlaps
         * with a transition.
         *
         * @param effectId The id of the effect to be removed
         *
         * @return The effect that was removed
         * @throws IllegalStateException if a preview or an export is in progress
         */
        RemoveEffect(
            [in] String effectId,
            [out] IEffect** result);

        /**
         * Find the effect with the specified id
         *
         * @param effectId The effect id
         * @return The effect with the specified id (null if it does not exist)
         */
        GetEffect(
            [in] String effectId,
            [out] IEffect** result);

        /**
         * Get the list of effects.
         *
         * @return the effects list. If no effects exist an empty list will be
         *         returned.
         */
        GetAllEffects(
           [out, callee] ArrayOf<IEffect*>* result);

        /**
         * Add an overlay to the storyboard. This method invalidates a transition
         * video clip if the overlay overlaps with a transition.
         *
         * @param overlay The overlay to add
         * @throws IllegalStateException if a preview or an export is in progress or
         *             if the overlay id is not unique across all the overlays added
         *             or if the bitmap is not specified or if the dimensions of the
         *             bitmap do not match the dimensions of the media item
         * @throws FileNotFoundException, IOException if overlay could not be saved
         *             to project path
         */
        AddOverlay(
            [in] IOverlay* overlay);

        /**
         * Remove the overlay with the specified id.
         *
         * This method invalidates a transition video clip if the overlay overlaps
         * with a transition.
         *
         * @param overlayId The id of the overlay to be removed
         *
         * @return The overlay that was removed
         * @throws IllegalStateException if a preview or an export is in progress
         */
        RemoveOverlay(
            [in] String overlayId,
            [out] IOverlay** result);

        /**
         * Find the overlay with the specified id
         *
         * @param overlayId The overlay id
         *
         * @return The overlay with the specified id (null if it does not exist)
         */
        GetOverlay(
            [in] String overlayId,
            [out] IOverlay** result);

        /**
         * Get the list of overlays associated with this media item
         *
         * Note that if any overlay source files are not accessible anymore,
         * this method will still provide the full list of overlays.
         *
         * @return The list of overlays. If no overlays exist an empty list will
         *         be returned.
         */
        GetAllOverlays(
           [out, callee] ArrayOf<IOverlay*>* result);

        /**
         * Create a thumbnail at specified time in a video stream in Bitmap format
         *
         * @param width width of the thumbnail in pixels
         * @param height height of the thumbnail in pixels
         * @param timeMs The time in the source video file at which the thumbnail is
         *            requested (even if trimmed).
         *
         * @return The thumbnail as a Bitmap.
         *
         * @throws IOException if a file error occurs
         * @throws IllegalArgumentException if time is out of video duration
         */
        GetThumbnail(
            [in] Int32 width,
            [in] Int32 height,
            [in] Int64 timeMs,
            [out] IBitmap** result);

        /**
         * Get the array of Bitmap thumbnails between start and end.
         *
         * @param width width of the thumbnail in pixels
         * @param height height of the thumbnail in pixels
         * @param startMs The start of time range in milliseconds
         * @param endMs The end of the time range in milliseconds
         * @param thumbnailCount The thumbnail count
         * @param indices The indices of the thumbnails wanted
         * @param callback The callback used to pass back the bitmaps
         *
         * @throws IOException if a file error occurs
         */
        GetThumbnailList(
            [in] Int32 width,
            [in] Int32 height,
            [in] Int64 startMs,
            [in] Int64 endMs,
            [in] Int32 thumbnailCount,
            [in] ArrayOf<Int32>* indices,
            [in] IMediaItemGetThumbnailListCallback* listcallback);

        // This is for compatibility, only used in tests.
        GetThumbnailList(
            [in] Int32 width,
            [in] Int32 height,
            [in] Int64 startMs,
            [in] Int64 endMs,
            [in] Int32 thumbnailCount,
            [out,callee] ArrayOf<IBitmap*>* result);

        Equals(
            [in] IInterface* object,
            [out] Boolean* result);

        GetHashCode(
            [out] Int32* result);
    }

    } // namespace videoeditor
    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}
