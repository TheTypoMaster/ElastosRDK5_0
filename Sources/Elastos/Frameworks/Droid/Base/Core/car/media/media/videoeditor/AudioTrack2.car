module
{

    interface Elastos.Droid.Media.Videoeditor.IExtractAudioWaveformProgressListener;
    interface Elastos.Droid.Media.Videoeditor.IWaveformData;

    namespace Elastos {
    namespace Droid {
    namespace Media {
    namespace Videoeditor {

    interface IAudioTrack2 {
        /**
         * Get the id of the audio track
         *
         * @return The id of the audio track
         */
        GetId(
            [out] String* result);

        /**
         * Get the filename for this audio track source.
         *
         * @return The filename as an absolute file name
         */
        GetFilename(
            [out] String* result);

        /**
         * Get the number of audio channels in the source of this audio track
         *
         * @return The number of audio channels in the source of this audio track
         */
        GetAudioChannels(
            [out] Int32* result);

        /**
         * Get the audio codec of the source of this audio track
         *
         * @return The audio codec of the source of this audio track
         * {@link android.media.videoeditor.MediaProperties}
         */
        GetAudioType(
            [out] Int32* result);


        /**
         * Get the audio sample frequency of the audio track
         *
         * @return The audio sample frequency of the audio track
         */
        GetAudioSamplingFrequency(
            [out] Int32* result);

        /**
         * Get the audio bitrate of the audio track
         *
         * @return The audio bitrate of the audio track
         */
        GetAudioBitrate(
            [out] Int32* result);

        /**
         * Set the volume of this audio track as percentage of the volume in the
         * original audio source file.
         *
         * @param volumePercent Percentage of the volume to apply. If it is set to
         *         0, then volume becomes mute. It it is set to 100, then volume
         *         is same as original volume. It it is set to 200, then volume
         *         is doubled (provided that volume amplification is supported)
         *
         * @throws UnsupportedOperationException if volume amplification is
         *         requested and is not supported.
         */
        SetVolume(
            [in] Int32 volumePercent);

        /**
         * Get the volume of the audio track as percentage of the volume in the
         * original audio source file.
         *
         * @return The volume in percentage
         */
        GetVolume(
            [out] Int32* result);

        /**
         * Mute/Unmute the audio track
         *
         * @param muted true to mute the audio track. SetMute(true) will make
         *         the volume of this Audio Track to 0.
         */
        SetMute(
            [in] Boolean muted);


        /**
         * Check if the audio track is muted
         *
         * @return true if the audio track is muted
         */
        IsMuted(
            [out] Boolean* result);

        /**
         * Get the start time of this audio track relative to the storyboard
         * timeline.
         *
         * @return The start time in milliseconds
         */
        GetStartTime(
            [out] Int64* result);

        /**
         * Get the audio track duration
         *
         * @return The duration in milliseconds. This value represents actual audio
         *         track duration. This value is not effected by 'enableLoop' or
         *         'setExtractBoundaries'.
         */
        GetDuration(
            [out] Int64* result);

        /**
         * Get the audio track timeline duration
         *
         * @return The timeline duration as defined by the begin and end boundaries
         */
        GetTimelineDuration(
            [out] Int64* result);

        /**
         * Sets the start and end marks for trimming an audio track
         *
         * @param beginMs start time in the audio track in milliseconds (relative to
         *         the beginning of the audio track)
         * @param endMs end time in the audio track in milliseconds (relative to the
         *         beginning of the audio track)
         */
        SetExtractBoundaries(
            [in] Int64 beginMs,
            [in] Int64 endMs);

        /**
         * Get the boundary begin time
         *
         * @return The boundary begin time
         */
        GetBoundaryBeginTime(
            [out] Int64* result);

        /**
         * Get the boundary end time
         *
         * @return The boundary end time
         */
        GetBoundaryEndTime(
            [out] Int64* result);

        /**
         * Enable the loop mode for this audio track. Note that only one of the
         * audio tracks in the timeline can have the loop mode enabled. When looping
         * is enabled the samples between mBeginBoundaryTimeMs and
         * mEndBoundaryTimeMs are looped.
         */
        EnableLoop();

        /**
         * Disable the loop mode
         */
        DisableLoop();

        /**
         * Check if looping is enabled
         *
         * @return true if looping is enabled
         */
        IsLooping(
            [out] Boolean* result);

        /**
         * Disable the audio duck effect
         */
        DisableDucking();

        /**
         * Enable ducking by specifying the required parameters
         *
         * @param threshold Ducking will be activated when the energy in
         *         the media items audio signal goes above this value. The valid
         *         range of values is 0db to 90dB. 0dB is equivalent to disabling
         *         ducking.
         * @param duckedTrackVolume The relative volume of the audio track when ducking
         *         is active. The valid range of values is 0 to 100.
         */
        EnableDucking(
            [in] Int32 threshold,
            [in] Int32 duckedTrackVolume);

        /**
         * Check if ducking is enabled
         *
         * @return true if ducking is enabled
         */
        IsDuckingEnabled(
            [out] Boolean* result);

        /**
         * Get the ducking threshold.
         *
         * @return The ducking threshold
         */
        GetDuckingThreshhold(
            [out] Int32* result);

        /**
         * Get the ducked track volume.
         *
         * @return The ducked track volume
         */
        GetDuckedTrackVolume(
            [out] Int32* result);

        /**
         * This API allows to generate a file containing the sample volume levels of
         * this audio track object. This function may take significant time and is
         * blocking. The filename can be retrieved using getAudioWaveformFilename().
         *
         * @param listener The progress listener
         *
         * @throws IOException if the output file cannot be created
         * @throws IllegalArgumentException if the audio file does not have a valid
         *         audio track
         * @throws IllegalStateException if the codec type is unsupported
         */
        ExtractAudioWaveform(
            [in] IExtractAudioWaveformProgressListener* listener);

        /**
         * Get the audio waveform file name if extractAudioWaveform was successful.
         *
         * @return the name of the file, null if the file does not exist
         */
        GetAudioWaveformFilename(
            [out] String* result);

        /**
         * Delete the waveform file
         */
        Invalidate();

        /**
         * Get the audio waveform data.
         *
         * @return The waveform data
         *
         * @throws IOException if the waveform file cannot be found
         */
        GetWaveformData(
            [out] IWaveformData** result);

        Equals(
            [in] IInterface* object,
            [out] Boolean* result);

        GetHashCode(
            [out] Int32* result);

    }
    } // namespace videoeditor
    } // namespace media
    } // namepsace Droid
    } // namespace Elastos
}