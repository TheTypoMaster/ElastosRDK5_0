module
{
    using interface Elastos.IO.IFile;

    namespace Elastos {
    namespace Droid {
    namespace Os {

    interface IEnvironment {
        /**
         * Standard directory in which to place any audio files that should be
         * in the regular list of music for the user.
         * This may be combined with
         * {@link #DIRECTORY_PODCASTS}, {@link #DIRECTORY_NOTIFICATIONS},
         * {@link #DIRECTORY_ALARMS}, and {@link #DIRECTORY_RINGTONES} as a series
         * of directories to categories a particular audio file as more than one
         * type.
         */
        const String DIRECTORY_MUSIC = "Music";

        /**
         * Standard directory in which to place any audio files that should be
         * in the list of podcasts that the user can select (not as regular
         * music).
         * This may be combined with {@link #DIRECTORY_MUSIC},
         * {@link #DIRECTORY_NOTIFICATIONS},
         * {@link #DIRECTORY_ALARMS}, and {@link #DIRECTORY_RINGTONES} as a series
         * of directories to categories a particular audio file as more than one
         * type.
         */
        const String DIRECTORY_PODCASTS = "Podcasts";

        /**
         * Standard directory in which to place any audio files that should be
         * in the list of ringtones that the user can select (not as regular
         * music).
         * This may be combined with {@link #DIRECTORY_MUSIC},
         * {@link #DIRECTORY_PODCASTS}, {@link #DIRECTORY_NOTIFICATIONS}, and
         * {@link #DIRECTORY_ALARMS} as a series
         * of directories to categories a particular audio file as more than one
         * type.
         */
        const String DIRECTORY_RINGTONES = "Ringtones";

        /**
         * Standard directory in which to place any audio files that should be
         * in the list of alarms that the user can select (not as regular
         * music).
         * This may be combined with {@link #DIRECTORY_MUSIC},
         * {@link #DIRECTORY_PODCASTS}, {@link #DIRECTORY_NOTIFICATIONS},
         * and {@link #DIRECTORY_RINGTONES} as a series
         * of directories to categories a particular audio file as more than one
         * type.
         */
        const String DIRECTORY_ALARMS = "Alarms";

        /**
         * Standard directory in which to place any audio files that should be
         * in the list of notifications that the user can select (not as regular
         * music).
         * This may be combined with {@link #DIRECTORY_MUSIC},
         * {@link #DIRECTORY_PODCASTS},
         * {@link #DIRECTORY_ALARMS}, and {@link #DIRECTORY_RINGTONES} as a series
         * of directories to categories a particular audio file as more than one
         * type.
         */
        const String DIRECTORY_NOTIFICATIONS = "Notifications";

        /**
         * Standard directory in which to place pictures that are available to
         * the user.  Note that this is primarily a convention for the top-level
         * public directory, as the media scanner will find and collect pictures
         * in any directory.
         */
        const String DIRECTORY_PICTURES = "Pictures";

        /**
         * Standard directory in which to place movies that are available to
         * the user.  Note that this is primarily a convention for the top-level
         * public directory, as the media scanner will find and collect movies
         * in any directory.
         */
        const String DIRECTORY_MOVIES = "Movies";

        /**
         * Standard directory in which to place files that have been downloaded by
         * the user.  Note that this is primarily a convention for the top-level
         * public directory, you are free to download files anywhere in your own
         * private directories.  Also note that though the constant here is
         * named DIRECTORY_DOWNLOADS (plural), the actual file name is non-plural for
         * backwards compatibility reasons.
         */
        const String DIRECTORY_DOWNLOADS = "Download";

        /**
         * The traditional location for pictures and videos when mounting the
         * device as a camera.  Note that this is primarily a convention for the
         * top-level public directory, as this convention makes no sense elsewhere.
         */
        const String DIRECTORY_DCIM = "DCIM";

        /**
         * {@link #getExternalStorageState()} returns MEDIA_REMOVED if the media is not present.
         */
        const String MEDIA_REMOVED = "removed";

        /**
         * {@link #getExternalStorageState()} returns MEDIA_UNMOUNTED if the media is present
         * but not mounted.
         */
        const String MEDIA_UNMOUNTED = "unmounted";

        /**
         * {@link #getExternalStorageState()} returns MEDIA_CHECKING if the media is present
         * and being disk-checked
         */
        const String MEDIA_CHECKING = "checking";

        /**
         * {@link #getExternalStorageState()} returns MEDIA_NOFS if the media is present
         * but is blank or is using an unsupported filesystem
         */
        const String MEDIA_NOFS = "nofs";

        /**
         * {@link #getExternalStorageState()} returns MEDIA_MOUNTED if the media is present
         * and mounted at its mount point with read/write access.
         */
        const String MEDIA_MOUNTED = "mounted";

        /**
         * {@link #getExternalStorageState()} returns MEDIA_MOUNTED_READ_ONLY if the media is present
         * and mounted at its mount point with read only access.
         */
        const String MEDIA_MOUNTED_READ_ONLY = "mounted_ro";

        /**
         * {@link #getExternalStorageState()} returns MEDIA_SHARED if the media is present
         * not mounted, and shared via USB mass storage.
         */
        const String MEDIA_SHARED = "shared";

        /**
         * {@link #getExternalStorageState()} returns MEDIA_BAD_REMOVAL if the media was
         * removed before it was unmounted.
         */
        const String MEDIA_BAD_REMOVAL = "bad_removal";

        /**
         * {@link #getExternalStorageState()} returns MEDIA_UNMOUNTABLE if the media is present
         * but cannot be mounted.  Typically this happens if the file system on the
         * media is corrupted.
         */
        const String MEDIA_UNMOUNTABLE = "unmountable";

        /**
         * Gets the Android root directory.
         */
        GetRootDirectory(
            [out] IFile** dir);

        /**
         * Gets the Android data directory.
         */
        GetDataDirectory(
            [out] IFile** dir);

        /**
         * Gets the system directory available for secure storage.
         * If Encrypted File system is enabled, it returns an encrypted directory (/data/secure/system).
         * Otherwise, it returns the unencrypted /data/system directory.
         * @return File object representing the secure storage system directory.
         * @hide
         */
        GetSystemSecureDirectory(
            [out] IFile** dir);

        /**
         * Gets the data directory for secure storage.
         * If Encrypted File system is enabled, it returns an encrypted directory (/data/secure).
         * Otherwise, it returns the unencrypted /data directory.
         * @return File object representing the data directory for secure storage.
         * @hide
         */
        GetSecureDataDirectory(
            [out] IFile** dir);

        /**
         * Gets the Android external storage directory.  This directory may not
         * currently be accessible if it has been mounted by the user on their
         * computer, has been removed from the device, or some other problem has
         * happened.  You can determine its current state with
         * {@link #getExternalStorageState()}.
         *
         * <p><em>Note: don't be confused by the word "external" here.  This
         * directory can better be thought as media/shared storage.  It is a
         * filesystem that can hold a relatively large amount of data and that
         * is shared across all applications (does not enforce permissions).
         * Traditionally this is an SD card, but it may also be implemented as
         * built-in storage in a device that is distinct from the protected
         * internal storage and can be mounted as a filesystem on a computer.</em></p>
         *
         * <p>In devices with multiple "external" storage directories (such as
         * both secure app storage and mountable shared storage), this directory
         * represents the "primary" external storage that the user will interact
         * with.</p>
         *
         * <p>Applications should not directly use this top-level directory, in
         * order to avoid polluting the user's root namespace.  Any files that are
         * private to the application should be placed in a directory returned
         * by {@link android.content.Context#getExternalFilesDir
         * Context.getExternalFilesDir}, which the system will take care of deleting
         * if the application is uninstalled.  Other shared files should be placed
         * in one of the directories returned by
         * {@link #getExternalStoragePublicDirectory}.
         *
         * <p>Here is an example of typical code to monitor the state of
         * external storage:</p>
         *
         * {@sample development/samples/ApiDemos/src/com/example/android/apis/content/ExternalStorage.java
         * monitor_storage}
         *
         * @see #getExternalStorageState()
         * @see #isExternalStorageRemovable()
         */
        GetExternalStorageDirectory(
            [out] IFile** dir);

        GetLegacyExternalStorageDirectory(
            [out] IFile** dir);

        GetEmulatedStorageSource(
            [in] Int32 userId,
            [out] IFile** dir);

        GetEmulatedStorageObbSource(
            [out] IFile** dir);

        /**
         * Return the system directory for a user. This is for use by system services to store
         * files relating to the user. This directory will be automatically deleted when the user
         * is removed.
         *
         * @hide
         */
        GetUserSystemDirectory(
            [in] Int32 userId,
            [out] IFile** dir);

        /**
         * Get a top-level public external storage directory for placing files of
         * a particular type.  This is where the user will typically place and
         * manage their own files, so you should be careful about what you put here
         * to ensure you don't erase their files or get in the way of their own
         * organization.
         *
         * <p>Here is an example of typical code to manipulate a picture on
         * the public external storage:</p>
         *
         * {@sample development/samples/ApiDemos/src/com/example/android/apis/content/ExternalStorage.java
         * public_picture}
         *
         * @param type The type of storage directory to return.  Should be one of
         * {@link #DIRECTORY_MUSIC}, {@link #DIRECTORY_PODCASTS},
         * {@link #DIRECTORY_RINGTONES}, {@link #DIRECTORY_ALARMS},
         * {@link #DIRECTORY_NOTIFICATIONS}, {@link #DIRECTORY_PICTURES},
         * {@link #DIRECTORY_MOVIES}, {@link #DIRECTORY_DOWNLOADS}, or
         * {@link #DIRECTORY_DCIM}.  May not be null.
         *
         * @return Returns the File path for the directory.  Note that this
         * directory may not yet exist, so you must make sure it exists before
         * using it such as with {@link File#mkdirs File.mkdirs()}.
         */
        GetExternalStoragePublicDirectory(
            [in] String type,
            [out] IFile** dir);

        /**
         * Gets the Android Download/Cache content directory.
         */
        GetDownloadCacheDirectory(
            [out] IFile** dir);

         /**
         * Gets the current state of the primary "external" storage device.
         *
         * <p>See {@link #getExternalStorageDirectory()} for more information.
         */
        GetExternalStorageState(
            [out] String* state);

        /**
         * Returns whether the primary "external" storage device is removable.
         * If true is returned, this device is for example an SD card that the
         * user can remove.  If false is returned, the storage is built into
         * the device and can not be physically removed.
         *
         * <p>See {@link #getExternalStorageDirectory()} for more information.
         */
        IsExternalStorageRemovable(
            [out] Boolean* isRemovable);

        /**
         * Returns whether the device has an external storage device which is
         * emulated. If true, the device does not have real external storage, and the directory
         * returned by {@link #getExternalStorageDirectory()} will be allocated using a portion of
         * the internal storage system.
         *
         * <p>Certain system services, such as the package manager, use this
         * to determine where to install an application.
         *
         * <p>Emulated external storage may also be encrypted - see
         * {@link android.app.admin.DevicePolicyManager#setStorageEncryption(
         * android.content.ComponentName, boolean)} for additional details.
         */
        IsExternalStorageEmulated(
            [out] Boolean* isEmulated);
    }

    interface IUserEnvironment {
        GetExternalStorageDirectory(
            [out] IFile** dir);

        GetExternalStorageObbDirectory(
            [out] IFile** dir);

        GetExternalStoragePublicDirectory(
            [in] String type,
            [out] IFile** dir);

        GetExternalStorageAndroidDataDir(
            [out] IFile** dir);

        GetExternalStorageAppDataDirectory(
            [in] String packageName,
            [out] IFile** dir);

        GetExternalStorageAppMediaDirectory(
            [in] String packageName,
            [out] IFile** dir);

        GetExternalStorageAppObbDirectory(
            [in] String packageName,
            [out] IFile** dir);

        GetExternalStorageAppFilesDirectory(
            [in] String packageName,
            [out] IFile** dir);

        GetExternalStorageAppCacheDirectory(
            [in] String packageName,
            [out] IFile** dir);

        GetMediaStorageDirectory(
            [out] IFile** dir);
    }

    } // namespace Os
    } // namespace Droid
    } // namespace Elastos

} // module