module
{
    using interface Elastos.Core.IRunnable;
    interface Elastos.Droid.Os.ILooper;
    interface Elastos.Droid.Os.IIMessenger;

    namespace Elastos {
    namespace Droid {
    namespace Os {

    /**
     * Callback interface you can use when instantiating a Handler to avoid
     * having to implement your own subclass of Handler.
     */
    interface IHandlerCallback {
        HandleMessage(
            [in] IMessage* msg,
            [out] Boolean* result);
    }

    /**
     * A Handler allows you to send and process {@link Message} and Runnable
     * objects associated with a thread's {@link MessageQueue}.  Each Handler
     * instance is associated with a single thread and that thread's message
     * queue.  When you create a new Handler, it is bound to the thread /
     * message queue of the thread that is creating it -- from that point on,
     * it will deliver messages and runnables to that message queue and execute
     * them as they come out of the message queue.
     *
     * <p>There are two main uses for a Handler: (1) to schedule messages and
     * runnables to be executed as some point in the future; and (2) to enqueue
     * an action to be performed on a different thread than your own.
     *
     * <p>Scheduling messages is accomplished with the
     * {@link #post}, {@link #postAtTime(Runnable, long)},
     * {@link #postDelayed}, {@link #sendEmptyMessage},
     * {@link #sendMessage}, {@link #sendMessageAtTime}, and
     * {@link #sendMessageDelayed} methods.  The <em>post</em> versions allow
     * you to enqueue Runnable objects to be called by the message queue when
     * they are received; the <em>sendMessage</em> versions allow you to enqueue
     * a {@link Message} object containing a bundle of data that will be
     * processed by the Handler's {@link #handleMessage} method (requiring that
     * you implement a subclass of Handler).
     *
     * <p>When posting or sending to a Handler, you can either
     * allow the item to be processed as soon as the message queue is ready
     * to do so, or specify a delay before it gets processed or absolute time for
     * it to be processed.  The latter two allow you to implement timeouts,
     * ticks, and other timing-based behavior.
     *
     * <p>When a
     * process is created for your application, its main thread is dedicated to
     * running a message queue that takes care of managing the top-level
     * application objects (activities, broadcast receivers, etc) and any windows
     * they create.  You can create your own threads, and communicate back with
     * the main application thread through a Handler.  This is done by calling
     * the same <em>post</em> or <em>sendMessage</em> methods as before, but from
     * your new thread.  The given Runnable or Message will then be scheduled
     * in the Handler's message queue and processed when appropriate.
     */
    interface IHandler {
        /**
         * Subclasses must implement this to receive messages.
         */
        HandleMessage(
            [in] IMessage* msg);

        /**
         * Handle system messages here.
         */
        DispatchMessage(
            [in] IMessage* msg);

        /**
         * Returns a string representing the name of the specified message.
         * The default implementation will either return the class name of the
         * message callback if any, or the hexadecimal representation of the
         * message "what" field.
         *
         * @param message The message whose name is being queried
         */
        GetMessageName(
            [in] IMessage* msg,
            [out] String* name);

        /**
         * Returns a new {@link android.os.Message Message} from the global message pool. More efficient than
         * creating and allocating new instances. The retrieved message has its handler set to this instance (Message.target == this).
         *  If you don't want that facility, just call Message.obtain() instead.
         */
        ObtainMessage(
            [out] IMessage** msg);

        /**
         * Same as {@link #obtainMessage()}, except that it also sets the what member of the returned Message.
         *
         * @param what Value to assign to the returned Message.what field.
         * @return A Message from the global message pool.
         */
        ObtainMessage(
            [in] Int32 what,
            [out] IMessage** msg);

        /**
         *
         * Same as {@link #obtainMessage()}, except that it also sets the what and obj members
         * of the returned Message.
         *
         * @param what Value to assign to the returned Message.what field.
         * @param obj Value to assign to the returned Message.obj field.
         * @return A Message from the global message pool.
         */
        ObtainMessage(
            [in] Int32 what,
            [in] IInterface* obj,
            [out] IMessage** msg);

        /**
         *
         * Same as {@link #obtainMessage()}, except that it also sets the what, arg1 and arg2 members of the returned
         * Message.
         * @param what Value to assign to the returned Message.what field.
         * @param arg1 Value to assign to the returned Message.arg1 field.
         * @param arg2 Value to assign to the returned Message.arg2 field.
         * @return A Message from the global message pool.
         */
        ObtainMessage(
            [in] Int32 what,
            [in] Int32 arg1,
            [in] Int32 arg2,
            [out] IMessage** msg);

        /**
         *
         * Same as {@link #obtainMessage()}, except that it also sets the what, obj, arg1,and arg2 values on the
         * returned Message.
         * @param what Value to assign to the returned Message.what field.
         * @param arg1 Value to assign to the returned Message.arg1 field.
         * @param arg2 Value to assign to the returned Message.arg2 field.
         * @param obj Value to assign to the returned Message.obj field.
         * @return A Message from the global message pool.
         */
        ObtainMessage(
            [in] Int32 what,
            [in] Int32 arg1,
            [in] Int32 arg2,
            [in] IInterface* obj,
            [out] IMessage** msg);

        /**
         * Causes the Runnable r to be added to the message queue.
         * The runnable will be run on the thread to which this handler is
         * attached.
         *
         * @param r The Runnable that will be executed.
         *
         * @return Returns true if the Runnable was successfully placed in to the
         *         message queue.  Returns false on failure, usually because the
         *         looper processing the message queue is exiting.
         */
        Post(
            [in] IRunnable* action,
            [out] Boolean* result);

        /**
         * Causes the Runnable r to be added to the message queue, to be run
         * at a specific time given by <var>uptimeMillis</var>.
         * <b>The time-base is {@link android.os.SystemClock#uptimeMillis}.</b>
         * Time spent in deep sleep will add an additional delay to execution.
         * The runnable will be run on the thread to which this handler is attached.
         *
         * @param r The Runnable that will be executed.
         * @param uptimeMillis The absolute time at which the callback should run,
         *         using the {@link android.os.SystemClock#uptimeMillis} time-base.
         *
         * @return Returns true if the Runnable was successfully placed in to the
         *         message queue.  Returns false on failure, usually because the
         *         looper processing the message queue is exiting.  Note that a
         *         result of true does not mean the Runnable will be processed -- if
         *         the looper is quit before the delivery time of the message
         *         occurs then the message will be dropped.
         */
        PostAtTime(
            [in] IRunnable* action,
            [in] Int64 uptimeMillis,
            [out] Boolean* result);

        /**
         * Causes the Runnable r to be added to the message queue, to be run
         * at a specific time given by <var>uptimeMillis</var>.
         * <b>The time-base is {@link android.os.SystemClock#uptimeMillis}.</b>
         * Time spent in deep sleep will add an additional delay to execution.
         * The runnable will be run on the thread to which this handler is attached.
         *
         * @param r The Runnable that will be executed.
         * @param uptimeMillis The absolute time at which the callback should run,
         *         using the {@link android.os.SystemClock#uptimeMillis} time-base.
         *
         * @return Returns true if the Runnable was successfully placed in to the
         *         message queue.  Returns false on failure, usually because the
         *         looper processing the message queue is exiting.  Note that a
         *         result of true does not mean the Runnable will be processed -- if
         *         the looper is quit before the delivery time of the message
         *         occurs then the message will be dropped.
         *
         * @see android.os.SystemClock#uptimeMillis
         */
        PostAtTime(
            [in] IRunnable* action,
            [in] IInterface* token,
            [in] Int64 uptimeMillis,
            [out] Boolean* result);

        /**
         * Causes the Runnable r to be added to the message queue, to be run
         * after the specified amount of time elapses.
         * The runnable will be run on the thread to which this handler
         * is attached.
         * <b>The time-base is {@link android.os.SystemClock#uptimeMillis}.</b>
         * Time spent in deep sleep will add an additional delay to execution.
         *
         * @param r The Runnable that will be executed.
         * @param delayMillis The delay (in milliseconds) until the Runnable
         *        will be executed.
         *
         * @return Returns true if the Runnable was successfully placed in to the
         *         message queue.  Returns false on failure, usually because the
         *         looper processing the message queue is exiting.  Note that a
         *         result of true does not mean the Runnable will be processed --
         *         if the looper is quit before the delivery time of the message
         *         occurs then the message will be dropped.
         */
        PostDelayed(
            [in] IRunnable* action,
            [in] Int64 delayMillis,
            [out] Boolean* result);

        /**
         * Posts a message to an object that implements Runnable.
         * Causes the Runnable r to executed on the next iteration through the
         * message queue. The runnable will be run on the thread to which this
         * handler is attached.
         * <b>This method is only for use in very special circumstances -- it
         * can easily starve the message queue, cause ordering problems, or have
         * other unexpected side-effects.</b>
         *
         * @param r The Runnable that will be executed.
         *
         * @return Returns true if the message was successfully placed in to the
         *         message queue.  Returns false on failure, usually because the
         *         looper processing the message queue is exiting.
         */
        PostAtFrontOfQueue(
            [in] IRunnable* action,
            [out] Boolean* result);

        /**
         * Runs the specified task synchronously.
         * <p>
         * If the current thread is the same as the handler thread, then the runnable
         * runs immediately without being enqueued.  Otherwise, posts the runnable
         * to the handler and waits for it to complete before returning.
         * </p><p>
         * This method is dangerous!  Improper use can result in deadlocks.
         * Never call this method while any locks are held or use it in a
         * possibly re-entrant manner.
         * </p><p>
         * This method is occasionally useful in situations where a background thread
         * must synchronously await completion of a task that must run on the
         * handler's thread.  However, this problem is often a symptom of bad design.
         * Consider improving the design (if possible) before resorting to this method.
         * </p><p>
         * One example of where you might want to use this method is when you just
         * set up a Handler thread and need to perform some initialization steps on
         * it before continuing execution.
         * </p><p>
         * If timeout occurs then this method returns <code>false</code> but the runnable
         * will remain posted on the handler and may already be in progress or
         * complete at a later time.
         * </p><p>
         * When using this method, be sure to use {@link Looper#quitSafely} when
         * quitting the looper.  Otherwise {@link #runWithScissors} may hang indefinitely.
         * (TODO: We should fix this by making MessageQueue aware of blocking runnables.)
         * </p>
         *
         * @param r The Runnable that will be executed synchronously.
         * @param timeout The timeout in milliseconds, or 0 to wait indefinitely.
         *
         * @return Returns true if the Runnable was successfully executed.
         *         Returns false on failure, usually because the
         *         looper processing the message queue is exiting.
         *
         * @hide This method is prone to abuse and should probably not be in the API.
         * If we ever do make it part of the API, we might want to rename it to something
         * less funny like runUnsafe().
         */
        RunWithScissors(
            [in] IRunnable* r,
            [in] Int64 timeout,
            [out] Boolean* result);

        /**
         * Remove any pending posts of Runnable r that are in the message queue.
         */
        RemoveCallbacks(
            [in] IRunnable* action);

        /**
         * Remove any pending posts of Runnable <var>r</var> with Object
         * <var>token</var> that are in the message queue.  If <var>token</var> is null,
         * all callbacks will be removed.
         */
        RemoveCallbacks(
            [in] IRunnable* action,
            [in] IInterface* token);

        /**
         * Pushes a message onto the end of the message queue after all pending messages
         * before the current time. It will be received in {@link #handleMessage},
         * in the thread attached to this handler.
         *
         * @return Returns true if the message was successfully placed in to the
         *         message queue.  Returns false on failure, usually because the
         *         looper processing the message queue is exiting.
         */
        SendMessage(
            [in] IMessage* msg,
            [out] Boolean* result);

        /**
         * Sends a Message containing only the what value.
         *
         * @return Returns true if the message was successfully placed in to the
         *         message queue.  Returns false on failure, usually because the
         *         looper processing the message queue is exiting.
         */
        SendEmptyMessage(
            [in] Int32 what,
            [out] Boolean* result);

        /**
         * Sends a Message containing only the what value, to be delivered
         * after the specified amount of time elapses.
         * @see #sendMessageDelayed(android.os.Message, long)
         *
         * @return Returns true if the message was successfully placed in to the
         *         message queue.  Returns false on failure, usually because the
         *         looper processing the message queue is exiting.
         */
        SendEmptyMessageDelayed(
            [in] Int32 what,
            [in] Int64 delayMillis,
            [out] Boolean* result);

        /**
         * Sends a Message containing only the what value, to be delivered
         * at a specific time.
         * @see #sendMessageAtTime(android.os.Message, long)
         *
         * @return Returns true if the message was successfully placed in to the
         *         message queue.  Returns false on failure, usually because the
         *         looper processing the message queue is exiting.
         */
        SendEmptyMessageAtTime(
            [in] Int32 what,
            [in] Int64 delayMillis,
            [out] Boolean* result);

        /**
         * Enqueue a message into the message queue after all pending messages
         * before (current time + delayMillis). You will receive it in
         * {@link #handleMessage}, in the thread attached to this handler.
         *
         * @return Returns true if the message was successfully placed in to the
         *         message queue.  Returns false on failure, usually because the
         *         looper processing the message queue is exiting.  Note that a
         *         result of true does not mean the message will be processed -- if
         *         the looper is quit before the delivery time of the message
         *         occurs then the message will be dropped.
         */
        SendMessageDelayed(
            [in] IMessage* msg,
            [in] Int64 delayMillis,
            [out] Boolean* result);

        /**
         * Enqueue a message into the message queue after all pending messages
         * before the absolute time (in milliseconds) <var>uptimeMillis</var>.
         * <b>The time-base is {@link android.os.SystemClock#uptimeMillis}.</b>
         * Time spent in deep sleep will add an additional delay to execution.
         * You will receive it in {@link #handleMessage}, in the thread attached
         * to this handler.
         *
         * @param uptimeMillis The absolute time at which the message should be
         *         delivered, using the
         *         {@link android.os.SystemClock#uptimeMillis} time-base.
         *
         * @return Returns true if the message was successfully placed in to the
         *         message queue.  Returns false on failure, usually because the
         *         looper processing the message queue is exiting.  Note that a
         *         result of true does not mean the message will be processed -- if
         *         the looper is quit before the delivery time of the message
         *         occurs then the message will be dropped.
         */
        SendMessageAtTime(
            [in] IMessage* msg,
            [in] Int64 delayMillis,
            [out] Boolean* result);

        /**
         * Enqueue a message at the front of the message queue, to be processed on
         * the next iteration of the message loop.  You will receive it in
         * {@link #handleMessage}, in the thread attached to this handler.
         * <b>This method is only for use in very special circumstances -- it
         * can easily starve the message queue, cause ordering problems, or have
         * other unexpected side-effects.</b>
         *
         * @return Returns true if the message was successfully placed in to the
         *         message queue.  Returns false on failure, usually because the
         *         looper processing the message queue is exiting.
         */
        SendMessageAtFrontOfQueue(
            [in] IMessage* msg,
            [out] Boolean* result);

        /**
         * Remove any pending posts of messages with code 'what' that are in the
         * message queue.
         */
        RemoveMessages(
            [in] Int32 what);

        /**
         * Remove any pending posts of messages with code 'what' and whose obj is
         * 'object' that are in the message queue.  If <var>object</var> is null,
         * all messages will be removed.
         */
        RemoveMessages(
            [in] Int32 what,
            [in] IInterface* obj);

        /**
         * Remove any pending posts of callbacks and sent messages whose
         * <var>obj</var> is <var>token</var>.  If <var>token</var> is null,
         * all callbacks and messages will be removed.
         */
        RemoveCallbacksAndMessages(
            [in] IInterface* obj);

        /**
         * Check if there are any pending posts of messages with code 'what' in
         * the message queue.
         */
        HasMessages(
            [in] Int32 what,
            [out] Boolean* result);

        /**
         * Check if there are any pending posts of messages with code 'what' and
         * whose obj is 'object' in the message queue.
         */
        HasMessages(
            [in] Int32 what,
            [in] IInterface* obj,
            [out] Boolean* result);

        /**
         * Check if there are any pending posts of messages with callback r in
         * the message queue.
         *
         * @hide
         */
        HasCallbacks(
            [in] IRunnable* action,
            [out] Boolean* result);

        // if we can get rid of this method, the handler need not remember its loop
        // we could instead export a getMessageQueue() method...
        GetLooper(
            [out] ILooper** looper);

        GetMessageQueue(
            [out] IMessageQueue** cq);

        GetIMessenger(
            [out] IIMessenger** mgr);
    }

    } // namespace Os
    } // namespace Droid
    } // namespace Elastos
}
