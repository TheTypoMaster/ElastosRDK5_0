module
{
    using interface Elastos.Core.IRunnable;
    interface Elastos.Droid.Os.ILooper;
    interface Elastos.Droid.Os.IIMessenger;

    namespace Elastos {
    namespace Droid {
    namespace Os {

    /**
     * Callback interface you can use when instantiating a Handler to avoid
     * having to implement your own subclass of Handler.
     */
    interface IHandlerCallback {
        HandleMessage(
            [in] IMessage* msg,
            [out] Boolean* result);
    }

    /**
     * A Handler allows you to send and process {@link Message} and Runnable
     * objects associated with a thread's {@link MessageQueue}.  Each Handler
     * instance is associated with a single thread and that thread's message
     * queue.  When you create a new Handler, it is bound to the thread /
     * message queue of the thread that is creating it -- from that point on,
     * it will deliver messages and runnables to that message queue and execute
     * them as they come out of the message queue.
     *
     * <p>There are two main uses for a Handler: (1) to schedule messages and
     * runnables to be executed as some point in the future; and (2) to enqueue
     * an action to be performed on a different thread than your own.
     *
     * <p>Scheduling messages is accomplished with the
     * {@link #post}, {@link #postAtTime(Runnable, long)},
     * {@link #postDelayed}, {@link #sendEmptyMessage},
     * {@link #sendMessage}, {@link #sendMessageAtTime}, and
     * {@link #sendMessageDelayed} methods.  The <em>post</em> versions allow
     * you to enqueue Runnable objects to be called by the message queue when
     * they are received; the <em>sendMessage</em> versions allow you to enqueue
     * a {@link Message} object containing a bundle of data that will be
     * processed by the Handler's {@link #handleMessage} method (requiring that
     * you implement a subclass of Handler).
     *
     * <p>When posting or sending to a Handler, you can either
     * allow the item to be processed as soon as the message queue is ready
     * to do so, or specify a delay before it gets processed or absolute time for
     * it to be processed.  The latter two allow you to implement timeouts,
     * ticks, and other timing-based behavior.
     *
     * <p>When a
     * process is created for your application, its main thread is dedicated to
     * running a message queue that takes care of managing the top-level
     * application objects (activities, broadcast receivers, etc) and any windows
     * they create.  You can create your own threads, and communicate back with
     * the main application thread through a Handler.  This is done by calling
     * the same <em>post</em> or <em>sendMessage</em> methods as before, but from
     * your new thread.  The given Runnable or Message will then be scheduled
     * in the Handler's message queue and processed when appropriate.
     */
    interface IHandler {

        /**
         * Runs the specified task synchronously.
         *
         * If the current thread is the same as the handler thread, then the runnable
         * runs immediately without being enqueued.  Otherwise, posts the runnable
         * to the handler and waits for it to complete before returning.
         *
         * This method is dangerous!  Improper use can result in deadlocks.
         * Never call this method while any locks are held or use it in a
         * possibly re-entrant manner.
         *
         * This method is occasionally useful in situations where a background thread
         * must synchronously await completion of a task that must run on the
         * handler's thread.  However, this problem is often a symptom of bad design.
         * Consider improving the design (if possible) before resorting to this method.
         *
         * One example of where you might want to use this method is when you just
         * set up a Handler thread and need to perform some initialization steps on
         * it before continuing execution.
         *
         * If timeout occurs then this method returns <code>false</code> but the runnable
         * will remain posted on the handler and may already be in progress or
         * complete at a later time.
         *
         * @param r The Runnable that will be executed synchronously.
         * @param timeout The timeout in milliseconds, or 0 to wait indefinitely.
         *
         * @return Returns true if the Runnable was successfully executed.
         *         Returns false on failure, usually because the
         *         looper processing the message queue is exiting.
         *
         * @hide This method is prone to abuse and should probably not be in the API.
         * If we ever do make it part of the API, we might want to rename it to something
         * less funny like runUnsafe().
         */
        RunWithScissors(
            [in] IRunnable* r,
            [in] Int64 timeout,
            [out] Boolean* result);

        ObtainMessage(
            [in] Int32 what,
            [out] IMessage** msg);

        ObtainMessageEx(
            [in] Int32 what,
            [in] IInterface* obj,
            [out] IMessage** msg);

        ObtainMessageEx2(
            [in] Int32 what,
            [in] Int32 arg1,
            [in] Int32 arg2,
            [out] IMessage** msg);

        ObtainMessageEx3(
            [in] Int32 what,
            [in] Int32 arg1,
            [in] Int32 arg2,
            [in] IInterface* obj,
            [out] IMessage** msg);

        Post(
            [in] IRunnable* action,
            [out] Boolean* result);

        PostAtTime(
            [in] IRunnable* action,
            [in] Int64 uptimeMillis,
            [out] Boolean* result);

        PostAtTimeEx(
            [in] IRunnable* action,
            [in] IInterface* token,
            [in] Int64 uptimeMillis,
            [out] Boolean* result);

        PostDelayed(
            [in] IRunnable* action,
            [in] Int64 delayMillis,
            [out] Boolean* result);

        PostAtFrontOfQueue(
            [in] IRunnable* action,
            [out] Boolean* result);

        RemoveCallbacks(
            [in] IRunnable* action);

        RemoveCallbacksEx(
            [in] IRunnable* action,
            [in] IInterface* token);

        GetLooper(
            [out] ILooper** looper);

        GetMessageQueue(
            [out] IMessageQueue** cq);

        GetIMessenger(
            [out] IIMessenger** mgr);

        SendEmptyMessage(
            [in] Int32 what,
            [out] Boolean* result);

        SendEmptyMessageAtTime(
            [in] Int32 what,
            [in] Int64 delayMillis,
            [out] Boolean* result);

        SendEmptyMessageDelayed(
            [in] Int32 what,
            [in] Int64 delayMillis,
            [out] Boolean* result);

        SendMessage(
            [in] IMessage* msg,
            [out] Boolean* result);

        SendMessageAtTime(
            [in] IMessage* msg,
            [in] Int64 delayMillis,
            [out] Boolean* result);

        SendMessageDelayed(
            [in] IMessage* msg,
            [in] Int64 delayMillis,
            [out] Boolean* result);

        SendMessageAtFrontOfQueue(
            [in] IMessage* msg,
            [out] Boolean* result);

        HasCallbacks(
            [in] IRunnable* action,
            [out] Boolean* result);

        HasMessages(
            [in] Int32 what,
            [out] Boolean* result);

        HasMessagesEx(
            [in] Int32 what,
            [in] IInterface* obj,
            [out] Boolean* result);

        RemoveMessages(
            [in] Int32 what);

        RemoveMessagesEx(
            [in] Int32 what,
            [in] IInterface* obj);

        RemoveCallbacksAndMessages(
            [in] IInterface* obj);

        HandleMessage(
            [in] IMessage* msg);

        DispatchMessage(
            [in] IMessage* msg);

        GetMessageName(
            [in] IMessage* msg,
            [out] String* name);
    }

    } // namespace Os
    } // namespace Droid
    } // namespace Elastos
}
