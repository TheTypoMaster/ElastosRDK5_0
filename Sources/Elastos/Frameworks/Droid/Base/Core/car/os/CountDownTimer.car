module
{


    namespace Elastos {
    namespace Droid {
    namespace Os {

    /**
     * Schedule a countdown until a time in the future, with
     * regular notifications on intervals along the way.
     *
     * Example of showing a 30 second countdown in a text field:
     *
     * <pre class="prettyprint">
     * new CountDownTimer(30000, 1000) {
     *
     *     public void onTick(long millisUntilFinished) {
     *         mTextField.setText("seconds remaining: " + millisUntilFinished / 1000);
     *     }
     *
     *     public void onFinish() {
     *         mTextField.setText("done!");
     *     }
     *  }.start();
     * </pre>
     *
     * The calls to {@link #onTick(long)} are synchronized to this object so that
     * one call to {@link #onTick(long)} won't ever occur before the previous
     * callback is complete.  This is only relevant when the implementation of
     * {@link #onTick(long)} takes an amount of time to execute that is significant
     * compared to the countdown interval.
     */
    interface ICountDownTimer {

        /**
         * Cancel the countdown.
         */
        Cancel();

        /**
         * Start the countdown.
         */
        Start();

        /**
         * Callback fired on regular interval.
         * @param millisUntilFinished The amount of time until finished.
         */
        OnTick(
            [in] Int64 millisUntilFinished);
    }

    } // namespace Os
    } // namespace Droid
    } // namespace Elastos

} // module
