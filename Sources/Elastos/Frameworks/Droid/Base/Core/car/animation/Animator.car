
module
{
    interface Elastos.Droid.Animation.ITimeInterpolator;

    namespace Elastos {
    namespace Droid {
    namespace Animation {

    interface IAnimatorListener;

    /**
     * This is the superclass for classes which provide basic support for animations
     * which can be started, ended, and have AnimatorListeners added to them.
     */
    /**
     * @Involve
     * interface ICloneable
     */
    interface IAnimator {
        /**
         * Starts this animation. If the animation has a nonzero startDelay, the animation will start
         * running after that delay elapses. A non-delayed animation will have its initial
         * value(s) set immediately, followed by calls to
         * AnimatorListener#onAnimationStart(Animator) for any listeners of this animator.
         *
         * @sa AnimatorListener#onAnimationStart(Animator)
         *
         * <p>The animation started by calling this method will be run on the thread that called
         * this method. This thread should have a Looper on it (a runtime exception will be thrown if
         * this is not the case). Also, if the animation will animate
         * properties of objects in the view hierarchy, then the calling thread should be the UI
         * thread for that view hierarchy.</p>
         *
         */
        Start();

        /**
         * Cancels the animation. Unlike {@sa #end()}, <code>cancel()</code> causes the animation to
         * stop in its tracks, sending an
         * android.animation.Animator.AnimatorListener#onAnimationCancel(Animator) to
         * its listeners, followed by an
         * android.animation.Animator.AnimatorListener#onAnimationEnd(Animator) message.
         *
         * @sa #end()
         * @sa android.animation.Animator.AnimatorListener#onAnimationCancel(Animator)
         * @sa android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)
         *
         * <p>This method must be called on the thread that is running the animation.</p>
         */
        Cancel();

        /**
         * Ends the animation. This causes the animation to assign the end value of the property being
         * animated, then calling the
         * android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)} method on
         * its listeners.
         *
         * @sa android.animation.Animator.AnimatorListener#onAnimationEnd(Animator)
         *
         * <p>This method must be called on the thread that is running the animation.</p>
         */
        End();

        /**
         * The amount of time, in milliseconds, to delay starting the animation after
         * #start() is called.
         *
         * @sa #start()
         *
         * @return the number of milliseconds to delay running the animation
         */
        GetStartDelay(
            [out] Int64* delay);

        /**
         * The amount of time, in milliseconds, to delay starting the animation after
         * #start() is called.
         *
         * @sa #start()
         * @param startDelay The amount of the delay, in milliseconds
         */
        SetStartDelay(
            [in] Int64 startDelay);

        /**
         * Sets the length of the animation.
         *
         * @param duration The length of the animation, in milliseconds.
         */
        SetDuration(
            [in] Int64 duration);

        /**
         * Gets the length of the animation.
         *
         * @return The length of the animation, in milliseconds.
         */
        GetDuration(
            [out] Int64* duration);

        /**
         * The time interpolator used in calculating the elapsed fraction of this animation. The
         * interpolator determines whether the animation runs with linear or non-linear motion,
         * such as acceleration and deceleration. The default value is
         * android.view.animation.AccelerateDecelerateInterpolator
         *
         * @sa android.view.animation.AccelerateDecelerateInterpolator
         *
         * @param value the interpolator to be used by this animation
         */
        SetInterpolator(
            [in] ITimeInterpolator* value);

        /**
         * Returns whether this Animator is currently running (having been started and gone past any
         * initial startDelay period and not yet ended).
         *
         * @return Whether the Animator is running.
         */
        IsRunning(
            [out] Boolean* running);

        /**
         * Returns whether this Animator has been started and not yet ended. This state is a superset
         * of the state of #isRunning(), because an Animator with a nonzero
         * #getStartDelay() startDelay will return true for #isStarted() during the
         * delay phase, whereas #isRunning() will return true only after the delay phase
         * is complete.
         *
         * @sa #isRunning()
         * @sa #getStartDelay() startDelay
         * @sa #isStarted()
         * @sa #isRunning()
         *
         * @return Whether the Animator has been started and not yet ended.
         */
        IsStarted(
            [out] Boolean* started);

        /**
         * Adds a listener to the set of listeners that are sent events through the life of an
         * animation, such as start, repeat, and end.
         *
         * @param listener the listener to be added to the current set of listeners for this animation.
         */
        AddListener(
            [in] IAnimatorListener* listener);

        /**
         * Removes a listener from the set listening to this animation.
         *
         * @param listener the listener to be removed from the current set of listeners for this
         *                 animation.
         */
        RemoveListener(
            [in] IAnimatorListener* listener);

        /**
         * Gets the set of android.animation.Animator.AnimatorListener objects that are currently
         * listening for events on this <code>Animator</code> object.
         *
         * @sa @sa android.animation.Animator.AnimatorListener
         *
         * @return ArrayList<AnimatorListener> The set of listeners.
         */
        GetListeners(
            [out, callee] ArrayOf<IAnimatorListener*>* listeners);

        //SetListeners(
        //    [in] ArrayOf<IAnimatorListener*>* listeners);

        /**
         * Removes all listeners from this object. This is equivalent to calling
         * <code>getListeners()</code> followed by calling <code>clear()</code> on the
         * returned list of listeners.
         */
        RemoveAllListeners();


        Clone(
            [out] IAnimator** anim);
        /**
         * This method tells the object to use appropriate information to extract
         * starting values for the animation. For example, a AnimatorSet object will pass
         * this call to its child objects to tell them to set up the values. A
         * ObjectAnimator object will use the information it has about its target object
         * and PropertyValuesHolder objects to get the start values for its properties.
         * A ValueAnimator object will ignore the request since it does not have enough
         * information (such as a target object) to gather these values.
         */
        SetupStartValues();

        /**
         * This method tells the object to use appropriate information to extract
         * ending values for the animation. For example, a AnimatorSet object will pass
         * this call to its child objects to tell them to set up the values. A
         * ObjectAnimator object will use the information it has about its target object
         * and PropertyValuesHolder objects to get the start values for its properties.
         * A ValueAnimator object will ignore the request since it does not have enough
         * information (such as a target object) to gather these values.
         */
        SetupEndValues();

        /**
         * Sets the target object whose property will be animated by this animation. Not all subclasses
         * operate on target objects (for example, ValueAnimator, but this method
         * is on the superclass for the convenience of dealing generically with those subclasses
         * that do handle targets.
         *
         * @sa ValueAnimator
         *
         * @param target The object being animated
         */
        SetTarget(
            [in] IInterface* target);
    }

    /**
     * <p>An animation listener receives notifications from an animation.
     * Notifications indicate animation related events, such as the end or the
     * repetition of the animation.</p>
     */
    interface IAnimatorListener {
        /**
         * <p>Notifies the start of the animation.</p>
         *
         * @param animation The started animation.
         */
        OnAnimationStart(
            [in] IAnimator* animation);

        /**
         * <p>Notifies the end of the animation. This callback is not invoked
         * for animations with repeat count set to INFINITE.</p>
         *
         * @param animation The animation which reached its end.
         */
        OnAnimationEnd(
            [in] IAnimator* animation);

        /**
         * <p>Notifies the cancellation of the animation. This callback is not invoked
         * for animations with repeat count set to INFINITE.</p>
         *
         * @param animation The animation which was canceled.
         */
        OnAnimationCancel(
            [in] IAnimator* animation);

        /**
         * <p>Notifies the repetition of the animation.</p>
         *
         * @param animation The animation which was repeated.
         */
        OnAnimationRepeat(
            [in] IAnimator* animation);
    }

    }   //namespace Animation
    }   //namespace Droid
    }   //namespace Elastos
}
