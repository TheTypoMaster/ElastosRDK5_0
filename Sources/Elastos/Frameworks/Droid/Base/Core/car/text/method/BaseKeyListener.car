module
{
    using interface Elastos.Core.ICharSequence;

    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.IKeyEvent;
    interface Elastos.Droid.Text.IEditable;
    interface Elastos.Droid.Text.ISpannable;
    interface Elastos.Droid.Text.Method.IKeyListener;
    interface Elastos.Droid.Text.Method.IMetaKeyKeyListener;

    namespace Elastos {
    namespace Droid {
    namespace Text {
    namespace Method {

    /**
     * Abstract base class for key listeners.
     *
     * Provides a basic foundation for entering and editing text.
     * Subclasses should override {@link #onKeyDown} and {@link #onKeyUp} to insert
     * characters as keys are pressed.
     * <p></p>
     * As for all implementations of {@link KeyListener}, this class is only concerned
     * with hardware keyboards.  Software input methods have no obligation to trigger
     * the methods in this class.
     *
     * @Involve
     * interface IKeyListener;
     * interface IMetaKeyKeyListener
     */
    [local]
    interface IBaseKeyListener {
        /**
         * Performs the action that happens when you press the {@link KeyEvent#KEYCODE_DEL} key in
         * a {@link TextView}.  If there is a selection, deletes the selection; otherwise,
         * deletes the character before the cursor, if any; ALT+DEL deletes everything on
         * the line the cursor is on.
         *
         * @return true if anything was deleted; false otherwise.
         */
        Backspace(
            [in] IView* view,
            [in] IEditable* content,
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Boolean* ret);

        /**
         * Performs the action that happens when you press the {@link KeyEvent#KEYCODE_FORWARD_DEL}
         * key in a {@link TextView}.  If there is a selection, deletes the selection; otherwise,
         * deletes the character before the cursor, if any; ALT+FORWARD_DEL deletes everything on
         * the line the cursor is on.
         *
         * @return true if anything was deleted; false otherwise.
         */
        ForwardDelete(
            [in] IView* view,
            [in] IEditable* content,
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Boolean* ret);

    }

    /**
     * @Involve
     * interface IMetaKeyKeyListenerHelper
     */
    [local]
    interface IBaseKeyListenerHelper{
        //---------IMetaKeyKeyListenerHelper---------
        /**
         * Call this method after you handle a keypress so that the meta
         * state will be reset to unshifted (if it is not still down)
         * or primed to be reset to unshifted (once it is released).
         */
        AdjustMetaAfterKeypress(
            [in] ISpannable* content);

        /**
         * Call this method after you handle a keypress so that the meta
         * state will be reset to unshifted (if it is not still down)
         * or primed to be reset to unshifted (once it is released).  Takes
         * the current state, returns the new state.
         */
        AdjustMetaAfterKeypress(
            [in] Int64 state,
            [out] Int64* ret);

        ClearMetaKeyState(
            [in] IEditable* content,
            [in] Int32 states);

        /**
         * Gets the state of the meta keys.
         *
         * @param text the buffer in which the meta key would have been pressed.
         *
         * @return an integer in which each bit set to one represents a pressed
         *         or locked meta key.
         */
        GetMetaState(
            [in] ICharSequence* text,
            [out] Int32* ret);

        /**
         * Gets the state of the meta keys for a specific key event.
         *
         * For input devices that use toggled key modifiers, the `toggled' state
         * is stored into the text buffer. This method retrieves the meta state
         * for this event, accounting for the stored state. If the event has been
         * created by a device that does not support toggled key modifiers, like
         * a virtual device for example, the stored state is ignored.
         *
         * @param text the buffer in which the meta key would have been pressed.
         * @param event the event for which to evaluate the meta state.
         * @return an integer in which each bit set to one represents a pressed
         *         or locked meta key.
         */
        GetMetaState(
            [in] ICharSequence* text,
            [in] IKeyEvent* event,
            [out] Int32* ret);

        // As META_SELECTING is @hide we should not mention it in public comments, hence the
        // omission in @param meta
        /**
         * Gets the state of a particular meta key.
         *
         * @param meta META_SHIFT_ON, META_ALT_ON, META_SYM_ON
         * @param text the buffer in which the meta key would have been pressed.
         *
         * @return 0 if inactive, 1 if active, 2 if locked.
         */
        GetMetaState(
            [in] ICharSequence* text,
            [in] Int32 meta,
            [out] Int32* ret);

        /**
         * Gets the state of a particular meta key to use with a particular key event.
         *
         * If the key event has been created by a device that does not support toggled
         * key modifiers, like a virtual keyboard for example, only the meta state in
         * the key event is considered.
         *
         * @param meta META_SHIFT_ON, META_ALT_ON, META_SYM_ON
         * @param text the buffer in which the meta key would have been pressed.
         * @param event the event for which to evaluate the meta state.
         * @return 0 if inactive, 1 if active, 2 if locked.
         */
        GetMetaState(
            [in] ICharSequence* text,
            [in] Int32 meta,
            [in] IKeyEvent* event,
            [out] Int32* ret);

        /**
         * Gets the state of the meta keys.
         *
         * @param state the current meta state bits.
         *
         * @return an integer in which each bit set to one represents a pressed
         *         or locked meta key.
         */
        GetMetaState(
            [in] Int64 state,
            [out] Int32* ret);

        /**
         * Gets the state of a particular meta key.
         *
         * @param state the current state bits.
         * @param meta META_SHIFT_ON, META_ALT_ON, or META_SYM_ON
         *
         * @return 0 if inactive, 1 if active, 2 if locked.
         */
        GetMetaState(
            [in] Int64 state,
            [in] Int32 meta,
            [out] Int32* ret);

        /**
         * Handles presses of the meta keys.
         */
        HandleKeyDown(
            [in] Int64 state,
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Int64* ret);

        /**
         * Handles release of the meta keys.
         */
        HandleKeyUp(
            [in] Int64 state,
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Int64* ret);

        /**
         * Returns true if this object is one that this class would use to
         * keep track of any meta state in the specified text.
         */
        IsMetaTracker(
            [in] ICharSequence* text,
            [in] IInterface* what,
            [out] Boolean* ret);

        /**
         * Returns true if this object is one that this class would use to
         * keep track of the selecting meta state in the specified text.
         */
        IsSelectingMetaTracker(
            [in] ICharSequence* text,
            [in] IInterface* what,
            [out] Boolean* ret);

        /**
         * Resets all meta state to inactive.
         */
        ResetMetaState(
            [in] ISpannable* text);

        /**
         * Call this if you are a method that ignores the locked meta state
         * (arrow keys, for example) and you handle a key.
         */
        ResetLockedMeta(
             [in] Int64 state,
             [out] Int64* ret);

        /**
         * Start selecting text.
         * @hide pending API review
         */
        StartSelecting(
            [in] IView* view,
            [in] ISpannable* content);

        /**
         * Stop selecting text.  This does not actually collapse the selection;
         * call {@link android.text.Selection#setSelection} too.
         * @hide pending API review
         */
        StopSelecting(
            [in] IView* view,
            [in] ISpannable* content);
    }

    }//namespace Method
    }//namespace Text
    }//namespace Droid
    }//namespace Elastos
}
