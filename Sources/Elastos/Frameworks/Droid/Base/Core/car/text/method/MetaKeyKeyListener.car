module
{
    interface Elastos.Core.ICharSequence;
    interface Elastos.Droid.Text.ISpannable;
    interface Elastos.Droid.Text.IEditable;
    interface Elastos.Droid.View.IKeyEvent;
    interface Elastos.Droid.View.IView;

    namespace Elastos {
    namespace Droid {
    namespace Text {
    namespace Method {

    /**
     * This base class encapsulates the behavior for tracking the state of
     * meta keys such as SHIFT, ALT and SYM as well as the pseudo-meta state of selecting text.
     * <p>
     * Key listeners that care about meta state should inherit from this class;
     * you should not instantiate this class directly in a client.
     * </p><p>
     * This class provides two mechanisms for tracking meta state that can be used
     * together or independently.
     * </p>
     * <ul>
     * <li>Methods such as {@link #handleKeyDown(long, int, KeyEvent)} and
     * {@link #getMetaState(long)} operate on a meta key state bit mask.</li>
     * <li>Methods such as {@link #onKeyDown(View, Editable, int, KeyEvent)} and
     * {@link #getMetaState(CharSequence, int)} operate on meta key state flags stored
     * as spans in an {@link Editable} text buffer.  The spans only describe the current
     * meta key state of the text editor; they do not carry any positional information.</li>
     * </ul>
     * <p>
     * The behavior of this class varies according to the keyboard capabilities
     * described by the {@link KeyCharacterMap} of the keyboard device such as
     * the {@link KeyCharacterMap#getModifierBehavior() key modifier behavior}.
     * </p><p>
     * {@link MetaKeyKeyListener} implements chorded and toggled key modifiers.
     * When key modifiers are toggled into a latched or locked state, the state
     * of the modifier is stored in the {@link Editable} text buffer or in a
     * meta state integer managed by the client.  These latched or locked modifiers
     * should be considered to be held <b>in addition to</b> those that the
     * keyboard already reported as being pressed in {@link KeyEvent#getMetaState()}.
     * In other words, the {@link MetaKeyKeyListener} augments the meta state
     * provided by the keyboard; it does not replace it.  This distinction is important
     * to ensure that meta keys not handled by {@link MetaKeyKeyListener} such as
     * {@link KeyEvent#KEYCODE_CAPS_LOCK} or {@link KeyEvent#KEYCODE_NUM_LOCK} are
     * taken into consideration.
     * </p><p>
     * To ensure correct meta key behavior, the following pattern should be used
     * when mapping key codes to characters:
     * </p>
     * <code>
     * private char getUnicodeChar(TextKeyListener listener, KeyEvent event, Editable textBuffer) {
     *     // Use the combined meta states from the event and the key listener.
     *     int metaState = event.getMetaState() | listener.getMetaState(textBuffer);
     *     return event.getUnicodeChar(metaState);
     * }
     * </code>
     */
    //public abstract
    interface IMetaKeyKeyListener {

        /**
         * Flag that indicates that the SHIFT key is on.
         * Value equals {@link KeyEvent#META_SHIFT_ON}.
         */
        const Int32 META_SHIFT_ON = 0x1; //IKeyEvent::META_SHIFT_ON;

        /**
         * Flag that indicates that the ALT key is on.
         * Value equals {@link KeyEvent#META_ALT_ON}.
         */
        const Int32 META_ALT_ON = 0x02; //IKeyEvent::META_ALT_ON;

        /**
         * Flag that indicates that the SYM key is on.
         * Value equals {@link KeyEvent#META_SYM_ON}.
         */
        const Int32 META_SYM_ON = 0x4; //IKeyEvent::META_SYM_ON;

        /**
         * Flag that indicates that the SHIFT key is locked in CAPS mode.
         */
        const Int32 META_CAP_LOCKED = 0x100; //IKeyEvent::META_CAP_LOCKED;

        /**
         * Flag that indicates that the ALT key is locked.
         */
        const Int32 META_ALT_LOCKED = 0x200; //IKeyEvent::META_ALT_LOCKED;

        /**
         * Flag that indicates that the SYM key is locked.
         */
        const Int32 META_SYM_LOCKED = 0x400; //IKeyEvent::META_SYM_LOCKED;

        /**
         * @hide pending API review
         */
        const Int32 META_SELECTING = 0x800; //IKeyEvent::META_SELECTING;

        /*
        ClearMetaKeyState(
            [in] IView* view,
            [in] IEditable* content,
            [in] Int32 states);
        */

        /**
         * Clears the state of the specified meta key if it is locked.
         * @param state the meta key state
         * @param which meta keys to clear, may be a combination of {@link #META_SHIFT_ON},
         * {@link #META_ALT_ON} or {@link #META_SYM_ON}.
         */
        ClearMetaKeyStateEx(
            [in] Int64 state,
            [in] Int32 which,
            [out] Int64* ret);

        /**
         * Handles presses of the meta keys.
         */
        /*
        OnKeyDown(
            [in] IView* view,
            [in] IEditable* content,
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Boolean* ret);
        */

        /**
         * Handles release of the meta keys.
         */
        /*
        OnKeyUp(
            [in] IView* view,
            [in] IEditable* content,
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Boolean* ret);
        */

    }

    [local]
    interface IMetaKeyKeyListenerHelper {

        /**
         * Call this method after you handle a keypress so that the meta
         * state will be reset to unshifted (if it is not still down)
         * or primed to be reset to unshifted (once it is released).
         */
        AdjustMetaAfterKeypress(
            [in]ISpannable* content);

        /**
         * Call this method after you handle a keypress so that the meta
         * state will be reset to unshifted (if it is not still down)
         * or primed to be reset to unshifted (once it is released).  Takes
         * the current state, returns the new state.
         */
        AdjustMetaAfterKeypressEx(
            [in] Int64 state,
            [out] Int64* ret);

        ClearMetaKeyState(
            [in] IEditable* content,
            [in] Int32 states);

        /**
         * Gets the state of the meta keys.
         *
         * @param text the buffer in which the meta key would have been pressed.
         *
         * @return an integer in which each bit set to one represents a pressed
         *         or locked meta key.
         */
        GetMetaState(
            [in] ICharSequence* text,
            [out] Int32* ret);

        /**
         * Gets the state of a particular meta key.
         *
         * @param meta META_SHIFT_ON, META_ALT_ON, META_SYM_ON, or META_SELECTING
         * @param text the buffer in which the meta key would have been pressed.
         *
         * @return 0 if inactive, 1 if active, 2 if locked.
         */
        GetMetaStateEx(
            [in] ICharSequence* text,
            [in] Int32 meta,
            [out] Int32* ret);

        /**
         * Gets the state of the meta keys.
         *
         * @param state the current meta state bits.
         *
         * @return an integer in which each bit set to one represents a pressed
         *         or locked meta key.
         */
        GetMetaStateEx2(
            [in] Int64 state,
            [out] Int32* ret);

        /**
         * Gets the state of a particular meta key.
         *
         * @param state the current state bits.
         * @param meta META_SHIFT_ON, META_ALT_ON, or META_SYM_ON
         *
         * @return 0 if inactive, 1 if active, 2 if locked.
         */
        GetMetaStateEx3(
            [in] Int64 state,
            [in] Int32 meta,
            [out] Int32* ret);

        /**
         * Handles presses of the meta keys.
         */
        HandleKeyDown(
            [in] Int64 state,
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Int64* ret);

        /**
         * Handles release of the meta keys.
         */
        HandleKeyUp(
            [in] Int64 state,
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Int64* ret);

        /**
         * Returns true if this object is one that this class would use to
         * keep track of any meta state in the specified text.
         */
        IsMetaTracker(
            [in] ICharSequence* text,
            [in] IInterface* what,
            [out] Boolean* ret);

        /**
         * Returns true if this object is one that this class would use to
         * keep track of the selecting meta state in the specified text.
         */
        IsSelectingMetaTracker(
            [in] ICharSequence* text,
            [in] IInterface* what,
            [out] Boolean* ret);

        /**
         * Resets all meta state to inactive.
         */
        ResetMetaState(
            [in] ISpannable* text);

        /**
         * Call this if you are a method that ignores the locked meta state
         * (arrow keys, for example) and you handle a key.
         */
        ResetLockedMeta(
             [in] Int64 state,
             [out] Int64* ret);

        /**
         * Start selecting text.
         * @hide pending API review
         */
        StartSelecting(
            [in] IView* view,
            [in] ISpannable* content);

        /**
         * Stop selecting text.  This does not actually collapse the selection;
         * call {@link android.text.Selection#setSelection} too.
         * @hide pending API review
         */
        StopSelecting(
            [in] IView* view,
            [in] ISpannable* content);
    }

    }//namespace Method
    }//namespace Text
    }//namespace Droid
    }//namespace Elastos
}