module
{
    using interface Elastos.Core.ICharSequence;
    using interface Elastos.Utility.IDate;
    using interface Elastos.Utility.ICalendar;

    interface Elastos.Droid.Content.IContext;

    namespace Elastos {
    namespace Droid {
    namespace Text {
    namespace Format {

    [deprecated, local]
    interface IDateFormat {
        /**
            Text in the format string that should be copied verbatim rather that
            interpreted as formatting codes must be surrounded by the <code>QUOTE</code>
            character.  If you need to embed a literal <code>QUOTE</code> character in
            the output text then use two in a row.
         */
        const Char32 QUOTE = '\'';

        /**
            This designator indicates whether the <code>HOUR</code> field is before
            or after noon.  The output is lower-case.

            Examples:
            a -> a or p
            aa -> am or pm
         */
        const Char32 AM_PM = 'a';

        /**
            This designator indicates whether the <code>HOUR</code> field is before
            or after noon.  The output is capitalized.

            Examples:
            A -> A or P
            AA -> AM or PM
         */
        const Char32 CAPITAL_AM_PM = 'A';

        /**
            This designator indicates the day of the month.

            Examples for the 9th of the month:
            d -> 9
            dd -> 09
         */
        const Char32 DATE = 'd';

        /**
            This designator indicates the name of the day of the week.

            Examples for Sunday:
            E -> Sun
            EEEE -> Sunday
         */
        const Char32 DAY = 'E';

        /**
            This designator indicates the hour of the day in 12 hour format.

            Examples for 3pm:
            h -> 3
            hh -> 03
         */
        const Char32 HOUR = 'h';

        /**
            This designator indicates the hour of the day in 24 hour format.

            Example for 3pm:
            k -> 15

            Examples for midnight:
            k -> 0
            kk -> 00
         */
        const Char32 HOUR_OF_DAY = 'k';

        /**
            This designator indicates the minute of the hour.

            Examples for 7 minutes past the hour:
            m -> 7
            mm -> 07
         */
        const Char32 MINUTE = 'm';

        /**
            This designator indicates the month of the year. See also
            {@link #STANDALONE_MONTH}.

            Examples for September:
            M -> 9
            MM -> 09
            MMM -> Sep
            MMMM -> September
         */
        const Char32 MONTH = 'M';

        /**
            This designator indicates the standalone month of the year,
            necessary in some format strings in some languages. For
            example, Russian distinguishes between the "June" in
            "June" and that in "June 2010".
         */
        const Char32 STANDALONE_MONTH = 'L';

        /**
            This designator indicates the seconds of the minute.

            Examples for 7 seconds past the minute:
            s -> 7
            ss -> 07
         */
        const Char32 SECONDS = 's';

        /**
            This designator indicates the offset of the timezone from GMT.

            Example for US/Pacific timezone:
            z -> -0800
            zz -> PST
         */
        const Char32 TIME_ZONE = 'z';

        /**
            This designator indicates the year.

            Examples for 2006
            y -> 06
            yyyy -> 2006
         */
        const Char32 YEAR = 'y';

        /**
         * Returns true if user preference is set to 24-hour format.
         * @param context the context to use for the content resolver
         * @return true if 24 hour time format is selected, false otherwise.
         */
        Is24HourFormat(
            [in] IContext* ctx,
            [out] Boolean* ret);

        /**
         * Returns a {@link java.text.DateFormat} object that can format the time according
         * to the current locale and the user's 12-/24-hour clock preference.
         * @param context the application context
         * @return the {@link java.text.DateFormat} object that properly formats the time.
         */
        GetTimeFormat(
            [in] IContext* ctx,
            [out] Elastos.Text.IDateFormat** ret);

        /**
         * Returns a {@link java.text.DateFormat} object that can format the date
         * in short form (such as 12/31/1999) according
         * to the current locale and the user's date-order preference.
         * @param context the application context
         * @return the {@link java.text.DateFormat} object that properly formats the date.
         */
        GetDateFormat(
            [in] IContext* ctx,
            [out] Elastos.Text.IDateFormat** ret);

        /**
         * Returns a {@link java.text.DateFormat} object to format the date
         * as if the date format setting were set to <code>value</code>,
         * including null to use the locale's default format.
         * @param context the application context
         * @param value the date format setting string to interpret for
         *              the current locale
         * @hide
         */
        GetDateFormatForSetting(
            [in] IContext* ctx,
            [in] String value,
            [out] Elastos.Text.IDateFormat** ret);

        /**
         * Returns a {@link java.text.DateFormat} object that can format the date
         * in long form (such as December 31, 1999) for the current locale.
         * @param context the application context
         * @return the {@link java.text.DateFormat} object that formats the date in long form.
         */
        GetLongDateFormat(
            [in] IContext* ctx,
            [out] Elastos.Text.IDateFormat** ret);

        /**
         * Returns a {@link java.text.DateFormat} object that can format the date
         * in medium form (such as Dec. 31, 1999) for the current locale.
         * @param context the application context
         * @return the {@link java.text.DateFormat} object that formats the date in long form.
         */
        GetMediumDateFormat(
            [in] IContext* ctx,
            [out] Elastos.Text.IDateFormat** ret);

        /**
         * Gets the current date format stored as a char array. The array will contain
         * 3 elements ({@link #DATE}, {@link #MONTH}, and {@link #YEAR}) in the order
         * specified by the user's format preference.  Note that this order is
         * only appropriate for all-numeric dates; spelled-out (MEDIUM and LONG)
         * dates will generally contain other punctuation, spaces, or words,
         * not just the day, month, and year, and not necessarily in the same
         * order returned here.
         */
        GetDateFormatOrder(
            [in] IContext* ctx,
            [out, callee] ArrayOf<Char32>* ret);

        /**
         * Given a format string and a time in milliseconds since Jan 1, 1970 GMT, returns a
         * CharSequence containing the requested date.
         * @param inFormat the format string, as described in {@link android.text.format.DateFormat}
         * @param inTimeInMillis in milliseconds since Jan 1, 1970 GMT
         * @return a {@link CharSequence} containing the requested text
         */
        Format(
            [in] ICharSequence* inFormat,
            [in] Int64 inTimeInMillis,
            [out] ICharSequence** ret);

        /**
         * Given a format string and a {@link java.util.Date} object, returns a CharSequence containing
         * the requested date.
         * @param inFormat the format string, as described in {@link android.text.format.DateFormat}
         * @param inDate the date to format
         * @return a {@link CharSequence} containing the requested text
         */
        Format(
            [in] ICharSequence* inFormat,
            [in] IDate* inDate,
            [out] ICharSequence** ret);

        /**
         * Indicates whether the specified format string contains seconds.
         *
         * Always returns false if the input format is null.
         *
         * @param inFormat the format string, as described in {@link android.text.format.DateFormat}
         *
         * @return true if the format string contains {@link #SECONDS}, false otherwise
         *
         * @hide
         */
        HasSeconds(
            [in] ICharSequence* inFormat,
            [out] Boolean* ret);

        /**
         * Given a format string and a {@link java.util.Calendar} object, returns a CharSequence
         * containing the requested date.
         * @param inFormat the format string, as described in {@link android.text.format.DateFormat}
         * @param inDate the date to format
         * @return a {@link CharSequence} containing the requested text
         */
        Format(
            [in] ICharSequence* inFormat,
            [in] ICalendar* inDate,
            [out] ICharSequence** ret);
    }

    }//namespace Format
    }//namespace Text
    }//namespace Droid
    }//namespace Elastos
}
