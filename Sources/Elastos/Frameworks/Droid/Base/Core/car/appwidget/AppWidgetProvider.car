
module
{
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Os.IBundle;

    namespace Elastos {
    namespace Droid {
    namespace AppWidget {

        /**
         * A convenience class to aid in implementing an AppWidget provider.
         * Everything you can do with AppWidgetProvider, you can do with a regular {@sa BroadcastReceiver}.
         * AppWidgetProvider merely parses the relevant fields out of the Intent that is received in
         * {@sa #onReceive(Context,Intent) onReceive(Context,Intent)}, and calls hook methods
         * with the received extras.
         *
         * <p>Extend this class and override one or more of the {@sa #onUpdate}, {@sa #onDeleted},
         * {@sa #onEnabled} or {@sa #onDisabled} methods to implement your own AppWidget functionality.
         * </p>
         *
         * <div class="special reference">
         * <h3>Developer Guides</h3>
         * <p>For more information about how to write an app widget provider, read the
         * <a href="{@docRoot}guide/topics/appwidgets/index.html#AppWidgetProvider">App Widgets</a>
         * developer guide.</p>
         * </div>
         * @implements IBroadcastReceiver
         */
        /**
         * @Involve
         * interface Elastos.Droid.Content.IBroadcastReceiver
         */
        interface IAppWidgetProvider {
            /**
             * Called in response to the {@sa AppWidgetManager#ACTION_APPWIDGET_UPDATE} broadcast when
             * this AppWidget provider is being asked to provide {@sa android.widget.RemoteViews RemoteViews}
             * for a set of AppWidgets.  Override this method to implement your own AppWidget functionality.
             *
             * {@more}
             *
             * @param context   The {@sa android.content.Context Context} in which this receiver is
             *                  running.
             * @param appWidgetManager A {@sa AppWidgetManager} object you can call {@sa
             *                  AppWidgetManager#updateAppWidget} on.
             * @param appWidgetIds The appWidgetIds for which an update is needed.  Note that this
             *                  may be all of the AppWidget instances for this provider, or just
             *                  a subset of them.
             *
             * @see AppWidgetManager#ACTION_APPWIDGET_UPDATE
             */
            OnUpdate(
                [in] IContext* ctx,
                [in] IAppWidgetManager* appWidgetManager,
                [in] ArrayOf<Int32> appWidgetIds);

            /**
             * Called in response to the {@sa AppWidgetManager#ACTION_APPWIDGET_OPTIONS_CHANGED}
             * broadcast when this widget has been layed out at a new size.
             *
             * {@more}
             *
             * @param context   The {@sa android.content.Context Context} in which this receiver is
             *                  running.
             * @param appWidgetManager A {@sa AppWidgetManager} object you can call {@sa
             *                  AppWidgetManager#updateAppWidget} on.
             * @param appWidgetId The appWidgetId of the widget who's size changed.
             * @param newOptions The appWidgetId of the widget who's size changed.
             *
             * @see AppWidgetManager#ACTION_APPWIDGET_OPTIONS_CHANGED
             */
            OnAppWidgetOptionsChanged(
                [in] IContext* ctx,
                [in] IAppWidgetManager* appWidgetManager,
                [in] Int32 appWidgetId,
                [in] IBundle* newOptions);

            /**
             * Called in response to the {@sa AppWidgetManager#ACTION_APPWIDGET_DELETED} broadcast when
             * one or more AppWidget instances have been deleted.  Override this method to implement
             * your own AppWidget functionality.
             *
             * {@more}
             *
             * @param context   The {@sa android.content.Context Context} in which this receiver is
             *                  running.
             * @param appWidgetIds The appWidgetIds that have been deleted from their host.
             *
             * @see AppWidgetManager#ACTION_APPWIDGET_DELETED
             */
            OnDeleted(
                [in] IContext* ctx,
                [in] ArrayOf<Int32> appWidgetIds);

            /**
             * Called in response to the {@sa AppWidgetManager#ACTION_APPWIDGET_ENABLED} broadcast when
             * the a AppWidget for this provider is instantiated.  Override this method to implement your
             * own AppWidget functionality.
             *
             * {@more}
             * When the last AppWidget for this provider is deleted,
             * {@sa AppWidgetManager#ACTION_APPWIDGET_DISABLED} is sent by the AppWidget manager, and
             * {@sa #onDisabled} is called.  If after that, an AppWidget for this provider is created
             * again, onEnabled() will be called again.
             *
             * @param context   The {@sa android.content.Context Context} in which this receiver is
             *                  running.
             *
             * @see AppWidgetManager#ACTION_APPWIDGET_ENABLED
             */
            OnEnabled(
                [in] IContext* ctx);

            /**
             * Called in response to the {@sa AppWidgetManager#ACTION_APPWIDGET_DISABLED} broadcast, which
             * is sent when the last AppWidget instance for this provider is deleted.  Override this method
             * to implement your own AppWidget functionality.
             *
             * {@more}
             *
             * @param context   The {@sa android.content.Context Context} in which this receiver is
             *                  running.
             *
             * @see AppWidgetManager#ACTION_APPWIDGET_DISABLED
             */
            OnDisabled(
                [in] IContext* ctx);
        }

    }//namespace AppWidget
    }//namespace Droid
    }//namespace Elastos
}
