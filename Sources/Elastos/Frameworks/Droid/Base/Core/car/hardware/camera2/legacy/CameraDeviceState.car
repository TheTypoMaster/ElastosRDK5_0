
module
{
    interface Elastos.Droid.Hardware.Camera2.Legacy.IRequestHolder;
    interface Elastos.Droid.Hardware.Camera2.Impl.ICameraMetadataNative;
    interface Elastos.Droid.Os.IHandler;

    namespace Elastos {
    namespace Droid {
    namespace Hardware {
    namespace Camera2 {
    namespace Legacy {

    /**
     * CameraDeviceStateListener callbacks to be called after state transitions.
     */
    interface ICameraDeviceStateListener {
        OnError(
            [in] Int32 errorCode,
            [in] IRequestHolder* holder);
        OnConfiguring();

        OnIdle();

        OnBusy();

        OnCaptureStarted(
            [in] IRequestHolder* holder,
            [in] Int64 timestamp);

        OnCaptureResult(
            [in] ICameraMetadataNative* result,
            [in] IRequestHolder* holder);
    }

    /**
     * Emulates a the state of a single Camera2 device.
     *
     * <p>
     * This class acts as the state machine for a camera device.  Valid state transitions are given
     * in the table below:
     * </p>
     *
     * <ul>
     *      <li>{@code UNCONFIGURED -> CONFIGURING}</li>
     *      <li>{@code CONFIGURING -> IDLE}</li>
     *      <li>{@code IDLE -> CONFIGURING}</li>
     *      <li>{@code IDLE -> CAPTURING}</li>
     *      <li>{@code IDLE -> IDLE}</li>
     *      <li>{@code CAPTURING -> IDLE}</li>
     *      <li>{@code ANY -> ERROR}</li>
     * </ul>
     */
    interface ICameraDeviceState {
        /**
         * Error code used by {@link #setCaptureStart} and {@link #setCaptureResult} to indicate that no
         * error has occurred.
         */
        const Int32 NO_CAPTURE_ERROR = -1;

        /**
         * Transition to the {@code ERROR} state.
         *
         * <p>
         * The device cannot exit the {@code ERROR} state.  If the device was not already in the
         * {@code ERROR} state, {@link CameraDeviceStateListener#onError(int, RequestHolder)} will be
         * called.
         * </p>
         *
         * @param error the error to set.  Should be one of the error codes defined in
         *      {@link CameraDeviceImpl.CameraDeviceCallbacks}.
         */
        SetError(
            [in] Int32 error);

        /**
         * Transition to the {@code CONFIGURING} state, or {@code ERROR} if in an invalid state.
         *
         * <p>
         * If the device was not already in the {@code CONFIGURING} state,
         * {@link CameraDeviceStateListener#onConfiguring()} will be called.
         * </p>
         *
         * @return {@code false} if an error has occurred.
         */
        SetConfiguring(
            [out] Boolean* value);

        /**
         * Transition to the {@code IDLE} state, or {@code ERROR} if in an invalid state.
         *
         * <p>
         * If the device was not already in the {@code IDLE} state,
         * {@link CameraDeviceStateListener#onIdle()} will be called.
         * </p>
         *
         * @return {@code false} if an error has occurred.
         */
        SetIdle(
            [out] Boolean* value);

        /**
         * Transition to the {@code CAPTURING} state, or {@code ERROR} if in an invalid state.
         *
         * <p>
         * If the device was not already in the {@code CAPTURING} state,
         * {@link CameraDeviceStateListener#onCaptureStarted(RequestHolder)} will be called.
         * </p>
         *
         * @param request A {@link RequestHolder} containing the request for the current capture.
         * @param timestamp The timestamp of the capture start in nanoseconds.
         * @param captureError Report a recoverable error for a single request using a valid
         *                     error code for {@code ICameraDeviceCallbacks}, or
         *                     {@link #NO_CAPTURE_ERROR}
         * @return {@code false} if an error has occurred.
         */
        SetCaptureStart(
            [in] IRequestHolder* request,
            [in] Int64 timestamp,
            [in] Int32 captureError,
            [out] Boolean* value);

        /**
         * Set the result for a capture.
         *
         * <p>
         * If the device was in the {@code CAPTURING} state,
         * {@link CameraDeviceStateListener#onCaptureResult(CameraMetadataNative, RequestHolder)} will
         * be called with the given result, otherwise this will result in the device transitioning to
         * the {@code ERROR} state,
         * </p>
         *
         * @param request The {@link RequestHolder} request that created this result.
         * @param result The {@link CameraMetadataNative} result to set.
         * @param captureError Report a recoverable error for a single buffer or result using a valid
         *                     error code for {@code ICameraDeviceCallbacks}, or
         *                     {@link #NO_CAPTURE_ERROR}.
         * @return {@code false} if an error has occurred.
         */
        SetCaptureResult(
            [in] IRequestHolder* request,
            [in] ICameraMetadataNative* result,
            [in] Int32 captureError,
            [out] Boolean* value);

        /**
         * Set the listener for state transition callbacks.
         *
         * @param handler handler on which to call the callbacks.
         * @param listener the {@link CameraDeviceStateListener} callbacks to call.
         */
        SetCameraDeviceCallbacks(
            [in] IHandler* handler,
            [in] ICameraDeviceStateListener* listener);
    }

    } // namespace Legacy
    } // namespace Camera2
    } // namespace Hardware
    } // namespace Droid
    } // namespace Elastos
}
