
module
{
    merge("util/ArrayMap.car");
    merge("util/ArraySet.car");
    merge("util/AtomicFile.car");
    merge("util/AttributeSet.car");
    merge("util/XmlPullAttributes.car");
    merge("util/Xml.car");
    merge("util/DisplayMetrics.car");
    merge("util/TypedValue.car");
    merge("util/EventLogTags.car");
    merge("util/TrustedTime.car");
    merge("util/NtpTrustedTime.car");
    merge("util/Property.car");
    merge("util/Pair.car");
    merge("util/Base64.car");
    merge("util/Base64InputStream.car");
    merge("util/Base64OutputStream.car");
    merge("util/Config.car");
    merge("util/DayOfMonthCursor.car");
    merge("util/DebugUtils.car");
    merge("util/FastImmutableArraySet.car");
    merge("util/JsonReader.car");
    merge("util/JsonWriter.car");
    merge("util/LayoutDirection.car");
    merge("util/LocalLog.car");
    merge("util/Log.car");
    merge("util/LogPrinter.car");
    merge("util/Int64Array.car");
    merge("util/Int64SparseArray.car");
    merge("util/MonthDisplayHelper.car");
    merge("util/Printer.car");
    merge("util/Rational.car");
    merge("util/Size.car");
    merge("util/SizeF.car");
    merge("util/SparseArray.car");
    merge("util/SparseBooleanArray.car");
    merge("util/SparseInt32Array.car");
    merge("util/SparseInt64Array.car");
    merge("util/StateSet.car");
    merge("util/TimingLogger.car");

    using interface Elastos.Core.INumber;
    using interface Elastos.Core.IComparable;
    using interface Elastos.IO.IFile;
    using interface Elastos.IO.IWriter;
    using interface Elastos.IO.ICloseable;
    using interface Elastos.IO.IFlushable;
    using interface Elastos.IO.IInputStream;
    using interface Elastos.IO.IFilterInputStream;
    using interface Elastos.IO.IOutputStream;
    using interface Elastos.IO.IFilterOutputStream;
    using interface Elastos.Utility.IMap;
    using interface Elastos.Utility.ISet;
    using interface Elastos.Utility.ICollection;
    using interface Org.Xmlpull.V1.IXmlPullParser;

    namespace Elastos {
    namespace Droid {
    namespace Utility {

    class CAtomicFile {
        constructor(
            [in] IFile* baseName);

        interface IAtomicFile;
    }

    class CArrayMap {
        constructor();

        constructor(
            [in] Int32 capacity);

        constructor(
            [in] IArrayMap* map);

        interface IArrayMap;
        interface IMap;
    }

    class CArraySet {
        constructor();

        constructor(
            [in] Int32 capacity);

        constructor(
            [in] IArraySet* map);

        interface IArraySet;
        interface ISet;
        interface ICollection;
    }

    singleton class CBase64 {
        interface IBase64;
    }

    class CBase64InputStream {

        constructor(
            [in] IInputStream* inputStream,
            [in] Int32 flags);

        constructor(
            [in] IInputStream* inputStream,
            [in] Int32 flags,
            [in] Boolean encode);

        interface IBase64InputStream;
        interface IFilterInputStream;
        interface IInputStream;
        interface ICloseable;
    }

    class CBase64OutputStream {

        constructor(
            [in] IOutputStream* outputStream,
            [in] Int32 flags);

        constructor(
            [in] IOutputStream* outputStream,
            [in] Int32 flags,
            [in] Boolean encode);

        interface IBase64OutputStream;
        interface IFilterOutputStream;
        interface IOutputStream;
        interface ICloseable;
        interface IFlushable;
    }

    class CMonthDisplayHelper {

        constructor(
            [in] Int32 year,
            [in] Int32 month,
            [in] Int32 weekStartDay);

        constructor(
            [in] Int32 year,
            [in] Int32 month);

        interface IMonthDisplayHelper;
    }

    class CDisplayMetrics {
        interface IDisplayMetrics;
    }

    singleton class CNtpTrustedTimeHelper {
        interface INtpTrustedTimeHelper;
    }

    class CPair {
        constructor(
            [in] IInterface *first,
            [in] IInterface *second);

        interface IPair;
    }

    singleton class CPairHelper {
        interface IPairHelper;
    }

    class CRational {
        constructor(
            [in] Int32 numerator,
            [in] Int32 denominator);

        interface IRational;
        interface INumber;
        interface IComparable;
    }

    singleton class CRationalHelper {
        interface IRationalHelper;
    }

    class CSize {
        constructor(
            [in] Int32 w,
            [in] Int32 h);

        interface ISize;
    }

    singleton class CSizeHelper {
        interface ISizeHelper;
    }

    class CSizeF {
        constructor(
            [in] Float w,
            [in] Float h);

        interface ISizeF;
    }

    singleton class CSizeFHelper {
        interface ISizeFHelper;
    }

    class CTypedValue {
        interface ITypedValue;
    }

    singleton class CTypedValueHelper {
        interface ITypedValueHelper;
    }

    class CXmlPullAttributes {
        constructor(
            [in] IXmlPullParser* ps);

        interface IXmlPullAttributes;
        interface IAttributeSet;
    }

/*
    class CParcelableObjectContainer {
        constructor();

        interface IObjectContainer;
        interface IParcelable;
    }


    class CFastXmlSerializer {
        interface IFastXmlSerializer;
    }

    [deprecated]
    class CEventLogTags {
        // constructor();

        // constructor(
        //     [in] IBufferedReader** input);

        interface IEventLogTags;
    }

    singleton class CPropertyHelper {
        constructor();
        interface IPropertyHelper;
    }

*/
    } // namespace Utility

/*    namespace Internal {
    namespace Utility {

        class CIndentingPrintWriter {
            constructor(
                [in] IWriter* writer,
                [in] String indent);

            interface IIndentingPrintWriter;
            interface ICloseable;
            interface IFlushable;
        }

    } // namespace Utility
    } // namespace Internal
*/
    } // namespace Droid
    } // namespace Elastos
}
