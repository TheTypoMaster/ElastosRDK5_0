module
{
    interface Elastos.Droid.Content.IIntent;

    namespace Elastos {
    namespace Droid {
    namespace Widget {

    interface IShareActionProvider;

    /**
     * Listener for the event of selecting a share target.
     */
    interface IOnShareTargetSelectedListener
    {

        /**
         * Called when a share target has been selected. The client can
         * decide whether to perform some action before the sharing is
         * actually performed.
         * <p>
         * <strong>Note:</strong> Modifying the intent is not permitted and
         *     any changes to the latter will be ignored.
         * </p>
         * <p>
         * <strong>Note:</strong> You should <strong>not</strong> handle the
         *     intent here. This callback aims to notify the client that a
         *     sharing is being performed, so the client can update the UI
         *     if necessary.
         * </p>
         *
         * @param source The source of the notification.
         * @param intent The intent for launching the chosen share target.
         * @return The return result is ignored. Always return false for consistency.
         */
        OnShareTargetSelected(
            [in] IShareActionProvider* source,
            [in] IIntent* intent,
            [out] Boolean* selected);
    }

    /**
     * @Involve
     * interface Elastos.Droid.View.IActionProvider
     */
    interface IShareActionProvider
    {
        /**
         * Sets a listener to be notified when a share target has been selected.
         * The listener can optionally decide to handle the selection and
         * not rely on the default behavior which is to launch the activity.
         * <p>
         * <strong>Note:</strong> If you choose the backing share history file
         *     you will still be notified in this callback.
         * </p>
         * @param listener The listener.
         */
        SetOnShareTargetSelectedListener(
            [in] IOnShareTargetSelectedListener* listener);


        /**
         * Sets the file name of a file for persisting the share history which
         * history will be used for ordering share targets. This file will be used
         * for all view created by {@link #onCreateActionView()}. Defaults to
         * {@link #DEFAULT_SHARE_HISTORY_FILE_NAME}. Set to <code>null</code>
         * if share history should not be persisted between sessions.
         * <p>
         * <strong>Note:</strong> The history file name can be set any time, however
         * only the action views created by {@link #onCreateActionView()} after setting
         * the file name will be backed by the provided file. Therefore, if you want to
         * use different history files for sharing specific types of content, every time
         * you change the history file {@link #setShareHistoryFileName(String)} you must
         * call {@link android.app.Activity#invalidateOptionsMenu()} to recreate the
         * action view. You should <strong>not</strong> call
         * {@link android.app.Activity#invalidateOptionsMenu()} from
         * {@link android.app.Activity#onCreateOptionsMenu(Menu)}."
         * <p>
         * <code>
         * private void doShare(Intent intent) {
         *     if (IMAGE.equals(intent.getMimeType())) {
         *         mShareActionProvider.setHistoryFileName(SHARE_IMAGE_HISTORY_FILE_NAME);
         *     } else if (TEXT.equals(intent.getMimeType())) {
         *         mShareActionProvider.setHistoryFileName(SHARE_TEXT_HISTORY_FILE_NAME);
         *     }
         *     mShareActionProvider.setIntent(intent);
         *     invalidateOptionsMenu();
         * }
         * <code>
         *
         * @param shareHistoryFile The share history file name.
         */
        SetShareHistoryFileName(
            [in] String shareHistoryFile);


        /**
         * Sets an intent with information about the share action. Here is a
         * sample for constructing a share intent:
         * <p>
         * <pre>
         * <code>
         *  Intent shareIntent = new Intent(Intent.ACTION_SEND);
         *  shareIntent.setType("image/*");
         *  Uri uri = Uri.fromFile(new File(getFilesDir(), "foo.jpg"));
         *  shareIntent.putExtra(Intent.EXTRA_STREAM, uri.toString());
         * </pre>
         * </code>
         * </p>
         *
         * @param shareIntent The share intent.
         *
         * @see Intent#ACTION_SEND
         * @see Intent#ACTION_SEND_MULTIPLE
         */
        SetShareIntent(
            [in] IIntent* shareIntent);

    }

    } // namespace Widget
    } // namespace Droid
    } // namespace Elastos
}

