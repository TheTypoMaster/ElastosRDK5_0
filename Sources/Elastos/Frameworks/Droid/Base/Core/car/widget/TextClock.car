
module
{
    using interface Elastos.Core.ICharSequence;

    namespace Elastos {
    namespace Droid {
    namespace Widget {

    /**
     * @Involve
     * extends Elastos.Droid.View.IView
     * extends Elastos.Droid.View.ITextView
     *
     * interface Elastos.Droid.View.OnPreDrawListener
     * interface Elastos.Droid.View.IKeyEventCallback
     * interface Elastos.Droid.View.Accessibility.IAccessibilityEventSource
     * interface Elastos.Droid.Graphics.Drawable.IDrawableCallback
     */
    interface ITextClock
    {
        /**
         * Returns the formatting pattern used to display the date and/or time
         * in 12-hour mode. The formatting pattern syntax is described in
         * {@link DateFormat}.
         *
         * @return A {@link CharSequence} or null.
         *
         * @see #setFormat12Hour(CharSequence)
         * @see #is24HourModeEnabled()
         */
        GetFormat12Hour(
            [out] ICharSequence** format);

        /**
         * Specifies the formatting pattern used to display the date and/or time
         * in 12-hour mode. The formatting pattern syntax is described in
         * {@link DateFormat}.
         *
         * If this pattern is set to null, {@link #getFormat24Hour()} will be used
         * even in 12-hour mode. If both 24-hour and 12-hour formatting patterns
         * are set to null, {@link #DEFAULT_FORMAT_24_HOUR} and
         * {@link #DEFAULT_FORMAT_12_HOUR} will be used instead.
         *
         * @param format A date/time formatting pattern as described in {@link DateFormat}
         *
         * @see #getFormat12Hour()
         * @see #is24HourModeEnabled()
         * @see #DEFAULT_FORMAT_12_HOUR
         * @see DateFormat
         *
         * @attr ref android.R.styleable#TextClock_format12Hour
         */
        SetFormat12Hour(
            [in] ICharSequence* format);

        /**
         * Returns the formatting pattern used to display the date and/or time
         * in 24-hour mode. The formatting pattern syntax is described in
         * {@link DateFormat}.
         *
         * @return A {@link CharSequence} or null.
         *
         * @see #setFormat24Hour(CharSequence)
         * @see #is24HourModeEnabled()
         */
        GetFormat24Hour(
            [out] ICharSequence** format);

        /**
         * Specifies the formatting pattern used to display the date and/or time
         * in 24-hour mode. The formatting pattern syntax is described in
         * {@link DateFormat}.
         *
         * If this pattern is set to null, {@link #getFormat12Hour()} will be used
         * even in 24-hour mode. If both 24-hour and 12-hour formatting patterns
         * are set to null, {@link #DEFAULT_FORMAT_24_HOUR} and
         * {@link #DEFAULT_FORMAT_12_HOUR} will be used instead.
         *
         * @param format A date/time formatting pattern as described in {@link DateFormat}
         *
         * @see #getFormat24Hour()
         * @see #is24HourModeEnabled()
         * @see #DEFAULT_FORMAT_24_HOUR
         * @see DateFormat
         *
         * @attr ref android.R.styleable#TextClock_format24Hour
         */
        SetFormat24Hour(
            [in] ICharSequence* format);

        /**
         * Indicates whether the system is currently using the 24-hour mode.
         *
         * When the system is in 24-hour mode, this view will use the pattern
         * returned by {@link #getFormat24Hour()}. In 12-hour mode, the pattern
         * returned by {@link #getFormat12Hour()} is used instead.
         *
         * If either one of the formats is null, the other format is used. If
         * both formats are null, the default values {@link #DEFAULT_FORMAT_12_HOUR}
         * and {@link #DEFAULT_FORMAT_24_HOUR} are used instead.
         *
         * @return true if time should be displayed in 24-hour format, false if it
         *         should be displayed in 12-hour format.
         *
         * @see #setFormat12Hour(CharSequence)
         * @see #getFormat12Hour()
         * @see #setFormat24Hour(CharSequence)
         * @see #getFormat24Hour()
         */
        Is24HourModeEnabled(
            [out] Boolean* enabled);

        /**
         * Indicates which time zone is currently used by this view.
         *
         * @return The ID of the current time zone or null if the default time zone,
         *         as set by the user, must be used
         *
         * @see TimeZone
         * @see java.util.TimeZone#getAvailableIDs()
         * @see #setTimeZone(String)
         */
        GetTimeZone(
            [out] String* timeZone);

        /**
         * Sets the specified time zone to use in this clock. When the time zone
         * is set through this method, system time zone changes (when the user
         * sets the time zone in settings for instance) will be ignored.
         *
         * @param timeZone The desired time zone's ID as specified in {@link TimeZone}
         *                 or null to user the time zone specified by the user
         *                 (system time zone)
         *
         * @see #getTimeZone()
         * @see java.util.TimeZone#getAvailableIDs()
         * @see TimeZone#getTimeZone(String)
         *
         * @attr ref android.R.styleable#TextClock_timeZone
         */
        SetTimeZone(
            [in] String timeZone);
    }

    } // namespace Widget
    } // namespace Droid
    } // namespace Elastos
}
