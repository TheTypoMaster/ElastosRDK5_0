module
{
    namespace Elastos {
    namespace Droid {
    namespace Net {
    namespace Nsd {

        interface INsdManagerDiscoveryListener {

            OnStartDiscoveryFailed(
                [in] String serviceType,
                [in] Int32 errorCode);

            OnStopDiscoveryFailed(
                [in] String serviceType,
                [in] Int32 errorCode);

            OnDiscoveryStarted(
                [in] String serviceType);

            OnDiscoveryStopped(
                [in] String serviceType);

            OnServiceFound(
                [in] INsdServiceInfo* serviceInfo);

            OnServiceLost(
                [in] INsdServiceInfo* serviceInfo);

        }

        interface INsdManagerRegistrationListener {

            OnRegistrationFailed(
                [in] INsdServiceInfo* serviceInfo,
                [in] Int32 errorCode);

            OnUnregistrationFailed(
                [in] INsdServiceInfo* serviceInfo,
                [in] Int32 errorCode);

            OnServiceRegistered(
                [in] INsdServiceInfo* serviceInfo);

            OnServiceUnregistered(
                [in] INsdServiceInfo* serviceInfo);
        }

        interface INsdManagerResolveListener {

            OnResolveFailed(
                [in] INsdServiceInfo* serviceInfo,
                [in] Int32 errorCode);

            OnServiceResolved(
                [in] INsdServiceInfo* serviceInfo);
        }

        [deprecated]
        interface INsdManager
        {
            const String ACTION_NSD_STATE_CHANGED = "android.net.nsd.STATE_CHANGED";

            /**
             * The lookup key for an int that indicates whether network service discovery is enabled
             * or disabled. Retrieve it with {@link android.content.Intent#getIntExtra(String,int)}.
             *
             * @see #NSD_STATE_DISABLED
             * @see #NSD_STATE_ENABLED
             */
            const String EXTRA_NSD_STATE = "nsd_state";

            /**
             * Network service discovery is disabled
             *
             * @see #ACTION_NSD_STATE_CHANGED
             */
            const Int32 NSD_STATE_DISABLED = 1;

            /**
             * Network service discovery is enabled
             *
             * @see #ACTION_NSD_STATE_CHANGED
             */
            const Int32 NSD_STATE_ENABLED = 2;

            /** @hide */
            const Int32 DISCOVER_SERVICES                       = 0x00060001;   //IProtocol::BASE_NSD_MANAGER
            /** @hide */
            const Int32 DISCOVER_SERVICES_STARTED               = 0x00060002;   //IProtocol::BASE_NSD_MANAGER
            /** @hide */
            const Int32 DISCOVER_SERVICES_FAILED                = 0x00060003;   //IProtocol::BASE_NSD_MANAGER
            /** @hide */
            const Int32 SERVICE_FOUND                           = 0x00060004;   //IProtocol::BASE_NSD_MANAGER
            /** @hide */
            const Int32 SERVICE_LOST                            = 0x00060005;   //IProtocol::BASE_NSD_MANAGER

            /** @hide */
            const Int32 STOP_DISCOVERY                          = 0x00060006;   //IProtocol::BASE_NSD_MANAGER
            /** @hide */
            const Int32 STOP_DISCOVERY_FAILED                   = 0x00060007;   //IProtocol::BASE_NSD_MANAGER
            /** @hide */
            const Int32 STOP_DISCOVERY_SUCCEEDED                = 0x00060008;   //IProtocol::BASE_NSD_MANAGER

            /** @hide */
            const Int32 REGISTER_SERVICE                        = 0x00060009;   //IProtocol::BASE_NSD_MANAGER
            /** @hide */
            const Int32 REGISTER_SERVICE_FAILED                 = 0x0006000a;   //IProtocol::BASE_NSD_MANAGER
            /** @hide */
            const Int32 REGISTER_SERVICE_SUCCEEDED              = 0x0006000b;   //IProtocol::BASE_NSD_MANAGER

            /** @hide */
            const Int32 UNREGISTER_SERVICE                      = 0x0006000c;   //IProtocol::BASE_NSD_MANAGER
            /** @hide */
            const Int32 UNREGISTER_SERVICE_FAILED               = 0x0006000d;   //IProtocol::BASE_NSD_MANAGER
            /** @hide */
            const Int32 UNREGISTER_SERVICE_SUCCEEDED            = 0x0006000e;   //IProtocol::BASE_NSD_MANAGER + 14

            /** @hide */
            const Int32 RESOLVE_SERVICE                         = 0x00060012;   //IProtocol::BASE_NSD_MANAGER + 18
            /** @hide */
            const Int32 RESOLVE_SERVICE_FAILED                  = 0x00060013;   //IProtocol::BASE_NSD_MANAGER
            /** @hide */
            const Int32 RESOLVE_SERVICE_SUCCEEDED               = 0x00060014;   //IProtocol::BASE_NSD_MANAGER

            /** @hide */
            const Int32 ENABLE                                  = 0x00060018;   //IProtocol::BASE_NSD_MANAGER + 24
            /** @hide */
            const Int32 DISABLE                                 = 0x00060019;   //IProtocol::BASE_NSD_MANAGER

            /** @hide */
            const Int32 NATIVE_DAEMON_EVENT                     = 0x0006001a;   //IProtocol::BASE_NSD_MANAGER

            /** Dns based service discovery protocol */
            const Int32 PROTOCOL_DNS_SD = 0x0001;

            /**
             * Failures are passed with {@link RegistrationListener#onRegistrationFailed},
             * {@link RegistrationListener#onUnregistrationFailed},
             * {@link DiscoveryListener#onStartDiscoveryFailed},
             * {@link DiscoveryListener#onStopDiscoveryFailed} or {@link ResolveListener#onResolveFailed}.
             *
             * Indicates that the operation failed due to an internal error.
             */
            const Int32 FAILURE_INTERNAL_ERROR               = 0;

            /**
             * Indicates that the operation failed because it is already active.
             */
            const Int32 FAILURE_ALREADY_ACTIVE              = 3;

            /**
             * Indicates that the operation failed because the maximum outstanding
             * requests from the applications have reached.
             */
            const Int32 FAILURE_MAX_LIMIT                   = 4;

            /**
             * Register a service to be discovered by other services.
             *
             * <p> The function call immediately returns after sending a request to register service
             * to the framework. The application is notified of a success to initiate
             * discovery through the callback {@link RegistrationListener#onServiceRegistered} or a failure
             * through {@link RegistrationListener#onRegistrationFailed}.
             *
             * @param serviceInfo The service being registered
             * @param protocolType The service discovery protocol
             * @param listener The listener notifies of a successful registration and is used to
             * unregister this service through a call on {@link #unregisterService}. Cannot be null.
             */
            RegisterService(
                [in] INsdServiceInfo* serviceInfo,
                [in] Int32 protocolType,
                [in] INsdManagerRegistrationListener* listener);

            /**
             * Unregister a service registered through {@link #registerService}. A successful
             * unregister is notified to the application with a call to
             * {@link RegistrationListener#onServiceUnregistered}.
             *
             * @param listener This should be the listener object that was passed to
             * {@link #registerService}. It identifies the service that should be unregistered
             * and notifies of a successful unregistration.
             */
            UnregisterService(
                [in] INsdManagerRegistrationListener* listener);

            /**
             * Initiate service discovery to browse for instances of a service type. Service discovery
             * consumes network bandwidth and will continue until the application calls
             * {@link #stopServiceDiscovery}.
             *
             * <p> The function call immediately returns after sending a request to start service
             * discovery to the framework. The application is notified of a success to initiate
             * discovery through the callback {@link DiscoveryListener#onDiscoveryStarted} or a failure
             * through {@link DiscoveryListener#onStartDiscoveryFailed}.
             *
             * <p> Upon successful start, application is notified when a service is found with
             * {@link DiscoveryListener#onServiceFound} or when a service is lost with
             * {@link DiscoveryListener#onServiceLost}.
             *
             * <p> Upon failure to start, service discovery is not active and application does
             * not need to invoke {@link #stopServiceDiscovery}
             *
             * @param serviceType The service type being discovered. Examples include "_http._tcp" for
             * http services or "_ipp._tcp" for printers
             * @param protocolType The service discovery protocol
             * @param listener  The listener notifies of a successful discovery and is used
             * to stop discovery on this serviceType through a call on {@link #stopServiceDiscovery}.
             * Cannot be null.
             */
            DiscoverServices(
                [in] String serviceType,
                [in] Int32 protocolType,
                [in] INsdManagerDiscoveryListener* listener);

            /**
             * Stop service discovery initiated with {@link #discoverServices}. An active service
             * discovery is notified to the application with {@link DiscoveryListener#onDiscoveryStarted}
             * and it stays active until the application invokes a stop service discovery. A successful
             * stop is notified to with a call to {@link DiscoveryListener#onDiscoveryStopped}.
             *
             * <p> Upon failure to stop service discovery, application is notified through
             * {@link DiscoveryListener#onStopDiscoveryFailed}.
             *
             * @param listener This should be the listener object that was passed to {@link #discoverServices}.
             * It identifies the discovery that should be stopped and notifies of a successful stop.
             */
            StopServiceDiscovery(
                [in] INsdManagerDiscoveryListener* listener);

            /**
             * Resolve a discovered service. An application can resolve a service right before
             * establishing a connection to fetch the IP and port details on which to setup
             * the connection.
             *
             * @param serviceInfo service to be resolved
             * @param listener to receive callback upon success or failure. Cannot be null.
             */
            ResolveService(
                [in] INsdServiceInfo* serviceInfo,
                [in] INsdManagerResolveListener* listener);

            /** Internal use only @hide */
            SetEnabled(
                [in] Boolean enabled);
        }

    }
    }
    }
    }
}
