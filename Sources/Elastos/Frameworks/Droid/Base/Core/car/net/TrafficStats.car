

module
{

using interface Elastos.Net.ISocket;

interface Elastos.Droid.Content.IContext;
interface Elastos.Droid.Net.INetworkStats;
interface Elastos.Droid.Net.IINetworkStatsSession;


namespace Elastos {
namespace Droid {
namespace Net {

    /**
    * The return value to indicate that the device does not support the statistic.
    */


    [local,deprecated]
    interface ITrafficStats{

    const Int32 UNSUPPORTED = -1;

    const Int64 KB_IN_BYTES = 1024;

    const Int64 MB_IN_BYTES = KB_IN_BYTES * 1024;

    const Int64 GB_IN_BYTES = MB_IN_BYTES * 1024;

    /**
     * Special UID value used when collecting {@link NetworkStatsHistory} for
     * removed applications.
     *
     * @hide
     */
   const Int32 UID_REMOVED = -4;

   /**
     * Special UID value used when collecting {@link NetworkStatsHistory} for
     * tethering traffic.
     *
     * @hide
     */
    const Int32 UID_TETHERING = -5;

    /**
     * Default tag value for {@link DownloadManager} traffic.
     *
     * @hide
     */
    const Int32 TAG_SYSTEM_DOWNLOAD = 0xFFFFFF01;

    /**
     * Default tag value for {@link MediaPlayer} traffic.
     *
     * @hide
     */
    const Int32 TAG_SYSTEM_MEDIA = 0xFFFFFF02;

    /**
     * Default tag value for {@link BackupManager} traffic.
     *
     * @hide
     */
    const Int32 TAG_SYSTEM_BACKUP = 0xFFFFFF03;

   /**
     * Set active tag to use when accounting {@link Socket} traffic originating
     * from the current thread. Only one active tag per thread is supported.
     * <p>
     * Changes only take effect during subsequent calls to
     * {@link #tagSocket(Socket)}.
     * <p>
     * Tags between {@code 0xFFFFFF00} and {@code 0xFFFFFFFF} are reserved and
     * used internally by system services like {@link DownloadManager} when
     * performing traffic on behalf of an application.
     */
    SetThreadStatsTag(
        [in] Int32 tag);

    /**
     * Get the active tag used when accounting {@link Socket} traffic originating
     * from the current thread. Only one active tag per thread is supported.
     * {@link #tagSocket(Socket)}.
     */
    GetThreadStatsTag(
        [out] Int32* result);

    ClearThreadStatsTag();

    /**
     * Set specific UID to use when accounting {@link Socket} traffic
     * originating from the current thread. Designed for use when performing an
     * operation on behalf of another application.
     * <p>
     * Changes only take effect during subsequent calls to
     * {@link #tagSocket(Socket)}.
     * <p>
     * To take effect, caller must hold
     * {@link android.Manifest.permission#UPDATE_DEVICE_STATS} permission.
     *
     * {@hide}
     */
    SetThreadStatsUid(
        [in] Int32 uid);

    ClearThreadStatsUid();

    /**
     * Tag the given {@link Socket} with any statistics parameters active for
     * the current thread. Subsequent calls always replace any existing
     * parameters. When finished, call {@link #untagSocket(Socket)} to remove
     * statistics parameters.
     *
     * @see #setThreadStatsTag(int)
     * @see #setThreadStatsUid(int)
     */
    TagSocket(
        [in] ISocket* socket);

    /**
     * Remove any statistics parameters from the given {@link Socket}.
     */
    UntagSocket(
        [in] ISocket* socket);

    /**
     * Start profiling data usage for current UID. Only one profiling session
     * can be active at a time.
     *
     * @hide
     */
    StartDataProfiling(
        [in] IContext* ctx);

    /**
     * Stop profiling data usage for current UID.
     *
     * @return Detailed {@link NetworkStats} of data that occurred since last
     *         {@link #startDataProfiling(Context)} call.
     * @hide
     */
    StopDataProfiling(
        [in] IContext* ctx,
        [out] INetworkStats** Retvalue);

    /**
     * Increment count of network operations performed under the accounting tag
     * currently active on the calling thread. This can be used to derive
     * bytes-per-operation.
     *
     * @param operationCount Number of operations to increment count by.
     */
    IncrementOperationCount(
        [in] Int32 operationCount);

    /**
     * Increment count of network operations performed under the given
     * accounting tag. This can be used to derive bytes-per-operation.
     *
     * @param tag Accounting tag used in {@link #setThreadStatsTag(int)}.
     * @param operationCount Number of operations to increment count by.
     */
    IncrementOperationCount(
        [in] Int32 tag,
        [in] Int32 operationCount);

    CloseQuietly(
         [in] IINetworkStatsSession* session);

    /**
     * Get the total number of packets transmitted through the mobile interface.
     *
     * @return number of packets.  If the statistics are not supported by this device,
     * {@link #UNSUPPORTED} will be returned.
     */
    GetMobileTxPackets(
        [out] Int64* result);

     /**
      * Get the total number of packets received through the mobile interface.
      *
      * @return number of packets.  If the statistics are not supported by this device,
      * {@link #UNSUPPORTED} will be returned.
      */
      GetMobileRxPackets(
          [out] Int64* result);

      /**
      * Get the total number of bytes transmitted through the mobile interface.
      *
      * @return number of bytes.  If the statistics are not supported by this device,
      * {@link #UNSUPPORTED} will be returned.
      */
      GetMobileTxBytes(
          [out] Int64* result);

      /**
      * Get the total number of bytes received through the mobile interface.
      *
      * @return number of bytes.  If the statistics are not supported by this device,
      * {@link #UNSUPPORTED} will be returned.
      */
      GetMobileRxBytes(
          [out] Int64* result);

      /**
      * Get the total number of packets sent through all network interfaces.
      *
      * @return the number of packets.  If the statistics are not supported by this device,
      * {@link #UNSUPPORTED} will be returned.
      */
      GetTotalTxPackets(
          [out] Int64* result);

      /**
      * Get the total number of packets received through all network interfaces.
      *
      * @return number of packets.  If the statistics are not supported by this device,
      * {@link #UNSUPPORTED} will be returned.
      */
      GetTotalRxPackets(
          [out] Int64* result);

      /**
      * Get the total number of bytes sent through all network interfaces.
      *
      * @return number of bytes.  If the statistics are not supported by this device,
      * {@link #UNSUPPORTED} will be returned.
      */
      GetTotalTxBytes(
          [out] Int64* Retvalue);

      /**
      * Get the total number of bytes received through all network interfaces.
      *
      * @return number of bytes.  If the statistics are not supported by this device,
      * {@link #UNSUPPORTED} will be returned.
      */
      GetTotalRxBytes(
          [out] Int64* Retvalue);

      /**
      * Get the number of bytes sent through the network for this UID.
      * The statistics are across all interfaces.
      *
      * {@see android.os.Process#myUid()}.
      *
      * @param uid The UID of the process to examine.
      * @return number of bytes.  If the statistics are not supported by this device,
      * {@link #UNSUPPORTED} will be returned.
      */
      GetUidTxBytes(
          [in] Int32 uid,
          [out] Int64* result);

      /**
      * Get the number of bytes received through the network for this UID.
      * The statistics are across all interfaces.
      *
      * {@see android.os.Process#myUid()}.
      *
      * @param uid The UID of the process to examine.
      * @return number of bytes
      */
      GetUidRxBytes(
          [in] Int32 uid,
          [out] Int64* result);

    /**
     * Get the total number of packets transmitted through the specified interface.
     *
     * @return number of packets.  If the statistics are not supported by this interface,
     * {@link #UNSUPPORTED} will be returned.
     * @hide
     */
    GetTxPackets(
        [in] String iface,
        [out] Int64* Retvalue);

    /**
     * Get the total number of packets received through the specified interface.
     *
     * @return number of packets.  If the statistics are not supported by this interface,
     * {@link #UNSUPPORTED} will be returned.
     * @hide
     */
    GetRxPackets(
        [in] String iface,
        [out] Int64* Retvalue);

    /**
     * Get the total number of bytes transmitted through the specified interface.
     *
     * @return number of bytes.  If the statistics are not supported by this interface,
     * {@link #UNSUPPORTED} will be returned.
     * @hide
     */
    GetTxBytes(
        [in] String iface,
        [out] Int64* Retvalue);

    /**
     * Get the total number of bytes received through the specified interface.
     *
     * @return number of bytes.  If the statistics are not supported by this interface,
     * {@link #UNSUPPORTED} will be returned.
     * @hide
     */
    GetRxBytes(
        [in] String iface,
        [out] Int64* Retvalue);


    /**
     * Get the number of packets (TCP segments + UDP) sent through
     * the network for this UID.
     * The statistics are across all interfaces.
     *
     * {@see android.os.Process#myUid()}.
     *
     * @param uid The UID of the process to examine.
     * @return number of packets.
     * If the statistics are not supported by this device,
     * {@link #UNSUPPORTED} will be returned.
     */
    GetUidTxPackets(
        [in] Int32 uid,
        [out] Int64* Retvalue);

    /**
     * Get the number of packets (TCP segments + UDP) received through
     * the network for this UID.
     * The statistics are across all interfaces.
     *
     * {@see android.os.Process#myUid()}.
     *
     * @param uid The UID of the process to examine.
     * @return number of packets
     */
    GetUidRxPackets(
        [in] Int32 uid,
        [out] Int64* Retvalue);

    /**
     * Get the number of TCP payload bytes sent for this UID.
     * This total does not include protocol and control overheads at
     * the transport and the lower layers of the networking stack.
     * The statistics are across all interfaces.
     *
     * {@see android.os.Process#myUid()}.
     *
     * @param uid The UID of the process to examine.
     * @return number of bytes.  If the statistics are not supported by this device,
     * {@link #UNSUPPORTED} will be returned.
     */
    GetUidTcpTxBytes(
        [in] Int32 uid,
        [out] Int64* Retvalue);

    /**
     * Get the number of TCP payload bytes received for this UID.
     * This total does not include protocol and control overheads at
     * the transport and the lower layers of the networking stack.
     * The statistics are across all interfaces.
     *
     * {@see android.os.Process#myUid()}.
     *
     * @param uid The UID of the process to examine.
     * @return number of bytes.  If the statistics are not supported by this device,
     * {@link #UNSUPPORTED} will be returned.
     */
    GetUidTcpRxBytes(
        [in] Int32 uid,
        [out] Int64* Retvalue);

    /**
     * Get the number of UDP payload bytes sent for this UID.
     * This total does not include protocol and control overheads at
     * the transport and the lower layers of the networking stack.
     * The statistics are across all interfaces.
     *
     * {@see android.os.Process#myUid()}.
     *
     * @param uid The UID of the process to examine.
     * @return number of bytes.  If the statistics are not supported by this device,
     * {@link #UNSUPPORTED} will be returned.
     */
    GetUidUdpTxBytes(
        [in] Int32 uid,
        [out] Int64* Retvalue);

    /**
     * Get the number of UDP payload bytes received for this UID.
     * This total does not include protocol and control overheads at
     * the transport and the lower layers of the networking stack.
     * The statistics are across all interfaces.
     *
     * {@see android.os.Process#myUid()}.
     *
     * @param uid The UID of the process to examine.
     * @return number of bytes.  If the statistics are not supported by this device,
     * {@link #UNSUPPORTED} will be returned.
     */
    GetUidUdpRxBytes(
        [in] Int32 uid,
        [out] Int64* Retvalue);

    /**
     * Get the number of TCP segments sent for this UID.
     * Does not include TCP control packets (SYN/ACKs/FIN/..).
     * The statistics are across all interfaces.
     *
     * {@see android.os.Process#myUid()}.
     *
     * @param uid The UID of the process to examine.
     * @return number of TCP segments.  If the statistics are not supported by this device,
     * {@link #UNSUPPORTED} will be returned.
     */
    GetUidTcpTxSegments(
        [in] Int32 uid,
        [out] Int64* Retvalue);

    /**
     * Get the number of TCP segments received for this UID.
     * Does not include TCP control packets (SYN/ACKs/FIN/..).
     * The statistics are across all interfaces.
     *
     * {@see android.os.Process#myUid()}.
     *
     * @param uid The UID of the process to examine.
     * @return number of TCP segments.  If the statistics are not supported by this device,
     * {@link #UNSUPPORTED} will be returned.
     */
    GetUidTcpRxSegments(
        [in] Int32 uid,
        [out] Int64* Retvalue);

    /**
     * Get the number of UDP packets sent for this UID.
     * Includes DNS requests.
     * The statistics are across all interfaces.
     *
     * {@see android.os.Process#myUid()}.
     *
     * @param uid The UID of the process to examine.
     * @return number of packets.  If the statistics are not supported by this device,
     * {@link #UNSUPPORTED} will be returned.
     */
    GetUidUdpTxPackets(
        [in] Int32 uid,
        [out] Int64* Retvalue);

    /**
     * Get the number of UDP packets received for this UID.
     * Includes DNS responses.
     * The statistics are across all interfaces.
     *
     * {@see android.os.Process#myUid()}.
     *
     * @param uid The UID of the process to examine.
     * @return number of packets.  If the statistics are not supported by this device,
     * {@link #UNSUPPORTED} will be returned.
     */
    GetUidUdpRxPackets(
        [in] Int32 uid,
        [out] Int64* Retvalue);

}

} // namespace net
} // namepsace Droid
} // namespace Elastos


}
