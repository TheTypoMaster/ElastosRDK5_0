
module
{

    interface Elastos.Droid.Net.INetworkInfo;
    interface Elastos.Droid.Net.ILinkProperties;
    interface Elastos.Droid.Net.INetworkState;
    interface Elastos.Droid.Net.INetworkQuotaInfo;
    interface Elastos.Droid.Net.IProxyProperties;
    interface Elastos.Droid.Os.IBinder;
    interface Elastos.Droid.Os.IParcelFileDescriptor;
//    interface IVpnConfig;
//    interface IVpnProfile;
//    interface ILegacyVpnInfo;

    namespace Elastos {
    namespace Droid {
    namespace Net {

    [deprecated]
    interface IIConnectivityManager {
        SetNetworkPreference(
            [in] Int32 pref);

        GetNetworkPreference(
            [out] Int32* result);

        GetActiveNetworkInfo(
            [out] INetworkInfo** result);

        GetActiveNetworkInfoForUid(
            [in] Int32 uid,
            [out] INetworkInfo** result);

        GetNetworkInfo(
            [in] Int32 networkType,
            [out] INetworkInfo** result);

        GetAllNetworkInfo(
            [out, callee] ArrayOf<INetworkInfo*>* result);

        IsNetworkSupported(
            [in] Int32 networkType,
            [out] Boolean* result);

        GetActiveLinkProperties(
            [out] ILinkProperties** result);

        GetLinkProperties(
            [in] Int32 networkType,
            [out] ILinkProperties** result);

        GetAllNetworkState(
            [out, callee] ArrayOf<INetworkState*>* result);

        GetActiveNetworkQuotaInfo(
            [out] INetworkQuotaInfo** result);

        IsActiveNetworkMetered(
            [out] Boolean* result);

        SetRadios(
            [in] Boolean onOff,
            [out] Boolean* result);

        SetRadio(
            [in] Int32 networkType,
            [in] Boolean turnOn,
            [out] Boolean* result);

        StartUsingNetworkFeature(
            [in] Int32 networkType,
            [in] String feature,
            [in] IBinder* binder,
            [out] Int32* result);

        StopUsingNetworkFeature(
            [in] Int32 networkType,
            [in] String feature,
            [out] Int32* result);

        RequestRouteToHost(
            [in] Int32 networkType,
            [in] Int32 hostAddress,
            [out] Boolean* result);

        RequestRouteToHostAddress(
            [in] Int32 networkType,
            [in] ArrayOf<Byte>* hostAddress,
            [out] Boolean* result);

        GetMobileDataEnabled(
            [out] Boolean* result);

        SetMobileDataEnabled(
            [in] Boolean enabled);

        /** Policy control over specific {@link NetworkStateTracker}. */
        SetPolicyDataEnable(
            [in] Int32 networkType,
            [in] Boolean enabled);

        Tether(
            [in] String iface,
            [out] Int32* result);

        Untether(
            [in] String iface,
            [out] Int32* result);

        GetLastTetherError(
            [in] String iface,
            [out] Int32* result);

        IsTetheringSupported(
            [out] Boolean* result);

        GetTetherableIfaces(
            [out, callee] ArrayOf<String>* result);

        GetTetheredIfaces(
            [out, callee] ArrayOf<String>* result);

        /**
         * Return list of interface pairs that are actively tethered.  Even indexes are
         * remote interface, and odd indexes are corresponding local interfaces.
         */
        GetTetheredIfacePairs(
            [out, callee] ArrayOf<String>* result);

        GetTetheringErroredIfaces(
            [out, callee] ArrayOf<String>* result);

        GetTetherableUsbRegexs(
            [out, callee] ArrayOf<String>* result);

        GetTetherableWifiRegexs(
            [out, callee] ArrayOf<String>* result);

        GetTetherableBluetoothRegexs(
            [out, callee] ArrayOf<String>* result);

        SetUsbTethering(
            [in] Boolean enabled,
            [out] Int32* result);

        RequestNetworkTransitionWakelock(
            [in] String forWhom);

        ReportInetCondition(
            [in] Int32 networkType,
            [in] Int32 percentage);

        GetGlobalProxy(
            [out] IProxyProperties** result);

        SetGlobalProxy(
            [in] IProxyProperties* p);

        GetProxy(
            [out] IProxyProperties** result);

        SetDataDependency(
            [in] Int32 networkType,
            [in] Boolean met);

        ProtectVpn(
            [in] IParcelFileDescriptor* socket,
            [out] Boolean* result);

        PrepareVpn(
            [in] String oldPackage,
            [in] String newPackage,
            [out] Boolean* result);

//        EstablishVpn(
//            [in] IVpnConfig* config,
//            [out] IParcelFileDescriptor** result);

//        StartLegacyVpn(
//            [in] IVpnProfile* profile);

//        GetLegacyVpnInfo(
//            [out] ILegacyVpnInfo** result);

		UpdateLockdownVpn(
			[out] Boolean* result);

        CaptivePortalCheckComplete(
            [in] INetworkInfo* info);
    }

    } // namespace Net
    } // namepsace Droid
    } // namespace Elastos
}
