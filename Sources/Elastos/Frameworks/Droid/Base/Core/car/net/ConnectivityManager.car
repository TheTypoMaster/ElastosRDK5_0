
module
{
    using interface Elastos.Net.IInetAddress;

    interface Elastos.Droid.Net.INetworkInfo;
    interface Elastos.Droid.Net.ILinkProperties;
    interface Elastos.Droid.Net.INetworkQuotaInfo;
    interface Elastos.Droid.Net.IProxyProperties;
    interface Elastos.Droid.Net.IIConnectivityManager;
    interface Elastos.Droid.Content.IContext;

    namespace Elastos {
    namespace Droid {
    namespace Net {

    interface IConnectivityManager{

        const String CONNECTIVITY_ACTION = "android.net.conn.CONNECTIVITY_CHANGE";
        const String CONNECTIVITY_ACTION_IMMEDIATE ="android.net.conn.CONNECTIVITY_CHANGE_IMMEDIATE";
        const String EXTRA_NETWORK_INFO = "networkInfo";
        const String EXTRA_NETWORK_TYPE = "networkType";
        const String EXTRA_IS_FAILOVER = "isFailover";
        const String EXTRA_OTHER_NETWORK_INFO = "otherNetwork";
        const String EXTRA_NO_CONNECTIVITY = "noConnectivity";
        const String EXTRA_REASON = "reason";
        const String EXTRA_EXTRA_INFO = "extraInfo";
        const String EXTRA_INET_CONDITION = "inetCondition";
        //@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
        const String ACTION_DATA_ACTIVITY_CHANGE = "android.net.conn.DATA_ACTIVITY_CHANGE";
        const String EXTRA_DEVICE_TYPE = "deviceType";
        const String EXTRA_IS_ACTIVE = "isActive";
        //@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
        const String ACTION_BACKGROUND_DATA_SETTING_CHANGED ="android.net.conn.BACKGROUND_DATA_SETTING_CHANGED";
        const String INET_CONDITION_ACTION ="android.net.conn.INET_CONDITION_ACTION";
        const String ACTION_TETHER_STATE_CHANGED ="android.net.conn.TETHER_STATE_CHANGED";
        const String EXTRA_AVAILABLE_TETHER = "availableArray";
        const String EXTRA_ACTIVE_TETHER = "activeArray";
        const String EXTRA_ERRORED_TETHER = "erroredArray";

        /**
         * The absence of APN..
         * @hide
         */
        const Int32 TYPE_NONE        = -1;

        /**
         * The Default Mobile data connection.  When active, all data traffic
         * will use this connection by default.
         */
        const Int32 TYPE_MOBILE      = 0;

        /**
         * The Default WIFI data connection.  When active, all data traffic
         * will use this connection by default.
         */
        const Int32 TYPE_WIFI        = 1;

        /**
         * An MMS-specific Mobile data connection.  This connection may be the
         * same as {@link #TYPE_MOBILE} but it may be different.  This is used
         * by applications needing to talk to the carrier's Multimedia Messaging
         * Service servers.  It may coexist with default data connections.
         */
        const Int32 TYPE_MOBILE_MMS  = 2;

        /**
         * A SUPL-specific Mobile data connection.  This connection may be the
         * same as {@link #TYPE_MOBILE} but it may be different.  This is used
         * by applications needing to talk to the carrier's Secure User Plane
         * Location servers for help locating the device.  It may coexist with
         * default data connections.
         */
        const Int32 TYPE_MOBILE_SUPL = 3;

        /**
         * A DUN-specific Mobile data connection.  This connection may be the
         * same as {@link #TYPE_MOBILE} but it may be different.  This is used
         * by applicaitons performing a Dial Up Networking bridge so that
         * the carrier is aware of DUN traffic.  It may coexist with default data
         * connections.
         */
        const Int32 TYPE_MOBILE_DUN  = 4;

        /**
         * A High Priority Mobile data connection.  This connection is typically
         * the same as {@link #TYPE_MOBILE} but the routing setup is different.
         * Only requesting processes will have access to the Mobile DNS servers
         * and only IP's explicitly requested via {@link #requestRouteToHost}
         * will route over this interface if a default route exists.
         */
        const Int32 TYPE_MOBILE_HIPRI = 5;

        /**
         * The Default WiMAX data connection.  When active, all data traffic
         * will use this connection by default.
         */
        const Int32 TYPE_WIMAX       = 6;

        /**
         * The Default Bluetooth data connection. When active, all data traffic
         * will use this connection by default.
         */
        const Int32 TYPE_BLUETOOTH   = 7;

        /**
         * Dummy data connection.  This should not be used on shipping devices.
         */
        const Int32 TYPE_DUMMY       = 8;

        /**
         * The Default Ethernet data connection.  When active, all data traffic
         * will use this connection by default.
         */
        const Int32 TYPE_ETHERNET    = 9;

        /**
         * Over the air Adminstration.
         * {@hide}
         */
        const Int32 TYPE_MOBILE_FOTA = 10;

        /**
         * IP Multimedia Subsystem
         * {@hide}
         */
        const Int32 TYPE_MOBILE_IMS  = 11;

        /**
         * Carrier Branded Services
         * {@hide}
         */
        const Int32 TYPE_MOBILE_CBS  = 12;

        /**
         * A Wi-Fi p2p connection. Only requesting processes will have access to
         * the peers connected.
         * {@hide}
         */
        const Int32 TYPE_WIFI_P2P    = 13;

        const Int32 MAX_RADIO_TYPE   = TYPE_WIFI_P2P;
        const Int32 MAX_NETWORK_TYPE = TYPE_WIFI_P2P;

        const Int32 DEFAULT_NETWORK_PREFERENCE = TYPE_WIFI;

        const Int32 CONNECTIVITY_CHANGE_DELAY_DEFAULT = 3000;

        const Int32 TETHER_ERROR_NO_ERROR           = 0;
        const Int32 TETHER_ERROR_UNKNOWN_IFACE      = 1;
        const Int32 TETHER_ERROR_SERVICE_UNAVAIL    = 2;
        const Int32 TETHER_ERROR_UNSUPPORTED        = 3;
        const Int32 TETHER_ERROR_UNAVAIL_IFACE      = 4;
        const Int32 TETHER_ERROR_MASTER_ERROR       = 5;
        const Int32 TETHER_ERROR_TETHER_IFACE_ERROR = 6;
        const Int32 TETHER_ERROR_UNTETHER_IFACE_ERROR = 7;
        const Int32 TETHER_ERROR_ENABLE_NAT_ERROR     = 8;
        const Int32 TETHER_ERROR_DISABLE_NAT_ERROR    = 9;
        const Int32 TETHER_ERROR_IFACE_CFG_ERROR      = 10;

        SetNetworkPreference(
            [in] Int32 preference);

        GetNetworkPreference(
            [out] Int32* result);

        GetActiveNetworkInfo(
            [out] INetworkInfo** result);

        GetActiveNetworkInfoForUid(
            [in] Int32 uid,
            [out] INetworkInfo** result);

        GetNetworkInfo(
            [in] Int32 networkType,
            [out] INetworkInfo** result);

        GetAllNetworkInfo(
            [out, callee] ArrayOf<INetworkInfo*>* result);

        GetActiveLinkProperties(
            [out] ILinkProperties** result);

        GetLinkProperties(
            [in] Int32 networkType,
            [out] ILinkProperties** result);

        SetRadios(
            [in] Boolean turnOn,
            [out] Boolean* result);

        SetRadio(
            [in] Int32 networkType,
            [in] Boolean turnOn,
            [out] Boolean* result);

        StartUsingNetworkFeature(
            [in] Int32 networkType,
            [in] String feature,
            [out] Int32* result);

        StopUsingNetworkFeature(
            [in] Int32 networkType,
            [in] String feature,
            [out] Int32* result);

        RequestRouteToHost(
            [in] Int32 networkType,
            [in] Int32 hostAddress,
            [out] Boolean* result);

        RequestRouteToHostAddress(
            [in] Int32 networkType,
            [in] IInetAddress* hostAddress,
            [out] Boolean* result);

        GetBackgroundDataSetting(
            [out] Boolean* result);

        SetBackgroundDataSetting(
            [in] Boolean allowBackgroundData);

        GetActiveNetworkQuotaInfo(
            [out] INetworkQuotaInfo** result);

        GetMobileDataEnabled(
            [out] Boolean* result);

        SetMobileDataEnabled(
            [in] Boolean enabled);

        GetTetherableIfaces(
            [out, callee] ArrayOf<String>* result);

        GetTetheredIfaces(
            [out, callee] ArrayOf<String>* result);

        GetTetheringErroredIfaces(
            [out, callee] ArrayOf<String>* result);

        Tether(
            [in] String iface,
            [out] Int32* result);

        Untether(
            [in] String iface,
            [out] Int32* result);

        IsTetheringSupported(
            [out] Boolean* result);

        GetTetherableUsbRegexs(
            [out, callee] ArrayOf<String>* result);

        GetTetherableWifiRegexs(
            [out, callee] ArrayOf<String>* result);

        GetTetherableBluetoothRegexs(
            [out, callee] ArrayOf<String>* result);

        SetUsbTethering(
            [in] Boolean enabled,
            [out] Int32* result);

        GetLastTetherError(
            [in] String iface,
            [out] Int32* result);

        RequestNetworkTransitionWakelock(
            [in] String forWhom,
            [out] Boolean* result);

        ReportInetCondition(
            [in] Int32 networkType,
            [in] Int32 percentage);

        SetGlobalProxy(
            [in] IProxyProperties* p);

        GetGlobalProxy(
            [out] IProxyProperties** p);

        GetProxy(
            [out] IProxyProperties** p);

        SetDataDependency(
            [in] Int32 networkType,
            [in] Boolean met);

        IsNetworkSupported(
            [in] Int32 networkType,
            [out] Boolean* result);

        IsActiveNetworkMetered(
            [out] Boolean* result);

        /*SendMessage(
            [in] Int32 what,
            [in] INetworkInfo* info);*/

        UpdateLockdownVpn(
            [out] Boolean* result);

        CaptivePortalCheckComplete(
            [in] INetworkInfo* info);
    }

    [local]
    interface IConnectivityManagerHelper {
        IsNetworkTypeValid(
            [in] Int32 networkType,
            [out] Boolean* result);

        GetNetworkTypeName(
            [in] Int32 type,
            [out] String* result);

        IsNetworkTypeMobile(
            [in] Int32 networkType,
            [out] Boolean* result);

        From(
            [in] IContext* ctx,
            [out] IConnectivityManager** result);
    }
    } // namespace Net
    } // namepsace Droid
    } // namespace Elastos
}
