
module
{
    interface Elastos.Droid.Net.INetworkInfo;
    interface Elastos.Droid.Net.ILinkProperties;
    interface Elastos.Droid.Net.ILinkCapabilities;

    namespace Elastos {
    namespace Droid {
    namespace Net {

    /**
     * Interface provides the {@link com.android.server.ConnectivityService}
     * with three services. Events to the ConnectivityService when
     * changes occur, an API for controlling the network and storage
     * for network specific information.
     *
     * The Connectivity will call startMonitoring before any other
     * method is called.
     *
     * {@hide}
     */
    [local]
    interface INetworkStateTracker {
        /**
         * -------------------------------------------------------------
         * Event Interface back to ConnectivityService.
         *
         * The events that are to be sent back to the Handler passed
         * to startMonitoring when the particular event occurs.
         * -------------------------------------------------------------
         */

        /**
         * The network state has changed and the NetworkInfo object
         * contains the new state.
         *
         * msg.what = EVENT_STATE_CHANGED
         * msg.obj = NetworkInfo object
         */
        const Int32 EVENT_STATE_CHANGED = 1;

        /**
         * msg.what = EVENT_CONFIGURATION_CHANGED
         * msg.obj = NetworkInfo object
         */
        const Int32 EVENT_CONFIGURATION_CHANGED = 3;

        /**
         * msg.what = EVENT_RESTORE_DEFAULT_NETWORK
         * msg.obj = FeatureUser object
         */
        const Int32 EVENT_RESTORE_DEFAULT_NETWORK = 6;

        /**
         * msg.what = EVENT_NETWORK_SUBTYPE_CHANGED
         * msg.obj = NetworkInfo object
         */
        const Int32 EVENT_NETWORK_SUBTYPE_CHANGED = 7;

        /**
        * Begin monitoring data connectivity.
        *
        * This is the first method called when this interface is used.
        *
        * @param context is the current Android context
        * @param target is the Hander to which to return the events.
        */
        StartMonitoring(
            [in] IContext* ctx,
            [in] IHandler* target);

        /**
        * Fetch NetworkInfo for the network
        */
        GetNetworkInfo(
            [out] INetworkInfo** info);

        /**
        * Return the LinkProperties for the connection.
        *
        * @return a copy of the LinkProperties, is never null.
        */
        GetLinkProperties(
            [out] ILinkProperties** linkProperties);

        /**
        * A capability is an Integer/String pair, the capabilities
        * are defined in the class LinkSocket#Key.
        *
        * @return a copy of this connections capabilities, may be empty but never null.
        */
        GetLinkCapabilities(
            [out] ILinkCapabilities** linkCapabilities);

        /**
        * Return the system properties name associated with the tcp buffer sizes
        * for this network.
        */
        GetTcpBufferSizesPropName(
            [out] String* propName);

        /**
        * Disable connectivity to a network
        * @return {@code true} if a teardown occurred, {@code false} if the
        * teardown did not occur.
        */
        Teardown(
            [out] Boolean* result);

        /**
        * Reenable connectivity to a network after a {@link #teardown()}.
        * @return {@code true} if we're connected or expect to be connected
        */
        Reconnect(
            [out] Boolean* result);

        /**
        * Ready to switch on to the network after captive portal check
        */
        CaptivePortalCheckComplete();

        /**
        * Turn the wireless radio off for a network.
        * @param turnOn {@code true} to turn the radio on, {@code false}
        */
        SetRadio(
            [in] Boolean turnOn,
            [out] Boolean* result);

        /**
        * Returns an indication of whether this network is available for
        * connections. A value of {@code false} means that some quasi-permanent
        * condition prevents connectivity to this network.
        *
        * NOTE that this is broken on multi-connection devices.  Should be fixed in J release
        * TODO - fix on multi-pdp devices
        */
        IsAvailable(
            [out] Boolean* isAvailable);

        /**
        * User control of data connection through this network, typically persisted
        * internally.
        */
        SetUserDataEnable(
            [in] Boolean enabled);

        /**
        * Policy control of data connection through this network, typically not
        * persisted internally. Usually used when {@link NetworkPolicy#limitBytes}
        * is passed.
        */
        SetPolicyDataEnable(
            [in] Boolean enabled);

        /**
        * -------------------------------------------------------------
        * Storage API used by ConnectivityService for saving
        * Network specific information.
        * -------------------------------------------------------------
        */

        /**
        * Check if private DNS route is set for the network
        */
        IsPrivateDnsRouteSet(
            [out] Boolean* isSet);

        /**
        * Set a flag indicating private DNS route is set
        */
        SetPrivateDnsRoute(
            [in] Boolean enabled);

        /**
        * Check if default route is set
        */
        IsDefaultRouteSet(
            [out] Boolean* isSet);

        /**
        * Set a flag indicating default route is set for the network
        */
        SetDefaultRoute(
            [in] Boolean enabled);

        /**
        * Check if tear down was requested
        */
        IsTeardownRequested(
            [out] Boolean* isRequested);

        /**
        * Indicate tear down requested from connectivity
        */
        SetTeardownRequested(
            [in] Boolean isRequested);

        /**
        * An external dependency has been met/unmet
        */
        SetDependencyMet(
            [in] Boolean met);
    };

    } // namespace Net
    } // namespace Droid
    } // namespace Elastos
}
