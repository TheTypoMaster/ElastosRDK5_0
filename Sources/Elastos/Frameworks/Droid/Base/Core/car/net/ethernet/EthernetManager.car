module
{
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Net.IDhcpInfo;
    interface Elastos.Droid.Net.Ethernet.IIEthernetManager;

    namespace Elastos {
    namespace Droid {
    namespace Net {
    namespace Ethernet {

        interface IEthernetManager
        {
            const String TAG = "EthernetManager";
            const Int32 ETHERNET_DEVICE_SCAN_RESULT_READY = 0;
            const String ETHERNET_STATE_CHANGED_ACTION =
                                    "android.net.ethernet.ETHERNET_STATE_CHANGED";
            const String NETWORK_STATE_CHANGED_ACTION =
                                    "android.net.ethernet.STATE_CHANGE";
            /**@hide*/
            const String ETHERNET_LINKED_ACTION =
                                    "android.net.ethernet.LINKED_ACTION";
            /**@hide*/
            const String ETHERNET_DISLINKED_ACTION =
                                    "android.net.ethernet.DISLINKED_ACTION";

            //add by celema ///////////////////////////////////////////////////
            /**@hide*/
            const String PPPOE_STATE_CHANGED_ACTION =
                                    "android.net.pppoe.STATE_CHANGE";
            /**@hide*/
            const String EXTRA_PPPOE_STATE = "pppoe_state";
            /**@hide*/
            const Int32 PPPOE_STATE_ENABLED = 1;
            /**@hide*/
            const Int32 PPPOE_STATE_DISABLED = 0;
            ////////////////////////////////////////////////////////////////////////

            const String EXTRA_ETHERNET_INFO      = "ethernetInfo";
            const String EXTRA_NETWORK_INFO       = "networkInfo";
            const String EXTRA_ETHERNET_STATE     = "ethernet_state";
            const String EXTRA_LINK_PROPERTIES    = "linkProperties";

            const Int32 ETHERNET_STATE_DISABLED = 0;
            const Int32 ETHERNET_STATE_ENABLED = 1;

            const Int32 EVENT_DHCP_START                        = 0;
            const Int32 EVENT_CONFIGURATION_SUCCEEDED           = 1;
            const Int32 EVENT_CONFIGURATION_FAILED              = 2;
            const Int32 EVENT_NEWDEV                            = 3;
            const Int32 EVENT_DISCONNECTED                      = 5;
            //const Int32 EVENT_PHYCONNECTED                    = 6;
            //const Int32 EVENT_DISPHYCONNECTED                 = 7;
            const Int32 EVENT_DEVREM                            = 8;
            const Int32 NOTIFY_ID                               = 9;

            IsConfigured(
                [out] Boolean* result);

            GetSavedConfig(
                [out] IEthernetDevInfo** info);

            UpdateDevInfo(
                [in] IEthernetDevInfo* info);

            GetDeviceNameList(
                [out] IObjectContainer** list);

            SetEnabled(
                [in] Boolean enabled);

            GetState(
                [out] Int32* val);

            GetTotalInterface(
                [out] Int32* val);

            IsOn(
                [out] Boolean* result);

            IsDhcp(
                [out] Boolean* result);

            RemoveInterfaceFormService(
                [in] String name);

            AddInterfaceToService(
                [in] String name,
                [out] Boolean* res);

            CheckLink(
                [in] String ifname,
                [out] Int32* res);

            SetDefaultConf();
        }
    }
    }
    }
    }
}