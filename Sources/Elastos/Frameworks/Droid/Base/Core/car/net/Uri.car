
module
{
    using interface Elastos.IO.IFile;

    interface Elastos.Droid.Net.IUriBuilder;

    namespace Elastos {
    namespace Droid {
    namespace Net {

    /**
     * @Involve
     * interface IComparable
     */
    interface IUri {// {
        /**
         * Returns true if this URI is hierarchical like "http://google.com".
         * Absolute URIs are hierarchical if the scheme-specific part starts with
         * a '/'. Relative URIs are always hierarchical.
         */
        IsHierarchical(
            [out] Boolean* isHierarchical);

        /**
         * Returns true if this URI is opaque like "mailto:nobody@google.com". The
         * scheme-specific part of an opaque URI cannot start with a '/'.
         */
        IsOpaque(
            [out] Boolean* isOpaque);

        /**
         * Returns true if this URI is relative, i.e. if it doesn't contain an
         * explicit scheme.
         *
         * @return true if this URI is relative, false if it's absolute
         */
        IsRelative(
            [out] Boolean* isRelative);

        /**
         * Returns true if this URI is absolute, i.e. if it contains an
         * explicit scheme.
         *
         * @return true if this URI is absolute, false if it's relative
         */
        IsAbsolute(
            [out] Boolean* isAbsolute);

        /**
         * Gets the scheme of this URI. Example: "http"
         *
         * @return the scheme or null if this is a relative URI
         */
        GetScheme(
            [out] String* scheme);

        /**
         * Gets the scheme-specific part of this URI, i.e. everything between the
         * scheme separator ':' and the fragment separator '#'. If this is a
         * relative URI, this method returns the entire URI. Decodes escaped octets.
         *
         * <p>Example: "//www.google.com/search?q=android"
         *
         * @return the decoded scheme-specific-part
         */
        GetSchemeSpecificPart(
            [out] String* ssp);

        /**
         * Gets the scheme-specific part of this URI, i.e. everything between the
         * scheme separator ':' and the fragment separator '#'. If this is a
         * relative URI, this method returns the entire URI. Leaves escaped octets
         * intact.
         *
         * <p>Example: "//www.google.com/search?q=android"
         *
         * @return the decoded scheme-specific-part
         */
        GetEncodedSchemeSpecificPart(
            [out] String* essp);

        /**
         * Gets the decoded authority part of this URI. For
         * server addresses, the authority is structured as follows:
         * {@code [ userinfo '@' ] host [ ':' port ]}
         *
         * <p>Examples: "google.com", "bob@google.com:80"
         *
         * @return the authority for this URI or null if not present
         */
        GetAuthority(
            [out] String* authority);

        /**
         * Gets the encoded authority part of this URI. For
         * server addresses, the authority is structured as follows:
         * {@code [ userinfo '@' ] host [ ':' port ]}
         *
         * <p>Examples: "google.com", "bob@google.com:80"
         *
         * @return the authority for this URI or null if not present
         */
        GetEncodedAuthority(
            [out] String* authority);

        /**
         * Gets the decoded user information from the authority.
         * For example, if the authority is "nobody@google.com", this method will
         * return "nobody".
         *
         * @return the user info for this URI or null if not present
         */
        GetUserInfo(
            [out] String* userInfo);

        /**
         * Gets the encoded user information from the authority.
         * For example, if the authority is "nobody@google.com", this method will
         * return "nobody".
         *
         * @return the user info for this URI or null if not present
         */
        GetEncodedUserInfo(
            [out] String* userInfo);

        /**
         * Gets the encoded host from the authority for this URI. For example,
         * if the authority is "bob@google.com", this method will return
         * "google.com".
         *
         * @return the host for this URI or null if not present
         */
        GetHost(
            [out] String* host);

        /**
         * Gets the port from the authority for this URI. For example,
         * if the authority is "google.com:80", this method will return 80.
         *
         * @return the port for this URI or -1 if invalid or not present
         */
        GetPort(
            [out] Int32* port);

        /**
         * Gets the decoded path.
         *
         * @return the decoded path, or null if this is not a hierarchical URI
         * (like "mailto:nobody@google.com") or the URI is invalid
         */
        GetPath(
            [out] String* path);

        /**
         * Gets the encoded path.
         *
         * @return the encoded path, or null if this is not a hierarchical URI
         * (like "mailto:nobody@google.com") or the URI is invalid
         */
        GetEncodedPath(
            [out] String* path);

        /**
         * Gets the decoded query component from this URI. The query comes after
         * the query separator ('?') and before the fragment separator ('#'). This
         * method would return "q=android" for
         * "http://www.google.com/search?q=android".
         *
         * @return the decoded query or null if there isn't one
         */
        GetQuery(
            [out] String* query);

        /**
         * Gets the encoded query component from this URI. The query comes after
         * the query separator ('?') and before the fragment separator ('#'). This
         * method would return "q=android" for
         * "http://www.google.com/search?q=android".
         *
         * @return the encoded query or null if there isn't one
         */
        GetEncodedQuery(
            [out] String* query);

        /**
         * Gets the decoded fragment part of this URI, everything after the '#'.
         *
         * @return the decoded fragment or null if there isn't one
         */
        GetFragment(
            [out] String* fragment);

        /**
         * Gets the encoded fragment part of this URI, everything after the '#'.
         *
         * @return the encoded fragment or null if there isn't one
         */
        GetEncodedFragment(
            [out] String* fragment);

        /**
         * Gets the decoded path segments.
         *
         * @return decoded path segments, each without a leading or trailing '/'
         */
        GetPathSegments(
            [out, callee] ArrayOf<String>* pathSegments);

        /**
         * Gets the decoded last segment in the path.
         *
         * @return the decoded last segment or null if the path is empty
         */
        GetLastPathSegment(
            [out] String* pathSegment);

        Equals(
            [in] IInterface* other,
            [out] Boolean* isEqual);

        Equals(
            [in] IUri* other,
            [out] Boolean* isEqual);

        /**
         * Hashes the encoded string represention of this Uri consistently with
         * {@link #equals(Object)}.
         */
        GetHashCode(
            [out] Int32* hashCode);

        /**
         * Compares the string representation of this Uri with that of
         * another.
         */
        CompareTo(
            [in] IUri* other,
            [out] Int32* result);

        /**
         * Returns the encoded string representation of this URI.
         * Example: "http://google.com/"
         */
        ToString(
            [out] String* result);

        /**
         * Return a string representation of the URI that is safe to print
         * to logs and other places where PII should be avoided.
         * @hide
         */
        ToSafeString(
            [out] String* result);

        /**
         * Constructs a new builder, copying the attributes from this Uri.
         */
        BuildUpon(
            [out] IUriBuilder** result);

        /**
         * Returns a set of the unique names of all query parameters. Iterating
         * over the set will return the names in order of their first occurrence.
         *
         * @throws UnsupportedOperationException if this isn't a hierarchical URI
         *
         * @return a set of decoded names
         */
        GetQueryParameterNames(
            [out, callee] ArrayOf<String>* aSet);

        /**
         * Searches the query string for parameter values with the given key.
         *
         * @param key which will be encoded
         *
         * @throws UnsupportedOperationException if this isn't a hierarchical URI
         * @throws NullPointerException if key is null
         * @return a list of decoded values
         */
        GetQueryParameters(
            [in] String key,
            [out, callee] ArrayOf<String>* aList);

        /**
         * Searches the query string for the first value with the given key.
         *
         * <p><strong>Warning:</strong> Prior to Ice Cream Sandwich, this decoded
         * the '+' character as '+' rather than ' '.
         *
         * @param key which will be encoded
         * @throws UnsupportedOperationException if this isn't a hierarchical URI
         * @throws NullPointerException if key is null
         * @return the decoded value or null if no parameter is found
         */
        GetQueryParameter(
            [in] String key,
            [out] String* param);

        /**
         * Searches the query string for the first value with the given key and interprets it
         * as a boolean value. "false" and "0" are interpreted as <code>false</code>, everything
         * else is interpreted as <code>true</code>.
         *
         * @param key which will be decoded
         * @param defaultValue the default value to return if there is no query parameter for key
         * @return the boolean interpretation of the query parameter key
         */
         GetBooleanQueryParameter(
            [in] String key,
            [in] Boolean defaultValue,
            [out] Boolean* result);

        /**
         * Return an equivalent URI with a lowercase scheme component.
         * This aligns the Uri with Android best practices for
         * intent filtering.
         *
         * <p>For example, "HTTP://www.android.com" becomes
         * "http://www.android.com"
         *
         * <p>All URIs received from outside Android (such as user input,
         * or external sources like Bluetooth, NFC, or the Internet) should
         * be normalized before they are used to create an Intent.
         *
         * <p class="note">This method does <em>not</em> validate bad URI's,
         * or 'fix' poorly formatted URI's - so do not use it for input validation.
         * A Uri will always be returned, even if the Uri is badly formatted to
         * begin with and a scheme component cannot be found.
         *
         * @return normalized Uri (never null)
         * @see {@link android.content.Intent#setData}
         * @see {@link #setNormalizedData}
         */
        NormalizeScheme(
            [out] IUri** uri);

        /**
         * If this {@link Uri} is {@code file://}, then resolve and return its
         * canonical path. Also fixes legacy emulated storage paths so they are
         * usable across user boundaries. Should always be called from the app
         * process before sending elsewhere.
         *
         * @hide
         */
        GetCanonicalUri(
            [out] IUri** uri);
    }

    interface IUriHelper {
        GetEMPTY(
            [out] IUri** uri);

        /**
         * Creates a Uri which parses the given encoded URI string.
         *
         * @param uriString an RFC 2396-compliant, encoded URI
         * @throws NullPointerException if uriString is null
         * @return Uri for this given uri string
         */
        Parse(
            [in] String str,
            [out] IUri** uri);

        /**
         * Creates a Uri from a file. The URI has the form
         * "file://<absolute path>". Encodes path characters with the exception of
         * '/'.
         *
         * <p>Example: "file:///tmp/android.txt"
         *
         * @throws NullPointerException if file is null
         * @return a Uri for the given file
         */
        FromFile(
            [in] IFile* file,
            [out] IUri** uri);

        /**
         * Creates an opaque Uri from the given components. Encodes the ssp
         * which means this method cannot be used to create hierarchical URIs.
         *
         * @param scheme of the URI
         * @param ssp scheme-specific-part, everything between the
         *  scheme separator (':') and the fragment separator ('#'), which will
         *  get encoded
         * @param fragment fragment, everything after the '#', null if undefined,
         *  will get encoded
         *
         * @throws NullPointerException if scheme or ssp is null
         * @return Uri composed of the given scheme, ssp, and fragment
         *
         * @see Builder if you don't want the ssp and fragment to be encoded
         */
        FromParts(
            [in] String scheme,
            [in] String ssp,
            [in] String fragment,
            [out] IUri** uri);

        /**
         * Writes a Uri to a Parcel.
         *
         * @param out parcel to write to
         * @param uri to write, can be null
         */
        WriteToParcel(
            [in] IParcel* p,
            [in] IUri* uri);

        /**
         * Encodes characters in the given string as '%'-escaped octets
         * using the UTF-8 scheme. Leaves letters ("A-Z", "a-z"), numbers
         * ("0-9"), and unreserved characters ("_-!.~'()*") intact. Encodes
         * all other characters.
         *
         * @param s string to encode
         * @return an encoded version of s suitable for use as a URI component,
         *  or null if s is null
         */
        Encode(
            [in] String s,
            [out] String* encoded);

        /**
         * Encodes characters in the given string as '%'-escaped octets
         * using the UTF-8 scheme. Leaves letters ("A-Z", "a-z"), numbers
         * ("0-9"), and unreserved characters ("_-!.~'()*") intact. Encodes
         * all other characters with the exception of those specified in the
         * allow argument.
         *
         * @param s string to encode
         * @param allow set of additional characters to allow in the encoded form,
         *  null if no characters should be skipped
         * @return an encoded version of s suitable for use as a URI component,
         *  or null if s is null
         */
        Encode(
            [in] String s,
            [in] String allow,
            [out] String* result);

        /**
         * Decodes '%'-escaped octets in the given string using the UTF-8 scheme.
         * Replaces invalid octets with the unicode replacement character
         * ("\\uFFFD").
         *
         * @param s encoded string to decode
         * @return the given string with escaped octets decoded, or null if
         *  s is null
         */
        Decode(
            [in] String s,
            [out] String* result);

        /**
         * Creates a new Uri by appending an already-encoded path segment to a
         * base Uri.
         *
         * @param baseUri Uri to append path segment to
         * @param pathSegment encoded path segment to append
         * @return a new Uri based on baseUri with the given segment appended to
         *  the path
         * @throws NullPointerException if baseUri is null
         */
        WithAppendedPath(
            [in] IUri* baseUri,
            [in] String pathSegment,
            [out] IUri** result);
    }

    interface IUriBuilder {

        /**
         * Sets the scheme.
         *
         * @param scheme name or {@code null} if this is a relative Uri
         */
        Scheme(
            [in] String scheme);

        /**
         * Encodes and sets the given opaque scheme-specific-part.
         *
         * @param opaquePart decoded opaque part
         */
        OpaquePart(
            [in] String opaquePart);

        OpaquePart(
            [in] Handle32 opaquePart);

        /**
         * Sets the previously encoded opaque scheme-specific-part.
         *
         * @param opaquePart encoded opaque part
         */
        EncodedOpaquePart(
            [in] String opaquePart);

        /**
         * Encodes and sets the authority.
         */
        Authority(
            [in] String authority);

        Authority(
            [in] Handle32 authority);

        /**
         * Sets the previously encoded authority.
         */
        EncodedAuthority(
            [in] String authority);

        /**
         * Sets the path. Leaves '/' characters intact but encodes others as
         * necessary.
         *
         * <p>If the path is not null and doesn't start with a '/', and if
         * you specify a scheme and/or authority, the builder will prepend the
         * given path with a '/'.
         */
        Path(
            [in] String path);

        Path(
            [in] Handle32 path);

        /**
         * Sets the previously encoded path.
         *
         * <p>If the path is not null and doesn't start with a '/', and if
         * you specify a scheme and/or authority, the builder will prepend the
         * given path with a '/'.
         */
        EncodedPath(
            [in] String path);

        /**
         * Encodes the given segment and appends it to the path.
         */
        AppendPath(
            [in] String newSegment);

        /**
         * Appends the given segment to the path.
         */
        AppendEncodedPath(
            [in] String newSegment);

        /**
         * Encodes and sets the query.
         */
        Query(
            [in] String query);

        Query(
            [in] Handle32 query);

        /**
         * Sets the previously encoded query.
         */
        EncodedQuery(
            [in] String query);

        /**
         * Encodes and sets the fragment.
         */
        Fragment(
            [in] String fragment);

        Fragment(
            [in] Handle32 fragment);

        /**
         * Sets the previously encoded fragment.
         */
        EncodedFragment(
            [in] String fragment);

        /**
         * Encodes the key and value and then appends the parameter to the
         * query string.
         *
         * @param key which will be encoded
         * @param value which will be encoded
         */
        AppendQueryParameter(
            [in] String key,
            [in] String value);

        /**
         * Clears the the previously set query.
         */
        ClearQuery();

        /**
         * Constructs a Uri with the current attributes.
         *
         * @throws UnsupportedOperationException if the URI is opaque and the
         *  scheme is null
         */
        Build(
            [out] IUri** uri);

        ToString(
            [out] String* info);
    }

    } // namespace Net
    } // namepsace Droid
    } // namespace Elastos
}
