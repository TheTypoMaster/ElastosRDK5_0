
module
{
    using interface Elastos.IO.IDataOutputStream;
    using interface Elastos.Core.IRandom;
    using interface Elastos.Droid.Internal.Utility.IIndentingPrintWriter;

    interface Elastos.Droid.Os.IParcel;
    interface Elastos.Droid.Net.INetworkStatsEntry;
    interface Elastos.Droid.Net.INetworkStatsHistoryEntry;

    namespace Elastos {
    namespace Droid {
    namespace Net {

    interface INetworkStatsHistoryEntry {
        const Int64 UNKNOWN = -1;

        GetBucketDuration(
            [out] Int64* bucketDuration);

        SetBucketDuration(
            [in] Int64 bucketDuration);

        GetBucketStart(
            [out] Int64* bucketStart);

        SetBucketStart(
            [in] Int64 bucketStart);

        GetActiveTime(
            [out] Int64* activeTime);

        SetActiveTime(
            [in] Int64 activeTime);

        GetRxBytes(
            [out] Int64* rxBytes);

        SetRxBytes(
            [in] Int64 rxBytes);

        GetRxPackets(
            [out] Int64* rxPackets);

        SetRxPackets(
            [in] Int64 rxPackets);

        GetTxBytes(
            [out] Int64* txBytes);

        SetTxBytes(
            [in] Int64 txBytes);

        GetTxPackets(
            [out] Int64* txPackets);

        SetTxPackets(
            [in] Int64 txPackets);

        GetOperations(
            [out] Int64* operations);

        SetOperations(
            [in] Int64 operations);
    }

    interface INetworkStatsHistory {

        const Int32 FIELD_ACTIVE_TIME = 0x01;
        const Int32 FIELD_RX_BYTES = 0x02;
        const Int32 FIELD_RX_PACKETS = 0x04;
        const Int32 FIELD_TX_BYTES = 0x08;
        const Int32 FIELD_TX_PACKETS = 0x10;
        const Int32 FIELD_OPERATIONS = 0x20;
        const Int32 FIELD_ALL = 0xFFFFFFFF;

        WriteToStream(
            [in] IDataOutputStream* data);

        GetSize(
            [out] Int32* result);

        GetBucketDuration(
            [out] Int64* result);

        GetStart(
            [out] Int64* result);

        GetEnd(
            [out] Int64* result);

        GetTotalBytes(
            [out] Int64* result);

        GetIndexBefore(
            [in] Int64 time,
            [out] Int32* result);

        GetIndexAfter(
            [in] Int64 time,
            [out] Int32* result);

        GetValues(
            [in] Int32 i,
            [in] INetworkStatsHistoryEntry* recycle,
            [out] INetworkStatsHistoryEntry** result);

        RecordData(
            [in] Int64 start,
            [in] Int64 end,
            [in] Int64 rxBytes,
            [in] Int64 txBytes);

        RecordDataEx(
            [in] Int64 start,
            [in] Int64 end,
            [in] INetworkStatsEntry* entry);

        RecordEntireHistory(
            [in] INetworkStatsHistory* input);

        RecordHistory(
            [in] INetworkStatsHistory* input,
            [in] Int64 start,
            [in] Int64 end);

        RemoveBucketsBefore(
            [in] Int64 cutoff);

        GetValuesEx(
            [in] Int64 start,
            [in] Int64 end,
            [in] INetworkStatsHistoryEntry* recycle,
            [out] INetworkStatsHistoryEntry** result);

        GetValuesEx2(
            [in] Int64 start,
            [in] Int64 end,
            [in] Int64 now,
            [in] INetworkStatsHistoryEntry* recycle,
            [out] INetworkStatsHistoryEntry** result);

        GenerateRandom(
            [in] Int64 start,
            [in] Int64 end,
            [in] Int64 bytes);

        GenerateRandomEx(
            [in] Int64 start,
            [in] Int64 end,
            [in] Int64 rxBytes,
            [in] Int64 rxPackets,
            [in] Int64 txBytes,
            [in] Int64 txPackets,
            [in] Int64 operations,
            [in] IRandom* r);

        EstimateResizeBuckets(
            [in] Int64 newBucketDuration,
            [out] Int32* result);

        Dump(
            [in] IIndentingPrintWriter* pw,
            [in] Boolean fullHistory);

        ToString(
            [out] String* result);

        GetBucketCount(
            [out] Int32* bucketCount);

        GetBucketStart(
            [out, callee] ArrayOf<Int64>* bucketStart);

        GetRxBytes(
            [out, callee] ArrayOf<Int64>* rxBytes);

        GetRxPackets(
            [out, callee] ArrayOf<Int64>* rxPackets);

        GetTxBytes(
            [out, callee] ArrayOf<Int64>* txBytes);

        GetTxPackets(
            [out, callee] ArrayOf<Int64>* txPackets);

        GetOperations(
            [out, callee] ArrayOf<Int64>* operations);
    }

    interface INetworkStatsHistoryHelper {

        RandomLong(
            [in] IRandom* r,
            [in] Int64 start,
            [in] Int64 end,
            [out] Int64* result);
    }
    } // namespace Net
    } // namepsace Droid
    } // namespace Elastos
}
