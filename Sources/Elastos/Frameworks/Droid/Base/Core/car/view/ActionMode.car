
module
{
    interface Elastos.Core.ICharSequence;
    interface Elastos.Droid.View.IMenu;
    interface Elastos.Droid.View.IMenuItem;

    namespace Elastos {
    namespace Droid {
    namespace View {

        interface IActionMode {
            /**
             * Set a tag object associated with this ActionMode.
             *
             * <p>Like the tag available to views, this allows applications to associate arbitrary
             * data with an ActionMode for later reference.
             *
             * @param tag Tag to associate with this ActionMode
             *
             * @see #getTag()
             */
            SetTag(
                [in] IInterface* tag);

            /**
             * Retrieve the tag object associated with this ActionMode.
             *
             * <p>Like the tag available to views, this allows applications to associate arbitrary
             * data with an ActionMode for later reference.
             *
             * @return Tag associated with this ActionMode
             *
             * @see #setTag(Object)
             */
            GetTag(
                [out] IInterface** tag);

            /**
             * Set the title of the action mode. This method will have no visible effect if
             * a custom view has been set.
             *
             * @param title Title string to set
             *
             * @see #setTitle(Int32)
             * @see #setCustomView(View)
             */
            SetTitle(
                [in] ICharSequence* title);

            /**
             * Set the title of the action mode. This method will have no visible effect if
             * a custom view has been set.
             *
             * @param resId Resource ID of a string to set as the title
             *
             * @see #setTitle(CharSequence)
             * @see #setCustomView(View)
             */
            SetTitle(
                [in] Int32 resId);

            /**
             * Set the subtitle of the action mode. This method will have no visible effect if
             * a custom view has been set.
             *
             * @param subtitle Subtitle string to set
             *
             * @see #setSubtitle(Int32)
             * @see #setCustomView(View)
             */
            SetSubtitle(
                [in] ICharSequence* subtitle);

            /**
             * Set the subtitle of the action mode. This method will have no visible effect if
             * a custom view has been set.
             *
             * @param resId Resource ID of a string to set as the subtitle
             *
             * @see #setSubtitle(CharSequence)
             * @see #setCustomView(View)
             */
            SetSubtitle(
                [in] Int32 resId);

            /**
             * Set whether or not the title/subtitle display for this action mode
             * is optional.
             *
             * <p>In many cases the supplied title for an action mode is merely
             * meant to add context and is not strictly required for the action
             * mode to be useful. If the title is optional, the system may choose
             * to hide the title entirely rather than truncate it due to a lack
             * of available space.</p>
             *
             * <p>Note that this is merely a hint; the underlying implementation
             * may choose to ignore this setting under some circumstances.</p>
             *
             * @param titleOptional true if the title only presents optional information.
             */
            SetTitleOptionalHint(
                [in] Boolean titleOptional);

            /**
             * @return true if this action mode has been given a hint to consider the
             *         title/subtitle display to be optional.
             *
             * @see #setTitleOptionalHint(Boolean)
             * @see #isTitleOptional()
             */
            GetTitleOptionalHint(
                [out] Boolean* titleOptionalHint);

            /**
             * @return true if this action mode considers the title and subtitle fields
             *         as optional. Optional titles may not be displayed to the user.
             */
            IsTitleOptional(
                [out] Boolean* isTitleOptional);

            /**
             * Set a custom view for this action mode. The custom view will take the place of
             * the title and subtitle. Useful for things like search boxes.
             *
             * @param view Custom view to use in place of the title/subtitle.
             *
             * @see #setTitle(CharSequence)
             * @see #setSubtitle(CharSequence)
             */
            SetCustomView(
                [in] IView* view);

            /**
             * Invalidate the action mode and refresh menu content. The mode's
             * {@link ActionMode.Callback} will have its
             * {@link Callback#onPrepareActionMode(ActionMode, Menu)} method called.
             * If it returns true the menu will be scanned for updated content and any relevant changes
             * will be reflected to the user.
             */
            Invalidate();           /**
             * and close this action mode. The action mode's {@link ActionMode.Callback} will
             * have its {@link Callback#onDestroyActionMode(ActionMode)} method called.
             */
            Finish();           /**
             * the menu of actions that this action mode presents.
             * @return The action mode's menu.
             */
            GetMenu(
                [out] IMenu** menu);

            /**
             * Returns the current title of this action mode.
             * @return Title text
             */
            GetTitle(
                [out] ICharSequence** title);

            /**
             * Returns the current subtitle of this action mode.
             * @return Subtitle text
             */
            GetSubtitle(
                [out] ICharSequence** subtitle);

            /**
             * Returns the current custom view for this action mode.
             * @return The current custom view
             */
            GetCustomView(
                [out] IView** view);

            /**
             * Returns a {@link MenuInflater} with the ActionMode's context.
             */
            GetMenuInflater(
                [out] IMenuInflater** menuInflater);

            /**
             * Returns whether the UI presenting this action mode can take focus or not.
             * This is used by internal components within the framework that would otherwise
             * present an action mode UI that requires focus, such as an EditText as a custom view.
             *
             * @return true if the UI used to show this action mode can take focus
             * @hide Internal use only
             */
            IsUiFocusable(
                [out] Boolean* isUiFocusable);
        }

        /**
         * Callback interface for action modes. Supplied to
         * {@link View#startActionMode(Callback)}, a Callback
         * configures and handles events raised by a user's interaction with an action mode.
         *
         * <p>An action mode's lifecycle is as follows:
         * <ul>
         * <li>{@link Callback#onCreateActionMode(ActionMode, Menu)} once on initial
         * creation</li>
         * <li>{@link Callback#onPrepareActionMode(ActionMode, Menu)} after creation
         * and any time the {@link ActionMode} is invalidated</li>
         * <li>{@link Callback#onActionItemClicked(ActionMode, MenuItem)} any time a
         * contextual action button is clicked</li>
         * <li>{@link Callback#onDestroyActionMode(ActionMode)} when the action mode
         * is closed</li>
         * </ul>
         */
        interface IActionModeCallback {
            /**
             * Called when action mode is first created. The menu supplied will be used to
             * generate action buttons for the action mode.
             *
             * @param mode ActionMode being created
             * @param menu Menu used to populate action buttons
             * @return true if the action mode should be created, false if entering this
             *              mode should be aborted.
             */
            OnCreateActionMode(
                [in] IActionMode* mode,
                [in] IMenu* menu,
                [out] Boolean* res);

            /**
             * Called to refresh an action mode's action menu whenever it is invalidated.
             *
             * @param mode ActionMode being prepared
             * @param menu Menu used to populate action buttons
             * @return true if the menu or action mode was updated, false otherwise.
             */
            OnPrepareActionMode(
                [in] IActionMode* mode,
                [in] IMenu* menu,
                [out] Boolean* res);

            /**
             * Called to report a user click on an action button.
             *
             * @param mode The current ActionMode
             * @param item The item that was clicked
             * @return true if this callback handled the event, false if the standard MenuItem
             *          invocation should continue.
             */
            OnActionItemClicked(
                [in] IActionMode* mode,
                [in] IMenuItem* item,
                [out] Boolean* res);

            /**
             * Called when an action mode is about to be exited and destroyed.
             *
             * @param mode The current ActionMode being destroyed
             */
            OnDestroyActionMode(
                [in] IActionMode* mode);
        }
    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
