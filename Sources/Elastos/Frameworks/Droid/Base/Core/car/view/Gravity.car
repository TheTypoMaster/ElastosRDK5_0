
module
{
    interface Elastos.Droid.Graphics.IRect;

    namespace Elastos {
    namespace Droid {
    namespace View {

    interface IGravity {
        /** Constant indicating that no gravity has been set **/
        const Int32 NO_GRAVITY = 0x0000;

        /** Raw bit indicating the gravity for an axis has been specified. */
        const Int32 AXIS_SPECIFIED = 0x0001;

        /** Raw bit controlling how the left/top edge is placed. */
        const Int32 AXIS_PULL_BEFORE = 0x0002;
        /** Raw bit controlling how the right/bottom edge is placed. */
        const Int32 AXIS_PULL_AFTER = 0x0004;
        /** Raw bit controlling whether the right/bottom edge is clipped to its
         * container, based on the gravity direction being applied. */
        const Int32 AXIS_CLIP = 0x0008;

        /** Bits defining the horizontal axis. */
        const Int32 AXIS_X_SHIFT = 0;
        /** Bits defining the vertical axis. */
        const Int32 AXIS_Y_SHIFT = 4;

        /** Push object to the top of its container, not changing its size. */
        const Int32 TOP = 0x0003<<AXIS_Y_SHIFT;//(AXIS_PULL_BEFORE|AXIS_SPECIFIED)<<AXIS_Y_SHIFT;
        /** Push object to the bottom of its container, not changing its size. */
        const Int32 BOTTOM = 0x0005<<AXIS_Y_SHIFT;//(AXIS_PULL_AFTER|AXIS_SPECIFIED)<<AXIS_Y_SHIFT;
        /** Push object to the left of its container, not changing its size. */
        const Int32 LEFT = 0x0003<<AXIS_X_SHIFT;//(AXIS_PULL_BEFORE|AXIS_SPECIFIED)<<AXIS_X_SHIFT;
        /** Push object to the right of its container, not changing its size. */
        const Int32 RIGHT = 0x0005<<AXIS_X_SHIFT;//(AXIS_PULL_AFTER|AXIS_SPECIFIED)<<AXIS_X_SHIFT;

        /** Place object in the vertical center of its container, not changing its
         *  size. */
        const Int32 CENTER_VERTICAL = AXIS_SPECIFIED<<AXIS_Y_SHIFT;
        /** Grow the vertical size of the object if needed so it completely fills
         *  its container. */
        const Int32 FILL_VERTICAL = TOP|BOTTOM;

        /** Place object in the horizontal center of its container, not changing its
         *  size. */
        const Int32 CENTER_HORIZONTAL = AXIS_SPECIFIED<<AXIS_X_SHIFT;
        /** Grow the horizontal size of the object if needed so it completely fills
         *  its container. */
        const Int32 FILL_HORIZONTAL = LEFT|RIGHT;

        /** Place the object in the center of its container in both the vertical
         *  and horizontal axis, not changing its size. */
        const Int32 CENTER = CENTER_VERTICAL|CENTER_HORIZONTAL;

        /** Grow the horizontal and vertical size of the object if needed so it
         *  completely fills its container. */
        const Int32 FILL = FILL_VERTICAL|FILL_HORIZONTAL;

        /** Flag to clip the edges of the object to its container along the
         *  vertical axis. */
        const Int32 CLIP_VERTICAL = AXIS_CLIP<<AXIS_Y_SHIFT;

        /** Flag to clip the edges of the object to its container along the
         *  horizontal axis. */
        const Int32 CLIP_HORIZONTAL = AXIS_CLIP<<AXIS_X_SHIFT;

        /** Raw bit controlling whether the layout direction is relative or not (START/END instead of
         * absolute LEFT/RIGHT).
         */
        const Int32 RELATIVE_LAYOUT_DIRECTION = 0x00800000;

        /**
         * Binary mask to get the absolute horizontal gravity of a gravity.
         */
        const Int32 HORIZONTAL_GRAVITY_MASK = 0x0007 << AXIS_X_SHIFT;/*(AXIS_SPECIFIED |
                AXIS_PULL_BEFORE | AXIS_PULL_AFTER) << AXIS_X_SHIFT;*/
        /**
         * Binary mask to get the vertical gravity of a gravity.
         */
        const Int32 VERTICAL_GRAVITY_MASK = 0x0007 << AXIS_Y_SHIFT;/*(AXIS_SPECIFIED |
                AXIS_PULL_BEFORE | AXIS_PULL_AFTER) << AXIS_Y_SHIFT;*/

        /** Special constant to enable clipping to an overall display along the
         *  vertical dimension.  This is not applied by default by
         *  {@link #apply(int, int, int, Rect, int, int, Rect)}; you must do so
         *  yourself by calling {@link #applyDisplay}.
         */
        const Int32 DISPLAY_CLIP_VERTICAL = 0x10000000;

        /** Special constant to enable clipping to an overall display along the
         *  horizontal dimension.  This is not applied by default by
         *  {@link #apply(int, int, int, Rect, int, int, Rect)}; you must do so
         *  yourself by calling {@link #applyDisplay}.
         */
        const Int32 DISPLAY_CLIP_HORIZONTAL = 0x01000000;

        /** Push object to x-axis position at the start of its container, not changing its size. */
        const Int32 START = RELATIVE_LAYOUT_DIRECTION | LEFT;

        /** Push object to x-axis position at the end of its container, not changing its size. */
        const Int32 END = RELATIVE_LAYOUT_DIRECTION | RIGHT;

        /**
         * Binary mask for the horizontal gravity and script specific direction bit.
         */
        const Int32 RELATIVE_HORIZONTAL_GRAVITY_MASK = START | END;

        /**
         * Apply a gravity constant to an object. This suppose that the layout direction is LTR.
         *
         * @param gravity The desired placement of the object, as defined by the
         *                constants in this class.
         * @param w The horizontal size of the object.
         * @param h The vertical size of the object.
         * @param container The frame of the containing space, in which the object
         *                  will be placed.  Should be large enough to contain the
         *                  width and height of the object.
         * @param outRect Receives the computed frame of the object in its
         *                container.
         */
        Apply(
            [in] Int32 gravity,
            [in] Int32 w,
            [in] Int32 h,
            [in] IRect* container,
            [in] IRect* outRect);

        /**
         * Apply a gravity constant to an object and take care if layout direction is RTL or not.
         *
         * @param gravity The desired placement of the object, as defined by the
         *                constants in this class.
         * @param w The horizontal size of the object.
         * @param h The vertical size of the object.
         * @param container The frame of the containing space, in which the object
         *                  will be placed.  Should be large enough to contain the
         *                  width and height of the object.
         * @param outRect Receives the computed frame of the object in its
         *                container.
         * @param layoutDirection The layout direction.
         *
         * @see View#LAYOUT_DIRECTION_LTR
         * @see View#LAYOUT_DIRECTION_RTL
         */
        Apply(
            [in] Int32 gravity,
            [in] Int32 w,
            [in] Int32 h,
            [in] IRect* container,
            [in] IRect* outRect,
            [in] Int32 layoutDirection);

        /**
         * Apply a gravity constant to an object.
         *
         * @param gravity The desired placement of the object, as defined by the
         *                constants in this class.
         * @param w The horizontal size of the object.
         * @param h The vertical size of the object.
         * @param container The frame of the containing space, in which the object
         *                  will be placed.  Should be large enough to contain the
         *                  width and height of the object.
         * @param xAdj Offset to apply to the X axis.  If gravity is LEFT this
         *             pushes it to the right; if gravity is RIGHT it pushes it to
         *             the left; if gravity is CENTER_HORIZONTAL it pushes it to the
         *             right or left; otherwise it is ignored.
         * @param yAdj Offset to apply to the Y axis.  If gravity is TOP this pushes
         *             it down; if gravity is BOTTOM it pushes it up; if gravity is
         *             CENTER_VERTICAL it pushes it down or up; otherwise it is
         *             ignored.
         * @param outRect Receives the computed frame of the object in its
         *                container.
         */
        Apply(
            [in] Int32 gravity,
            [in] Int32 w,
            [in] Int32 h,
            [in] IRect* container,
            [in] Int32 xAdj,
            [in] Int32 yAdj,
            [in] IRect* outRect);

        /**
         * Apply a gravity constant to an object.
         *
         * @param gravity The desired placement of the object, as defined by the
         *                constants in this class.
         * @param w The horizontal size of the object.
         * @param h The vertical size of the object.
         * @param container The frame of the containing space, in which the object
         *                  will be placed.  Should be large enough to contain the
         *                  width and height of the object.
         * @param xAdj Offset to apply to the X axis.  If gravity is LEFT this
         *             pushes it to the right; if gravity is RIGHT it pushes it to
         *             the left; if gravity is CENTER_HORIZONTAL it pushes it to the
         *             right or left; otherwise it is ignored.
         * @param yAdj Offset to apply to the Y axis.  If gravity is TOP this pushes
         *             it down; if gravity is BOTTOM it pushes it up; if gravity is
         *             CENTER_VERTICAL it pushes it down or up; otherwise it is
         *             ignored.
         * @param outRect Receives the computed frame of the object in its
         *                container.
         * @param layoutDirection The layout direction.
         *
         * @see View#LAYOUT_DIRECTION_LTR
         * @see View#LAYOUT_DIRECTION_RTL
         */
        Apply(
            [in] Int32 gravity,
            [in] Int32 w,
            [in] Int32 h,
            [in] IRect* container,
            [in] Int32 xAdj,
            [in] Int32 yAdj,
            [in] IRect* outRect,
            [in] Int32 layoutDirection);

        /**
         * Apply additional gravity behavior based on the overall "display" that an
         * object exists in.  This can be used after
         * {@link #apply(Int32, Int32, Int32, Rect, Int32, Int32, Rect)} to place the object
         * within a visible display.  By default this moves or clips the object
         * to be visible in the display; the gravity flags
         * {@link #DISPLAY_CLIP_HORIZONTAL} and {@link #DISPLAY_CLIP_VERTICAL}
         * can be used to change this behavior.
         *
         * @param gravity Gravity constants to modify the placement within the
         * display.
         * @param display The rectangle of the display in which the object is
         * being placed.
         * @param inoutObj Supplies the current object position; returns with it
         * modified if needed to fit in the display.
         */
        ApplyDisplay(
            [in] Int32 gravity,
            [in] IRect* display,
            [in] IRect* inoutObj);

        /**
         * Apply additional gravity behavior based on the overall "display" that an
         * object exists in.  This can be used after
         * {@link #apply(Int32, Int32, Int32, Rect, Int32, Int32, Rect)} to place the object
         * within a visible display.  By default this moves or clips the object
         * to be visible in the display; the gravity flags
         * {@link #DISPLAY_CLIP_HORIZONTAL} and {@link #DISPLAY_CLIP_VERTICAL}
         * can be used to change this behavior.
         *
         * @param gravity Gravity constants to modify the placement within the
         * display.
         * @param display The rectangle of the display in which the object is
         * being placed.
         * @param inoutObj Supplies the current object position; returns with it
         * modified if needed to fit in the display.
         * @param layoutDirection The layout direction.
         *
         * @see View#LAYOUT_DIRECTION_LTR
         * @see View#LAYOUT_DIRECTION_RTL
         */
        ApplyDisplay(
            [in] Int32 gravity,
            [in] IRect* display,
            [in] IRect* inoutObj,
            [in] Int32 layoutDirection);

        /**
         * <p>Indicate whether the supplied gravity has a vertical pull.</p>
         *
         * @param gravity the gravity to check for vertical pull
         * @return true if the supplied gravity has a vertical pull
         */
        IsVertical(
            [in] Int32 gravity,
            [out] Boolean* isVertical);

        /**
         * <p>Indicate whether the supplied gravity has an horizontal pull.</p>
         *
         * @param gravity the gravity to check for horizontal pull
         * @return true if the supplied gravity has an horizontal pull
         */
        IsHorizontal(
            [in] Int32 gravity,
            [out] Boolean* isHorizontal);

        /**
         * <p>Convert script specific gravity to absolute horizontal value.</p>
         *
         * if horizontal direction is LTR, then START will set LEFT and END will set RIGHT.
         * if horizontal direction is RTL, then START will set RIGHT and END will set LEFT.
         *
         *
         * @param gravity The gravity to convert to absolute (horizontal) values.
         * @param layoutDirection The layout direction.
         * @return gravity converted to absolute (horizontal) values.
         */
        GetAbsoluteGravity(
            [in] Int32 gravity,
            [in] Int32 layoutDirection,
            [out] Int32* absoluteGravity);
    }

    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
