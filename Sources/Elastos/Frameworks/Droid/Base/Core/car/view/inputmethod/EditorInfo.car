
module
{
    using interface Elastos.Core.ICharSequence;
    interface Elastos.Droid.Os.IBundle;

    namespace Elastos {
    namespace Droid {
    namespace View {
    namespace InputMethod {

    /**
     * An EditorInfo describes several attributes of a text editing object
     * that an input method is communicating with (typically an EditText), most
     * importantly the type of text content it contains.
     */
    interface IEditorInfo {
         /**
         * Set of bits in {@link #imeOptions} that provide alternative actions
         * associated with the "enter" key.  This both helps the IME provide
         * better feedback about what the enter key will do, and also allows it
         * to provide alternative mechanisms for providing that command.
         */
        const Int32 IME_MASK_ACTION = 0x000000ff;

        /**
         * Bits of {@link #IME_MASK_ACTION}: no specific action has been
         * associated with this editor, let the editor come up with its own if
         * it can.
         */
        const Int32 IME_ACTION_UNSPECIFIED = 0x00000000;

        /**
         * Bits of {@link #IME_MASK_ACTION}: there is no available action.
         */
        const Int32 IME_ACTION_NONE = 0x00000001;

        /**
         * Bits of {@link #IME_MASK_ACTION}: the action key performs a "go"
         * operation to take the user to the target of the text they typed.
         * Typically used, for example, when entering a URL.
         */
        const Int32 IME_ACTION_GO = 0x00000002;

        /**
         * Bits of {@link #IME_MASK_ACTION}: the action key performs a "search"
         * operation, taking the user to the results of searching for the text
         * the have typed (in whatever context is appropriate).
         */
        const Int32 IME_ACTION_SEARCH = 0x00000003;

        /**
         * Bits of {@link #IME_MASK_ACTION}: the action key performs a "send"
         * operation, delivering the text to its target.  This is typically used
         * when composing a message.
         */
        const Int32 IME_ACTION_SEND = 0x00000004;

        /**
         * Bits of {@link #IME_MASK_ACTION}: the action key performs a "next"
         * operation, taking the user to the next field that will accept text.
         */
        const Int32 IME_ACTION_NEXT = 0x00000005;

        /**
         * Bits of {@link #IME_MASK_ACTION}: the action key performs a "done"
         * operation, typically meaning the IME will be closed.
         */
        const Int32 IME_ACTION_DONE = 0x00000006;

        /**
         * Bits of {@link #IME_MASK_ACTION}: Like {@link #IME_ACTION_NEXT}, but
         * for moving to the previous field.  This will normally not be used to
         * specify an action (since it precludes {@link #IME_ACTION_NEXT}, but
         * can be returned to the app if it sets {@link #IME_FLAG_NAVIGATE_PREVIOUS}.
         */
        const Int32 IME_ACTION_PREVIOUS = 0x00000007;

        /**
         * Flag of {@link #imeOptions}: used to specify that the IME does not need
         * to show its extracted text UI.  For input methods that may be fullscreen,
         * often when in landscape mode, this allows them to be smaller and let part
         * of the application be shown behind.  Though there will likely be limited
         * access to the application available from the user, it can make the
         * experience of a (mostly) fullscreen IME less jarring.  Note that when
         * this flag is specified the IME may <em>not</em> be set up to be able
         * to display text, so it should only be used in situations where this is
         * not needed.
         */
        const Int32 IME_FLAG_NO_EXTRACT_UI = 0x10000000;

        /**
         * Flag of {@link #imeOptions}: used in conjunction with
         * {@link #IME_MASK_ACTION}, this indicates that the action should not
         * be available as an accessory button when the input method is full-screen.
         * Note that by setting this flag, there can be cases where the action
         * is simply never available to the user.  Setting this generally means
         * that you think showing text being edited is more important than the
         * action you have supplied.
         */
        const Int32 IME_FLAG_NO_ACCESSORY_ACTION = 0x20000000;

        /**
         * Flag of {@link #imeOptions}: used in conjunction with
         * {@link #IME_MASK_ACTION}, this indicates that the action should not
         * be available in-line as a replacement for "enter" key.  Typically this is
         * because the action has such a significant impact or is not recoverable
         * enough that accidentally hitting it should be avoided, such as sending
         * a message.  Note that {@link android.widget.TextView} will automatically set this
         * flag for you on multi-line text views.
         */
        const Int32 IME_FLAG_NO_ENTER_ACTION = 0x40000000;

        /**
         * Flag of {@link #imeOptions}: used to request that the IME never go
         * into fullscreen mode.  Applications need to be aware that the flag is not
         * a guarantee, and not all IMEs will respect it.
         * @hide
         */
        const Int32 IME_FLAG_NO_FULLSCREEN = 0x80000000;

        /**
         * Flag of {@link #imeOptions}: like {@link #IME_FLAG_NAVIGATE_NEXT}, but
         * specifies there is something interesting that a backward navigation
         * can focus on.  If the user selects the IME's facility to backward
         * navigate, this will show up in the application as an {@link #IME_ACTION_PREVIOUS}
         * at {@link InputConnection#performEditorAction(int)
         * InputConnection.performEditorAction(int)}.
         */
        const Int32 IME_FLAG_NAVIGATE_PREVIOUS = 0x4000000;

        /**
         * Flag of {@link #imeOptions}: used to specify that there is something
         * interesting that a forward navigation can focus on. This is like using
         * {@link #IME_ACTION_NEXT}, except allows the IME to be multiline (with
         * an enter key) as well as provide forward navigation.  Note that some
         * IMEs may not be able to do this, especially when running on a small
         * screen where there is little space.  In that case it does not need to
         * present a UI for this option.  Like {@link #IME_ACTION_NEXT}, if the
         * user selects the IME's facility to forward navigate, this will show up
         * in the application at {@link InputConnection#performEditorAction(int)
         * InputConnection.performEditorAction(int)}.
         */
        const Int32 IME_FLAG_NAVIGATE_NEXT = 0x8000000;

        /**
         * Flag of {@link #imeOptions}: used to request that the IME is capable of
         * inputting ASCII characters.  The intention of this flag is to ensure that
         * the user can type Roman alphabet characters in a {@link android.widget.TextView}
         * used for, typically, account ID or password input.  It is expected that IMEs
         * normally are able to input ASCII even without being told so (such IMEs
         * already respect this flag in a sense), but there could be some cases they
         * aren't when, for instance, only non-ASCII input languagaes like Arabic,
         * Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
         * aware that the flag is not a guarantee, and not all IMEs will respect it.
         * However, it is strongly recommended for IME authors to respect this flag
         * especially when their IME could end up with a state that has only non-ASCII
         * input languages enabled.
         */
        const Int32 IME_FLAG_FORCE_ASCII = 0x80000000;

        /**
         * Generic unspecified type for {@link #imeOptions}.
         */
        const Int32 IME_NULL = 0x00000000;

        GetInputType(
            [out] Int32* type);

        SetInputType(
            [in] Int32 type);

        GetImeOptions(
            [out] Int32* options);

        SetImeOptions(
            [in] Int32 options);

        GetPrivateImeOptions(
            [out] String* options);

        SetPrivateImeOptions(
            [in] String options);

        GetActionLabel(
            [out] ICharSequence** actionLabel);

        SetActionLabel(
            [in] ICharSequence* actionLabel);

        GetActionId(
            [out] Int32* actionId);

        SetActionId(
            [in] Int32 actionId);

        GetInitialSelStart(
            [out] Int32* initialSelStart);

        SetInitialSelStart(
            [in] Int32 initialSelStart);

        GetInitialSelEnd(
            [out] Int32* initialSelEnd);

        SetInitialSelEnd(
            [in] Int32 initialSelEnd);

        GetInitialCapsMode(
            [out] Int32* initialCapsMode);

        SetInitialCapsMode(
            [in] Int32 initialCapsMode);

        GetHintText(
            [out] ICharSequence** hintText);

        SetHintText(
            [in] ICharSequence* hintText);

        GetLabel(
            [out] ICharSequence** label);

        SetLabel(
            [in] ICharSequence* label);

        GetPackageName(
            [out] String* packageName);

        SetPackageName(
            [in] String packageName);

        GetFieldId(
            [out] Int32* fieldId);

        SetFieldId(
            [in] Int32 fieldId);

        GetFieldName(
            [out] String* fieldName);

        SetFieldName(
            [in] String fieldName);

        GetExtras(
            [out] IBundle** extras);

        SetExtras(
            [in] IBundle* extras);

        /**
         * Ensure that the data in this EditorInfo is compatible with an application
         * that was developed against the given target API version.  This can
         * impact the following input types:
         * {@link InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS},
         * {@link InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD},
         * {@link InputType#TYPE_NUMBER_VARIATION_NORMAL},
         * {@link InputType#TYPE_NUMBER_VARIATION_PASSWORD}.
         *
         * <p>This is called by the framework for input method implementations;
         * you should not generally need to call it yourself.
         *
         * @param targetSdkVersion The API version number that the compatible
         * application was developed against.
         */
        MakeCompatible(
            [in] Int32 targetSdkVersion);
    }

    } // namespace InputMethod
    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
