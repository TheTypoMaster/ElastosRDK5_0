
module
{
    using interface Elastos.Core.ICharSequence;
    using interface Elastos.Utility.IObjectInt32Map;
    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Graphics.IRect;

    namespace Elastos {
    namespace Droid {
    namespace View {
    namespace Accessibility {

    interface IAccessibilityNodeInfo {
        /** @hide */
        const Int32 UNDEFINED = -1;

        /** @hide */
        const Int64 ROOT_NODE_ID = UNDEFINED << 32 | UNDEFINED;//makeNodeId(UNDEFINED, UNDEFINED);

        /** @hide */
        const Int32 ACTIVE_WINDOW_ID = UNDEFINED;

        /** @hide */
        const Int32 FLAG_PREFETCH_PREDECESSORS = 0x00000001;

        /** @hide */
        const Int32 FLAG_PREFETCH_SIBLINGS = 0x00000002;

        /** @hide */
        const Int32 FLAG_PREFETCH_DESCENDANTS = 0x00000004;

        /** @hide */
        const Int32 INCLUDE_NOT_IMPORTANT_VIEWS = 0x00000008;

        // Actions.

        /**
         * Action that gives input focus to the node.
         */
        const Int32 ACTION_FOCUS =  0x00000001;

        /**
         * Action that clears input focus of the node.
         */
        const Int32 ACTION_CLEAR_FOCUS = 0x00000002;

        /**
         * Action that selects the node.
         */
        const Int32 ACTION_SELECT = 0x00000004;

        /**
         * Action that unselects the node.
         */
        const Int32 ACTION_CLEAR_SELECTION = 0x00000008;

        /**
         * Action that clicks on the node info.
         */
        const Int32 ACTION_CLICK = 0x00000010;

        /**
         * Action that long clicks on the node.
         */
        const Int32 ACTION_LONG_CLICK = 0x00000020;

        /**
         * Action that gives accessibility focus to the node.
         */
        const Int32 ACTION_ACCESSIBILITY_FOCUS = 0x00000040;

        /**
         * Action that clears accessibility focus of the node.
         */
        const Int32 ACTION_CLEAR_ACCESSIBILITY_FOCUS = 0x00000080;

        /**
         * Action that requests to go to the next entity in this node's text
         * at a given movement granularity. For example, move to the next character,
         * word, etc.
         * <p>
         * <strong>Arguments:</strong> {@link #ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT}<br>
         * <strong>Example:</strong>
         * <code><pre><p>
         *   Bundle arguments = new Bundle();
         *   arguments.putInt(AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT,
         *           AccessibilityNodeInfo.MOVEMENT_GRANULARITY_CHARACTER);
         *   info.performAction(AccessibilityNodeInfo.ACTION_NEXT_AT_MOVEMENT_GRANULARITY, arguments);
         * </code></pre></p>
         * </p>
         *
         * @see #setMovementGranularities(int)
         * @see #getMovementGranularities()
         *
         * @see #MOVEMENT_GRANULARITY_CHARACTER
         * @see #MOVEMENT_GRANULARITY_WORD
         * @see #MOVEMENT_GRANULARITY_LINE
         * @see #MOVEMENT_GRANULARITY_PARAGRAPH
         * @see #MOVEMENT_GRANULARITY_PAGE
         */
        const Int32 ACTION_NEXT_AT_MOVEMENT_GRANULARITY = 0x00000100;

        /**
         * Action that requests to go to the previous entity in this node's text
         * at a given movement granularity. For example, move to the next character,
         * word, etc.
         * <p>
         * <strong>Arguments:</strong> {@link #ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT}<br>
         * <strong>Example:</strong>
         * <code><pre><p>
         *   Bundle arguments = new Bundle();
         *   arguments.putInt(AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT,
         *           AccessibilityNodeInfo.MOVEMENT_GRANULARITY_CHARACTER);
         *   info.performAction(AccessibilityNodeInfo.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY,
         *           arguments);
         * </code></pre></p>
         * </p>
         *
         * @see #setMovementGranularities(int)
         * @see #getMovementGranularities()
         *
         * @see #MOVEMENT_GRANULARITY_CHARACTER
         * @see #MOVEMENT_GRANULARITY_WORD
         * @see #MOVEMENT_GRANULARITY_LINE
         * @see #MOVEMENT_GRANULARITY_PARAGRAPH
         * @see #MOVEMENT_GRANULARITY_PAGE
         */
        const Int32 ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY = 0x00000200;

        /**
         * Action to move to the next HTML element of a given type. For example, move
         * to the BUTTON, INPUT, TABLE, etc.
         * <p>
         * <strong>Arguments:</strong> {@link #ACTION_ARGUMENT_HTML_ELEMENT_STRING}<br>
         * <strong>Example:</strong>
         * <code><pre><p>
         *   Bundle arguments = new Bundle();
         *   arguments.putString(AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING, "BUTTON");
         *   info.performAction(AccessibilityNodeInfo.ACTION_NEXT_HTML_ELEMENT, arguments);
         * </code></pre></p>
         * </p>
         */
        const Int32 ACTION_NEXT_HTML_ELEMENT = 0x00000400;

        /**
         * Action to move to the previous HTML element of a given type. For example, move
         * to the BUTTON, INPUT, TABLE, etc.
         * <p>
         * <strong>Arguments:</strong> {@link #ACTION_ARGUMENT_HTML_ELEMENT_STRING}<br>
         * <strong>Example:</strong>
         * <code><pre><p>
         *   Bundle arguments = new Bundle();
         *   arguments.putString(AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING, "BUTTON");
         *   info.performAction(AccessibilityNodeInfo.ACTION_PREVIOUS_HTML_ELEMENT, arguments);
         * </code></pre></p>
         * </p>
         */
        const Int32 ACTION_PREVIOUS_HTML_ELEMENT = 0x00000800;

        /**
         * Action to scroll the node content forward.
         */
        const Int32 ACTION_SCROLL_FORWARD = 0x00001000;

        /**
         * Action to scroll the node content backward.
         */
        const Int32 ACTION_SCROLL_BACKWARD = 0x00002000;

        /**
         * Argument for which movement granularity to be used when traversing the node text.
         * <p>
         * <strong>Type:</strong> int<br>
         * <strong>Actions:</strong> {@link #ACTION_NEXT_AT_MOVEMENT_GRANULARITY},
         * {@link #ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY}
         * </p>
         */
        const String ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT =
            "ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT";

        /**
         * Argument for which HTML element to get moving to the next/previous HTML element.
         * <p>
         * <strong>Type:</strong> String<br>
         * <strong>Actions:</strong> {@link #ACTION_NEXT_HTML_ELEMENT},
         *         {@link #ACTION_PREVIOUS_HTML_ELEMENT}
         * </p>
         */
        const String ACTION_ARGUMENT_HTML_ELEMENT_STRING =
            "ACTION_ARGUMENT_HTML_ELEMENT_STRING";

        /**
         * The input focus.
         */
        const Int32 FOCUS_INPUT = 1;

        /**
         * The accessibility focus.
         */
        const Int32 FOCUS_ACCESSIBILITY = 2;

        // Movement granularities

        /**
         * Movement granularity bit for traversing the text of a node by character.
         */
        const Int32 MOVEMENT_GRANULARITY_CHARACTER = 0x00000001;

        /**
         * Movement granularity bit for traversing the text of a node by word.
         */
        const Int32 MOVEMENT_GRANULARITY_WORD = 0x00000002;

        /**
         * Movement granularity bit for traversing the text of a node by line.
         */
        const Int32 MOVEMENT_GRANULARITY_LINE = 0x00000004;

        /**
         * Movement granularity bit for traversing the text of a node by paragraph.
         */
        const Int32 MOVEMENT_GRANULARITY_PARAGRAPH = 0x00000008;

        /**
         * Movement granularity bit for traversing the text of a node by page.
         */
        const Int32 MOVEMENT_GRANULARITY_PAGE = 0x00000010;

        SetSource(
            [in] IView* source);

        SetSourceEx(
            [in] IView* root,
            [in] Int32 virtualDescendantId);

        FindFocus(
            [in] Int32 focus,
            [out] IAccessibilityNodeInfo** info);

        FocusSearch(
            [in] Int32 direction,
            [out] IAccessibilityNodeInfo** info);

        GetWindowId(
            [out] Int32* id);

        GetChildNodeIds(
            [out] IObjectInt32Map** ids);

        GetChildCount(
            [out] Int32* count);

        GetChild(
            [in] Int32 index,
            [out] IAccessibilityNodeInfo** info);

        AddChild(
            [in] IView* child);

        AddChildEx(
            [in] IView* root,
            [in] Int32 virtualDescendantId);

        /**
         * Gets the actions that can be performed on the node.
         *
         * @return The bit mask of with actions.
         *
         * @see AccessibilityNodeInfo#ACTION_FOCUS
         * @see AccessibilityNodeInfo#ACTION_CLEAR_FOCUS
         * @see AccessibilityNodeInfo#ACTION_SELECT
         * @see AccessibilityNodeInfo#ACTION_CLEAR_SELECTION
         * @see AccessibilityNodeInfo#ACTION_ACCESSIBILITY_FOCUS
         * @see AccessibilityNodeInfo#ACTION_CLEAR_ACCESSIBILITY_FOCUS
         * @see AccessibilityNodeInfo#ACTION_CLICK
         * @see AccessibilityNodeInfo#ACTION_LONG_CLICK
         * @see AccessibilityNodeInfo#ACTION_NEXT_AT_MOVEMENT_GRANULARITY
         * @see AccessibilityNodeInfo#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY
         * @see AccessibilityNodeInfo#ACTION_NEXT_HTML_ELEMENT
         * @see AccessibilityNodeInfo#ACTION_PREVIOUS_HTML_ELEMENT
         * @see AccessibilityNodeInfo#ACTION_SCROLL_FORWARD
         * @see AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD
         */
        GetActions(
            [out] Int32* actions);

        AddAction(
            [in] Int32 action);

        SetMovementGranularities(
            [in] Int32 granularities);

        GetMovementGranularities(
            [out] Int32* granularities);

        PerformAction(
            [in] Int32 action,
            [out] Boolean* result);

        PerformActionEx(
            [in] Int32 action,
            [in] IBundle* arguments,
            [out] Boolean* result);

        FindAccessibilityNodeInfosByText(
            [in] String text,
            [out] IObjectContainer** container);

        GetParent(
            [out] IAccessibilityNodeInfo** parent);

        GetParentNodeId(
            [out] Int64* id);

        SetParent(
            [in] IView* parent);

        SetParentEx(
            [in] IView* root,
            [in] Int32 virtualDescendantId);

        GetBoundsInParent(
            [in] IRect* outBounds);

        SetBoundsInParent(
            [in] IRect* bounds);

        GetBoundsInScreen(
            [in] IRect* outBounds);

        SetBoundsInScreen(
            [in] IRect* bounds);

        IsCheckable(
            [out] Boolean* checkable);

        SetCheckable(
            [in] Boolean checkable);

        IsChecked(
            [out] Boolean* checked);

        SetChecked(
            [in] Boolean checked);

        IsFocusable(
            [out] Boolean* focusable);

        SetFocusable(
            [in] Boolean focusable);

        IsFocused(
            [out] Boolean* focused);

        SetFocused(
            [in] Boolean focused);

        IsVisibleToUser(
            [out] Boolean* visible);

        SetVisibleToUser(
            [in] Boolean visible);

        IsAccessibilityFocused(
            [out] Boolean* focused);

        SetAccessibilityFocused(
            [in] Boolean focusable);

        IsSelected(
            [out] Boolean* selected);

        SetSelected(
            [in] Boolean selected);

        IsClickable(
            [out] Boolean* clickable);

        SetClickable(
            [in] Boolean clickable);

        IsLongClickable(
            [out] Boolean* longClickable);

        SetLongClickable(
            [in] Boolean longClickable);

        IsEnabled(
            [out] Boolean* result);

        SetEnabled(
            [in] Boolean enabled);

        IsPassword(
            [out] Boolean* isPassword);

        SetPassword(
            [in] Boolean isPassword);

        IsScrollable(
            [out] Boolean* scrollable);

        SetScrollable(
            [in] Boolean scrollable);

        GetPackageName(
            [out] ICharSequence** packageName);

        SetPackageName(
            [in] ICharSequence* packageName);

        GetClassName(
            [out] ICharSequence** className);

        SetClassName(
            [in] ICharSequence* className);

        GetText(
            [out] ICharSequence** text);

        SetText(
            [in] ICharSequence* text);

        GetContentDescription(
            [out] ICharSequence** description);

        SetContentDescription(
            [in] ICharSequence* description);

        SetLabelFor(
            [in] IView* labeled);

        SetLabelForEx(
            [in] IView* root,
            [in] Int32 virtualDescendantId);

        GetLabelFor(
            [out] IAccessibilityNodeInfo** info);

        SetLabeledBy(
            [in] IView* label);

        SetLabeledByEx(
            [in] IView* root,
            [in] Int32 virtualDescendantId);

        GetLabeledBy(
            [out] IAccessibilityNodeInfo** info);

        SetConnectionId(
            [in] Int32 connectionId);

        DescribeContents(
            [out] Int32* contents);

        GetSourceNodeId(
            [out] Int64* id);

        SetSealed(
            [in] Boolean sealed);

        IsSealed(
            [out] Boolean* sealed);

        Recycle();

        Equals(
            [in] IInterface* other,
            [out] Boolean* result);

        GetHashCode(
            [out] Int32* hash);

        ToString(
            [out] String* s);
    }

    interface IAccessibilityNodeInfoHelper {
        /**
         * Gets the accessibility view id which identifies a View in the view three.
         *
         * @param accessibilityNodeId The id of an {@link AccessibilityNodeInfo}.
         * @return The accessibility view id part of the node id.
         *
         * @hide
         */
        GetAccessibilityViewId(
            [in] Int64 accessibilityNodeId,
            [out] Int32* viewId);

        /**
         * Gets the virtual descendant id which identifies an imaginary view in a
         * containing View.
         *
         * @param accessibilityNodeId The id of an {@link AccessibilityNodeInfo}.
         * @return The virtual view id part of the node id.
         *
         * @hide
         */
        GetVirtualDescendantId(
            [in] Int64 accessibilityNodeId,
            [out] Int32* descendantId);

        /**
         * Makes a node id by shifting the <code>virtualDescendantId</code>
         * by {@link #VIRTUAL_DESCENDANT_ID_SHIFT} and taking
         * the bitwise or with the <code>accessibilityViewId</code>.
         *
         * @param accessibilityViewId A View accessibility id.
         * @param virtualDescendantId A virtual descendant id.
         * @return The node id.
         *
         * @hide
         */
        MakeNodeId(
            [in] Int32 accessibilityViewId,
            [in] Int32 virtualDescendantId,
            [out] Int64* nodeId);

        /**
         * Returns a cached instance if such is available otherwise a new one
         * and sets the source.
         *
         * @param source The source view.
         * @return An instance.
         *
         * @see #setSource(View)
         */
        Obtain(
            [in] IView* source,
            [out] IAccessibilityNodeInfo** nodeInfo);

        /**
         * Returns a cached instance if such is available otherwise a new one
         * and sets the source.
         *
         * @param root The root of the virtual subtree.
         * @param virtualDescendantId The id of the virtual descendant.
         * @return An instance.
         *
         * @see #setSource(View, int)
         */
        ObtainEx(
            [in] IView* root,
            [in] Int32 virtualDescendantId,
            [out] IAccessibilityNodeInfo** nodeInfo);

        /**
         * Returns a cached instance if such is available otherwise a new one.
         *
         * @return An instance.
         */
        ObtainEx2(
            [out] IAccessibilityNodeInfo** nodeInfo);

        /**
         * Returns a cached instance if such is available or a new one is
         * create. The returned instance is initialized from the given
         * <code>info</code>.
         *
         * @param info The other info.
         * @return An instance.
         */
        ObtainEx3(
            [in] IAccessibilityNodeInfo* info,
            [out] IAccessibilityNodeInfo** nodeInfo);
    }

    } // namespace Accessibility
    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}
