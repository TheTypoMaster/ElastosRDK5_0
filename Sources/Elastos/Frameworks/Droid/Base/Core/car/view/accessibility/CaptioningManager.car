
module
{
    using interface Elastos.Utility.ILocale;

    interface Elastos.Droid.Graphics.ITypeface;
    interface Elastos.Droid.Content.IContentResolver;
    interface Elastos.Droid.View.Accessibility.IAccessibilityEvent;

    namespace Elastos {
    namespace Droid {
    namespace View {
    namespace Accessibility {

    /**
     * Specifies visual properties for video captions, including foreground and
     * background colors, edge properties, and typeface.
     */
    interface ICaptionStyle {
        /** @hide */
        const Int32 PRESET_CUSTOM = -1;

        /** Unspecified edge type value. */
        const Int32 EDGE_TYPE_UNSPECIFIED = -1;

        /** Edge type value specifying no character edges. */
        const Int32 EDGE_TYPE_NONE = 0;

        /** Edge type value specifying uniformly outlined character edges. */
        const Int32 EDGE_TYPE_OUTLINE = 1;

        /** Edge type value specifying drop-shadowed character edges. */
        const Int32 EDGE_TYPE_DROP_SHADOW = 2;

        /** Edge type value specifying raised bevel character edges. */
        const Int32 EDGE_TYPE_RAISED = 3;

        /** Edge type value specifying depressed bevel character edges. */
        const Int32 EDGE_TYPE_DEPRESSED = 4;

        SetEdgeType(
            [in] Int32 type);

        SetEdgeColor(
            [in] Int32 color);

        SetWindowColor(
            [in] Int32 color);

        GetEdgeType(
            [out] Int32* type);

        GetEdgeColor(
            [out] Int32* color);

        GetWindowColor(
            [out] Int32* color);

        /**
         * @return {@code true} if the user has specified a background color
         *         that should override the application default, {@code false}
         *         otherwise
         */
        HasBackgroundColor(
            [out] Boolean* result);

        /**
         * @return {@code true} if the user has specified a foreground color
         *         that should override the application default, {@code false}
         *         otherwise
         */
        HasForegroundColor(
            [out] Boolean* result);

        /**
         * @return {@code true} if the user has specified an edge type that
         *         should override the application default, {@code false}
         *         otherwise
         */
        HasEdgeType(
            [out] Boolean* result);

        /**
         * @return {@code true} if the user has specified an edge color that
         *         should override the application default, {@code false}
         *         otherwise
         */
        HasEdgeColor(
            [out] Boolean* result);

        /**
         * @return {@code true} if the user has specified a window color that
         *         should override the application default, {@code false}
         *         otherwise
         */
        HasWindowColor(
            [out] Boolean* result);

        /**
         * @return the preferred {@link Typeface} for video captions, or null if
         *         not specified
         */
        GetTypeface(
            [out] ITypeface** face);

        GetCustomStyle(
            [in] IContentResolver* cr,
            [out] ICaptionStyle** style);
    }

    /**
     * Listener for changes in captioning properties, including enabled state
     * and user style preferences.
     */
    interface ICaptioningChangeListener {
        /**
         * Called when the captioning enabled state changes.
         *
         * @param enabled the user's new preferred captioning enabled state
         */
        OnEnabledChanged(
            [in] Boolean enabled);

        /**
         * Called when the captioning user style changes.
         *
         * @param userStyle the user's new preferred style
         * @see CaptioningManager#getUserStyle()
         */
        OnUserStyleChanged(
            [in] ICaptionStyle* userStyle);

        /**
         * Called when the captioning locale changes.
         *
         * @param locale the preferred captioning locale, or {@code null} if not specified
         * @see CaptioningManager#getLocale()
         */
        OnLocaleChanged(
            [in] ILocale* locale);

        /**
         * Called when the captioning font scaling factor changes.
         *
         * @param fontScale the preferred font scaling factor
         * @see CaptioningManager#getFontScale()
         */
        OnFontScaleChanged(
            [in] Float fontScale);
    }

    /**
     * Contains methods for accessing and monitoring preferred video captioning state and visual
     * properties.
     * <p>
     * To obtain a handle to the captioning manager, do the following:
     * <p>
     * <code>
     * <pre>CaptioningManager captioningManager =
     *        (CaptioningManager) context.getSystemService(Context.CAPTIONING_SERVICE);</pre>
     * </code>
     */
    interface ICaptioningManager {
        IsEnabled(
            [out] Boolean* result);

        GetRawLocale(
            [out] String* locale);

        GetLocale(
            [out] ILocale** locale);

        GetFontScale(
            [out] Float* scale);

        GetRawUserStyle(
            [out] Int32* style);

        GetUserStyle(
            [out] ICaptionStyle** style);

        AddCaptioningChangeListener(
            [in] ICaptioningChangeListener* listener);

        RemoveCaptioningChangeListener(
            [in] ICaptioningChangeListener* listener);
    }

    } // namespace Accessibility
    } // namespace View
    } // namepsace Droid
    } // namespace Elastos
}