
module
{

    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Telephony.ICellInfo;
    interface Elastos.Droid.Telephony.INeighboringCellInfo;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

    interface IITelephony {

        /**
         * Dial a number. This doesn't place the call. It displays
         * the Dialer screen.
         * @param number the number to be dialed. If null, this
         * would display the Dialer screen with no number pre-filled.
         */
        Dial(
            [in] String number);

        /**
         * Place a call to the specified number.
         * @param number the number to be called.
         */
        Call(
            [in] String number);

        /**
         * If there is currently a call in progress, show the call screen.
         * The DTMF dialpad may or may not be visible initially, depending on
         * whether it was up when the user last exited the InCallScreen.
         *
         * @return true if the call screen was shown.
         */
        ShowCallScreen(
            [out] Boolean* res);

        /**
         * Variation of showCallScreen() that also specifies whether the
         * DTMF dialpad should be initially visible when the InCallScreen
         * comes up.
         *
         * @param showDialpad if true, make the dialpad visible initially,
         *                    otherwise hide the dialpad initially.
         * @return true if the call screen was shown.
         *
         * @see showCallScreen
         */
        ShowCallScreenWithDialpad(
            [in] Boolean showDialpad,
            [out] Boolean* res);

        /**
         * End call if there is a call in progress, otherwise does nothing.
         *
         * @return whether it hung up
         */
        EndCall(
            [out] Boolean* res);

        /**
         * Answer the currently-ringing call.
         *
         * If there's already a current active call, that call will be
         * automatically put on hold.  If both lines are currently in use, the
         * current active call will be ended.
         *
         * TODO: provide a flag to let the caller specify what policy to use
         * if both lines are in use.  (The current behavior is hardwired to
         * "answer incoming, end ongoing", which is how the CALL button
         * is specced to behave.)
         *
         * TODO: this should be a oneway call (especially since it's called
         * directly from the key queue thread).
         */
        AnswerRingingCall(
            [out] Boolean* res);

        /**
         * Silence the ringer if an incoming call is currently ringing.
         * (If vibrating, stop the vibrator also.)
         *
         * It's safe to call this if the ringer has already been silenced, or
         * even if there's no incoming call.  (If so, this method will do nothing.)
         *
         * TODO: this should be a oneway call too (see above).
         *       (Actually *all* the methods here that return void can
         *       probably be oneway.)
         */
        SilenceRinger(
            [out] Boolean* res);

        /**
         * Check if we are in either an active or holding call
         * @return true if the phone state is OFFHOOK.
         */
        IsOffhook(
            [out] Boolean* res);

        /**
         * Check if an incoming phone call is ringing or call waiting.
         * @return true if the phone state is RINGING.
         */
        IsRinging(
            [out] Boolean* res);

        /**
         * Check if the phone is idle.
         * @return true if the phone state is IDLE.
         */
        IsIdle(
            [out] Boolean* res);

        /**
         * Check to see if the radio is on or not.
         * @return returns true if the radio is on.
         */
        IsRadioOn(
            [out] Boolean* res);

        /**
         * Check if the SIM pin lock is enabled.
         * @return true if the SIM pin lock is enabled.
         */
        IsSimPinEnabled(
            [out] Boolean* res);

        /**
         * Cancels the missed calls notification.
         */
        CancelMissedCallsNotification(
            [out] Boolean* res);

        /**
         * Supply a pin to unlock the SIM.  Blocks until a result is determined.
         * @param pin The pin to check.
         * @return whether the operation was a success.
         */
        SupplyPin(
            [in] String pin,
            [out] Boolean* res);

        /**
         * Supply puk to unlock the SIM and set SIM pin to new pin.
         *  Blocks until a result is determined.
         * @param puk The puk to check.
         *        pin The new pin to be set in SIM
         * @return whether the operation was a success.
         */
        SupplyPuk(
            [in] String puk,
            [in] String pin,
            [out] Boolean* res);

        /**
         * Handles PIN MMI commands (PIN/PIN2/PUK/PUK2), which are initiated
         * without SEND (so <code>dial</code> is not appropriate).
         *
         * @param dialString the MMI command to be executed.
         * @return true if MMI command is executed.
         */
        HandlePinMmi(
            [in] String dialString,
            [out] Boolean* res);

        /**
         * Toggles the radio on or off.
         */
        ToggleRadioOnOff(
            [out] Boolean* res);

        /**
         * Set the radio to on or off
         */
        SetRadio(
            [in] Boolean turnOn,
            [out] Boolean* res);

        /**
         * Request to update location information in service state
         */
        UpdateServiceLocation(
            [out] Boolean* res);

        /**
         * Enable location update notifications.
         */
        EnableLocationUpdates(
            [out] Boolean* res);

        /**
         * Disable location update notifications.
         */
        DisableLocationUpdates(
            [out] Boolean* res);

        /**
         * Enable a specific APN type.
         */
        EnableApnType(
            [in] String type,
            [out] Int32* val);

        /**
         * Disable a specific APN type.
         */
        DisableApnType(
            [in] String type,
            [out] Int32* val);

        /**
         * Allow mobile data connections.
         */
        EnableDataConnectivity(
            [out] Boolean* res);

        /**
         * Disallow mobile data connections.
         */
        DisableDataConnectivity(
            [out] Boolean* res);

        /**
         * Report whether data connectivity is possible.
         */
        IsDataConnectivityPossible(
            [out] Boolean* res);

        GetCellLocation(
            [out] IBundle** cellLocation);

        /**
         * Returns the neighboring cell information of the device.
         */
        GetNeighboringCellInfo(
            [out, callee] ArrayOf<INeighboringCellInfo*>* neighboringCellInfo);

        GetCallState(
            [out] Int32* callState);

        GetDataActivity(
            [out] Int32* dataActivity);

        GetDataState(
            [out] Int32* dataState);

        /**
         * Returns the current active phone type as integer.
         * Returns TelephonyManager.PHONE_TYPE_CDMA if RILConstants.CDMA_PHONE
         * and TelephonyManager.PHONE_TYPE_GSM if RILConstants.GSM_PHONE
         */
        GetActivePhoneType(
            [out] Int32* activePhoneType);

        /**
         * Returns the CDMA ERI icon index to display
         */
        GetCdmaEriIconIndex(
            [out] Int32* cdmaEriIconIndex);

        /**
         * Returns the CDMA ERI icon mode,
         * 0 - ON
         * 1 - FLASHING
         */
        GetCdmaEriIconMode(
            [out] Int32* cdmaEriIconMode);

        /**
         * Returns the CDMA ERI text,
         */
        GetCdmaEriText(
            [out] String* cdmaEriText);

        /**
         * Returns true if OTA service provisioning needs to run.
         * Only relevant on some technologies, others will always
         * return false.
         */
        NeedsOtaServiceProvisioning(
            [out] Boolean* res);

        /**
          * Returns the unread count of voicemails
          */
        GetVoiceMessageCount(
            [out] Int32* voiceMessageCount);

        /**
          * Returns the network type
          */
        GetNetworkType(
            [out] Int32* networkType);

        /**
         * Return true if an ICC card is present
         */
        HasIccCard(
            [out] Boolean* res);

        /**
         * Return if the current radio is LTE on CDMA. This
         * is a tri-state return value as for a period of time
         * the mode may be unknown.
         *
         * @return {@link Phone#LTE_ON_CDMA_UNKNOWN}, {@link Phone#LTE_ON_CDMA_FALSE}
         * or {@link PHone#LTE_ON_CDMA_TRUE}
         */
        GetLteOnCdmaMode(
            [out] Int32* lteOnCdmaMode);

        /**
         * Returns the all observed cell information of the device.
         */
        GetAllCellInfo(
            [out, callee] ArrayOf<ICellInfo*>* allCellInfo);

    }

    } // namespace Telephony
    } // namespace Internal
    } // namespace Droid
    } // namespace Elastos
}
