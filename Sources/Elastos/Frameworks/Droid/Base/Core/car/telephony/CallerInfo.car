
module
{
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Database.ICursor;
    interface Elastos.Droid.Graphics.Drawable.IDrawable;
    interface Elastos.Droid.Graphics.IBitmap;
    interface Elastos.Droid.Net.IUri;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Telephony {

    [local]
    interface ICallerInfo {
        const String UNKNOWN_NUMBER = "-1";
        const String PRIVATE_NUMBER = "-2";
        const String PAYPHONE_NUMBER = "-3";

        // Accessors

        /**
         * @return true if the caller info is an emergency number.
         */
        IsEmergencyNumber(
            [out] Boolean* result);

        /**
         * @return true if the caller info is a voicemail number.
         */
        IsVoiceMailNumber(
            [out] Boolean* result);

        /**
         * Updates this CallerInfo's geoDescription field, based on the raw
         * phone number in the phoneNumber field.
         *
         * (Note that the various getCallerInfo() methods do *not* set the
         * geoDescription automatically; you need to call this method
         * explicitly to get it.)
         *
         * @param context the context used to look up the current locale / country
         * @param fallbackNumber if this CallerInfo's phoneNumber field is empty,
         *        this specifies a fallback number to use instead.
         */
        UpdateGeoDescription(
            [in] IContext* ctx,
            [in] String fallbackNumber);

        /**
         * @return a string debug representation of this instance.
         */
        ToString(
            [out] String* str);

        /**
         * Mark this CallerInfo as an emergency call.
         * @param context To lookup the localized 'Emergency Number' string.
         * @return this instance.
         */
        // TODO: Note we're setting the phone number here (refer to
        // javadoc comments at the top of CallerInfo class) to a localized
        // string 'Emergency Number'. This is pretty bad because we are
        // making UI work here instead of just packaging the data. We
        // should set the phone number to the dialed number and name to
        // 'Emergency Number' and let the UI make the decision about what
        // should be displayed.
        MarkAsEmergency(
            [in] IContext* ctx,
            [out] ICallerInfo** callerInfo);

        /**
         * Mark this CallerInfo as a voicemail call. The voicemail label
         * is obtained from the telephony manager. Caller must hold the
         * READ_PHONE_STATE permission otherwise the phoneNumber will be
         * set to null.
         * @return this instance.
         */
        // TODO: As in the emergency number handling, we end up writing a
        // string in the phone number field.
        MarkAsVoiceMail(
            [out] ICallerInfo** callerInfo);

        SetName(
            [in] String name);

        GetName(
            [out] String* name);

        SetPhoneNumber(
            [in] String phoneNumber);

        GetPhoneNumber(
            [out] String* phoneNumber);

        SetNormalizedNumber(
            [in] String normalizedNumber);

        GetNormalizedNumber(
            [out] String* normalizedNumber);

        SetGeoDescription(
            [in] String geoDescription);

        GetGeoDescription(
            [in] IContext* ctx,
            [in] String number,
            [out] String* geoDescription);

        SetCnapName(
            [in] String cnapName);

        GetCnapName(
            [out] String* cnapName);

        SetNumberPresentation(
            [in] Int32 numberPresentation);

        GetNumberPresentation(
            [out] Int32* numberPresentation);

        SetNamePresentation(
            [in] Int32 namePresentation);

        GetNamePresentation(
            [out] Int32* namePresentation);

        GetContactExists(
            [out] Boolean* contactExists);

        SetContactExists(
            [in] Boolean contactExists);

        SetPhoneLabel(
            [in] String phoneLabel);

        GetPhoneLabel(
            [out] String* phoneLabel);

        /* Split up the phoneLabel into number type and label name */
        SetNumberType(
            [in] Int32 numberType);

        GetNumberType(
            [out] Int32* numberType);

        SetNumberLabel(
            [in] String numberLabel);

        GetNumberLabel(
            [out] String* numberLabel);

        SetPhotoResource(
            [in] Int32 photoResource);

        GetPhotoResource(
            [out] Int32* photoResource);

        SetPerson_id(
            [in] Int64 person_id);

        GetPerson_id(
            [out] Int64* person_id);

        GetNeedUpdate(
            [out] Boolean* needUpdate);

        SetNeedUpdate(
            [in] Boolean needUpdate);

        SetContactRefUri(
            [in] IUri* contactRefUri);

        GetContactRefUri(
            [out] IUri** contactRefUri);

        // fields to hold individual contact preference data,
        // including the send to voicemail flag and the ringtone
        // uri reference.
        SetContactRingtoneUri(
            [in] IUri* contactRingtoneUri);

        GetContactRingtoneUri(
            [out] IUri** contactRingtoneUri);

        GetShouldSendToVoicemail(
            [out] Boolean* shouldSendToVoicemail);

        SetShouldSendToVoicemail(
            [in] Boolean shouldSendToVoicemail);

        /**
         * Drawable representing the caller image.  This is essentially
         * a cache for the image data tied into the connection /
         * callerinfo object.
         *
         * This might be a high resolution picture which is more suitable
         * for full-screen image view than for smaller icons used in some
         * kinds of notifications.
         *
         * The {@link #isCachedPhotoCurrent} flag indicates if the image
         * data needs to be reloaded.
         */
        SetCachedPhoto(
            [in] IDrawable* cachedPhoto);

        GetCachedPhoto(
            [out] IDrawable** cachedPhoto);

        /**
         * Bitmap representing the caller image which has possibly lower
         * resolution than {@link #cachedPhoto} and thus more suitable for
         * icons (like notification icons).
         *
         * In usual cases this is just down-scaled image of {@link #cachedPhoto}.
         * If the down-scaling fails, this will just become null.
         *
         * The {@link #isCachedPhotoCurrent} flag indicates if the image
         * data needs to be reloaded.
         */
        SetCachedPhotoIcon(
            [in] IBitmap* cachedPhotoIcon);

        GetCachedPhotoIcon(
            [out] IBitmap** cachedPhotoIcon);

        /**
         * Boolean which indicates if {@link #cachedPhoto} and
         * {@link #cachedPhotoIcon} is fresh enough. If it is false,
         * those images aren't pointing to valid objects.
         */

        GetIsCachedPhotoCurrent(
            [out] Boolean* isCachedPhotoCurrent);

        SetIsCachedPhotoCurrent(
            [in] Boolean isCachedPhotoCurrent);
    }

    [local]
    interface ICallerInfoHelper {

        /**
         * getCallerInfo given a phone number, look up in the call-log database
         * for the matching caller id info.
         * @param context the context used to get the ContentResolver
         * @param number the phone number used to lookup caller id
         * @return the CallerInfo which contains the caller id for the given
         * number. The returned CallerInfo is null if no number is supplied. If
         * a matching number is not found, then a generic caller info is returned,
         * with all relevant fields empty or null.
         */
        GetCallerInfoEx(
            [in] IContext* ctx,
            [in] String number,
            [out] ICallerInfo** callerInfo);

        /**
         * getCallerInfo given a URI, look up in the call-log database
         * for the uri unique key.
         * @param context the context used to get the ContentResolver
         * @param contactRef the URI used to lookup caller id
         * @return the CallerInfo which contains the caller id for the given
         * number. The returned CallerInfo is null if no number is supplied.
         */
        GetCallerInfoEx2(
            [in] IContext* ctx,
            [in] IUri* contactRef,
            [out] ICallerInfo** callerInfo);

        /**
         * getCallerInfo given a Cursor.
         * @param context the context used to retrieve string constants
         * @param contactRef the URI to attach to this CallerInfo object
         * @param cursor the first object in the cursor is used to build the CallerInfo object.
         * @return the CallerInfo which contains the caller id for the given
         * number. The returned CallerInfo is null if no number is supplied.
         */
        GetCallerInfoEx3(
            [in] IContext* ctx,
            [in] IUri* contactRef,
            [in] ICursor* cursor,
            [out] ICallerInfo** callerInfo);

        /**
         * getCallerId: a convenience method to get the caller id for a given
         * number.
         *
         * @param context the context used to get the ContentResolver.
         * @param number a phone number.
         * @return if the number belongs to a contact, the contact's name is
         * returned; otherwise, the number itself is returned.
         *
         * TODO NOTE: This MAY need to refer to the Asynchronous Query API
         * [startQuery()], instead of getCallerInfo, but since it looks like
         * it is only being used by the provider calls in the messaging app:
         *   1. android.provider.Telephony.Mms.getDisplayAddress()
         *   2. android.provider.Telephony.Sms.getDisplayAddress()
         * We may not need to make the change.
         */
        GetCallerId(
            [in] IContext* ctx,
            [in] String number,
            [out] String* str);

        /**
         * Performs another lookup if previous lookup fails and it's a SIP call
         * and the peer's username is all numeric. Look up the username as it
         * could be a PSTN number in the contact database.
         *
         * @param context the query context
         * @param number the original phone number, could be a SIP URI
         * @param previousResult the result of previous lookup
         * @return previousResult if it's not the case
         */
        DoSecondaryLookupIfNecessary(
            [in] IContext* ctx,
            [in] String number,
            [in] ICallerInfo* previousResult,
            [out] ICallerInfo** callerInfo);
    }

    } // namespace Telephony
    } // namespace Internal
    } // namespace Droid
    } // namespace Elastos
}
