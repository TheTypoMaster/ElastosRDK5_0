
module
{
    namespace Elastos {
    namespace Droid {
    namespace service {

    const SpellCheckerService_SERVICE_INTERFACE = "android.service.textservice.SpellCheckerService";

    interface IInternalISpellCheckerSession;
    interface ITextInfo;
    interface ISuggestionsInfo;
    interface ISentenceSuggestionsInfo;
    interface IBundle;

    interface ISession
    {
        /**
         * @hide
         */
        SetInternalISpellCheckerSession(
            [in] IInternalISpellCheckerSession* session);

        /**
         * This is called after the class is initialized, at which point it knows it can call
         * getLocale() etc...
         */
        /*abstract*/ OnCreate();

        /**
         * Get suggestions for specified text in TextInfo.
         * This function will run on the incoming IPC thread.
         * So, this is not called on the main thread,
         * but will be called in series on another thread.
         * @param textInfo the text metadata
         * @param suggestionsLimit the maximum number of suggestions to be returned
         * @return SuggestionsInfo which contains suggestions for textInfo
         */
        /*abstract*/ OnGetSuggestions(
            [in] ITextInfo* textInfo,
            [in] Int32 suggestionsLimit,
            [out] ISuggestionsInfo** result);

        /**
         * A batch process of onGetSuggestions.
         * This function will run on the incoming IPC thread.
         * So, this is not called on the main thread,
         * but will be called in series on another thread.
         * @param textInfos an array of the text metadata
         * @param suggestionsLimit the maximum number of suggestions to be returned
         * @param sequentialWords true if textInfos can be treated as sequential words.
         * @return an array of {@link SentenceSuggestionsInfo} returned by
         * {@link SpellCheckerService.Session#onGetSuggestions(TextInfo, int)}
         */
        OnGetSuggestionsMultiple(
            [in] ArrayOf<ITextInfo> textInfos,
            [in] Int32 suggestionsLimit,
            [in] Boolean sequentialWords,
            [out,callee] ArrayOf<ISuggestionsInfo*>* result);

        /**
         * Get sentence suggestions for specified texts in an array of TextInfo.
         * The default implementation splits the input text to words and returns
         * {@link SentenceSuggestionsInfo} which contains suggestions for each word.
         * This function will run on the incoming IPC thread.
         * So, this is not called on the main thread,
         * but will be called in series on another thread.
         * When you override this method, make sure that suggestionsLimit is applied to suggestions
         * that share the same start position and length.
         * @param textInfos an array of the text metadata
         * @param suggestionsLimit the maximum number of suggestions to be returned
         * @return an array of {@link SentenceSuggestionsInfo} returned by
         * {@link SpellCheckerService.Session#onGetSuggestions(TextInfo, int)}
         */
        OnGetSentenceSuggestionsMultiple(
            [in] ArrayOf<ITextInfo> textInfos,
            [in] Int32 suggestionsLimit,
            [out,callee] ArrayOf<ISentenceSuggestionsInfo*>* result);

        /**
         * Request to abort all tasks executed in SpellChecker.
         * This function will run on the incoming IPC thread.
         * So, this is not called on the main thread,
         * but will be called in series on another thread.
         */
        OnCancel();

        /**
         * Request to close this session.
         * This function will run on the incoming IPC thread.
         * So, this is not called on the main thread,
         * but will be called in series on another thread.
         */
        OnClose();

        /**
         * @return Locale for this session
         */
        GetLocale(
            [out] String* result);

        /**
         * @return Bundle for this session
         */
        GetBundle(
            [out] IBundle** result);
    }

    interface ISpellCheckerService
    {
        /**
         * Implement to return the implementation of the internal spell checker
         * service interface. Subclasses should not override.
         */
        OnBind(
            [in] IIntent* intent,
            [out] IBinder** result);

        /**
         * Factory method to create a spell checker session impl
         * @return SpellCheckerSessionImpl which should be overridden by a concrete implementation.
         */
        /*abstract*/ CreateSession(
            [out] ISession** result);
    }

    } // namespace service
    } // namepsace Droid
    } // namespace Elastos
}
