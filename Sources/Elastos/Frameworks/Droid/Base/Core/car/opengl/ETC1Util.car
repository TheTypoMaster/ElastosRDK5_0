
module
{
    using interface Elastos.IO.IBuffer;
    using interface Elastos.IO.IByteBuffer;
    using interface Elastos.IO.IInputStream;
    using interface Elastos.IO.IOutputStream;

    interface Elastos.Droid.Opengl.IETC1Texture;

    namespace Elastos {
    namespace Droid {
    namespace Opengl {

    interface IETC1Util {
        /**
         * Convenience method to load an ETC1 texture whether or not the active OpenGL context
         * supports the ETC1 texture compression format.
         * @param target the texture target.
         * @param level the texture level
         * @param border the border size. Typically 0.
         * @param fallbackFormat the format to use if ETC1 texture compression is not supported.
         * Must be GL_RGB.
         * @param fallbackType the type to use if ETC1 texture compression is not supported.
         * Can be either GL_UNSIGNED_SHORT_5_6_5, which implies 16-bits-per-pixel,
         * or GL_UNSIGNED_BYTE, which implies 24-bits-per-pixel.
         * @param input the input stream containing an ETC1 texture in PKM format.
         * @throws IOException
         */
        LoadTexture(
            [in] Int32 target,
            [in] Int32 level,
            [in] Int32 border,
            [in] Int32 fallbackFormat,
            [in] Int32 fallbackType,
            [in] IInputStream* input);

        /**
         * Convenience method to load an ETC1 texture whether or not the active OpenGL context
         * supports the ETC1 texture compression format.
         * @param target the texture target.
         * @param level the texture level
         * @param border the border size. Typically 0.
         * @param fallbackFormat the format to use if ETC1 texture compression is not supported.
         * Must be GL_RGB.
         * @param fallbackType the type to use if ETC1 texture compression is not supported.
         * Can be either GL_UNSIGNED_SHORT_5_6_5, which implies 16-bits-per-pixel,
         * or GL_UNSIGNED_BYTE, which implies 24-bits-per-pixel.
         * @param texture the ETC1 to load.
         */
        LoadTextureEx(
            [in] Int32 target,
            [in] Int32 level,
            [in] Int32 border,
            [in] Int32 fallbackFormat,
            [in] Int32 fallbackType,
            [in] IETC1Texture* texture);

        /**
         * Check if ETC1 texture compression is supported by the active OpenGL ES context.
         * @return true if the active OpenGL ES context supports ETC1 texture compression.
         */
        IsETC1Supported(
            [out] Boolean* isSupported);

        /**
         * Create a new ETC1Texture from an input stream containing a PKM formatted compressed texture.
         * @param input an input stream containing a PKM formatted compressed texture.
         * @return an ETC1Texture read from the input stream.
         * @throws IOException
         */
        CreateTexture(
            [in] IInputStream* input,
            [out] IETC1Texture** texture);

        /**
         * Helper function that compresses an image into an ETC1Texture.
         * @param input a native order direct buffer containing the image data
         * @param width the width of the image in pixels
         * @param height the height of the image in pixels
         * @param pixelSize the size of a pixel in bytes (2 or 3)
         * @param stride the width of a line of the image in bytes
         * @return the ETC1 texture.
         */
        CompressTexture(
            [in] IBuffer* input,
            [in] Int32 width,
            [in] Int32 height,
            [in] Int32 pixelSize,
            [in] Int32 stride,
            [out] IETC1Texture** texture);

        /**
         * Helper function that writes an ETC1Texture to an output stream formatted as a PKM file.
         * @param texture the input texture.
         * @param output the stream to write the formatted texture data to.
         * @throws IOException
         */
        WriteTexture(
            [in] IETC1Texture* texture,
            [in] IOutputStream* output);
    }

    interface IETC1Texture {
        /**
         * Get the width of the texture in pixels.
         * @return the width of the texture in pixels.
         */
        GetWidth(
            [out] Int32* width);

        /**
         * Get the height of the texture in pixels.
         * @return the width of the texture in pixels.
         */
        GetHeight(
            [out] Int32* height);

        /**
         * Get the compressed data of the texture.
         * @return the texture data.
         */
        GetData(
            [out] IByteBuffer** data);
    }

    } // namespace Opengl
    } // namespace Droid
    } // namespace Elastos
}
