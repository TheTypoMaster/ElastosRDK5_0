
module
{
    interface Elastos.Droid.View.IViewGroup;

    namespace Elastos {
    namespace Droid {
    namespace Transition {

    /**
     * This class manages the set of transitions that fire when there is a
     * change of {@link Scene}. To use the manager, add scenes along with
     * transition objects with calls to {@link #setTransition(Scene, Transition)}
     * or {@link #setTransition(Scene, Scene, Transition)}. Setting specific
     * transitions for scene changes is not required; by default, a Scene change
     * will use {@link AutoTransition} to do something reasonable for most
     * situations. Specifying other transitions for particular scene changes is
     * only necessary if the application wants different transition behavior
     * in these situations.
     *
     * <p>TransitionManagers can be declared in XML resource files inside the
     * <code>res/transition</code> directory. TransitionManager resources consist of
     * the <code>transitionManager</code>tag name, containing one or more
     * <code>transition</code> tags, each of which describe the relationship of
     * that transition to the from/to scene information in that tag.
     * For example, here is a resource file that declares several scene
     * transitions:</p>
     *
     * {@sample development/samples/ApiDemos/res/transition/transitions_mgr.xml TransitionManager}
     *
     * <p>For each of the <code>fromScene</code> and <code>toScene</code> attributes,
     * there is a reference to a standard XML layout file. This is equivalent to
     * creating a scene from a layout in code by calling
     * {@link Scene#getSceneForLayout(ViewGroup, int, Context)}. For the
     * <code>transition</code> attribute, there is a reference to a resource
     * file in the <code>res/transition</code> directory which describes that
     * transition.</p>
     *
     * Information on XML resource descriptions for transitions can be found for
     * {@link android.R.styleable#Transition}, {@link android.R.styleable#TransitionSet},
     * {@link android.R.styleable#TransitionTarget}, {@link android.R.styleable#Fade},
     * and {@link android.R.styleable#TransitionManager}.
     */
    [local]
    interface ITransitionManager {

        /**
         * Sets the transition to be used for any scene change for which no
         * other transition is explicitly set. The initial value is
         * an {@link AutoTransition} instance.
         *
         * @param transition The default transition to be used for scene changes.
         *
         * @hide pending later changes
         */
        SetDefaultTransition(
            [in] ITransition* transition);

        /**
         * Sets a specific transition to occur when the given scene is entered.
         *
         * @param scene The scene which, when applied, will cause the given
         * transition to run.
         * @param transition The transition that will play when the given scene is
         * entered. A value of null will result in the default behavior of
         * using the default transition instead.
         */
        SetTransition(
            [in] IScene* scene,
            [in] ITransition* transition);

        /**
         * Sets a specific transition to occur when the given pair of scenes is
         * exited/entered.
         *
         * @param fromScene The scene being exited when the given transition will
         * be run
         * @param toScene The scene being entered when the given transition will
         * be run
         * @param transition The transition that will play when the given scene is
         * entered. A value of null will result in the default behavior of
         * using the default transition instead.
         */
        SetTransition(
            [in] IScene* fromScene,
            [in] IScene* toScene,
            [in] ITransition* transition);

        /**
         * Change to the given scene, using the
         * appropriate transition for this particular scene change
         * (as specified to the TransitionManager, or the default
         * if no such transition exists).
         *
         * @param scene The Scene to change to
         */
        TransitionTo(
            [in] IScene* scene);
    }

    [local]
    interface ITransitionManagerHelper {

        /**
         * Gets the current default transition. The initial value is an {@link
         * AutoTransition} instance.
         *
         * @return The current default transition.
         * @see #setDefaultTransition(Transition)
         *
         * @hide pending later changes
         */
        GetDefaultTransition(
            [out] ITransition** result);

        /**
         * Convenience method to simply change to the given scene using
         * the default transition for TransitionManager.
         *
         * @param scene The Scene to change to
         */
        Go(
            [in] IScene* scene);

        /**
         * Convenience method to simply change to the given scene using
         * the given transition.
         *
         * <p>Passing in <code>null</code> for the transition parameter will
         * result in the scene changing without any transition running, and is
         * equivalent to calling {@link Scene#exit()} on the scene root's
         * current scene, followed by {@link Scene#enter()} on the scene
         * specified by the <code>scene</code> parameter.</p>
         *
         * @param scene The Scene to change to
         * @param transition The transition to use for this scene change. A
         * value of null causes the scene change to happen with no transition.
         */
        Go(
            [in] IScene* scene,
            [in] ITransition* transition);

        /**
         * Convenience method to animate, using the default transition,
         * to a new scene defined by all changes within the given scene root between
         * calling this method and the next rendering frame.
         * Equivalent to calling {@link #beginDelayedTransition(ViewGroup, Transition)}
         * with a value of <code>null</code> for the <code>transition</code> parameter.
         *
         * @param sceneRoot The root of the View hierarchy to run the transition on.
         */
        BeginDelayedTransition(
            [in] IViewGroup* sceneRoot);

        /**
         * Convenience method to animate to a new scene defined by all changes within
         * the given scene root between calling this method and the next rendering frame.
         * Calling this method causes TransitionManager to capture current values in the
         * scene root and then post a request to run a transition on the next frame.
         * At that time, the new values in the scene root will be captured and changes
         * will be animated. There is no need to create a Scene; it is implied by
         * changes which take place between calling this method and the next frame when
         * the transition begins.
         *
         * <p>Calling this method several times before the next frame (for example, if
         * unrelated code also wants to make dynamic changes and run a transition on
         * the same scene root), only the first call will trigger capturing values
         * and exiting the current scene. Subsequent calls to the method with the
         * same scene root during the same frame will be ignored.</p>
         *
         * <p>Passing in <code>null</code> for the transition parameter will
         * cause the TransitionManager to use its default transition.</p>
         *
         * @param sceneRoot The root of the View hierarchy to run the transition on.
         * @param transition The transition to use for this change. A
         * value of null causes the TransitionManager to use the default transition.
         */
        BeginDelayedTransition(
            [in] IViewGroup* sceneRoot,
            [in] ITransition* transition);
    }

    } // Transition
    } // Droid
    } // Elastos
}
