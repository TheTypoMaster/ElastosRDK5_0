
module
{
    using interface Elastos.IO.IFileDescriptor;
    using interface Elastos.IO.IPrintWriter;

    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.ILoader;

    namespace Elastos {
    namespace Droid {
    namespace Content {

    /**
     * Interface that is implemented to discover when a Loader has finished
     * loading its data.  You do not normally need to implement this yourself;
     * it is used in the implementation of {@link android.app.LoaderManager}
     * to find out when a Loader it is managing has completed so that this can
     * be reported to its client.  This interface should only be used if a
     * Loader is not being used in conjunction with LoaderManager.
     */
    interface ILoaderOnLoadCompleteListener {
        /**
         * Called on the thread that created the Loader when the load is complete.
         *
         * @param loader the loader that completed the load
         * @param data the result of the load
         */
        OnLoadComplete(
            [in] ILoader* loader,
            [in] IInterface* data);
    }

    /**
     * Interface that is implemented to discover when a Loader has been canceled
     * before it finished loading its data.  You do not normally need to implement
     * this yourself; it is used in the implementation of {@link android.app.LoaderManager}
     * to find out when a Loader it is managing has been canceled so that it
     * can schedule the next Loader.  This interface should only be used if a
     * Loader is not being used in conjunction with LoaderManager.
     */
    interface ILoaderOnLoadCanceledListener {
        /**
         * Called on the thread that created the Loader when the load is canceled.
         *
         * @param loader the loader that canceled the load
         */
        OnLoadCanceled(
            [in] ILoader* loader);
    }

    [deprecated, local]
    interface ILoader {
        /**
         * Sends the result of the load to the registered listener. Should only be called by subclasses.
         *
         * Must be called from the process's main thread.
         *
         * @param data the result of the load
         */
        DeliverResult(
            [in] IInterface* data);

        /**
         * Informs the registered {@link OnLoadCanceledListener} that the load has been canceled.
         * Should only be called by subclasses.
         *
         * Must be called from the process's main thread.
         */
        DeliverCancellation();

        /**
         * @return an application context retrieved from the Context passed to the constructor.
         */
        GetContext(
            [out] IContext** context);

        /**
         * @return the ID of this loader
         */
        GetId(
            [out] Int32* id);

        /**
         * Registers a class that will receive callbacks when a load is complete.
         * The callback will be called on the process's main thread so it's safe to
         * pass the results to widgets.
         *
         * <p>Must be called from the process's main thread.
         */
        RegisterListener(
            [in] Int32 id,
            [in] ILoaderOnLoadCompleteListener* listener);

        /**
         * Remove a listener that was previously added with {@link #registerListener}.
         *
         * Must be called from the process's main thread.
         */
        UnregisterListener(
            [in] ILoaderOnLoadCompleteListener* listener);

        /**
         * Registers a listener that will receive callbacks when a load is canceled.
         * The callback will be called on the process's main thread so it's safe to
         * pass the results to widgets.
         *
         * Must be called from the process's main thread.
         *
         * @param listener The listener to register.
         */
        RegisterOnLoadCanceledListener(
            [in] ILoaderOnLoadCanceledListener* listener);

        /**
         * Unregisters a listener that was previously added with
         * {@link #registerOnLoadCanceledListener}.
         *
         * Must be called from the process's main thread.
         *
         * @param listener The listener to unregister.
         */
        UnregisterOnLoadCanceledListener(
            [in] ILoaderOnLoadCanceledListener* listener);

        /**
         * Return whether this load has been started.  That is, its {@link #startLoading()}
         * has been called and no calls to {@link #stopLoading()} or
         * {@link #reset()} have yet been made.
         */
        IsStarted(
            [out] Boolean* isStarted);

        /**
         * Return whether this loader has been abandoned.  In this state, the
         * loader <em>must not</em> report any new data, and <em>must</em> keep
         * its last reported data valid until it is finally reset.
         */
        IsAbandoned(
            [out] Boolean* isAbandoned);

        /**
         * Return whether this load has been reset.  That is, either the loader
         * has not yet been started for the first time, or its {@link #reset()}
         * has been called.
         */
        IsReset(
            [out] Boolean* isReset);

        /**
         * This function will normally be called for you automatically by
         * {@link android.app.LoaderManager} when the associated fragment/activity
         * is being started.  When using a Loader with {@link android.app.LoaderManager},
         * you <em>must not</em> call this method yourself, or you will conflict
         * with its management of the Loader.
         *
         * Starts an asynchronous load of the Loader's data. When the result
         * is ready the callbacks will be called on the process's main thread.
         * If a previous load has been completed and is still valid
         * the result may be passed to the callbacks immediately.
         * The loader will monitor the source of
         * the data set and may deliver future callbacks if the source changes.
         * Calling {@link #stopLoading} will stop the delivery of callbacks.
         *
         * <p>This updates the Loader's internal state so that
         * {@link #isStarted()} and {@link #isReset()} will return the correct
         * values, and then calls the implementation's {@link #onStartLoading()}.
         *
         * <p>Must be called from the process's main thread.
         */
        StartLoading();

        /**
         * Attempt to cancel the current load task.
         * Must be called on the main thread of the process.
         *
         * <p>Cancellation is not an immediate operation, since the load is performed
         * in a background thread.  If there is currently a load in progress, this
         * method requests that the load be canceled, and notes this is the case;
         * once the background thread has completed its work its remaining state
         * will be cleared.  If another load request comes in during this time,
         * it will be held until the canceled load is complete.
         *
         * @return Returns <tt>false</tt> if the task could not be canceled,
         * typically because it has already completed normally, or
         * because {@link #startLoading()} hasn't been called; returns
         * <tt>true</tt> otherwise.  When <tt>true</tt> is returned, the task
         * is still running and the {@link OnLoadCanceledListener} will be called
         * when the task completes.
         */
        CancelLoad(
            [out] Boolean* succeeded);

        /**
         * Force an asynchronous load. Unlike {@link #startLoading()} this will ignore a previously
         * loaded data set and load a new one.  This simply calls through to the
         * implementation's {@link #onForceLoad()}.  You generally should only call this
         * when the loader is started -- that is, {@link #isStarted()} returns true.
         *
         * <p>Must be called from the process's main thread.
         */
        ForceLoad();

        /**
         * This function will normally be called for you automatically by
         * {@link android.app.LoaderManager} when the associated fragment/activity
         * is being stopped.  When using a Loader with {@link android.app.LoaderManager},
         * you <em>must not</em> call this method yourself, or you will conflict
         * with its management of the Loader.
         *
         * <p>Stops delivery of updates until the next time {@link #startLoading()} is called.
         * Implementations should <em>not</em> invalidate their data at this point --
         * clients are still free to use the last data the loader reported.  They will,
         * however, typically stop reporting new data if the data changes; they can
         * still monitor for changes, but must not report them to the client until and
         * if {@link #startLoading()} is later called.
         *
         * <p>This updates the Loader's internal state so that
         * {@link #isStarted()} will return the correct
         * value, and then calls the implementation's {@link #onStopLoading()}.
         *
         * <p>Must be called from the process's main thread.
         */
        StopLoading();

        /**
         * This function will normally be called for you automatically by
         * {@link android.app.LoaderManager} when restarting a Loader.  When using
         * a Loader with {@link android.app.LoaderManager},
         * you <em>must not</em> call this method yourself, or you will conflict
         * with its management of the Loader.
         *
         * Tell the Loader that it is being abandoned.  This is called prior
         * to {@link #reset} to have it retain its current data but not report
         * any new data.
         */
        Abandon();

        /**
         * This function will normally be called for you automatically by
         * {@link android.app.LoaderManager} when destroying a Loader.  When using
         * a Loader with {@link android.app.LoaderManager},
         * you <em>must not</em> call this method yourself, or you will conflict
         * with its management of the Loader.
         *
         * Resets the state of the Loader.  The Loader should at this point free
         * all of its resources, since it may never be called again; however, its
         * {@link #startLoading()} may later be called at which point it must be
         * able to start running again.
         *
         * <p>This updates the Loader's internal state so that
         * {@link #isStarted()} and {@link #isReset()} will return the correct
         * values, and then calls the implementation's {@link #onReset()}.
         *
         * <p>Must be called from the process's main thread.
         */
        Reset();

        /**
         * Take the current flag indicating whether the loader's content had
         * changed while it was stopped.  If it had, true is returned and the
         * flag is cleared.
         */
        TakeContentChanged(
            [out] Boolean* succeeded);

        /**
         * Called when {@link ForceLoadContentObserver} detects a change.  The
         * default implementation checks to see if the loader is currently started;
         * if so, it simply calls {@link #forceLoad()}; otherwise, it sets a flag
         * so that {@link #takeContentChanged()} returns true.
         *
         * <p>Must be called from the process's main thread.
         */
        OnContentChanged();

        /**
         * For debugging, converts an instance of the Loader's data class to
         * a string that can be printed.  Must handle a null data.
         */
        DataToString(
            [in] IInterface* data,
            [out] String* str);

        ToString(
            [out] String* str);

        /**
         * Print the Loader's state into the given stream.
         *
         * @param prefix Text to print at the front of each line.
         * @param fd The raw file descriptor that the dump is being sent to.
         * @param writer A PrintWriter to which the dump is to be set.
         * @param args Additional arguments to the dump request.
         */
        Dump(
            [in] String prefix,
            [in] IFileDescriptor* fd,
            [in] IPrintWriter* writer,
            [in] ArrayOf<String>* args);
    }

    /**
     * @Involve
     * interface Elastos.Droid.Database.IContentObserver
     */
    interface ILoaderForceLoadContentObserver {

    }

    } // namespace Content
    } // namepsace Droid
    } // namespace Elastos
}
