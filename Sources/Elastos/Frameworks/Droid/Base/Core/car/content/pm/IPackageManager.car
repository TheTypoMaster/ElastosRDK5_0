
module
{
    interface Elastos.Droid.Content.Pm.IPackageInfo;
    interface Elastos.Droid.Content.Pm.IPermissionInfo;
    interface Elastos.Droid.Content.Pm.IPermissionGroupInfo;
    interface Elastos.Droid.Content.Pm.IApplicationInfo;
    interface Elastos.Droid.Content.Pm.IActivityInfo;
    interface Elastos.Droid.Content.Pm.IServiceInfo;
    interface Elastos.Droid.Content.Pm.IProviderInfo;
    interface Elastos.Droid.Content.Pm.IResolveInfo;
    interface Elastos.Droid.Content.Pm.IParceledListSlice;
    interface Elastos.Droid.Content.Pm.IInstrumentationInfo;
    interface Elastos.Droid.Content.Pm.IPackageInstallObserver;
    interface Elastos.Droid.Content.Pm.IPackageDeleteObserver;
    interface Elastos.Droid.Content.Pm.IPackageCleanItem;
    interface Elastos.Droid.Content.Pm.IManifestDigest;
    interface Elastos.Droid.Content.Pm.IContainerEncryptionParams;
    interface Elastos.Droid.Content.Pm.IVerificationParams;
    interface Elastos.Droid.Content.Pm.IVerifierDeviceIdentity;
    interface Elastos.Droid.Content.Pm.IPackageStatsObserver;
    interface Elastos.Droid.Content.Pm.IPackageMoveObserver;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Content.IComponentName;
    interface Elastos.Droid.Content.IIntentFilter;
    interface Elastos.Droid.Content.IIntentSender;
    interface Elastos.Droid.Net.IUri;

    namespace Elastos {
    namespace Droid {
    namespace Content {
    namespace Pm {

    /**
     *  See PackageManager for documentation on most of the APIs
     *  here.
     *
     * @sa PackageManager
     *
     *  {@hide}
     */
    [deprecated]
    interface IIPackageManager {
        GetPackageInfo(
            [in] String packageName,
            [in] Int32 flags,
            [in] Int32 userId,
            [out] IPackageInfo** info);

        GetPackageUid(
            [in] String packageName,
            [in] Int32 userId,
            [out] Int32* uid);

        GetPackageGids(
            [in] String packageName,
            [out, callee] ArrayOf<Int32>* gids);

        CurrentToCanonicalPackageNames(
            [in] ArrayOf<String> cuNames,
            [out, callee] ArrayOf<String>* caNames);

        CanonicalToCurrentPackageNames(
            [in] ArrayOf<String> caNames,
            [out, callee] ArrayOf<String>* cuNames);

        GetPermissionInfo(
            [in] String name,
            [in] Int32 flags,
            [out] IPermissionInfo** info);

        QueryPermissionsByGroup(
            [in] String group,
            [in] Int32 flags,
            [out] IObjectContainer** infos);

        GetPermissionGroupInfo(
            [in] String name,
            [in] Int32 flags,
            [out] IPermissionGroupInfo** info);

        GetAllPermissionGroups(
            [in] Int32 flags,
            [out] IObjectContainer** infos);

        GetApplicationInfo(
            [in] String packageName,
            [in] Int32 flags,
            [in] Int32 userId,
            [out] IApplicationInfo** info);

        GetActivityInfo(
            [in] IComponentName* className,
            [in] Int32 flags,
            [in] Int32 userId,
            [out] IActivityInfo** info);

        GetReceiverInfo(
            [in] IComponentName* className,
            [in] Int32 flags,
            [in] Int32 userId,
            [out] IActivityInfo** info);

        GetServiceInfo(
            [in] IComponentName* className,
            [in] Int32 flags,
            [in] Int32 userId,
            [out] IServiceInfo** info);

        GetProviderInfo(
            [in] IComponentName* className,
            [in] Int32 flags,
            [in] Int32 userId,
            [out] IProviderInfo** info);

        CheckPermission(
            [in] String permName,
            [in] String pkgName,
            [out] Int32* result);

        CheckUidPermission(
            [in] String permName,
            [in] Int32 uid,
            [out] Int32* result);

        AddPermission(
            [in] IPermissionInfo* info,
            [out] Boolean* result);

        RemovePermission(
            [in] String name);

        GrantPermission(
            [in] String packageName,
            [in] String permissionName);

        RevokePermission(
            [in] String packageName,
            [in] String permissionName);

        IsProtectedBroadcast(
            [in] String actionName,
            [out] Boolean* result);

        CheckSignatures(
            [in] String pkg1,
            [in] String pkg2,
            [out] Int32* result);

        CheckUidSignatures(
            [in] Int32 uid1,
            [in] Int32 uid2,
            [out] Int32* result);

        GetPackagesForUid(
            [in] Int32 uid,
            [out, callee] ArrayOf<String>* pkgs);

        GetNameForUid(
            [in] Int32 uid,
            [out] String* name);

        GetUidForSharedUser(
            [in] String sharedUserName,
            [out] Int32* uid);

        ResolveIntent(
            [in] IIntent* intent,
            [in] String resolvedType,
            [in] Int32 flags,
            [in] Int32 userId,
            [out] IResolveInfo** info);

        QueryIntentActivities(
            [in] IIntent* intent,
            [in] String resolvedType,
            [in] Int32 flags,
            [in] Int32 userId,
            [out] IObjectContainer** infos);

        QueryIntentActivityOptions(
            [in] IComponentName* caller,
            [in] ArrayOf<IIntent*>* specifics,
            [in] ArrayOf<String>* specificTypes,
            [in] IIntent* intent,
            [in] String resolvedType,
            [in] Int32 flags,
            [in] Int32 userId,
            [out] IObjectContainer** infos);

        QueryIntentReceivers(
            [in] IIntent* intent,
            [in] String resolvedType,
            [in] Int32 flags,
            [in] Int32 userId,
            [out] IObjectContainer** receivers);

        ResolveService(
            [in] IIntent* intent,
            [in] String resolvedType,
            [in] Int32 flags,
            [in] Int32 userId,
            [out] IResolveInfo** resolveInfo);

        QueryIntentServices(
            [in] IIntent* intent,
            [in] String resolvedType,
            [in] Int32 flags,
            [in] Int32 userId,
            [out] IObjectContainer** infos);

        /**
         * This implements getInstalledPackages via a "last returned row"
         * mechanism that is not exposed in the API. This is to get around the IPC
         * limit that kicks in when flags are included that bloat up the data
         * returned.
         */
        GetInstalledPackages(
            [in] Int32 flags,
            [in] String lastRead,
            [in] Int32 userId,
            [out] IParceledListSlice** slice);

        /**
         * This implements getInstalledApplications via a "last returned row"
         * mechanism that is not exposed in the API. This is to get around the IPC
         * limit that kicks in when flags are included that bloat up the data
         * returned.
         */
        GetInstalledApplications(
            [in] Int32 flags,
            [in] String lastRead,
            [in] Int32 userId,
            [out] IParceledListSlice** slice);

        /**
         * Retrieve all applications that are marked as persistent.
         *
         * @return A List&lt;applicationInfo> containing one entry for each persistent
         *         application.
         */
        GetPersistentApplications(
            [in] Int32 flags,
            [out] IObjectContainer** infos);

        ResolveContentProvider(
            [in] String name,
            [in] Int32 flags,
            [in] Int32 userId,
            [out] IProviderInfo** info);

        /**
         * Retrieve sync information for all content providers.
         *
         * @param outNames Filled in with a list of the root names of the content
         *                 providers that can sync.
         * @param outInfo Filled in with a list of the ProviderInfo for each
         *                name in 'outNames'.
         */
        QuerySyncProviders(
            [in/*, out */] IObjectContainer* outNames,
            [in/*, out */] IObjectContainer* outInfo);

        QueryContentProviders(
            [in] String processName,
            [in] Int32 uid,
            [in] Int32 flags,
            [out] IObjectContainer** providers);

        GetInstrumentationInfo(
            [in] IComponentName* className,
            [in] Int32 flags,
            [out] IInstrumentationInfo** info);

        QueryInstrumentation(
            [in] String targetPackage,
            [in] Int32 flags,
            [out] IObjectContainer** infos);

        /**
         * Install a package.
         *
         * @param packageURI The location of the package file to install.
         * @param observer a callback to use to notify when the package installation in finished.
         * @param flags - possible values: #FORWARD_LOCK_PACKAGE,
         * #REPLACE_EXISITING_PACKAGE
         * @param installerPackageName Optional package name of the application that is performing the
         * installation. This identifies which market the package came from.
         *
         * @sa #FORWARD_LOCK_PACKAGE
         * @sa #REPLACE_EXISITING_PACKAGE
         */
        InstallPackage(
            [in] IUri* packageURI,
            [in] IPackageInstallObserver* observer,
            [in] Int32 flags,
            [in] String installerPackageName);

        FinishPackageInstall(
            [in] Int32 token);

        SetInstallerPackageName(
            [in] String targetPackage,
            [in] String installerPackageName);

        /**
         * Delete a package.
         *
         * @param packageName The fully qualified name of the package to delete.
         * @param observer a callback to use to notify when the package deletion in finished.
         * @param flags - possible values: #DONT_DELETE_DATA
         *
         * @sa #DONT_DELETE_DATA
         */
        DeletePackage(
            [in] String packageName,
            [in] IPackageDeleteObserver* observer,
            [in] Int32 flags);

        GetInstallerPackageName(
            [in] String packageName,
            [out] String* pkgName);

        AddPackageToPreferred(
            [in] String packageName);

        RemovePackageFromPreferred(
            [in] String packageName);

        GetPreferredPackages(
            [in] Int32 flags,
            [out] IObjectContainer** infos);

        AddPreferredActivity(
            [in] IIntentFilter* filter,
            [in] Int32 match,
            [in] ArrayOf<IComponentName*>* set,
            [in] IComponentName* activity,
            [in] Int32 userId);

        ReplacePreferredActivity(
            [in] IIntentFilter* filter,
            [in] Int32 match,
            [in] ArrayOf<IComponentName*>* set,
            [in] IComponentName* activity);

        ClearPackagePreferredActivities(
            [in] String packageName);

        GetPreferredActivities(
            [in/*, out */] IObjectContainer* outFilters,
            [in/*, out */] IObjectContainer* outActivities,
            [in] String packageName,
            [out] Int32* value);

        /**
         * As per android.content.pm.PackageManager#setComponentEnabledSetting.
         *
         * @sa android.content.pm.PackageManager#setComponentEnabledSetting
         */
        SetComponentEnabledSetting(
            [in] IComponentName* componentName,
            [in] Int32 newState,
            [in] Int32 flags,
            [in] Int32 userId);

        /**
         * As per android.content.pm.PackageManager#getComponentEnabledSetting.
         *
         * @sa android.content.pm.PackageManager#getComponentEnabledSetting
         */
        GetComponentEnabledSetting(
            [in] IComponentName* componentName,
            [in] Int32 userId,
            [out] Int32* value);

        /**
         * As per android.content.pm.PackageManager#setApplicationEnabledSetting.
         *
         * @sa android.content.pm.PackageManager#setApplicationEnabledSetting
         */
        SetApplicationEnabledSetting(
            [in] String packageName,
            [in] Int32 newState,
            [in] Int32 flags,
            [in] Int32 userId);

        /**
         * As per android.content.pm.PackageManager#getApplicationEnabledSetting.
         *
         * @sa android.content.pm.PackageManager#setApplicationEnabledSetting
         */
        GetApplicationEnabledSetting(
            [in] String packageName,
            [in] Int32 userId,
            [out] Int32* value);

        /**
         * Set whether the given package should be considered stopped, making
         * it not visible to implicit intents that filter out stopped packages.
         */
        SetPackageStoppedState(
            [in] String packageName,
            [in] Boolean stopped,
            [in] Int32 userId);

        /**
         * Free storage by deleting LRU sorted list of cache files across
         * all applications. If the currently available free storage
         * on the device is greater than or equal to the requested
         * free storage, no cache files are cleared. If the currently
         * available storage on the device is less than the requested
         * free storage, some or all of the cache files across
         * all applications are deleted (based on last accessed time)
         * to increase the free storage space on the device to
         * the requested value. There is no guarantee that clearing all
         * the cache files from all applications will clear up
         * enough storage to achieve the desired value.
         * @param freeStorageSize The number of bytes of storage to be
         * freed by the system. Say if freeStorageSize is XX,
         * and the current free storage is YY,
         * if XX is less than YY, just return. if not free XX-YY number
         * of bytes if possible.
         * @param observer call back used to notify when
         * the operation is completed
         */
        FreeStorageAndNotify(
            [in] Int64 freeStorageSize,
            [in] IPackageDataObserver* observer);

        /**
         * Free storage by deleting LRU sorted list of cache files across
         * all applications. If the currently available free storage
         * on the device is greater than or equal to the requested
         * free storage, no cache files are cleared. If the currently
         * available storage on the device is less than the requested
         * free storage, some or all of the cache files across
         * all applications are deleted (based on last accessed time)
         * to increase the free storage space on the device to
         * the requested value. There is no guarantee that clearing all
         * the cache files from all applications will clear up
         * enough storage to achieve the desired value.
         * @param freeStorageSize The number of bytes of storage to be
         * freed by the system. Say if freeStorageSize is XX,
         * and the current free storage is YY,
         * if XX is less than YY, just return. if not free XX-YY number
         * of bytes if possible.
         * @param pi IntentSender call back used to
         * notify when the operation is completed.May be null
         * to indicate that no call back is desired.
         */
        FreeStorage(
            [in] Int64 freeStorageSize,
            [in] IIntentSender* pi);

        /**
         * Delete all the cache files in an applications cache directory
         * @param packageName The package name of the application whose cache
         * files need to be deleted
         * @param observer a callback used to notify when the deletion is finished.
         */
        DeleteApplicationCacheFiles(
            [in] String packageName,
            [in] IPackageDataObserver* observer);

        /**
         * Clear the user data directory of an application.
         * @param packageName The package name of the application whose cache
         * files need to be deleted
         * @param observer a callback used to notify when the operation is completed.
         */
        ClearApplicationUserData(
            [in] String packageName,
            [in] IPackageDataObserver* observer,
            [in] Int32 userId);

        /**
         * Get package statistics including the code, data and cache size for
         * an already installed package
         * @param packageName The package name of the application
         * @param userHandle Which user the size should be retrieved for
         * @param observer a callback to use to notify when the asynchronous
         * retrieval of information is complete.
         */
        GetPackageSizeInfo(
            [in] String packageName,
            [in] Int32 userHandle,
            [in] IPackageStatsObserver* observer);

        /**
         * Get a list of shared libraries that are available on the
         * system.
         */
        GetSystemSharedLibraryNames(
            [out, callee] ArrayOf<String>* names);

        /**
         * Get a list of features that are available on the
         * system.
         */
        GetSystemAvailableFeatures(
            [out, callee] ArrayOf<IFeatureInfo*>* infos);

        HasSystemFeature(
            [in] String name,
            [out] Boolean* result);

        EnterSafeMode();

        IsSafeMode(
            [out] Boolean* isSafeMode);

        SystemReady();

        HasSystemUidErrors(
            [out] Boolean* result);

        /**
         * Ask the package manager to perform boot-time dex-opt of all
         * existing packages.
         */
        PerformBootDexOpt();

        /**
         * Ask the package manager to perform dex-opt (if needed) on the given
         * package, if it already hasn't done mode.  Only does this if running
         * in the special development "no pre-dexopt" mode.
         */
        PerformDexOpt(
            [in] String packageName,
            [out] Boolean* result);

        /**
         * Update status of external media on the package manager to scan and
         * install packages installed on the external media. Like say the
         * MountService uses this to call into the package manager to update
         * status of sdcard.
         */
        UpdateExternalMediaStatus(
            [in] Boolean mounted,
            [in] Boolean reportStatus);

        NextPackageToClean(
            [in] IPackageCleanItem* lastPackage,
            [out] IPackageCleanItem** nextPackage);

        MovePackage(
            [in] String packageName,
            [in] IPackageMoveObserver* observer,
            [in] Int32 flags);

        AddPermissionAsync(
            [in] IPermissionInfo* info,
            [out] Boolean* result);

        SetInstallLocation(
            [in] Int32 loc,
            [out] Boolean* result);

        GetInstallLocation(
            [out] Int32* location);

        InstallPackageWithVerification(
            [in] IUri* packageURI,
            [in] IPackageInstallObserver* observer,
            [in] Int32 flags,
            [in] String installerPackageName,
            [in] IUri* verificationURI,
            [in] IManifestDigest* manifestDigest,
            [in] IContainerEncryptionParams* encryptionParams);

        InstallPackageWithVerificationAndEncryption(
            [in] IUri* packageURI,
            [in] IPackageInstallObserver* observer,
            [in] Int32 flags,
            [in] String installerPackageName,
            [in] IVerificationParams* verificationParams,
            [in] IContainerEncryptionParams* encryptionParams);

        InstallExistingPackage(
            [in] String packageName,
            [out] Int32* result);

        VerifyPendingInstall(
            [in] Int32 id,
            [in] Int32 verificationCode);

        ExtendVerificationTimeout(
            [in] Int32 id,
            [in] Int32 verificationCodeAtTimeout,
            [in] Int64 millisecondsToDelay);

        GetVerifierDeviceIdentity(
            [out] IVerifierDeviceIdentity** identity);

        IsFirstBoot(
            [out] Boolean* result);

        IsOnlyCoreApps(
            [out] Boolean* result);

        SetPermissionEnforced(
            [in] String permission,
            [in] Boolean enforced);

        IsPermissionEnforced(
            [in] String permission,
            [out] Boolean* result);

        /** Reflects current DeviceStorageMonitorService state */
        IsStorageLow(
            [out] Boolean* result);
    }

    } // namespace Pm
    } // namespace Content
    } // namespace Droid
    } // namespace Elastos
}
