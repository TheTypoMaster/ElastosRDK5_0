
module
{
    using interface Org.Xmlpull.V1.IXmlPullParser;

    interface Elastos.Droid.Content.Res.IResources;

    namespace Elastos {
    namespace Droid {
    namespace Content {
    namespace Res {


    /**
     * Lets you map View state sets to colors. ColorStateLists are created from XML
     * resource files defined in the "color" subdirectory directory of an
     * application's resource directory. The XML file contains a single "selector"
     * element with a number of "item" elements inside. For example:
     *
     * @sa View
     * @sa ColorStateLists
     * <pre>
     * <selector xmlns:android="http://schemas.android.com/apk/res/android">
     * <item android:state_focused="true" android:color="@color/testcolor1"/>
     * <item android:state_pressed="true" android:state_enabled="false" android:color="@color/testcolor2" />
     * <item android:state_enabled="false" android:color="@color/testcolor3" />
     * <item android:color="@color/testcolor5"/>
     * </selector>
     * </pre>
     * This defines a set of state spec / color pairs where each state spec
     * specifies a set of states that a view must either be in or not be in and the
     * color specifies the color associated with that spec. The list of state specs
     * will be processed in order of the items in the XML file. An item with no
     * state spec is considered to match any set of states and is generally useful
     * as a final item to be used as a default. Note that if you have such an item
     * before any other items in the list then any subsequent items will end up
     * being ignored.
     * <p>
     * For more information, see the guide to Color State List Resource.
     *
     * @sa Color State List Resource
     */

    [deprecated]
    interface IColorStateList {
        /**
         * Creates a new ColorStateList that has the same states and
         * colors as this one but where each color has the specified alpha value
         * (0-255).
         */
        WithAlpha(
            [in] Int32 alpha,
            [out] IColorStateList** colors);

        /**
         * Indicates whether this color state list contains more than one state spec
         * and will change color based on state.
         *
         * @return True if this color state list changes color based on state, false
         *         otherwise.
         * @see #getColorForState(int[], int)
         */
        IsStateful(
            [out] Boolean* isStateful);

        /**
         * Indicates whether this color state list is opaque, which means that every
         * color returned from {@link #getColorForState(int[], int)} has an alpha
         * value of 255.
         *
         * @return True if this color state list is opaque.
         */
        IsOpaque(
            [out] Boolean* isStateful);

        /**
         * Return the color associated with the given set of android.view.View states.
         *
         * @param stateSet an array of android.view.View states
         * @param defaultColor the color to return if there's not state spec in this
         * ColorStateList that matches the stateSet.
         *
         * @return the color associated with that set of states in this ColorStateList.
         *
         * @sa android.view.View
         * @sa ColorStateList
         *
         */
        GetColorForState(
            [in] ArrayOf<Int32>* stateSet,
            [in] Int32 defaultColor,
            [out] Int32* color);

        /**
         * Return the default color in this ColorStateList.
         *
         * @sa ColorStateList
         * @return the default color in this ColorStateList.
         */
        GetDefaultColor(
            [out] Int32* color);
    }

    interface IColorStateListHelper {
        /**
        * Creates or retrieves a ColorStateList that always returns a single color.
        */
        ValueOf(
            [in] Int32 color,
            [out] IColorStateList** list);

        /**
        * Create a ColorStateList from an XML document, given a set of Resources.
        *
        * @sa Resources
        */
        CreateFromXml(
            [in] IResources* r,
            [in] IXmlPullParser* parser,
            [out] IColorStateList** list);
    }

    } // namespace Res
    } // namespace Content
    } // namespace Droid
    } // namespace Elastos
}
