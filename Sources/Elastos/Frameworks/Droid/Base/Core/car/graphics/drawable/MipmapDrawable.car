module
{
    namespace Elastos {
    namespace Droid {
    namespace Graphics {
    namespace Drawable {

        /**
         * @hide -- we are probably moving to do MipMaps in another way (more integrated
         * with the resource system).
         *
         * A resource that manages a number of alternate Drawables, and which actually draws the one which
         * size matches the most closely the drawing bounds. Providing several pre-scaled version of the
         * drawable helps minimizing the aliasing artifacts that can be introduced by the scaling.
         *
         * <p>
         * Use addDrawable to define the different Drawables that will represent the
         * mipmap levels of this MipmapDrawable. 
         *
         * @sa #addDrawable(Drawable)
         * The mipmap Drawable that will actually be used when this
         * MipmapDrawable is drawn is the one which has the smallest intrinsic height greater or equal than
         * the bounds' height. This selection ensures that the best available mipmap level is scaled down to
         * draw this MipmapDrawable.
         * </p>
         *
         * If the bounds' height is larger than the largest mipmap, the largest mipmap will be scaled up.
         * Note that Drawables without intrinsic height (i.e. with a negative value, such as Color) will
         * only be used if no other mipmap Drawable are provided. The Drawables' intrinsic heights should
         * not be changed after the Drawable has been added to this MipmapDrawable.
         *
         * <p>
         * The different mipmaps' parameters (opacity, padding, color filter, gravity...) should typically
         * be similar to ensure a continuous visual appearance when the MipmapDrawable is scaled. The aspect
         * ratio of the different mipmaps should especially be equal.
         * </p>
         *
         * A typical example use of a MipmapDrawable would be for an image which is intended to be scaled at
         * various sizes, and for which one wants to provide pre-scaled versions to precisely control its
         * appearance.
         *
         * <p>
         * The intrinsic size of a MipmapDrawable are inferred from those of the largest mipmap (in terms of
         * getIntrinsicHeight). 
         *
         * @sa Drawable#getIntrinsicHeight()
         * On the opposite, its minimum
         * size is defined by the smallest provided mipmap.
         * </p>

         * It can be defined in an XML file with the <code>&lt;mipmap></code> element.
         * Each mipmap Drawable is defined in a nested <code>&lt;item></code>. For example:
         * <pre>
         *  &lt;mipmap xmlns:android="http://schemas.android.com/apk/res/android">
         *  &lt;item android:drawable="@drawable/my_image_8" />
         *  &lt;item android:drawable="@drawable/my_image_32" />
         *  &lt;item android:drawable="@drawable/my_image_128" />
         *  &lt;/mipmap>
         * </pre>
         * <p>
         * With this XML saved into the res/drawable/ folder of the project, it can be referenced as
         * the drawable for an ImageView. 
         *
         * @sa android.widget.ImageView
         * Assuming that the heights of the provided
         * drawables are respectively 8, 32 and 128 pixels, the first one will be scaled down when the
         * bounds' height is lower or equal than 8 pixels. The second drawable will then be used up to a
         * height of 32 pixels and the largest drawable will be used for greater heights.
         * </p>
         * @attr ref android.R.styleable#MipmapDrawableItem_drawable
         */
        interface IMipmapDrawable extends IDrawableContainer {
            /**
             * Adds a Drawable to the list of available mipmap Drawables. The Drawable actually used when
             * this MipmapDrawable is drawn is determined from its bounds.
             *
             * This method has no effect if drawable is null.
             *
             * @param drawable The Drawable that will be added to list of available mipmap Drawables.
             */

            AddDrawable(
                [in] IDrawable* drawable);
        }

    } // namespace Drawable
    } // namespace Graphics
    } // namespace Droid
    } // namespace Elastos
}
