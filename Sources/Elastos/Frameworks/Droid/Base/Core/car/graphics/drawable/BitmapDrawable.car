
module
{
    enum Elastos.Droid.Graphics.ShaderTileMode;
    interface Elastos.Droid.Utility.IDisplayMetrics;
    interface Elastos.Droid.Graphics.IBitmap;
    interface Elastos.Droid.Graphics.ICanvas;
    interface Elastos.Droid.Graphics.IPaint;

    namespace Elastos {
    namespace Droid {
    namespace Graphics {
    namespace Drawable {

    /**
     * A Drawable that wraps a bitmap and can be tiled, stretched, or aligned. You can create a
     * BitmapDrawable from a file path, an input stream, through XML inflation, or from
     * a  android object something like :
     *
     * @sa android.graphics.Bitmap
     * <p>It can be defined in an XML file with the <code>&lt;bitmap></code> element.  For more
     * information, see the guide to <a
     * href="{@docRoot}guide/topics/resources/drawable-resource.html">Drawable Resources</a>.</p>
     * <p>
     * Also see the android class, something is link to
     *
     * @sa android.graphics.Bitmap
     * which handles the management and
     * transformation of raw bitmap graphics, and should be used when drawing to a
     *
     * @sa android.graphics.Canvas
     *.
     * </p>
     *
     * @attr ref android.R.styleable#BitmapDrawable_src
     * @attr ref android.R.styleable#BitmapDrawable_antialias
     * @attr ref android.R.styleable#BitmapDrawable_filter
     * @attr ref android.R.styleable#BitmapDrawable_dither
     * @attr ref android.R.styleable#BitmapDrawable_gravity
     * @attr ref android.R.styleable#BitmapDrawable_tileMode
     */

     /**
    * A Drawable is a general abstraction for "something that can be drawn." Most often
    * you will deal with Drawable as the type of resource retrieved for drawing things
    * to the screen; the Drawable class provides a generic API for dealing with an
    * underlying visual resource that may take a variety of forms. Unlike a View, a
    * Drawable does not have any facility to receive events or otherwise interact with
    * the user.
    *
    * @sa  View
    * <p>
    * In addition to simple drawing, Drawable provides a number of generic mechanisms
    * for its client to interact with what is being drawn:
    * <p>
    * The setBounds(Rect) method must be called to tell the Drawable where it is drawn
    * and how large it should be. All Drawables should respect the requested size,
    * often simply by scaling their imagery. A client can find the preferred size for
    * some Drawables with the getIntrinsicHeight() and getIntrinsicWidth() methods.
    *
    * @sa setBounds(Rect)
    * @sa getIntrinsicHeight()
    * @sa getIntrinsicWidth()
    * <p>
    * The getPadding(Rect) method can return from some Drawables information about how
    * to frame content that is placed inside of them. For example, a Drawable that is
    * intended to be the frame for a button widget would need to return padding that
    * correctly places the label inside of itself.
    *
    * @sa getPadding(Rect)
    * <p>
    * The setState(int[]) method allows the client to tell the Drawable in which state
    * it is to be drawn, such as "focused", "selected", etc. Some drawables may modify
    * their imagery based on the selected state.
    *
    * @sa setState(int[])
    * <p>
    * The setLevel(int) method allows the client to supply a single continuous
    * controller that can modify the Drawable is displayed, such as a battery level or
    * progress level. Some drawables may modify their imagery based on the current
    * level.
    *
    * @sa setLevel(int)
    * <p>
    * A Drawable can perform animations by calling back to its client through the
    * Drawable.Callback interface. All clients should support this interface
    * (via setCallback(Drawable.Callback)) so that animations will work. A simple way
    * to do this is through the system facilities such as
    * (setBackgroundDrawable(Drawable) and ImageView.
    *
    * @sa Drawable.Callback
    * @sa setCallback(Drawable.Callback
    * @sa setBackgroundDrawable(Drawable)
    * @sa ImageView
    * <p>
    * Though usually not visible to the application, Drawables may take a variety of
    * forms:
    * Bitmap: the simplest Drawable, a PNG or JPEG image.
    * Nine Patch: an extension to the PNG format allows it to specify information about
    * how to stretch it and place things inside of it.
    * Shape: contains simple drawing commands instead of a raw bitmap, allowing it to
    * resize better in some cases.
    * Layers: a compound drawable, which draws multiple underlying drawables on top of
    * each other.
    * States: a compound drawable that selects one of a set of drawables based on its
    * state.
    * Levels: a compound drawable that selects one of a set of drawables based on its
    * level.
    * Scale: a compound drawable with a single child drawable, whose overall size is
    * modified based on the current level.
    *
    * @implements Elastos.Droid.Graphics.Drawable.IDrawable
    */
    /**
     * @Involve
     * interface IDrawable
     */
    interface IBitmapDrawable {
        /**
         * Returns the bitmap used by this drawable to render. May be null.
         */
        GetBitmap(
            [out] IBitmap** bitmap);

        /** Get the gravity used to position/stretch the bitmap within its bounds.
         * See android.view.Gravity
         * @return the gravity applied to the bitmap
         */
        GetGravity(
            [out] Int32* gravity);

        /**
         * Returns the paint used to render this drawable.
         */
        GetPaint(
            [out] IPaint** paint);

        /**
         * Indicates the repeat behavior of this drawable on the X axis.
         *
         * if the bitmap does not repeat,
         *
         * @sa Shader.TileMode#REPEAT
         * or
         * @sa Shader.TileMode#MIRROR
         * otherwise,
         * @return
         *
         * @sa Shader.TileMode#CLAMP
         *
         */
        GetTileModeX(
            [out] ShaderTileMode* tileModeX);

        /**
         * Indicates the repeat behavior of this drawable on the Y axis.
        *
         * if the bitmap does not repeat,
         *
         * @sa Shader.TileMode#REPEAT
         * or
         * @sa Shader.TileMode#MIRROR
         * otherwise,
         * @return
         *
         * @sa Shader.TileMode#CLAMP
         *
         */
        GetTileModeY(
            [out] ShaderTileMode* tileModeY);

        /**
         * Enables or disables anti-aliasing for this drawable. Anti-aliasing affects
         * the edges of the bitmap only so it applies only when the drawable is rotated.
         *
         * @param aa True if the bitmap should be anti-aliased, false otherwise.
         */
        SetAntiAlias(
            [in] Boolean aa);

        /** Set the gravity used to position/stretch the bitmap within its bounds.
         *  See android.view.Gravity
         * @param gravity the gravity
         */
        SetGravity(
            [in] Int32 gravity);

        /**
         * Set the density scale at which this drawable will be rendered. This
         * method assumes the drawable will be rendered at the same density as the
         * specified canvas.
         *
         * @param canvas The Canvas from which the density scale must be obtained.
         *
         * @see android.graphics.Bitmap#setDensity(Int32)
         * @see android.graphics.Bitmap#getDensity()
         */
        SetTargetDensity(
            [in] ICanvas* canvas);

        /**
         * Set the density scale at which this drawable will be rendered.
         *
         * @param metrics The DisplayMetrics indicating the density scale for this drawable.
         *
         * @see android.graphics.Bitmap#setDensity(Int32)
         * @see android.graphics.Bitmap#getDensity()
         */
        SetTargetDensity(
            [in] IDisplayMetrics* metrics);

        /**
         * Set the density at which this drawable will be rendered.
         *
         * @param density The density scale for this drawable.
         *
         * @see android.graphics.Bitmap#setDensity(Int32)
         * @see android.graphics.Bitmap#getDensity()
         */
        SetTargetDensity(
            [in] Int32 density);

        /**
         * Sets the repeat behavior of this drawable on the X axis. By default, the drawable
         * does not repeat its bitmap. Using something like these:
         *
         * @sa Shader.TileMode#REPEAT
         * or
         *
         * @sa Shader.TileMode#MIRROR
         * the bitmap can be repeated (or tiled) if the bitmap
         * is smaller than this drawable.
         *
         * @param mode The repeat mode for this drawable.
         *
         * @see #setTileModeY(android.graphics.Shader.TileMode)
         * @see #setTileModeXY(android.graphics.Shader.TileMode, android.graphics.Shader.TileMode)
         */
        SetTileModeX(
            [in] ShaderTileMode mode);

        /**
         * Sets the repeat behavior of this drawable on both axis. By default, the drawable
         * does not repeat its bitmap. Using something like these:
         *
         * @sa Shader.TileMode#REPEAT
         *
         * or
         * @sa Shader.TileMode#MIRROR
         * the bitmap can be repeated (or tiled) if the bitmap
         * is smaller than this drawable.
         *
         * @param xmode The X repeat mode for this drawable.
         * @param ymode The Y repeat mode for this drawable.
         *
         * @see #setTileModeX(android.graphics.Shader.TileMode)
         * @see #setTileModeY(android.graphics.Shader.TileMode)
         */
        SetTileModeXY(
            [in] ShaderTileMode xmode,
            [in] ShaderTileMode ymode);

        /**
         * Sets the repeat behavior of this drawable on the Y axis. By default, the drawable
         * does not repeat its bitmap. Using something like these:
         *
         * @sa Shader.TileMode#REPEAT
         * or
         *
         * @sa Shader.TileMode#MIRROR
         * the bitmap can be repeated (or tiled) if the bitmap
         * is smaller than this drawable.
         *
         * @param mode The repeat mode for this drawable.
         *
         * @see #setTileModeX(android.graphics.Shader.TileMode)
         * @see #setTileModeXY(android.graphics.Shader.TileMode, android.graphics.Shader.TileMode)
         */
        SetTileModeY(
            [in] ShaderTileMode mode);
    }

    } // namespace Drawable
    } // namespace Graphics
    } // namespace Droid
    } // namespace Elastos
}
