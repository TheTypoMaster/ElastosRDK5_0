module
{
    namespace Elastos {
    namespace Droid {
    namespace Graphics {

    interface IImageFormat {
        /*
        * these constants are chosen to be binary compatible with their previous
        * location in PixelFormat.java
        */
        const Int32 UNKNOWN = 0;

        /**
         * RGB format used for pictures encoded as RGB_565. See
         * {@link android.hardware.Camera.Parameters#setPictureFormat(int)}.
         */
        const Int32 RGB_565 = 4;

        /**
         * <p>Android YUV format.</p>
         *
         * <p>This format is exposed to software decoders and applications.</p>
         *
         * <p>YV12 is a 4:2:0 YCrCb planar format comprised of a WxH Y plane followed
         * by (W/2) x (H/2) Cr and Cb planes.</p>
         *
         * <p>This format assumes
         * <ul>
         * <li>an even width</li>
         * <li>an even height</li>
         * <li>a horizontal stride multiple of 16 pixels</li>
         * <li>a vertical stride equal to the height</li>
         * </ul>
         * </p>
         *
         * <pre> y_size = stride * height
         * c_stride = ALIGN(stride/2, 16)
         * c_size = c_stride * height/2
         * size = y_size + c_size * 2
         * cr_offset = y_size
         * cb_offset = y_size + c_size</pre>
         *
         * <p>This format is guaranteed to be supported for camera preview images since
         * API level 12; for earlier API versions, check
         * {@link android.hardware.Camera.Parameters#getSupportedPreviewFormats()}.
         *
         * <p>Note that for camera preview callback use (see
         * {@link android.hardware.Camera#setPreviewCallback}), the
         * <var>stride</var> value is the smallest possible; that is, it is equal
         * to:
         *
         * <pre>stride = ALIGN(width, 16)</pre>
         *
         * @see android.hardware.Camera.Parameters#setPreviewCallback
         * @see android.hardware.Camera.Parameters#setPreviewFormat
         * @see android.hardware.Camera.Parameters#getSupportedPreviewFormats
         * </p>
         */
        const Int32 YV12 = 0x32315659;

        /**
         * YCbCr format, used for video. Whether this format is supported by the
         * camera hardware can be determined by
         * {@link android.hardware.Camera.Parameters#getSupportedPreviewFormats()}.
         */
        const Int32 NV16 = 0x10;

        /**
         * YCrCb format used for images, which uses the NV21 encoding format. This
         * is the default format for camera preview images, when not otherwise set
         * with {@link android.hardware.Camera.Parameters#setPreviewFormat(int)}.
         */
        const Int32 NV21 = 0x11;

        /**
         * YCbCr format used for images, which uses YUYV (YUY2) encoding format.
         * This is an alternative format for camera preview images. Whether this
         * format is supported by the camera hardware can be determined by
         * {@link android.hardware.Camera.Parameters#getSupportedPreviewFormats()}.
         */
        const Int32 YUY2 = 0x14;

        /**
         * Encoded formats. These are not necessarily supported by the hardware.
         */
        const Int32 JPEG = 0x100;

        /**
         * Raw bayer format used for images, which is 10 bit precision samples
         * stored in 16 bit words. The filter pattern is RGGB. Whether this format
         * is supported by the camera hardware can be determined by
         * {@link android.hardware.Camera.Parameters#getSupportedPreviewFormats()}.
         *
         * @hide
         */
        const Int32 BAYER_RGGB = 0x200;


        /**
         * Use this function to retrieve the number of bits per pixel of an
         * ImageFormat.
         *
         * @param format
         * @return the number of bits per pixel of the given format or -1 if the
         *         format doesn't exist or is not supported.
         */

        /**
         * Use this function to retrieve the number of bits per pixel of an
         * ImageFormat.
         *
         * @param format
         * @return the number of bits per pixel of the given format or -1 if the
         *         format doesn't exist or is not supported.
        */
        GetBitsPerPixel(
            [in] Int32 format,
            [out] Int32* bits);
    }

    } // namespace Graphics
    } // namepsace Droid
    } // namespace Elastos
}
