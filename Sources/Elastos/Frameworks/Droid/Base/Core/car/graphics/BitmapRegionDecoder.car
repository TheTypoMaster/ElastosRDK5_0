
module
{
    using interface Elastos.IO.IFileDescriptor;
    using interface Elastos.IO.IInputStream;

    interface Elastos.Droid.Graphics.IBitmap;
    interface Elastos.Droid.Graphics.IRect;
    interface Elastos.Droid.Graphics.IBitmapFactoryOptions;

    namespace Elastos {
    namespace Droid {
    namespace Graphics {

    /**
     * BitmapRegionDecoder can be used to decode a rectangle region from an image.
     * BitmapRegionDecoder is particularly useful when an original image is large and
     * you only need parts of the image.
     *
     * <p>To create a BitmapRegionDecoder, call newInstance(...).
     * Given a BitmapRegionDecoder, users can call decodeRegion() repeatedly
     * to get a decoded Bitmap of the specified region.
     *
     */
    interface IBitmapRegionDecoder {
        /**
         * Decodes a rectangle region in the image specified by rect.
         *
         * @param rect The rectangle that specified the region to be decode.
         * @param options null-ok; Options that control downsampling.
         *             inPurgeable is not supported.
         * @return The decoded bitmap, or null if the image data could not be
         *         decoded.
         */
        DecodeRegion(
            [in] IRect* rect,
            [in] IBitmapFactoryOptions* options,
            [out] IBitmap** result);

        /** Returns the original image's height */
        GetHeight(
            [out] Int32* result);

        /** Returns the original image's width */
        GetWidth(
            [out] Int32* result);

        /**
         * Returns true if this region decoder has been recycled.
         * If so, then it is an error to try use its method.
         *
         * @return true if the region decoder has been recycled
         */
        IsRecycled(
            [out] Boolean* result);

        /**
         * Frees up the memory associated with this region decoder, and mark the
         * region decoder as "dead", meaning it will throw an exception if decodeRegion(),
         * getWidth() or getHeight() is called.
         *
         * <p>This operation cannot be reversed, so it should only be called if you are
         * sure there are no further uses for the region decoder. This is an advanced call,
         * and normally need not be called, since the normal GC process will free up this
         * memory when there are no more references to this region decoder.
         */
        Recycle();
    }

    interface IBitmapRegionDecoderHelper {
        /**
         * Create a BitmapRegionDecoder from the specified byte array.
         * Currently only the JPEG and PNG formats are supported.
         *
         * @param data byte array of compressed image data.
         * @param offset offset into data for where the decoder should begin
         *               parsing.
         * @param length the number of bytes, beginning at offset, to parse
         * @param isShareable If this is true, then the BitmapRegionDecoder may keep a
         *                    shallow reference to the input. If this is false,
         *                    then the BitmapRegionDecoder will explicitly make a copy of the
         *                    input data, and keep that. Even if sharing is allowed,
         *                    the implementation may still decide to make a deep
         *                    copy of the input data. If an image is progressively encoded,
         *                    allowing sharing may degrade the decoding speed.
         * @return BitmapRegionDecoder, or null if the image data could not be decoded.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if the image format is not supported or can not be decoded.
         */
        NewInstance(
            [in] ArrayOf<Byte> data,
            [in] Int32 offset,
            [in] Int32 length,
            [in] Boolean isShareable,
            [out] IBitmapRegionDecoder** result);

        /**
         * Create a BitmapRegionDecoder from the file descriptor.
         * The position within the descriptor will not be changed when
         * this returns, so the descriptor can be used again as is.
         * Currently only the JPEG and PNG formats are supported.
         *
         * @param fd The file descriptor containing the data to decode
         * @param isShareable If this is true, then the BitmapRegionDecoder may keep a
         *                    shallow reference to the input. If this is false,
         *                    then the BitmapRegionDecoder will explicitly make a copy of the
         *                    input data, and keep that. Even if sharing is allowed,
         *                    the implementation may still decide to make a deep
         *                    copy of the input data. If an image is progressively encoded,
         *                    allowing sharing may degrade the decoding speed.
         * @return IBitmapRegionDecoder, or null if the image data could not be decoded.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         *  IOException | if the image format is not supported or can not be decoded.
         */
        NewInstanceEx(
            [in] IFileDescriptor* fd,
            [in] Boolean isShareable,
            [out] IBitmapRegionDecoder** result);

        /**
         * Create a BitmapRegionDecoder from an input stream.
         * The stream's position will be where ever it was after the encoded data
         * was read.
         * Currently only the JPEG and PNG formats are supported.
         *
         * @param is The input stream that holds the raw data to be decoded into a
         *           BitmapRegionDecoder.
         * @param isShareable If this is true, then the BitmapRegionDecoder may keep a
         *                    shallow reference to the input. If this is false,
         *                    then the BitmapRegionDecoder will explicitly make a copy of the
         *                    input data, and keep that. Even if sharing is allowed,
         *                    the implementation may still decide to make a deep
         *                    copy of the input data. If an image is progressively encoded,
         *                    allowing sharing may degrade the decoding speed.
         * @return IBitmapRegionDecoder, or null if the image data could not be decoded.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if the image format is not supported or can not be decoded.
         */
        NewInstanceEx2(
            [in] IInputStream* is,
            [in] Boolean isShareable,
            [out] IBitmapRegionDecoder** result);

        /**
         * Create a BitmapRegionDecoder from a file path.
         * Currently only the JPEG and PNG formats are supported.
         *
         * @param pathName complete path name for the file to be decoded.
         * @param isShareable If this is true, then the BitmapRegionDecoder may keep a
         *                    shallow reference to the input. If this is false,
         *                    then the BitmapRegionDecoder will explicitly make a copy of the
         *                    input data, and keep that. Even if sharing is allowed,
         *                    the implementation may still decide to make a deep
         *                    copy of the input data. If an image is progressively encoded,
         *                    allowing sharing may degrade the decoding speed.
         * @return IBitmapRegionDecoder, or null if the image data could not be decoded.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if the image format is not supported or can not be decoded.
         */
        NewInstanceEx3(
            [in] String pathName,
            [in] Boolean isShareable,
            [out] IBitmapRegionDecoder** result);
    }

    } // namespace Graphics
    } // namespace Droid
    } // namespace Elastos
}