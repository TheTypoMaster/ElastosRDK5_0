
module
{
    interface Elastos.Droid.Graphics.ICanvas;
    interface Elastos.Droid.Graphics.IMatrix;

    namespace Elastos {
    namespace Droid {
    namespace Graphics {

    /**
     * A camera instance can be used to compute 3D transformations and
     * generate a matrix that can be applied, for instance, on Canvas.
     * 
     * @sa Canvas
     */
    interface ICamera {
        /**
         * Computes the matrix corresponding to the current transformation
         * and applies it to the specified Canvas.
         *
         * @param canvas The Canvas to set the transform matrix onto
         */
        ApplyToCanvas(
            [in] ICanvas* canvas);

        DotWithNormal(
            [in] Float dx,
            [in] Float dy,
            [in] Float dz,
            [out] Float* result);

        /**
         * Gets the x location of the camera.
         *
         * @see #setLocation(float, float, float)
         */
        GetLocationX(
            [out] Float* result);

        /**
         * Gets the y location of the camera.
         *
         * @see #setLocation(float, float, float)
         */
        GetLocationY(
            [out] Float* result);

        /**
         * Gets the z location of the camera.
         *
         * @see #setLocation(float, float, float)
         */
        GetLocationZ(
            [out] Float* result);

        /**
         * Computes the matrix corresponding to the current transformation
         * and copies it to the supplied matrix object.
         *
         * @param matrix The matrix to copy the current transforms into
         */
        GetMatrix(
            [in/*, out*/] IMatrix* matrix);

        /**
         * Restores the saved state, if any.
         *
         * @see #restore()
         */
        Restore();

        /**
         * Applies a rotation transform around all three axis.
         *
         * @param x The angle of rotation around the X axis, in degrees
         * @param y The angle of rotation around the Y axis, in degrees
         * @param z The angle of rotation around the Z axis, in degrees
         *
         * @see #rotateX(float)
         * @see #rotateY(float)
         * @see #rotateZ(float)
         */
        Rotate(
            [in] Float x,
            [in] Float y,
            [in] Float z);

        /**
         * Applies a rotation transform around the X axis.
         *
         * @param deg The angle of rotation around the X axis, in degrees
         *
         * @see rotateY
         * @see rotateZ
         * @see rotate
         */
        RotateX(
            [in] Float deg);

        /**
         * Applies a rotation transform around the Y axis.
         *
         * @param deg The angle of rotation around the Y axis, in degrees
         *
         * @see rotateX
         * @see rotateZ
         * @see rotate
         */
        RotateY(
            [in] Float deg);

        /**
         * Applies a rotation transform around the Z axis.
         *
         * @param deg The angle of rotation around the Z axis, in degrees
         *
         * @see #rotateX(float)
         * @see #rotateY(float)
         * @see #rotate(float, float, float)
         */
        RotateZ(
            [in] Float deg);

        /**
         * Saves the camera state. Each save should be balanced
         * with a call to restore().
         *
         * @sa restore
         * @see save
         */
        Save();

        /**
         * Sets the location of the camera. The default location is set at
         * 0, 0, -8.
         *
         * @param x The x location of the camera
         * @param y The y location of the camera
         * @param z The z location of the camera
         */
        SetLocation(
            [in] Float x,
            [in] Float y,
            [in] Float z);

        /**
         * Applies a translation transform on all three axis.
         *
         * @param x The distance to translate by on the X axis
         * @param y The distance to translate by on the Y axis
         * @param z The distance to translate by on the Z axis
         */
        Translate(
            [in] Float x,
            [in] Float y,
            [in] Float z);
    }

    } // namespace Graphics
    } // namespace Droid
    } // namespace Elastos
}
