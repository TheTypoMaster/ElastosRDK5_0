
module
{
    namespace Elastos {
    namespace Droid {
    namespace Graphics {

    interface IOutline {
        /**
         * Sets the outline to be empty.
         *
         * @see #isEmpty()
         */
        SetEmpty();

        /**
         * Returns whether the Outline is empty.
         * <p>
         * Outlines are empty when constructed, or if {@link #setEmpty()} is called,
         * until a setter method is called
         *
         * @see #setEmpty()
         */
        IsEmpty(
            [out] Boolean* isEmpty);

        /**
         * Returns whether the outline can be used to clip a View.
         * <p>
         * Currently, only Outlines that can be represented as a rectangle, circle,
         * or round rect support clipping.
         *
         * @see {@link android.view.View#setClipToOutline(boolean)}
         */
        CanClip(
            [out] Boolean* canClip);

        /**
         * Sets the alpha represented by the Outline - the degree to which the
         * producer is guaranteed to be opaque over the Outline's shape.
         * <p>
         * An alpha value of <code>0.0f</code> either represents completely
         * transparent content, or content that isn't guaranteed to fill the shape
         * it publishes.
         * <p>
         * Content producing a fully opaque (alpha = <code>1.0f</code>) outline is
         * assumed by the drawing system to fully cover content beneath it,
         * meaning content beneath may be optimized away.
         */
        SetAlpha(
            [in] Float alpha);

        /**
         * Returns the alpha represented by the Outline.
         */
        GetAlpha(
            [out] Float* alpha);

        /**
         * Replace the contents of this Outline with the contents of src.
         *
         * @param src Source outline to copy from.
         */
        Set(
            [in] IOutline* alpha);

        /**
         * Sets the Outline to the rounded rect defined by the input rect, and
         * corner radius.
         */
        SetRect(
            [in] Int32 left,
            [in] Int32 top,
            [in] Int32 right,
            [in] Int32 bottom);

        /**
         * Convenience for {@link #setRect(int, int, int, int)}
         */
        SetRect(
            [in] IRect* rect);

        /**
         * Sets the Outline to the rounded rect defined by the input rect, and corner radius.
         * <p>
         * Passing a zero radius is equivalent to calling {@link #setRect(int, int, int, int)}
         */
        SetRoundRect(
            [in] Int32 left,
            [in] Int32 top,
            [in] Int32 right,
            [in] Int32 bottom,
            [in] Float radius);

        /**
         * Convenience for {@link #setRoundRect(int, int, int, int, float)}
         */
        SetRoundRect(
            [in] IRect* rect,
            [in] Float radius);

        /**
         * Sets the outline to the oval defined by input rect.
         */
        SetOval(
            [in] Int32 left,
            [in] Int32 top,
            [in] Int32 right,
            [in] Int32 bottom);

        /**
         * Convenience for {@link #setOval(int, int, int, int)}
         */
        SetOval(
            [in] IRect* rect);

        /**
         * Sets the Constructs an Outline from a
         * {@link android.graphics.Path#isConvex() convex path}.
         */
        SetConvexPath(
            [in] IPath* convexPath);
    }

    } // namespace Graphics
    } // namespace Droid
    } // namespace Elastos
}
