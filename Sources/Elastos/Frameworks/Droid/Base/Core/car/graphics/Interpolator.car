
module
{
    namespace Elastos {
    namespace Droid {
    namespace Graphics {

    enum InterpolatorResult {
        InterpolatorResult_NORMAL = 0,
        InterpolatorResult_FREEZE_START = 1,
        InterpolatorResult_FREEZE_END = 2,
    }

    [deprecated]
    /**
     * An interpolator defines the rate of change of an animation. This allows the
     * basic animation effects (alpha, scale, translate, rotate) to be accelerated,
     * decelerated, repeated, etc.
     */
    interface IInterpolator {
        GetKeyFrameCount(
            [out] Int32* count);

        GetValueCount(
            [out] Int32* count);

        /**
         * Reset the Interpolator to have the specified number of values and an
         * implicit keyFrame count of 2 (just a start and end). After this call the
         * values for each keyFrame must be assigned using setKeyFrame().
         */
        Reset(
            [in] Int32 valueCount);

        /**
         * Reset the Interpolator to have the specified number of values and
         * keyFrames. After this call the values for each keyFrame must be assigned
         * using setKeyFrame().
         */
        Reset(
            [in] Int32 valueCount,
            [in] Int32 frameCount);

        /**
         * Assign the keyFrame (specified by index) a time value and an array of key
         * values (with an implicity blend array of [0, 0, 1, 1] giving linear
         * transition to the next set of key values).
         *
         * @param index The index of the key frame to assign
         * @param msec The time (in mililiseconds) for this key frame. Based on the
         *        SystemClock.uptimeMillis() clock
         * @param values Array of values associated with theis key frame
         */
        SetKeyFrame(
            [in] Int32 index,
            [in] Int32 msec,
            [in] ArrayOf<Float>* values);

        /**
         * Assign the keyFrame (specified by index) a time value and an array of key
         * values and blend array.
         *
         * @param index The index of the key frame to assign
         * @param msec The time (in mililiseconds) for this key frame. Based on the
         *        SystemClock.uptimeMillis() clock
         * @param values Array of values associated with theis key frame
         * @param blend (may be null) Optional array of 4 blend values
         */
        SetKeyFrame(
            [in] Int32 index,
            [in] Int32 msec,
            [in] ArrayOf<Float>* values,
            [in] ArrayOf<Float>* blend);

        /**
         * Set a repeat count (which may be fractional) for the interpolator, and
         * whether the interpolator should mirror its repeats. The default settings
         * are repeatCount = 1, and mirror = false.
         */
        SetRepeatMirror(
            [in] Float repeatCount,
            [in] Boolean mirror);

        /**
         * Calls timeToValues(msec, values) with the msec set to now (by calling
         * (int)SystemClock.uptimeMillis().)
         */
        TimeToValues(
            [in /* out */] ArrayOf<Float>* values,
            [out] InterpolatorResult* result);

        /**
         * Given a millisecond time value (msec), return the interpolated values and
         * return whether the specified time was within the range of key times
         * (NORMAL), was before the first key time (FREEZE_START) or after the last
         * key time (FREEZE_END). In any event, computed values are always returned.
         *
         * @param msec The time (in milliseconds) used to sample into the
         *        Interpolator. Based on the SystemClock.uptimeMillis() clock
         * @param values Where to write the computed values (may be NULL).
         * @return how the values were computed (even if values == null)
         */
        TimeToValues(
            [in] Int32 msec,
            [in /* out */] ArrayOf<Float>* values,
            [out] InterpolatorResult* result);
    }

    } // namespace Graphics
    } // namespace Droid
    } // namespace Elastos
}
