module
{
    interface Elastos.Droid.View.Accessibility.IAccessibilityEvent;
    interface Elastos.Droid.View.Accessibility.IAccessibilityNodeInfo;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Utility.IObjectContainer;
    interface Elastos.Core.IRunnable;
    interface Elastos.Droid.Internal.Utility.IPredicate;

    namespace Elastos {
    namespace Droid {
    namespace AccessibilityService {

        interface IUiTestAutomationBridge
        {
            const Int32 UNDEFINED = -1;

            const Int32 ACTIVE_WINDOW_ID = UNDEFINED;  //IAccessibilityNodeInfo::ACTIVE_WINDOW_ID;

            const Int64 ROOT_NODE_ID = UNDEFINED << 32 | UNDEFINED;  //IAccessibilityNodeInfo::ROOT_NODE_ID;

            /**
             * Gets the last received {@link AccessibilityEvent}.
             *
             * @return The event.
             */
            GetLastAccessibilityEvent(
                [out] IAccessibilityEvent** event);

            /**
             * Callback for receiving an {@link AccessibilityEvent}.
             *
             * <strong>Note:</strong> This method is <strong>NOT</strong>
             * executed on the application main thread. The client are
             * responsible for proper synchronization.
             *
             * @param event The received event.
             */
            OnAccessibilityEvent(
                [in] IAccessibilityEvent* event);

            /**
             * Callback for requests to stop feedback.
             *
             * <strong>Note:</strong> This method is <strong>NOT</strong>
             * executed on the application main thread. The client are
             * responsible for proper synchronization.
             */
            OnInterrupt();

            /**
             * Connects this service.
             *
             * @throws IllegalStateException If already connected.
             */
            Connect();

            /**
             * Disconnects this service.
             *
             * @throws IllegalStateException If already disconnected.
             */
            Disconnect();

            /**
             * Gets whether this service is connected.
             *
             * @return True if connected.
             */
            IsConnected(
                [out] Boolean* result);

            /**
             * Executes a command and waits for a specific accessibility event type up
             * to a given timeout.
             *
             * @param command The command to execute before starting to wait for the event.
             * @param predicate Predicate for recognizing the awaited event.
             * @param timeoutMillis The max wait time in milliseconds.
             */
            ExecuteCommandAndWaitForAccessibilityEvent(
                [in] IRunnable* command,
                [in] IPredicate* predicate,
                [in] Int64 timeoutMillis,
                [out] IAccessibilityEvent** event);

            /**
             * Waits for the accessibility event stream to become idle, which is not to
             * have received a new accessibility event within <code>idleTimeout</code>,
             * and do so within a maximal global timeout as specified by
             * <code>globalTimeout</code>.
             *
             * @param idleTimeout The timeout between two event to consider the device idle.
             * @param globalTimeout The maximal global timeout in which to wait for idle.
             */
            WaitForIdle(
                [in] Int64 idleTimeout,
                [in] Int64 globalTimeout);

            /**
             * Finds an {@link AccessibilityNodeInfo} by accessibility id in the active
             * window. The search is performed from the root node.
             *
             * @param accessibilityNodeId A unique view id or virtual descendant id for
             *     which to search.
             * @return The current window scale, where zero means a failure.
             */
            FindAccessibilityNodeInfoByAccessibilityIdInActiveWindow(
                [in] Int64 accessibilityNodeId,
                [out] IAccessibilityNodeInfo** info);

            /**
             * Finds an {@link AccessibilityNodeInfo} by accessibility id.
             *
             * @param accessibilityWindowId A unique window id. Use {@link #ACTIVE_WINDOW_ID} to query
             *     the currently active window.
             * @param accessibilityNodeId A unique view id or virtual descendant id for
             *     which to search.
             * @return The current window scale, where zero means a failure.
             */
            FindAccessibilityNodeInfoByAccessibilityId(
                [in] Int32 accessibilityWindowId,
                [in] Int64 accessibilityNodeId,
                [out] IAccessibilityNodeInfo** info);

            /**
             * Finds an {@link AccessibilityNodeInfo} by View id in the active
             * window. The search is performed from the root node.
             *
             * @param viewId The id of a View.
             * @return The current window scale, where zero means a failure.
             */
            FindAccessibilityNodeInfoByViewIdInActiveWindow(
                [in] Int32 viewId,
                [out] IAccessibilityNodeInfo** info);

                /**
             * Finds an {@link AccessibilityNodeInfo} by View id. The search is performed in
             * the window whose id is specified and starts from the node whose accessibility
             * id is specified.
             *
             * @param accessibilityWindowId A unique window id. Use
             *     {@link  #ACTIVE_WINDOW_ID} to query the currently active window.
             * @param accessibilityNodeId A unique view id or virtual descendant id from
             *     where to start the search. Use {@link  #ROOT_NODE_ID} to start from the root.
             * @param viewId The id of a View.
             * @return The current window scale, where zero means a failure.
             */
            FindAccessibilityNodeInfoByViewId(
                [in] Int32 accessibilityWindowId,
                [in] Int64 accessibilityNodeId,
                [in] Int32 viewId,
                [out] IAccessibilityNodeInfo** info);

                /**
             * Finds {@link AccessibilityNodeInfo}s by View text in the active
             * window. The search is performed from the root node.
             *
             * @param text The searched text.
             * @return The current window scale, where zero means a failure.
             */
            FindAccessibilityNodeInfosByTextInActiveWindow(
                [in] String text,
                [out] IObjectContainer** list);

                /**
             * Finds {@link AccessibilityNodeInfo}s by View text. The match is case
             * insensitive containment. The search is performed in the window whose
             * id is specified and starts from the node whose accessibility id is
             * specified.
             *
             * @param accessibilityWindowId A unique window id. Use
             *     {@link #ACTIVE_WINDOW_ID} to query the currently active window.
             * @param accessibilityNodeId A unique view id or virtual descendant id from
             *     where to start the search. Use {@link #ROOT_NODE_ID} to start from the root.
             * @param text The searched text.
             * @return The current window scale, where zero means a failure.
             */
            FindAccessibilityNodeInfosByText(
                [in] Int32 accessibilityWindowId,
                [in] Int64 accessibilityNodeId,
                [in] String text,
                [out] IObjectContainer** list);

                /**
             * Performs an accessibility action on an {@link AccessibilityNodeInfo}
             * in the active window.
             *
             * @param accessibilityNodeId A unique node id (accessibility and virtual descendant id).
             * @param action The action to perform.
             * @param arguments Optional action arguments.
             * @return Whether the action was performed.
             */
            PerformAccessibilityActionInActiveWindow(
                [in] Int64 accessibilityNodeId,
                [in] Int32 action,
                [in] IBundle* arguments,
                [out] Boolean* result);

                /**
             * Performs an accessibility action on an {@link AccessibilityNodeInfo}.
             *
             * @param accessibilityWindowId A unique window id. Use
             *     {@link #ACTIVE_WINDOW_ID} to query the currently active window.
             * @param accessibilityNodeId A unique node id (accessibility and virtual descendant id).
             * @param action The action to perform.
             * @param arguments Optional action arguments.
             * @return Whether the action was performed.
             */
            PerformAccessibilityAction(
                [in] Int32 accessibilityWindowId,
                [in] Int64 accessibilityNodeId,
                [in] Int32 action,
                [in] IBundle* arguments,
                [out] Boolean* result);

                /**
             * Gets the root {@link AccessibilityNodeInfo} in the active window.
             *
             * @return The root info.
             */
            GetRootAccessibilityNodeInfoInActiveWindow(
                [out] IAccessibilityNodeInfo** info);
        }

    }
    }
    }
}