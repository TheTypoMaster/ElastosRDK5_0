
module
{
    interface Elastos.Droid.Webkit.IMimeTypeMap;

    namespace Elastos {
    namespace Droid {
    namespace Webkit {

    interface IMimeTypeMapHelper {
        /**
         * Returns the file extension or an empty string iff there is no
         * extension. This method is a convenience method for obtaining the
         * extension of a url and has undefined results for other Strings.
         * @param url
         * @return The file extension of the given url.
         */
        GetFileExtensionFromUrl(
            [in] String url,
            [out] String* fileExtension);

        /**
         * Get the singleton instance of MimeTypeMap.
         * @return The singleton instance of the MIME-type map.
         */
        GetSingleton(
            [out] IMimeTypeMap** mimeTypeMap);
    }

    /**
     * Two-way map that maps MIME-types to file extensions and vice versa.
     *
     * <p>See also {@link java.net.URLConnection#guessContentTypeFromName}
     * and {@link java.net.URLConnection#guessContentTypeFromStream}. This
     * class and {@code URLConnection} share the same MIME-type database.
     */
    interface IMimeTypeMap {

        /**
         * Return true if the given MIME type has an entry in the map.
         * @param mimeType A MIME type (i.e. text/plain)
         * @return True iff there is a mimeType entry in the map.
         */
        HasMimeType(
            [in] String mimeType,
            [out] Boolean* result);

        /**
         * Return the MIME type for the given extension.
         * @param extension A file extension without the leading '.'
         * @return The MIME type for the given extension or null iff there is none.
         */
        GetMimeTypeFromExtension(
            [in] String extension,
            [out] String* mimeType);

        /**
         * Return true if the given extension has a registered MIME type.
         * @param extension A file extension without the leading '.'
         * @return True iff there is an extension entry in the map.
         */
        HasExtension(
            [in] String extension,
            [out] Boolean* result);

        /**
         * Return the registered extension for the given MIME type. Note that some
         * MIME types map to multiple extensions. This call will return the most
         * common extension for the given MIME type.
         * @param mimeType A MIME type (i.e. text/plain)
         * @return The extension for the given MIME type or null iff there is none.
         */
        GetExtensionFromMimeType(
            [in] String mimeType,
            [out] String* extension);
    }

    } // namespace Webkit
    } // namepsace Droid
    } // namespace Elastos
}
