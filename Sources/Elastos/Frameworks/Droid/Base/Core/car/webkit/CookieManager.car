
module
{
    interface Elastos.Droid.Net.IWebAddress;
    interface Elastos.Droid.Webkit.ICookieManager;

    namespace Elastos {
    namespace Droid {
    namespace Webkit {

    interface ICookieManagerHelper {
        /**
         * Gets the singleton CookieManager instance. If this method is used
         * before the application instantiates a {@link WebView} instance,
         * {@link CookieSyncManager#createInstance CookieSyncManager.createInstance(Context)}
         * must be called first.
         *
         * @return the singleton CookieManager instance
         */
        //synchronized
        GetInstance(
            [out] ICookieManager** cookieManager);

        /**
         * Gets whether the application's {@link WebView} instances send and accept
         * cookies for file scheme URLs.
         *
         * @return true if {@link WebView} instances send and accept cookies for
         *         file scheme URLs
         */
        // Static for backward compatibility.
        AllowFileSchemeCookies(
            [out] Boolean* result);

        /**
         * Sets whether the application's {@link WebView} instances should send and
         * accept cookies for file scheme URLs.
         * Use of cookies with file scheme URLs is potentially insecure. Do not use
         * this feature unless you can be sure that no unintentional sharing of
         * cookie data can take place.
         * <p>
         * Note that calls to this method will have no effect if made after a
         * {@link WebView} or CookieManager instance has been created.
         */
        // Static for backward compatibility.
        SetAcceptFileSchemeCookies(
            [in] Boolean accept);
    }

    /**
     * Manages the cookies used by an application's {@link WebView} instances.
     * Cookies are manipulated according to RFC2109.
     *
     * @Involve
     * interface ICookieHandler;
     */
    interface ICookieManager {

        /**
         * Sets whether the application's {@link WebView} instances should send and
         * accept cookies.
         *
         * @param accept whether {@link WebView} instances should send and accept
         *               cookies
         */
        //synchronized
        SetAcceptCookie(
            [in] Boolean accept);

        /**
         * Gets whether the application's {@link WebView} instances send and accept
         * cookies.
         *
         * @return true if {@link WebView} instances send and accept cookies
         */
        //synchronized
        AcceptCookie(
            [out] Boolean* result);

         /**
         * Sets a cookie for the given URL. Any existing cookie with the same host,
         * path and name will be replaced with the new cookie. The cookie being set
         * must not have expired and must not be a session cookie, otherwise it
         * will be ignored.
         *
         * @param url the URL for which the cookie is set
         * @param value the cookie as a string, using the format of the 'Set-Cookie'
         *              HTTP response header
         */
        SetCookie(
            [in] String url,
            [in] String value);

        /**
         * Gets the cookies for the given URL.
         *
         * @param url the URL for which the cookies are requested
         * @return value the cookies as a string, using the format of the 'Cookie'
         *               HTTP request header
         */
        GetCookie(
            [in] String url,
            [out] String* cookie);

        /**
         * See {@link #getCookie(String)}.
         *
         * @param url the URL for which the cookies are requested
         * @param privateBrowsing whether to use the private browsing cookie jar
         * @return value the cookies as a string, using the format of the 'Cookie'
         *               HTTP request header
         * @hide Used by Browser, no intention to publish.
         */
        GetCookieEx(
            [in] String url,
            [in] Boolean privateBrowsing,
            [out] String* cookie);

        /**
         * Gets cookie(s) for a given uri so that it can be set to "cookie:" in http
         * request header.
         *
         * @param uri the WebAddress for which the cookies are requested
         * @return value the cookies as a string, using the format of the 'Cookie'
         *               HTTP request header
         * @hide Used by RequestHandle, no intention to publish.
         */
        //synchronized
        GetCookieEx2(
            [in] IWebAddress* uri,
            [out] String* cookie);

        /**
         * Removes all session cookies, which are cookies without an expiration
         * date.
         */
        RemoveSessionCookie();

        /**
         * Removes all cookies.
         */
        RemoveAllCookie();

        /**
         * Gets whether there are stored cookies.
         *
         * @return true if there are stored cookies
         */
        //synchronized
        HasCookies(
            [out] Boolean* result);

        /**
         * See {@link #hasCookies()}.
         *
         * @param privateBrowsing whether to use the private browsing cookie jar
         * @hide Used by Browser, no intention to publish.
         */
        //synchronized
        HasCookiesEx(
            [in] Boolean privateBrowsing,
            [out] Boolean* result);

        /**
         * Removes all expired cookies.
         */
        RemoveExpiredCookie();
    }

    } // namespace Webkit
    } // namepsace Droid
    } // namespace Elastos
}
