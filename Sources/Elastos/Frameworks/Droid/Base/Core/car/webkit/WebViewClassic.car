
module
{
    using interface Elastos.IO.IOutputStream;
    using interface Elastos.IO.IInputStream;
    interface Elastos.Droid.Os.IMessage;
    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.IKeyEvent;
    interface Elastos.Droid.Webkit.IPluginList;
    interface Elastos.Droid.Webkit.IValueCallback;
    interface Elastos.Droid.Webkit.IWebChromeClient;
    interface Elastos.Droid.Webkit.IWebView;
    interface Elastos.Droid.Webkit.IWebViewClient;
    interface Elastos.Droid.Webkit.IWebViewCore;
    interface Elastos.Droid.Webkit.IWebViewProvider;
    interface Elastos.Droid.Webkit.IWebBackForwardListClient;

    namespace Elastos {
    namespace Droid {
    namespace Webkit {

    // Interface to enable the browser to override title bar handling.
    [local]
    interface IWebViewClassicTitleBarDelegate {
        GetTitleHeight(
            [out] Int32* height);

        OnSetEmbeddedTitleBar(
            [in] IView* title);
    }

    // Interface to allow the profiled WebView to hook the page swap notifications.
    interface IWebViewClassicPageSwapDelegate {
        OnPageSwapOccurred(
            [in] Boolean notifyAnimationStarted);
    }

    /**
     * Implements a backend provider for the {@link WebView} public API.
     * @hide
     */
    // TODO: Check if any WebView published API methods are called from within here, and if so
    // we should bounce the call out via the proxy to enable any sub-class to override it.
    //@Widget
    //@SuppressWarnings("deprecation")
    [local]
    interface IWebViewClassic {
        /**
         * URI scheme for telephone number
         */
        const String SCHEME_TEL = "tel:";

        /**
         * URI scheme for email address
         */
        const String SCHEME_MAILTO = "mailto:";

        /**
         * URI scheme for map address
         */
        const String SCHEME_GEO = "geo:0,0?q=";

        /**
         * @return The webview proxy that this classic webview is bound to.
         */
        GetWebView(
            [out] IWebView** webView);

        /**
         * Sets JavaScript engine flags.
         *
         * @param flags JS engine flags in a String
         *
         * This is an implementation detail.
         */
        SetJsFlags(
            [in] String flags);

        /**
         * Inform WebView about the current network type.
         */
        SetNetworkType(
            [in] String type,
            [in] String subtype);

        /**
         * Saves the view data to the output stream. The output is highly
         * version specific, and may not be able to be loaded by newer versions
         * of WebView.
         * @param stream The {@link OutputStream} to save to
         * @param callback The {@link ValueCallback} to call with the result
         */
        SaveViewState(
            [in] IOutputStream* stream,
            [in] IValueCallback* callBack);

        /**
         * Loads the view data from the input stream. See
         * {@link #saveViewState(java.io.OutputStream, ValueCallback)} for more information.
         * @param stream The {@link InputStream} to load from
         */
        LoadViewState(
            [in] IInputStream* stream);

        /**
         * Clears the view state set with {@link #loadViewState(InputStream)}.
         * This WebView will then switch to showing the content from webkit
         */
        ClearViewState();

        GetPageBackgroundColor(
            [out] Int32* color);

        /**
         * Request the scroller to abort any ongoing animation
         */
        StopScroll();

        /**
         * Gets the WebViewClient
         * @return the current WebViewClient instance.
         *
         * This is an implementation detail.
         */
        GetWebViewClient(
            [out] IWebViewClient** wvc);

        /**
         * Gets the chrome handler.
         * @return the current WebChromeClient instance.
         *
         * This is an implementation detail.
         */
        GetWebChromeClient(
            [out] IWebChromeClient** wcc);

        /**
         * Set the back/forward list client. This is an implementation of
         * WebBackForwardListClient for handling new items and changes in the
         * history index.
         * @param client An implementation of WebBackForwardListClient.
         */
        SetWebBackForwardListClient(
            [in] IWebBackForwardListClient* client);

        /**
         * Gets the WebBackForwardListClient.
         */
        GetWebBackForwardListClient(
            [out] IWebBackForwardListClient** wflc);

        /* FIXME: Debug only! Remove for SDK! */
        ExternalRepresentation(
            [in] IMessage* cb);

        /* FIXME: Debug only! Remove for SDK! */
        DocumentAsText(
            [in] IMessage* cb);

        /**
         * See {@link WebView#refreshPlugins(boolean)}
         */
        //@Deprecated
        RefreshPlugins(
            [in] Boolean reloadOpenPages);

        /**
         * Select the word at the last click point.
         *
         * This is an implementation detail.
         */
        SelectText(
            [out] Boolean* result);

        /**
         * Dump the display tree to "/sdcard/displayTree.txt"
         *
         * debug only
         */
        DumpDisplayTree();

        /**
         * Dump the dom tree to adb shell if "toFile" is False, otherwise dump it to
         * "/sdcard/domTree.txt"
         *
         * debug only
         */
        DumpDomTree(
            [in] Boolean toFile);

        /**
         * Dump the render tree to adb shell if "toFile" is False, otherwise dump it
         * to "/sdcard/renderTree.txt"
         *
         * debug only
         */
        DumpRenderTree(
            [in] Boolean toFile);

        /**
         * Called by DRT on UI thread, need to proxy to WebCore thread.
         *
         * debug only
         */
        SetUseMockDeviceOrientation();

        /**
         * Sets use of the Geolocation mock client. Also resets that client. Called
         * by DRT on UI thread, need to proxy to WebCore thread.
         *
         * debug only
         */
        SetUseMockGeolocation();

        /**
         * Called by DRT on WebCore thread.
         *
         * debug only
         */
        SetMockGeolocationPosition(
            [in] Double latitude,
            [in] Double longitude,
            [in] Double accuracy);

        /**
         * Called by DRT on WebCore thread.
         *
         * debug only
         */
        SetMockGeolocationError(
            [in] Int32 code,
            [in] String message);

        /**
         * Called by DRT on WebCore thread.
         *
         * debug only
         */
        SetMockGeolocationPermission(
            [in] Boolean allow);

        /**
         * Called by DRT on WebCore thread.
         *
         * debug only
         */
        SetMockDeviceOrientation(
            [in] Boolean canProvideAlpha,
            [in] Double alpha,
            [in] Boolean canProvideBeta,
            [in] Double beta,
            [in] Boolean canProvideGamma,
            [in] Double gamma);

        OnKeyPreIme(
            [in] Int32 keyCode,
            [in] IKeyEvent* event,
            [out] Boolean* result);

        /**
         * Select all of the text in this WebView.
         *
         * This is an implementation detail.
         */
        SelectAll();

        /**
         * Copy the selection to the clipboard
         *
         * This is an implementation detail.
         */
        CopySelection(
            [out] Boolean* selection);

        /**
         * Cut the selected text into the clipboard
         *
         * This is an implementation detail
         */
        CutSelection();

        /**
         * Paste text from the clipboard to the cursor position.
         *
         * This is an implementation detail
         */
        PasteFromClipboard();

        GetWebViewCore(
            [out] IWebViewCore** core);

        /**
         * Set the time to wait between passing touches to WebCore. See also the
         * TOUCH_SENT_INTERVAL member for further discussion.
         *
         * This is only used by the DRT test application.
         */
        SetTouchInterval(
            [in] Int32 interval);

        /** discard all textures from tiles. Used in Profiled WebView */
        DiscardAllTextures();

        /**
         * Begin collecting per-tile profiling data
         *
         * only used by profiling tests
         */
        TileProfilingStart();

        /**
         * Return per-tile profiling data
         *
         * only used by profiling tests
         */
        TileProfilingStop(
            [out] Float* stop);

        /** only used by profiling tests */
        TileProfilingClear();

        /** only used by profiling tests */
        TileProfilingNumFrames(
            [out] Int32* num);

        /** only used by profiling tests */
        TileProfilingNumTilesInFrame(
            [in] Int32 frame,
            [out] Int32* num);

        /** only used by profiling tests */
        TileProfilingGetInt(
            [in] Int32 frame,
            [in] Int32 tile,
            [in] String key,
            [out] Int32* Int);

        /** only used by profiling tests */
        TileProfilingGetFloat(
            [in] Int32 frame,
            [in] Int32 tile,
            [in] String key,
            [out] Float* gileFloat);
    }

    [local]
    interface IWebViewClassicHelper {
        FromWebView(
            [in] IWebView* webView,
            [out] IWebViewClassic** wvc);

        EnablePlatformNotifications();

        DisablePlatformNotifications();

        /**
         * Return the first substring consisting of the address of a physical
         * location. Currently, only addresses in the United States are detected,
         * and consist of:
         * - a house number
         * - a street name
         * - a street type (Road, Circle, etc), either spelled out or abbreviated
         * - a city name
         * - a state or territory, either spelled out or two-letter abbr.
         * - an optional 5 digit or 9 digit zip code.
         *
         * All names must be correctly capitalized, and the zip code, if present,
         * must be valid for the state. The street type must be a standard USPS
         * spelling or abbreviation. The state or territory must also be spelled
         * or abbreviated using USPS standards. The house number may not exceed
         * five digits.
         * @param addr The string to search for addresses.
         *
         * @return the address, or if no address is found, return null.
         */
        FindAddress(
            [in] String addr,
            [out] String* outAddr);

        /**
         * Return the first substring consisting of the address of a physical
         * location. Currently, only addresses in the United States are detected,
         * and consist of:
         * - a house number
         * - a street name
         * - a street type (Road, Circle, etc), either spelled out or abbreviated
         * - a city name
         * - a state or territory, either spelled out or two-letter abbr.
         * - an optional 5 digit or 9 digit zip code.
         *
         * Names are optionally capitalized, and the zip code, if present,
         * must be valid for the state. The street type must be a standard USPS
         * spelling or abbreviation. The state or territory must also be spelled
         * or abbreviated using USPS standards. The house number may not exceed
         * five digits.
         * @param addr The string to search for addresses.
         * @param caseInsensitive addr Set to true to make search ignore case.
         *
         * @return the address, or if no address is found, return null.
         */
        FindAddress(
            [in] String addr,
            [in] Boolean caseInsensitive,
            [out] String* outAddr);

        /**
         * See {@link WebView#getPluginList()}
         */
        //@Deprecated
        GetPluginList(
            [out] IPluginList** pluginList);

        // Note: must be called before first WebViewClassic is created.
        SetShouldMonitorWebCoreThread();
    }

    } // namespace Webkit
    } // namepsace Droid
    } // namespace Elastos
}
