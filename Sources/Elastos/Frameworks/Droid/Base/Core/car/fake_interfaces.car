
module
{
    using interface Elastos.Core.IRunnable;
    using interface Elastos.Core.ICharSequence;
    using interface Elastos.IO.IPrintWriter;
    using interface Elastos.IO.IFileDescriptor;
    using interface Elastos.Utility.IObjectContainer;
    interface Elastos.Droid.Os.IBundle;
    interface Elastos.Droid.Os.IBinder;
    interface Elastos.Droid.Os.IMessage;
    interface Elastos.Droid.Os.IHandler;
    interface Elastos.Droid.Graphics.IRect;
    interface Elastos.Droid.Graphics.Drawable.IDrawable;
    interface Elastos.Droid.Graphics.IPoint;
    interface Elastos.Droid.View.IView;
    interface Elastos.Droid.View.IViewOnClickListener;
    interface Elastos.Droid.View.IViewGroup;
    interface Elastos.Droid.View.IDisplay;
    interface Elastos.Droid.View.IWindowManager;
    interface Elastos.Droid.View.IActionMode;
    interface Elastos.Droid.View.IActionModeCallback;
    interface Elastos.Droid.View.IMenu;
    interface Elastos.Droid.View.IMenuItem;
    interface Elastos.Droid.View.IMenuInflater;
    interface Elastos.Droid.View.IWindow;
    interface Elastos.Droid.View.IKeyEvent;
    interface Elastos.Droid.Content.IContext;
    interface Elastos.Droid.Content.IIntent;
    interface Elastos.Droid.Content.Res.IConfiguration;
    interface Elastos.Droid.Content.Res.ITypedArray;
    interface Elastos.Droid.Content.Res.ICompatibilityInfo;
    interface Elastos.Droid.App.IActivity;
    interface Elastos.Droid.App.IFragmentTransaction;
    interface Elastos.Droid.App.IFragment;
    interface Elastos.Droid.Net.IUri;
    interface Elastos.Droid.Text.ISpannableStringBuilder;
    interface Elastos.Droid.Text.IEditable;
    interface Elastos.Droid.Utility.IDisplayMetrics;
    interface Elastos.Droid.Graphics.IBitmap;
    interface Elastos.Droid.App.IPendingIntent;
    interface Elastos.Droid.View.ICompatibilityInfoHolder;
    interface Elastos.Droid.Database.ICursor;
    interface Elastos.Droid.Content.IContentValues;
    interface Elastos.Droid.Content.IContentResolver;
    interface Elastos.Droid.Content.Res.IObbInfo;
    interface Elastos.Droid.Net.INetworkInfo;
    interface Elastos.Utility.IDate;

    interface Libcore.ICU.ILocale;

    namespace Elastos {

    namespace Crypto {
        interface IMac {
        }

        interface ISecretKey {
        }
    }

    namespace Net {

        interface ISocketFactory{}

        namespace Ssl {
            interface IKeyManager{
            }

            interface ISSLSession {
            }
            interface ISSLSocket {
            }

            interface IX509TrustManager{
            }

            interface IDefaultHostnameVerifier{
            }

            interface ISSLSocketFactory{
            }

            interface ITrustManager{
            }
        }
    }

    namespace Webkit {
        interface ICookieManager{
        }
        interface ICookieManagerHelper{
            GetInstance(
                [out] ICookieManager** manager);
        }
    }

    namespace Droid {

    namespace App {

        interface IFragmentBreadCrumbs{
            SetVisibility(
                [in] Int32 visibility);
            SetMaxVisible(
                [in] Int32 visible);
            SetActivity(
                [in] IActivity* activity);
            SetTitle(
                [in] ICharSequence* title,
                [in] ICharSequence* shortTitle);

            SetParentTitle(
                [in] ICharSequence* title,
                [in] ICharSequence* shortTitle,
                [in] IViewOnClickListener* listener);
        }
    }

    namespace Os {
        interface ITrace {
            const Int64 TRACE_TAG_NEVER = 0;
            const Int64 TRACE_TAG_ALWAYS = 1 << 0;
            const Int64 TRACE_TAG_GRAPHICS = 1 << 1;
            const Int64 TRACE_TAG_INPUT = 1 << 2;
            const Int64 TRACE_TAG_VIEW = 1 << 3;
            const Int64 TRACE_TAG_WEBVIEW = 1 << 4;
            const Int64 TRACE_TAG_WINDOW_MANAGER = 1 << 5;
            const Int64 TRACE_TAG_ACTIVITY_MANAGER = 1 << 6;
            const Int64 TRACE_TAG_SYNC_MANAGER = 1 << 7;
            const Int64 TRACE_TAG_AUDIO = 1 << 8;
            const Int64 TRACE_TAG_VIDEO = 1 << 9;
            const Int64 TRACE_TAG_CAMERA = 1 << 10;

            const Int32 TRACE_FLAGS_START_BIT = 1;
            const String PROPERTY_TRACE_TAG_ENABLEFLAGS = "debug.atrace.tags.enableflags";

            TraceBegin(
                [in] Int64 traceTag,
                [in] String methodName);
            TraceEnd(
                [in] Int64 traceTag);
        }
    }


    namespace Internal {

    namespace Os {
        interface IBatteryCallback {
        }

        interface IINetworkManagementService {
        }
    }

    namespace View {
        interface IBaseIWindow {
        }
    }

    }

    namespace Text {

        interface ISelectionHelper {
            SetSelection(
                [in] ISpannableStringBuilder* sb,
                [in] Int32 val);
        }
    }

    namespace Utility {

        interface IPrinter {
            Println(
                [in] String str);
        }
    }

    namespace Net {
        interface IThrottleService{
         }

        interface IWebAddress{
        }
    } // namespace Net

    namespace Security {

        interface IKeyChain {
            const String ACCOUNT_TYPE = "com.android.keychain";
            const String EXTRA_RESPONSE = "response";
            const String EXTRA_HOST = "host";
            const String EXTRA_PORT = "port";
            const String EXTRA_ALIAS = "alias";
            const String EXTRA_SENDER = "sender";
            const String EXTRA_NAME = "name";
            const String EXTRA_CERTIFICATE = "CERT";
            const String EXTRA_PKCS12 = "PKCS12";
            const String ACTION_STORAGE_CHANGED = "android.security.STORAGE_CHANGED";
        }

    } // namespace Security

    } // namespace Droid

    } // namespace Elastos

    namespace Org {
    namespace Apache {
    namespace Http {

    interface IHttpHost{ }

    namespace Client {
        namespace Methods {
            interface IHttpUriRequest {
            }
        }

        interface IHttpClient {
        }
    }

    interface IHeader {
    }

    namespace Entity {
        using interface Org.Apache.Http.IHeader;

        interface IAbstractHttpEntity {
            GetContentType(
                [out] IHeader** header);

            GetContentEncoding(
                [out] IHeader** header);

            IsChunked(
                [out] Boolean* isChunked);

            SetContentType(
                [in] IHeader* contentType);

            SetContentType(
                [in] String ctString);

            SetContentEncoding(
                [in] IHeader* contentEncoding);

            SetContentEncoding(
                [in] String ceString);

            SetChunked(
                [in] Boolean chunked);

            ConsumeContent();
        }
        interface IBasicHttpEntity{}
        interface IEntitySerializer{}
        interface IStrictContentLengthStrategy{}
        interface IContentLengthStrategy {
            const Int32 IDENTITY = -1;
            const Int32 CHUNKED  = -2;
        }
        interface IInputStreamEntity{}
    }

    namespace Params {
        interface IHttpParams {
        }
        interface IBasicHttpParams{}
        interface IHttpConnectionParamsHelper{}
    }

    namespace Util {
        interface ICharArrayBuffer{
        }
    }

    namespace Protocol {
        interface IHttpContext{}
        interface IBasicHttpProcessor{}
        interface IRequestContent{}
    }

    namespace Conn {
        namespace Ssl {
        interface ISSLSocketFactory{}
    }
        namespace Routing {
            interface IHttpRoutePlanner{}
        }
        interface IClientConnectionManager{}
    }

    namespace Impl {
    namespace Client {
        interface IDefaultHttpClient{}
    }
        interface IHttpConnectionMetricsImpl{}
    }

    namespace IO {
        interface ISessionInputBuffer{}
        interface ISessionOutputBuffer{}
        interface IHttpMessageWriter{}
    }

    using interface Org.Apache.Http.Entity.IInputStreamEntity;

    namespace Message {
        interface IBasicHttpRequest{}
        interface IBasicHeaderValueParserHelper{}
        interface IBasicHttpEntityEnclosingRequest{
            SetEntity(
                [in] IInputStreamEntity* entity);
        }
    }

    interface IHttpRequest {
    }

    interface IHttpResponse{
    }

    using interface Org.Apache.Http.Protocol.IHttpContext;

    interface IHttpRequestInterceptor {
        Process(
            [in] IHttpRequest* req,
            [in] IHttpContext* ctxt);
    }

    interface IHttpEntity {
    }

    interface IHttpConnection{
    }

    interface IHttpInetConnection{
    }

    interface IHttpEntityEnclosingRequest{
    }

    interface IStatusLine {
    }

    interface IHeaderElement{
    }

    interface IProtocolVersion{
    }

    interface IHttpStatus {
        const Int32 SC_OK = 200;
        const Int32 SC_NO_CONTENT = 204;
        const Int32 SC_PARTIAL_CONTENT = 206;
        const Int32 SC_NOT_MODIFIED = 304;
    }

    interface IRequestLine{
        GetMethod(
            [out] String* str);
    }

    interface IHttpVersion{}

    } // namespace Http

    namespace Harmony {
        namespace Xnet {
            namespace Provider {
                namespace Jsse {
                    interface ITrustManagerImpl{}
                    interface ISSLClientSessionCache{}
                    interface IFileClientSessionCache{}
                    interface IFileClientSessionCacheHelper{}
                    interface IOpenSSLContextImpl{}
                    interface IClientSessionContext{}
                }
            }
        }
    }

    namespace Commons {
        namespace Logging {
            interface ILog{}
            interface ILogFactory{}
        }
    }

    } // namespace Apache

    namespace Bouncycastle {
        namespace Asn1 {
            namespace X509 {
                interface IX509Name {
                }
            }
        }
    }

    } // namespace Org

}
