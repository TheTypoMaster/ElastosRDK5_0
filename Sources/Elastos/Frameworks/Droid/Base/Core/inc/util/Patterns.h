
#ifndef __DROID_UTIL_PATTERNS_H_
#define __DROID_UTIL_PATTERNS_H_

#include <Elastos.Core.h>

using Elastos::Utility::Regex::IMatcher;
using Elastos::Utility::Regex::IPattern;

namespace Elastos {
namespace Droid {
namespace Utility {

/**
 * Commonly used regular expression patterns.
 */
class Patterns
{
private:
    /**
     * Do not create this static utility class.
     */
    Patterns();
    Patterns(const Patterns& other);

public:
    /**
     *  Regular expression to match all IANA top-level domains.
     *  List accurate as of 2011/07/18.  List taken from:
     *  http://data.iana.org/TLD/tlds-alpha-by-domain.txt
     *  This pattern is auto-generated by frameworks/ex/common/tools/make-iana-tld-pattern.py
     */
    static const String TOP_LEVEL_DOMAIN_STR;

    /**
     *  Regular expression pattern to match all IANA top-level domains.
     */
    static const AutoPtr<IPattern> TOP_LEVEL_DOMAIN;

    /**
     *  Regular expression to match all IANA top-level domains for WEB_URL.
     *  List accurate as of 2011/07/18.  List taken from:
     *  http://data.iana.org/TLD/tlds-alpha-by-domain.txt
     *  This pattern is auto-generated by frameworks/ex/common/tools/make-iana-tld-pattern.py
     */
    static const String TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL;

    /**
     * Good characters for Internationalized Resource Identifiers (IRI).
     * This comprises most common used Unicode characters allowed in IRI
     * as detailed in RFC 3987.
     * Specifically, those two byte Unicode characters are not included.
     */
    static const String GOOD_IRI_CHAR;

    /**
     *  Regular expression pattern to match most part of RFC 3987
     *  Internationalized URLs, aka IRIs.  Commonly used Unicode characters are
     *  added.
     */
    static const AutoPtr<IPattern> WEB_URL;

    static const AutoPtr<IPattern> IP_ADDRESS;

    static const AutoPtr<IPattern> DOMAIN_NAME;

    static const AutoPtr<IPattern> EMAIL_ADDRESS;

    /**
     * This pattern is intended for searching for things that look like they
     * might be phone numbers in arbitrary text, not for validating whether
     * something is in fact a phone number.  It will miss many things that
     * are legitimate phone numbers.
     *
     * <p> The pattern matches the following:
     * <ul>
     * <li>Optionally, a + sign followed immediately by one or more digits. Spaces, dots, or dashes
     * may follow.
     * <li>Optionally, sets of digits in parentheses, separated by spaces, dots, or dashes.
     * <li>A string starting and ending with a digit, containing digits, spaces, dots, and/or dashes.
     * </ul>
     */
    static const AutoPtr<IPattern> PHONE;

public:
    /**
     *  Convenience method to take all of the non-null matching groups in a
     *  regex Matcher and return them as a concatenated string.
     *
     *  @param matcher      The Matcher object from which grouped text will
     *                      be extracted
     *
     *  @return             A String comprising all of the non-null matched
     *                      groups concatenated together
     */
    static String ConcatGroups(
        /* [in] */ IMatcher* matcher);

    /**
     * Convenience method to return only the digits and plus signs
     * in the matching string.
     *
     * @param matcher      The Matcher object from which digits and plus will
     *                     be extracted
     *
     * @return             A String comprising all of the digits and plus in
     *                     the match
     */
    static String DigitsAndPlusOnly(
        /* [in] */ IMatcher* matcher);
};

}
}
}

#endif //__DROID_UTIL_PATTERNS_H_
