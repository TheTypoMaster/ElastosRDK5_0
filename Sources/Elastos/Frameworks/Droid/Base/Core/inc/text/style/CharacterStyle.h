#ifndef __CharacterStyle_H__
#define __CharacterStyle_H__

#include "Elastos.Droid.Core_server.h"

using Elastos::Droid::Text::Style::ICharacterStyle;

namespace Elastos {
namespace Droid {
namespace Text {
namespace Style {

/**
 * The classes that affect character-level text formatting extend this
 * class.  Most extend its subclass {@link MetricAffectingSpan}, but simple
 * ones may just implement {@link UpdateAppearance}.
 */
//public abstract
class CharacterStyle
{
private:
    /**
     * A Passthrough CharacterStyle is one that
     * passes {@link #updateDrawState} calls through to the
     * specified CharacterStyle while still being a distinct object,
     * and is therefore able to be attached to the same Spannable
     * to which the specified CharacterStyle is already attached.
     */
    //static
    class Passthrough
        : public ElRefBase
        , public ICharacterStyle
    {
    public:
        CARAPI_(PInterface) Probe(
            /* [in] */ REIID riid);

        CARAPI_(UInt32) AddRef();

        CARAPI_(UInt32) Release();

        CARAPI GetInterfaceID(
            /* [in] */ IInterface* object,
            /* [in] */ InterfaceID* iid);

    public:
        /**
         * Creates a new Passthrough of the specfied CharacterStyle.
         */
        Passthrough(
            /* [in] */ ICharacterStyle* cs);

        /**
         * Passes updateDrawState through to the underlying CharacterStyle.
         */
        //@Override
        CARAPI UpdateDrawState(
            /* [in] */ ITextPaint* tp);

        /**
         * Returns the CharacterStyle underlying this one, or the one
         * underlying it if it too is a Passthrough.
         */
        //@Override
        CARAPI GetUnderlying(
            /* [out] */ ICharacterStyle** result);

    private:
        AutoPtr<ICharacterStyle> mStyle;

    };

public:
    virtual CARAPI_(PInterface) Probe(
        /* [in] */ REIID riid) = 0;

    virtual CARAPI UpdateDrawState(
        /* [in] */ ITextPaint* tp) = 0;

    /**
     * A given CharacterStyle can only applied to a single region of a given
     * Spanned.  If you need to attach the same CharacterStyle to multiple
     * regions, you can use this method to wrap it with a new object that
     * will have the same effect but be a distinct object so that it can
     * also be attached without conflict.
     */
    static CARAPI_(AutoPtr<ICharacterStyle>) Wrap(
        /* [in] */ ICharacterStyle* cs);

    /**
     * Returns "this" for most CharacterStyles, but for CharacterStyles
     * that were generated by {@link #wrap}, returns the underlying
     * CharacterStyle.
     */
    CARAPI_(AutoPtr<ICharacterStyle>) GetUnderlying();
};


} // namespace Style
} // namespace Text
} // namepsace Droid
} // namespace Elastos

#endif // __CharacterStyle_H__
