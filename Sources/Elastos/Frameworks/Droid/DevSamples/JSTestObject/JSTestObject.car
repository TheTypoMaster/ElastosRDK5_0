module
{
    importlib("Elastos.Droid.Core.eco");

    interface IModuleInfo;
    interface IClassInfo;
    interface IConstantInfo;
    interface ITypeAliasInfo;
    interface IEnumItemInfo;
    interface IFieldInfo;
    interface IFunctionInfo;
    interface IMethodInfo;
    interface IParamInfo;
    interface IArgumentList;
    interface IConstructorInfo;
    interface ICallbackMethodInfo;
    interface IDelegateProxy;
    interface ICallbackInvocation;
    interface ICallbackArgumentList;

    interface IVariable;
    interface IVariableOfCarArray;
    interface IVariableOfStringBuf;
    interface IVariableOfStruct;
    interface ICarArraySetter;
    interface ICarArrayGetter;
    interface IStringBufSetter;
    interface IStringBufGetter;
    interface IStructSetter;
    interface IStructGetter;
    interface ICppVectorSetter;
    interface ICppVectorGetter;

    interface IDataTypeInfo;
    interface IInterfaceInfo;
    interface IStructInfo;
    interface IEnumInfo;

    //typedef [dummytype] PVoid PCarQuintet;
    //typedef [dummytype] PVoid PRegime;
    //typedef PVoid LocalPtr;

    typedef Int32 PCarQuintet;
    typedef IRegime* PRegime;

    interface ITestModuleInfo;
    interface ITestClassInfo;
    interface ITestCarDataType;
    interface ITestMethodInfo;
    interface ITestParamInfo;
    interface ITestTypeAliasInfo;
    interface ITestArgumentList;

    interface IMethodTest;
    interface IProperty;

    namespace Elastos {
    namespace Droid {
    namespace DevSamples {
    namespace JSTestObject {

    [deprecated]
    interface ITestObject {
        Test_Require(
            [in] String moduleName,
            [in] String className,
            [out] IInterface** outObject);            

        Test_Require_ModuleInfo(
            [in] String moduleName,
            [in] String className,
            [out] IInterface** outObject);            

        Test_Require_ClassInfo(
            [in] String moduleName,
            [in] String className,
            [out] IInterface** outObject);            
    }

    //[local,deprecated]
    [deprecated]
    interface ITestCarDataType {
        Test_NULL();

        Test_Int16(
            [in] Int16 inValue,
            [out] Int16* outValue);
        Test_Int16_Ref(
            [in] Int16* inValue,    //deprecated
            [out] Int16* outValue);

        Test_Int32(
            [in] Int32 inValue,
            [out] Int32* outValue);
        Test_Int32_Ref(
            [in] Int32* inValue,    //deprecated
            [out] Int32* outValue);

        Test_Int64(
            [in] Int64 inValue,
            [out] Int64* outValue);
        Test_Int64_Ref(
            [in] Int64* inValue,    //deprecated
            [out] Int64* outValue);

        Test_Byte(
            [in] Byte inValue,
            [out] Byte* outValue);
        Test_Byte_Ref(
            [in] Byte* inValue,    //deprecated
            [out] Byte* outValue);

        Test_Float(
            [in] Float inValue,
            [out] Float* outValue);
        Test_Float_Ref(
            [in] Float* inValue,    //deprecated
            [out] Float* outValue);

        Test_Double(
            [in] Double inValue,
            [out] Double* outValue);
        Test_Double_Ref(
            [in] Double* inValue,    //deprecated
            [out] Double* outValue);

        Test_Char8(
            [in] Char8 inValue,
            [out] Char8* outValue);
        Test_Char8_Ref(
            [in] Char8* inValue,    //deprecated
            [out] Char8* outValue);

        Test_Char16(
            [in] Char16 inValue,
            [out] Char16* outValue);
        Test_Char16_Ref(
            [in] Char16* inValue,    //deprecated
            [out] Char16* outValue);

        Test_CString(
            [in] CString inCStr,
            [out] CString* outCStr);
        Test_CString_Ref(
            [in] CString* inCStr,    //deprecated
            [out] CString* outCStr);

        Test_String(
            [in] String inStr,
            [out] String* outStr);
        Test_String_Ref(
            [in] String* inStr,    //deprecated
            [out] String* outStr);

        Test_Boolean(
            [in] Boolean inValue,
            [out] Boolean* outValue);
        Test_Boolean_Ref(
            [in] Boolean* inValue,    //deprecated
            [out] Boolean* outValue);

        Test_EMuid(
            [in] EMuid inId,
            [out] EMuid* outId);
        Test_EMuid_Ref(
            [in] EMuid* inId,    //deprecated
            [out] EMuid* outId);

        Test_EGuid(
            [in] EGuid inId,
            [out] EGuid* outId);
        Test_EGuid_Ref(
            [in] EGuid* inId,    //deprecated
            [out] EGuid* outId);

        Test_ECode(
            [in] ECode inValue,
            [out] ECode* outValue);
        Test_ECode_Ref(
            [in] ECode* inValue,    //deprecated
            [out] ECode* outValue);

        //Test_LocalPtr (can only be used in local interface)
        //Test_LocalPtr(
        //  [in] LocalPtr inValue,
        //  [out] LocalPtr* outValue);

        //LocalType

        //Enum
        Test_Enum(
            [in] enum CarDataType inValue,
            [out] enum CarDataType* outValue);
        Test_Enum_Ref(
            [in] enum CarDataType* inValue,    //deprecated
            [out] enum CarDataType* outValue);

        //StringBuf
        //StringBuf can only be used in out parameters
        Test_StringBuf(
            [in] CString inValue,
            [out, callee] StringBuf<>* outValue);

        //ArrayOf
        Test_ArrayOf_Int16(
            [in] ArrayOf<Int16> inArrayOf,
            [out, callee] ArrayOf<Int16>* outArrayOf);
        Test_ArrayOf_Ref(
            [in] ArrayOf<Int16>* inArrayOf,    //deprecated
            [out, callee] ArrayOf<Int16>* outArrayOf);

        Test_ArrayOf_Int32(
            [in] ArrayOf<Int32> inArrayOf,
            [out, callee] ArrayOf<Int32>* outArrayOf);
        Test_ArrayOf_Int64(
            [in] ArrayOf<Int64> inArrayOf,
            [out, callee] ArrayOf<Int64>* outArrayOf);
        Test_ArrayOf_Byte(
            [in] ArrayOf<Byte> inArrayOf,
            [out, callee] ArrayOf<Byte>* outArrayOf);
        Test_ArrayOf_Float(
            [in] ArrayOf<Float> inArrayOf,
            [out, callee] ArrayOf<Float>* outArrayOf);
        Test_ArrayOf_Double(
            [in] ArrayOf<Double> inArrayOf,
            [out, callee] ArrayOf<Double>* outArrayOf);
        Test_ArrayOf_Char8(
            [in] ArrayOf<Char8> inArrayOf,
            [out, callee] ArrayOf<Char8>* outArrayOf);
        Test_ArrayOf_Char16(
            [in] ArrayOf<Char16> inArrayOf,
            [out, callee] ArrayOf<Char16>* outArrayOf);
        Test_ArrayOf_CString(
            [in] ArrayOf<CString> inArrayOf,
            [out, callee] ArrayOf<CString>* outArrayOf);
        Test_ArrayOf_String(
            [in] ArrayOf<String> inArrayOf,
            [out, callee] ArrayOf<String>* outArrayOf);
        Test_ArrayOf_Boolean(
            [in] ArrayOf<Boolean> inArrayOf,
            [out, callee] ArrayOf<Boolean>* outArrayOf);
        Test_ArrayOf_EMuid(
            [in] ArrayOf<EMuid> inArrayOf,
            [out, callee] ArrayOf<EMuid>* outArrayOf);
        Test_ArrayOf_EGuid(
            [in] ArrayOf<EGuid> inArrayOf,
            [out, callee] ArrayOf<EGuid>* outArrayOf);
        Test_ArrayOf_ECode(
            [in] ArrayOf<ECode> inArrayOf,
            [out, callee] ArrayOf<ECode>* outArrayOf);

        //Test_ArrayOf_LocalPtr(...)
        //Test_ArrayOf_LocalType(...)

        Test_ArrayOf_Enum(
            [in] ArrayOf<enum CarDataType> inArrayOf,
            [out, callee] ArrayOf<enum CarDataType>* outArrayOf);

        //CARQuintet type cann't be nested(system notification bug:CARQuintet->CARQuient)
        //Test_ArrayOf_StringBuf(...)
        //Test_ArrayOf_ArrayOf(...)
        //Test_ArrayOf_BufferOf(...)
        //Test_ArrayOf_MemoryBuf(...)
        //Test_ArrayOf_CppVector(...)

        Test_ArrayOf_IInterface(
            [in] ArrayOf<IInterface> inArrayOf,
            [out, callee] ArrayOf<IInterface>* outArrayOf);

        //BufferOf
        //......
        Test_BufferOf_Int32(
            [in] BufferOf<Int32> inValue,
            [out, callee] BufferOf<Int32>* outValue);
        Test_BufferOf_Int32_Ref(
            [in] BufferOf<Int32>* inValue,    //deprecated
            [out, callee] BufferOf<Int32>* outValue);
        //......
        Test_BufferOf_IInterface(
            [in] BufferOf<IInterface> inBufferOf,
            [out, callee] BufferOf<IInterface>* outBufferOf);

        //MemoryBuf
        Test_MemoryBuf(
            [in] MemoryBuf<> inMemoryBuf,
            [out, callee] MemoryBuf<> * outMemoryBuf);
        Test_MemoryBuf_Ref(
            [in] MemoryBuf<> * inMemoryBuf,    //deprecated
            [out, callee] MemoryBuf<> * outMemoryBuf);

        //CppVector
            //ICppVectorInfo/ICppVectorSetter/ICppVectorGetter

        //Struct
            //IStructInfo/IStructSetter/IStructGetter

        Test_Interface(
            [in] IInterface* inObject,
            [out] IInterface** outObject);
        Test_Interface_Ref(
            [in] IInterface** inObject,         //deprecated
            [out] IInterface** outObject);
    }

    [deprecated]
    interface IMethodTest {
        TestMethod_00();
    }

    struct StructProperty {
        IStructInfo* pDesc;
    }

    [deprecated]
    interface IProperty {
        GetProperty(
            [out] IInterface** property);
        SetProperty(
            [in] IInterface* property);
    }


    struct StructTestProperty {
        IStructInfo* pDesc;

        Int16 mInt16Value;
        Int32 mInt32Value;
        Int64 mInt64Value;
    }

    [deprecated]
    interface ITestFunctionInfo {
        GetName(
            [out] StringBuf<> name);

        GetParamCount(
            [out] Int32* count);

        GetAllParamInfos(
            [out] BufferOf<IParamInfo*> paramInfos);

        GetParamInfoByIndex(
            [in] Int32 index,
            [out] IParamInfo** paramInfo);

        GetParamInfoByName(
            [in] CString name,
            [out] IParamInfo** paramInfo);
    }

    [deprecated]
    interface ITestMethodInfo extends ITestFunctionInfo {
        CreateArgumentList(
            [out] IArgumentList** argumentList);

        Invoke(
            [in] PInterface target,
            [in] IArgumentList* argumentList);
    }

    [deprecated]
    interface ITestParamInfo {
        GetMethodInfo(
            [out] IMethodInfo** methodInfo);

        GetName(
            [out] StringBuf<> name);

        GetIndex(
            [out] Int32* index);

        GetIOAttribute(
            [out] ParamIOAttribute* ioAttrib);

        IsReturnValue(
            [out] Boolean* returnValue);

        GetTypeInfo(
            [out] IDataTypeInfo** typeInfo);

        GetAdvisedCapacity(
            [out] Int32* advisedCapacity);

        IsUsingTypeAlias(
            [out] Boolean* usingTypeAlias);

        GetUsedTypeAliasInfo(
            [out] ITypeAliasInfo** usedTypeAliasInfo);
    }

    [deprecated]
    interface ITestTypeAliasInfo {
        GetName(
            [out] StringBuf<> name);

        GetTypeInfo(
            [out] IDataTypeInfo** typeInfo);

        GetModuleInfo(
            [out] IModuleInfo** moduleInfo);

        IsDummy(
            [out] Boolean* isDummy);

        GetPtrLevel(
            [out] Int32* level);
    }

    [deprecated]
    interface ITestArgumentList {
        GetFunctionInfo(
            [out] IFunctionInfo** functionInfo);

        SetInputArgumentOfInt16(
            [in] Int32 index,
            [in] Int16 value);

        SetInputArgumentOfInt32(
            [in] Int32 index,
            [in] Int32 value);

        SetInputArgumentOfInt64(
            [in] Int32 index,
            [in] Int64 value);

        SetInputArgumentOfByte(
            [in] Int32 index,
            [in] Byte value);

        SetInputArgumentOfFloat(
            [in] Int32 index,
            [in] Float value);

        SetInputArgumentOfDouble(
            [in] Int32 index,
            [in] Double value);

        SetInputArgumentOfChar8(
            [in] Int32 index,
            [in] Char8 value);

        SetInputArgumentOfChar16(
            [in] Int32 index,
            [in] Char16 value);

        SetInputArgumentOfCString(
            [in] Int32 index,
            [in] CString value);

        SetInputArgumentOfString(
            [in] Int32 index,
            [in] String value);

        SetInputArgumentOfBoolean(
            [in] Int32 index,
            [in] Boolean value);

        SetInputArgumentOfEMuid(
            [in] Int32 index,
            [in] EMuid* value);        //deprecated

        SetInputArgumentOfEGuid(
            [in] Int32 index,
            [in] EGuid* value);        //deprecated

        SetInputArgumentOfECode(
            [in] Int32 index,
            [in] ECode value);

        //--------hacked just for test--------
        SetInputArgumentOfLocalPtr(
            [in] Int32 index,
            //[in] LocalPtr value);
            [in] Int32 value);

        //--------hacked just for test--------
         SetInputArgumentOfLocalType(
            [in] Int32 index,
            //[in] PVoid value);
            [in] Int32 value);

        SetInputArgumentOfEnum(
            [in] Int32 index,
            [in] Int32 value);

        //--------hacked just for test--------
        SetInputArgumentOfCarArray(
            [in] Int32 index,
            //[in] PCarQuintet value);
            [in] Int32 value);

        //--------hacked just for test--------
        SetInputArgumentOfStructPtr(
            [in] Int32 index,
            //[in] PVoid value);
            [in] Int32 value);

        SetInputArgumentOfObjectPtr(
            [in] Int32 index,
            [in] PInterface value);

        SetOutputArgumentOfInt16Ptr(
            [in] Int32 index,
            [out] Int16* value);

        SetOutputArgumentOfInt32Ptr(
            [in] Int32 index,
            [out] Int32* value);

        SetOutputArgumentOfInt64Ptr(
            [in] Int32 index,
            [out] Int64* value);

        SetOutputArgumentOfBytePtr(
            [in] Int32 index,
            [out] Byte* value);

        SetOutputArgumentOfFloatPtr(
            [in] Int32 index,
            [out] Float* value);

        SetOutputArgumentOfDoublePtr(
            [in] Int32 index,
            [out] Double* value);

        SetOutputArgumentOfChar8Ptr(
            [in] Int32 index,
            [out] Char8* value);

        SetOutputArgumentOfChar16Ptr(
            [in] Int32 index,
            [out] Char16* value);

        SetOutputArgumentOfStringPtr(
            [in] Int32 index,
            [out] String* value);

        SetOutputArgumentOfBooleanPtr(
            [in] Int32 index,
            [out] Boolean* value);

        SetOutputArgumentOfEMuidPtr(
            [in] Int32 index,
            [out] EMuid* value);

        SetOutputArgumentOfEGuidPtr(
            [in] Int32 index,
            [out] EGuid* value);

        SetOutputArgumentOfECodePtr(
            [in] Int32 index,
            [out] ECode* value);

        //--------hacked just for test--------
        SetOutputArgumentOfLocalPtrPtr(
            [in] Int32 index,
            //[out] LocalPtr* value);
            [out] Int32* value);

        //--------hacked just for test--------
        SetOutputArgumentOfLocalTypePtr(
            [in] Int32 index,
            //[out] PVoid value);
            [out] Int32* value);

        SetOutputArgumentOfEnumPtr(
            [in] Int32 index,
            [out] Int32* value);

        // Caller allocated
        SetOutputArgumentOfStringBufPtr(
            [in] Int32 index,
            [out] StringBuf<> value);

        // Callee allocated
        SetOutputArgumentOfStringBufPtrPtr(
            [in] Int32 index,
            [out, callee] StringBuf<>* value);

        //--------hacked just for test--------
        // Caller allocated
        SetOutputArgumentOfCarArrayPtr(
            [in] Int32 index,
            //[out] PCarQuintet value);
            [out] Int32* value);


        // Callee allocated
        SetOutputArgumentOfCarArrayPtrPtr(
            [in] Int32 index,
            [out] PCarQuintet* value);

        //--------hacked just for test--------
        // Caller allocated
        SetOutputArgumentOfStructPtr(
            [in] Int32 index,
            //[out] PVoid value);
            [out] Int32* value);

        //--------hacked just for test--------
        // Callee allocated
        SetOutputArgumentOfStructPtrPtr(
            [in] Int32 index,
            //[out] PVoid* value);
            [out] Int32* value);

        SetOutputArgumentOfObjectPtrPtr(
            [in] Int32 index,
            [out] PInterface* value);
    }

    [deprecated]
    interface ITestClassInfo {
        GetName(
            [out] StringBuf<> name);

        GetId(
            [out] ClassID* clsid);

        GetModuleInfo(
            [out] IModuleInfo** moduleInfo);

        IsSingleton(
            [out] Boolean* isSingleton);

        GetThreadingModel(
            [out] ThreadingModel* threadingModel);

        IsPrivate(
            [out] Boolean* isPrivate);

        IsReturnValue(
            [out] Boolean* returnValue);

        IsBaseClass(
            [out] Boolean* isBaseClass);

        HasBaseClass(
            [out] Boolean* hasBaseClass);

        GetBaseClassInfo(
            [out] IClassInfo** baseClassInfo);

        IsGeneric(
            [out] Boolean* isGeneric);

        HasGeneric(
            [out] Boolean* hasGeneric);

        GetGenericInfo(
            [out] IClassInfo** genericInfo);

        IsRegime(
            [out] Boolean* isRegime);

        GetAspectCount(
            [out] Int32* count);

        GetAllAspectInfos(
            [out] BufferOf<IClassInfo*> aspectInfos);

        GetAspectInfo(
            [in] CString name,
            [out] IClassInfo** aspectInfo);

        IsAspect(
            [out] Boolean* isAspect);

        GetAggregateeCount(
            [out] Int32* count);

        GetAllAggregateeInfos(
            [out] BufferOf<IClassInfo*> aggregateeInfos);

        GetAggregateeInfo(
            [in] CString name,
            [out] IClassInfo** aggregateeInfo);

        GetConstructorCount(
            [out] Int32* count);

        GetAllConstructorInfos(
            [out] BufferOf<IConstructorInfo*> constructorInfos);

        GetConstructorInfoByParamNames(
            [in] CString name,
            [out] IConstructorInfo** constructorInfo);

        GetConstructorInfoByParamCount(
            [in] Int32 count,
            [out] IConstructorInfo** constructorInfo);

        GetInterfaceCount(
            [out] Int32* count);

        GetAllInterfaceInfos(
            [out] BufferOf<IInterfaceInfo*> interfaceInfos);

        GetInterfaceInfo(
            [in] CString name,
            [out] IInterfaceInfo** interfaceInfo);

        GetCallbackInterfaceCount(
            [out] Int32* count);

        GetAllCallbackInterfaceInfos(
            [out] BufferOf<IInterfaceInfo*> callbackInterfaceInfos);

        GetCallbackInterfaceInfo(
            [in] CString name,
            [out] IInterfaceInfo** callbackInterfaceInfo);

        GetMethodCount(
            [out] Int32* count);

        GetAllMethodInfos(
            [out] BufferOf<IMethodInfo*> methodInfos);

        GetMethodInfo(
            [in] CString name,
            [out] IMethodInfo** methodInfo);

        GetCallbackMethodCount(
            [out] Int32* count);

        GetAllCallbackMethodInfos(
            [out] BufferOf<ICallbackMethodInfo*> callbackMethodInfos);

        GetCallbackMethodInfo(
            [in] CString name,
            [out] ICallbackMethodInfo** callbackMethodInfo);

        RemoveAllCallbackHandlers(
            [in] PInterface server);

        CreateObject(
            [out] PInterface* object);

        CreateObjectInRegime(
            [in] PRegime rgm,
            //[in] IRegime* rgm,
            [out] PInterface* object);
    }

    [deprecated]
    interface ITestModuleInfo {
        GetPath(
            [out] StringBuf<> path);

        GetVersion(
            [out] Int32* major,
            [out] Int32* minor,
            [out] Int32* build,
            [out] Int32* revision);

        GetClassCount(
            [out] Int32* count);

        GetAllClassInfos(
            [out] BufferOf<IClassInfo*> classInfos);

        GetClassInfo(
            [in] CString name,
            [out] IClassInfo** classInfo);

        GetInterfaceCount(
            [out] Int32* count);

        GetAllInterfaceInfos(
            [out] BufferOf<IInterfaceInfo*> interfaceInfos);

        GetInterfaceInfo(
            [in] CString name,
            [out] IInterfaceInfo** interfaceInfo);

        GetStructCount(
            [out] Int32* count);

        GetAllStructInfos(
            [out] BufferOf<IStructInfo*> structInfos);

        GetStructInfo(
            [in] CString name,
            [out] IStructInfo** structInfo);

        GetEnumCount(
            [out] Int32* count);

        GetAllEnumInfos(
            [out] BufferOf<IEnumInfo*> enumInfos);

        GetEnumInfo(
            [in] CString name,
            [out] IEnumInfo** enumInfo);

        GetTypeAliasCount(
            [out] Int32* count);

        GetAllTypeAliasInfos(
            [out] BufferOf<ITypeAliasInfo*> typeAliasInfos);

        GetTypeAliasInfo(
            [in] CString name,
            [out] ITypeAliasInfo** typeAliasInfo);

        GetConstantCount(
            [out] Int32* count);

        GetAllConstantInfos(
            [out] BufferOf<IConstantInfo*> constantInfos);

        GetConstantInfo(
            [in] CString name,
            [out] IConstantInfo** constantInfo);

        GetImportModuleInfoCount(
            [out] Int32* count);

        GetAllImportModuleInfos(
            [out] BufferOf<IModuleInfo*> moduleInfos);
    }

    class CTestObject {
        interface ITestObject;
    }

    class CTestCarDataType {
        interface ITestCarDataType;
    }

    class CTestMethodInfo {
        constructor();

        constructor(
            [in] IMethodInfo* pMethodInfo);

        interface ITestMethodInfo;
    }

    class CTestParamInfo {
        constructor();

        constructor(
            [in] IParamInfo* pParamInfo);

        interface ITestParamInfo;
    }

    class CTestTypeAliasInfo {
        constructor();

        constructor(
            [in] ITypeAliasInfo* pTypeAliasInfo);

        interface ITestTypeAliasInfo;
    }

    class CTestArgumentList {
        constructor();

        constructor(
            [in] IArgumentList* pArgumentList);

        interface ITestArgumentList;
    }

    class CTestModuleInfo {
        constructor();

        constructor(
            [in] IModuleInfo* pModuleInfo);

        interface ITestModuleInfo;
    }

    class CTestClassInfo {
        constructor();

        constructor(
            [in] IClassInfo* pClassInfo);

        interface ITestClassInfo;
    }

    class CTestProperty {
        constructor();

        constructor(
            [in] IInterface* property);

        interface IProperty;
        interface IMethodTest;
    }

    } // namespace JSTestObject
    } // namespace DevSamples
    } // namespace Droid
    } // namespace Elastos


}

