module JSTestObject.eco
{
    importlib("Elastos.Droid.Core.eco");

    interface IInterface;
    interface IObject;
    interface IAspect;
    interface IClassObject;
    interface IModuleInfo;
    interface IClassInfo;
    interface IConstantInfo;
    interface ITypeAliasInfo;
    interface IEnumItemInfo;
    interface IFieldInfo;
    interface IFunctionInfo;
    interface IMethodInfo;
    interface IParamInfo;
    interface IArgumentList;
    interface IConstructorInfo;
    interface ICallbackMethodInfo;
    interface IDelegateProxy;
    interface ICallbackInvocation;
    interface ICallbackArgumentList;
    interface IVariable;
    interface IVariableOfCarArray;
    interface IVariableOfStringBuf;
    interface IVariableOfStruct;
    interface ICarArraySetter;
    interface ICarArrayGetter;
    interface IStringBufSetter;
    interface IStringBufGetter;
    interface IStructSetter;
    interface IStructGetter;
    interface ICppVectorSetter;
    interface ICppVectorGetter;
    interface IDataTypeInfo;
    interface IInterfaceInfo;
    interface IStructInfo;
    interface IEnumInfo;
    interface IRegime;
    interface ITestModuleInfo;
    interface ITestClassInfo;
    interface ITestCarDataType;
    interface ITestMethodInfo;
    interface ITestParamInfo;
    interface ITestTypeAliasInfo;
    interface ITestArgumentList;
    interface IMethodTest;
    interface IProperty;

    enum CarDataType {
        CarDataType_Int16 = 1,
        CarDataType_Int32 = 2,
        CarDataType_Int64 = 3,
        CarDataType_Byte = 4,
        CarDataType_Float = 5,
        CarDataType_Double = 6,
        CarDataType_Char8 = 7,
        CarDataType_Char16 = 8,
        CarDataType_CString = 9,
        CarDataType_String = 10,
        CarDataType_Boolean = 11,
        CarDataType_EMuid = 12,
        CarDataType_EGuid = 13,
        CarDataType_ECode = 14,
        CarDataType_LocalPtr = 15,
        CarDataType_LocalType = 16,
        CarDataType_Enum = 17,
        CarDataType_StringBuf = 18,
        CarDataType_ArrayOf = 19,
        CarDataType_BufferOf = 20,
        CarDataType_MemoryBuf = 21,
        CarDataType_CppVector = 22,
        CarDataType_Struct = 23,
        CarDataType_Interface = 24,
    }

    enum ParamIOAttribute {
        ParamIOAttribute_In = 0,
        ParamIOAttribute_CalleeAllocOut = 1,
        ParamIOAttribute_CallerAllocOut = 2,
    }

    enum ThreadingModel {
        ThreadingModel_Sequenced = 1,
        ThreadingModel_Synchronized = 2,
        ThreadingModel_ThreadSafe = 3,
        ThreadingModel_Naked = 4,
    }

    typedef [dummytype] EGuid ClassID;
    typedef [dummytype] Int32 AggregateType;
    typedef [dummytype] EMuid InterfaceID;
    typedef Int32 PCarQuintet;
    typedef [dummytype] IInterface * PInterface;
    typedef IRegime * PRegime;
    typedef PVoid LocalPtr;
    typedef [dummytype] Int32 MemorySize;

    struct StructProperty {
        IStructInfo * pDesc;
    }

    struct StructTestProperty {
        IStructInfo * pDesc;
        Int16 mInt16Value;
        Int32 mInt32Value;
        Int64 mInt64Value;
    }

    interface IInterface {
    }

    interface IObject {
        Aggregate(
            [in] Int32 type, 
            [in] IInterface * object);

        GetDomain(
            [out] IInterface ** object);

        GetClassID(
            [out] ClassID * clsid);

        GetHashCode(
            [out] Int32 * pHashCode);

        Equals(
            [in] IInterface * pInterface, 
            [out] Boolean * pEquals);

        ToString(
            [out] String * pInfo);
    }

    interface IAspect {
        AspectAggregate(
            [in] AggregateType type, 
            [in] IInterface * object);

        AspectGetDomain(
            [out] IInterface ** object);

        GetAspectID(
            [out] ClassID * clsid);
    }

    interface IClassObject {
        CreateObject(
            [in] IInterface * outer, 
            [in] InterfaceID riid, 
            [out] IInterface ** object);

        StayResident(
            [in] Boolean bIsStayResident);
    }

    [
        local
    ]
    interface IModuleInfo {
        GetPath(
            [out] StringBuf path);

        GetVersion(
            [out] Int32 * major, 
            [out] Int32 * minor, 
            [out] Int32 * build, 
            [out] Int32 * revision);

        GetClassCount(
            [out] Int32 * count);

        GetAllClassInfos(
            [out] BufferOf<IClassInfo *> classInfos);

        GetClassInfo(
            [in] CString name, 
            [out] IClassInfo ** classInfo);

        GetInterfaceCount(
            [out] Int32 * count);

        GetAllInterfaceInfos(
            [out] BufferOf<IInterfaceInfo *> interfaceInfos);

        GetInterfaceInfo(
            [in] CString name, 
            [out] IInterfaceInfo ** interfaceInfo);

        GetStructCount(
            [out] Int32 * count);

        GetAllStructInfos(
            [out] BufferOf<IStructInfo *> structInfos);

        GetStructInfo(
            [in] CString name, 
            [out] IStructInfo ** structInfo);

        GetEnumCount(
            [out] Int32 * count);

        GetAllEnumInfos(
            [out] BufferOf<IEnumInfo *> enumInfos);

        GetEnumInfo(
            [in] CString name, 
            [out] IEnumInfo ** enumInfo);

        GetTypeAliasCount(
            [out] Int32 * count);

        GetAllTypeAliasInfos(
            [out] BufferOf<ITypeAliasInfo *> typeAliasInfos);

        GetTypeAliasInfo(
            [in] CString name, 
            [out] ITypeAliasInfo ** typeAliasInfo);

        GetConstantCount(
            [out] Int32 * count);

        GetAllConstantInfos(
            [out] BufferOf<IConstantInfo *> constantInfos);

        GetConstantInfo(
            [in] CString name, 
            [out] IConstantInfo ** constantInfo);

        GetImportModuleInfoCount(
            [out] Int32 * count);

        GetAllImportModuleInfos(
            [out] BufferOf<IModuleInfo *> moduleInfos);
    }

    [
        local
    ]
    interface IClassInfo {
        GetName(
            [out] StringBuf name);

        GetId(
            [out] ClassID * clsid);

        GetModuleInfo(
            [out] IModuleInfo ** moduleInfo);

        IsSingleton(
            [out] Boolean * isSingleton);

        GetThreadingModel(
            [out] ThreadingModel * threadingModel);

        IsPrivate(
            [out] Boolean * isPrivate);

        IsReturnValue(
            [out] Boolean * returnValue);

        IsBaseClass(
            [out] Boolean * isBaseClass);

        HasBaseClass(
            [out] Boolean * hasBaseClass);

        GetBaseClassInfo(
            [out] IClassInfo ** baseClassInfo);

        IsGeneric(
            [out] Boolean * isGeneric);

        HasGeneric(
            [out] Boolean * hasGeneric);

        GetGenericInfo(
            [out] IClassInfo ** genericInfo);

        IsRegime(
            [out] Boolean * isRegime);

        GetAspectCount(
            [out] Int32 * count);

        GetAllAspectInfos(
            [out] BufferOf<IClassInfo *> aspectInfos);

        GetAspectInfo(
            [in] CString name, 
            [out] IClassInfo ** aspectInfo);

        IsAspect(
            [out] Boolean * isAspect);

        GetAggregateeCount(
            [out] Int32 * count);

        GetAllAggregateeInfos(
            [out] BufferOf<IClassInfo *> aggregateeInfos);

        GetAggregateeInfo(
            [in] CString name, 
            [out] IClassInfo ** aggregateeInfo);

        GetConstructorCount(
            [out] Int32 * count);

        GetAllConstructorInfos(
            [out] BufferOf<IConstructorInfo *> constructorInfos);

        GetConstructorInfoByParamNames(
            [in] CString name, 
            [out] IConstructorInfo ** constructorInfo);

        GetConstructorInfoByParamCount(
            [in] Int32 count, 
            [out] IConstructorInfo ** constructorInfo);

        GetInterfaceCount(
            [out] Int32 * count);

        GetAllInterfaceInfos(
            [out] BufferOf<IInterfaceInfo *> interfaceInfos);

        GetInterfaceInfo(
            [in] CString name, 
            [out] IInterfaceInfo ** interfaceInfo);

        GetCallbackInterfaceCount(
            [out] Int32 * count);

        GetAllCallbackInterfaceInfos(
            [out] BufferOf<IInterfaceInfo *> callbackInterfaceInfos);

        GetCallbackInterfaceInfo(
            [in] CString name, 
            [out] IInterfaceInfo ** callbackInterfaceInfo);

        GetMethodCount(
            [out] Int32 * count);

        GetAllMethodInfos(
            [out] BufferOf<IMethodInfo *> methodInfos);

        GetMethodInfo(
            [in] CString name, 
            [out] IMethodInfo ** methodInfo);

        GetCallbackMethodCount(
            [out] Int32 * count);

        GetAllCallbackMethodInfos(
            [out] BufferOf<ICallbackMethodInfo *> callbackMethodInfos);

        GetCallbackMethodInfo(
            [in] CString name, 
            [out] ICallbackMethodInfo ** callbackMethodInfo);

        RemoveAllCallbackHandlers(
            [in] PInterface server);

        CreateObject(
            [out] PInterface * object);

        CreateObjectInRegime(
            [in] PRegime rgm, 
            [out] PInterface * object);
    }

    [
        local
    ]
    interface IConstantInfo {
        GetName(
            [out] StringBuf name);

        GetValue(
            [out] Int32 * value);

        GetModuleInfo(
            [out] IModuleInfo ** moduleInfo);
    }

    [
        local
    ]
    interface ITypeAliasInfo {
        GetName(
            [out] StringBuf name);

        GetTypeInfo(
            [out] IDataTypeInfo ** typeInfo);

        GetModuleInfo(
            [out] IModuleInfo ** moduleInfo);

        IsDummy(
            [out] Boolean * isDummy);

        GetPtrLevel(
            [out] Int32 * level);
    }

    [
        local
    ]
    interface IEnumItemInfo {
        GetName(
            [out] StringBuf name);

        GetEnumInfo(
            [out] IEnumInfo ** enumInfo);

        GetValue(
            [out] Int32 * value);
    }

    [
        local
    ]
    interface IFieldInfo {
        GetName(
            [out] StringBuf name);

        GetTypeInfo(
            [out] IDataTypeInfo ** typeInfo);
    }

    [
        local
    ]
    interface IFunctionInfo {
        GetName(
            [out] StringBuf name);

        GetParamCount(
            [out] Int32 * count);

        GetAllParamInfos(
            [out] BufferOf<IParamInfo *> paramInfos);

        GetParamInfoByIndex(
            [in] Int32 index, 
            [out] IParamInfo ** paramInfo);

        GetParamInfoByName(
            [in] CString name, 
            [out] IParamInfo ** paramInfo);
    }

    [
        local
    ]
    interface IMethodInfo : IFunctionInfo {
        CreateArgumentList(
            [out] IArgumentList ** argumentList);

        Invoke(
            [in] PInterface target, 
            [in] IArgumentList * argumentList);
    }

    [
        local
    ]
    interface IParamInfo {
        GetMethodInfo(
            [out] IMethodInfo ** methodInfo);

        GetName(
            [out] StringBuf name);

        GetIndex(
            [out] Int32 * index);

        GetIOAttribute(
            [out] ParamIOAttribute * ioAttrib);

        IsReturnValue(
            [out] Boolean * returnValue);

        GetTypeInfo(
            [out] IDataTypeInfo ** typeInfo);

        GetAdvisedCapacity(
            [out] Int32 * advisedCapacity);

        IsUsingTypeAlias(
            [out] Boolean * usingTypeAlias);

        GetUsedTypeAliasInfo(
            [out] ITypeAliasInfo ** usedTypeAliasInfo);
    }

    [
        local
    ]
    interface IArgumentList {
        GetFunctionInfo(
            [out] IFunctionInfo ** functionInfo);

        SetInputArgumentOfInt16(
            [in] Int32 index, 
            [in] Int16 value);

        SetInputArgumentOfInt32(
            [in] Int32 index, 
            [in] Int32 value);

        SetInputArgumentOfInt64(
            [in] Int32 index, 
            [in] Int64 value);

        SetInputArgumentOfByte(
            [in] Int32 index, 
            [in] Byte value);

        SetInputArgumentOfFloat(
            [in] Int32 index, 
            [in] Float value);

        SetInputArgumentOfDouble(
            [in] Int32 index, 
            [in] Double value);

        SetInputArgumentOfChar8(
            [in] Int32 index, 
            [in] Char8 value);

        SetInputArgumentOfChar16(
            [in] Int32 index, 
            [in] Char16 value);

        SetInputArgumentOfCString(
            [in] Int32 index, 
            [in] CString value);

        SetInputArgumentOfString(
            [in] Int32 index, 
            [in] const String& value);

        SetInputArgumentOfBoolean(
            [in] Int32 index, 
            [in] Boolean value);

        SetInputArgumentOfEMuid(
            [in] Int32 index, 
            [in] EMuid * value);

        SetInputArgumentOfEGuid(
            [in] Int32 index, 
            [in] EGuid * value);

        SetInputArgumentOfECode(
            [in] Int32 index, 
            [in] ECode value);

        SetInputArgumentOfLocalPtr(
            [in] Int32 index, 
            [in] LocalPtr value);

        SetInputArgumentOfLocalType(
            [in] Int32 index, 
            [in] PVoid value);

        SetInputArgumentOfEnum(
            [in] Int32 index, 
            [in] Int32 value);

        SetInputArgumentOfCarArray(
            [in] Int32 index, 
            [in] PCarQuintet value);

        SetInputArgumentOfStructPtr(
            [in] Int32 index, 
            [in] PVoid value);

        SetInputArgumentOfObjectPtr(
            [in] Int32 index, 
            [in] PInterface value);

        SetOutputArgumentOfInt16Ptr(
            [in] Int32 index, 
            [out] Int16 * value);

        SetOutputArgumentOfInt32Ptr(
            [in] Int32 index, 
            [out] Int32 * value);

        SetOutputArgumentOfInt64Ptr(
            [in] Int32 index, 
            [out] Int64 * value);

        SetOutputArgumentOfBytePtr(
            [in] Int32 index, 
            [out] Byte * value);

        SetOutputArgumentOfFloatPtr(
            [in] Int32 index, 
            [out] Float * value);

        SetOutputArgumentOfDoublePtr(
            [in] Int32 index, 
            [out] Double * value);

        SetOutputArgumentOfChar8Ptr(
            [in] Int32 index, 
            [out] Char8 * value);

        SetOutputArgumentOfChar16Ptr(
            [in] Int32 index, 
            [out] Char16 * value);

        SetOutputArgumentOfStringPtr(
            [in] Int32 index, 
            [out] String * value);

        SetOutputArgumentOfBooleanPtr(
            [in] Int32 index, 
            [out] Boolean * value);

        SetOutputArgumentOfEMuidPtr(
            [in] Int32 index, 
            [out] EMuid * value);

        SetOutputArgumentOfEGuidPtr(
            [in] Int32 index, 
            [out] EGuid * value);

        SetOutputArgumentOfECodePtr(
            [in] Int32 index, 
            [out] ECode * value);

        SetOutputArgumentOfLocalPtrPtr(
            [in] Int32 index, 
            [out] LocalPtr * value);

        SetOutputArgumentOfLocalTypePtr(
            [in] Int32 index, 
            [out] PVoid value);

        SetOutputArgumentOfEnumPtr(
            [in] Int32 index, 
            [out] Int32 * value);

        SetOutputArgumentOfStringBufPtr(
            [in] Int32 index, 
            [out] StringBuf value);

        SetOutputArgumentOfStringBufPtrPtr(
            [in] Int32 index, 
            [out, callee] StringBuf * value);

        SetOutputArgumentOfCarArrayPtr(
            [in] Int32 index, 
            [out] PCarQuintet value);

        SetOutputArgumentOfCarArrayPtrPtr(
            [in] Int32 index, 
            [out] PCarQuintet * value);

        SetOutputArgumentOfStructPtr(
            [in] Int32 index, 
            [out] PVoid value);

        SetOutputArgumentOfStructPtrPtr(
            [in] Int32 index, 
            [out] PVoid * value);

        SetOutputArgumentOfObjectPtrPtr(
            [in] Int32 index, 
            [out] PInterface * value);
    }

    [
        local
    ]
    interface IConstructorInfo : IFunctionInfo {
        CreateArgumentList(
            [out] IArgumentList ** argumentList);

        CreateObject(
            [in] IArgumentList * argumentList, 
            [out] PInterface * object);

        CreateObjectInRegime(
            [in] PRegime rgm, 
            [in] IArgumentList * argumentList, 
            [out] PInterface * object);
    }

    [
        local
    ]
    interface ICallbackMethodInfo : IFunctionInfo {
        AddCallback(
            [in] PInterface server, 
            [in] EventHandler handler);

        RemoveCallback(
            [in] PInterface server, 
            [in] EventHandler handler);

        CreateDelegateProxy(
            [in] PVoid targetObject, 
            [in] PVoid targetMethod, 
            [in] ICallbackInvocation * callbackInvocation, 
            [out] IDelegateProxy ** delegateProxy);
    }

    [
        local
    ]
    interface IDelegateProxy {
        GetCallbackMethodInfo(
            [out] ICallbackMethodInfo ** callbackMethodInfo);

        GetTargetObject(
            [out] PVoid * targetObject);

        GetTargetMethod(
            [out] PVoid * targetMethod);

        GetCallbackInvocation(
            [out] ICallbackInvocation ** callbackInvocation);

        GetDelegate(
            [out] EventHandler * handler);
    }

    [
        local
    ]
    interface ICallbackInvocation {
        Invoke(
            [in] PVoid targetObject, 
            [in] PVoid targetMethod, 
            [in] ICallbackArgumentList * callbackArgumentList);
    }

    [
        local
    ]
    interface ICallbackArgumentList {
        GetCallbackMethodInfo(
            [out] ICallbackMethodInfo ** callbackMethodInfo);

        GetServerPtrArgument(
            [out] PInterface * server);

        GetInt16Argument(
            [in] Int32 index, 
            [out] Int16 * value);

        GetInt32Argument(
            [in] Int32 index, 
            [out] Int32 * value);

        GetInt64Argument(
            [in] Int32 index, 
            [out] Int64 * value);

        GetByteArgument(
            [in] Int32 index, 
            [out] Byte * value);

        GetFloatArgument(
            [in] Int32 index, 
            [out] Float * value);

        GetDoubleArgument(
            [in] Int32 index, 
            [out] Double * value);

        GetChar8Argument(
            [in] Int32 index, 
            [out] Char8 * value);

        GetChar16Argument(
            [in] Int32 index, 
            [out] Char16 * value);

        GetCStringArgument(
            [in] Int32 index, 
            [out] CString * value);

        GetStringArgument(
            [in] Int32 index, 
            [out] String * value);

        GetBooleanArgument(
            [in] Int32 index, 
            [out] Boolean * value);

        GetEMuidArgument(
            [in] Int32 index, 
            [out] EMuid ** value);

        GetEGuidArgument(
            [in] Int32 index, 
            [out] EGuid ** value);

        GetECodeArgument(
            [in] Int32 index, 
            [out] ECode * value);

        GetLocalPtrArgument(
            [in] Int32 index, 
            [out] LocalPtr * value);

        GetEnumArgument(
            [in] Int32 index, 
            [out] Int32 * value);

        GetCarArrayArgument(
            [in] Int32 index, 
            [out] PCarQuintet * value);

        GetStructPtrArgument(
            [in] Int32 index, 
            [out] PVoid * value);

        GetObjectPtrArgument(
            [in] Int32 index, 
            [out] PInterface * value);
    }

    [
        local
    ]
    interface IVariable {
        GetTypeInfo(
            [out] IDataTypeInfo ** typeInfo);

        GetPayload(
            [out] PVoid * payload);

        Rebox(
            [in] PVoid localVariablePtr);
    }

    [
        local
    ]
    interface IVariableOfCarArray : IVariable {
        GetSetter(
            [out] ICarArraySetter ** setter);

        GetGetter(
            [out] ICarArrayGetter ** getter);
    }

    [
        local
    ]
    interface IVariableOfStringBuf : IVariable {
        GetSetter(
            [out] IStringBufSetter ** setter);

        GetGetter(
            [out] IStringBufGetter ** getter);
    }

    [
        local
    ]
    interface IVariableOfStruct : IVariable {
        GetSetter(
            [out] IStructSetter ** setter);

        GetGetter(
            [out] IStructGetter ** getter);
    }

    [
        local
    ]
    interface ICarArraySetter {
        SetUsed(
            [in] Int32 used);

        SetInt16Element(
            [in] Int32 index, 
            [in] Int16 value);

        SetInt32Element(
            [in] Int32 index, 
            [in] Int32 value);

        SetInt64Element(
            [in] Int32 index, 
            [in] Int64 value);

        SetByteElement(
            [in] Int32 index, 
            [in] Byte value);

        SetFloatElement(
            [in] Int32 index, 
            [in] Float value);

        SetDoubleElement(
            [in] Int32 index, 
            [in] Double value);

        SetEnumElement(
            [in] Int32 index, 
            [in] Int32 value);

        SetChar8Element(
            [in] Int32 index, 
            [in] Char8 value);

        SetChar16Element(
            [in] Int32 index, 
            [in] Char16 value);

        SetCStringElement(
            [in] Int32 index, 
            [in] CString value);

        SetStringElement(
            [in] Int32 index, 
            [in] const String& value);

        SetBooleanElement(
            [in] Int32 index, 
            [in] Boolean value);

        SetEMuidElement(
            [in] Int32 index, 
            [in] EMuid * value);

        SetEGuidElement(
            [in] Int32 index, 
            [in] EGuid * value);

        SetECodeElement(
            [in] Int32 index, 
            [in] ECode value);

        SetLocalTypeElement(
            [in] Int32 index, 
            [in] PVoid value);

        SetObjectPtrElement(
            [in] Int32 index, 
            [in] PInterface value);

        GetStructElementSetter(
            [in] Int32 index, 
            [out] IStructSetter ** setter);
    }

    [
        local
    ]
    interface ICarArrayGetter {
        GetCapacity(
            [out] Int32 * capacity);

        GetUsed(
            [out] Int32 * used);

        GetInt16Element(
            [in] Int32 index, 
            [out] Int16 * value);

        GetInt32Element(
            [in] Int32 index, 
            [out] Int32 * value);

        GetInt64Element(
            [in] Int32 index, 
            [out] Int64 * value);

        GetByteElement(
            [in] Int32 index, 
            [out] Byte * value);

        GetFloatElement(
            [in] Int32 index, 
            [out] Float * value);

        GetDoubleElement(
            [in] Int32 index, 
            [out] Double * value);

        GetEnumElement(
            [in] Int32 index, 
            [out] Int32 * value);

        GetChar8Element(
            [in] Int32 index, 
            [out] Char8 * value);

        GetChar16Element(
            [in] Int32 index, 
            [out] Char16 * value);

        GetCStringElement(
            [in] Int32 index, 
            [out] CString * value);

        GetStringElement(
            [in] Int32 index, 
            [out] String * value);

        GetBooleanElement(
            [in] Int32 index, 
            [out] Boolean * value);

        GetEMuidElement(
            [in] Int32 index, 
            [out] EMuid * value);

        GetEGuidElement(
            [in] Int32 index, 
            [out] EGuid * value);

        GetECodeElement(
            [in] Int32 index, 
            [out] ECode * value);

        GetLocalTypeElement(
            [in] Int32 index, 
            [out] PVoid value);

        GetObjectPtrElement(
            [in] Int32 index, 
            [out] PInterface * value);

        GetStructElementGetter(
            [in] Int32 index, 
            [out] IStructGetter ** getter);
    }

    [
        local
    ]
    interface IStringBufSetter {
        SetElement(
            [in] Int32 index, 
            [in] Char8 character);

        SetData(
            [in] CString str);
    }

    [
        local
    ]
    interface IStringBufGetter {
        GetCapacity(
            [out] Int32 * capacity);

        GetLength(
            [out] Int32 * length);

        GetElement(
            [in] Int32 index, 
            [out] Char8 * character);

        GetData(
            [out] StringBuf stringBuf);
    }

    [
        local
    ]
    interface IStructSetter {
        ZeroAllFields();

        SetInt16Field(
            [in] CString name, 
            [in] Int16 value);

        SetInt32Field(
            [in] CString name, 
            [in] Int32 value);

        SetInt64Field(
            [in] CString name, 
            [in] Int64 value);

        SetByteField(
            [in] CString name, 
            [in] Byte value);

        SetFloatField(
            [in] CString name, 
            [in] Float value);

        SetDoubleField(
            [in] CString name, 
            [in] Double value);

        SetChar8Field(
            [in] CString name, 
            [in] Char8 value);

        SetChar16Field(
            [in] CString name, 
            [in] Char16 value);

        SetBooleanField(
            [in] CString name, 
            [in] Boolean value);

        SetEMuidField(
            [in] CString name, 
            [in] EMuid * value);

        SetEGuidField(
            [in] CString name, 
            [in] EGuid * value);

        SetECodeField(
            [in] CString name, 
            [in] ECode value);

        SetLocalPtrField(
            [in] CString name, 
            [in] LocalPtr value);

        SetLocalTypeField(
            [in] CString name, 
            [in] PVoid value);

        SetEnumField(
            [in] CString name, 
            [in] Int32 value);

        GetStructFieldSetter(
            [in] CString name, 
            [out] IStructSetter ** setter);

        GetCppVectorFieldSetter(
            [in] CString name, 
            [out] ICppVectorSetter ** setter);
    }

    [
        local
    ]
    interface IStructGetter {
        GetInt16Field(
            [in] CString name, 
            [out] Int16 * value);

        GetInt32Field(
            [in] CString name, 
            [out] Int32 * value);

        GetInt64Field(
            [in] CString name, 
            [out] Int64 * value);

        GetByteField(
            [in] CString name, 
            [out] Byte * value);

        GetFloatField(
            [in] CString name, 
            [out] Float * value);

        GetDoubleField(
            [in] CString name, 
            [out] Double * value);

        GetChar8Field(
            [in] CString name, 
            [out] Char8 * value);

        GetChar16Field(
            [in] CString name, 
            [out] Char16 * value);

        GetBooleanField(
            [in] CString name, 
            [out] Boolean * value);

        GetEMuidField(
            [in] CString name, 
            [out] EMuid * value);

        GetEGuidField(
            [in] CString name, 
            [out] EGuid * value);

        GetECodeField(
            [in] CString name, 
            [out] ECode * value);

        GetLocalPtrField(
            [in] CString name, 
            [out] LocalPtr * value);

        GetLocalTypeField(
            [in] CString name, 
            [out] PVoid value);

        GetEnumField(
            [in] CString name, 
            [out] Int32 * value);

        GetStructFieldGetter(
            [in] CString name, 
            [out] IStructGetter ** getter);

        GetCppVectorFieldGetter(
            [in] CString name, 
            [out] ICppVectorGetter ** getter);
    }

    [
        local
    ]
    interface ICppVectorSetter {
        ZeroAllElements();

        SetAllElements(
            [in] PVoid value, 
            [in] MemorySize size);

        SetInt16Element(
            [in] Int32 index, 
            [in] Int16 value);

        SetInt32Element(
            [in] Int32 index, 
            [in] Int32 value);

        SetInt64Element(
            [in] Int32 index, 
            [in] Int64 value);

        SetByteElement(
            [in] Int32 index, 
            [in] Byte value);

        SetFloatElement(
            [in] Int32 index, 
            [in] Float value);

        SetDoubleElement(
            [in] Int32 index, 
            [in] Double value);

        SetChar8Element(
            [in] Int32 index, 
            [in] Char8 value);

        SetChar16Element(
            [in] Int32 index, 
            [in] Char16 value);

        SetBooleanElement(
            [in] Int32 index, 
            [in] Boolean value);

        SetEMuidElement(
            [in] Int32 index, 
            [in] EMuid * value);

        SetEGuidElement(
            [in] Int32 index, 
            [in] EGuid * value);

        SetECodeElement(
            [in] Int32 index, 
            [in] ECode value);

        SetLocalPtrElement(
            [in] Int32 index, 
            [in] LocalPtr value);

        SetLocalTypeElement(
            [in] Int32 index, 
            [in] PVoid value);

        SetEnumElement(
            [in] Int32 index, 
            [in] Int32 value);

        GetStructElementSetter(
            [in] Int32 index, 
            [out] IStructSetter ** setter);

        GetCppVectorElementSetter(
            [in] Int32 index, 
            [out] ICppVectorSetter ** setter);
    }

    [
        local
    ]
    interface ICppVectorGetter {
        GetLength(
            [out] Int32 * length);

        GetRank(
            [out] Int32 * rank);

        GetInt16Element(
            [in] Int32 index, 
            [out] Int16 * value);

        GetInt32Element(
            [in] Int32 index, 
            [out] Int32 * value);

        GetInt64Element(
            [in] Int32 index, 
            [out] Int64 * value);

        GetByteElement(
            [in] Int32 index, 
            [out] Byte * value);

        GetFloatElement(
            [in] Int32 index, 
            [out] Float * value);

        GetDoubleElement(
            [in] Int32 index, 
            [out] Double * value);

        GetChar8Element(
            [in] Int32 index, 
            [out] Char8 * value);

        GetChar16Element(
            [in] Int32 index, 
            [out] Char16 * value);

        GetBooleanElement(
            [in] Int32 index, 
            [out] Boolean * value);

        GetEMuidElement(
            [in] Int32 index, 
            [out] EMuid * value);

        GetEGuidElement(
            [in] Int32 index, 
            [out] EGuid * value);

        GetECodeElement(
            [in] Int32 index, 
            [out] ECode * value);

        GetLocalPtrElement(
            [in] Int32 index, 
            [out] LocalPtr * value);

        GetLocalTypeElement(
            [in] Int32 index, 
            [out] PVoid value);

        GetEnumElement(
            [in] Int32 index, 
            [out] Int32 * value);

        GetStructElementGetter(
            [in] Int32 index, 
            [out] IStructGetter ** getter);

        GetCppVectorElementGetter(
            [in] Int32 index, 
            [out] ICppVectorGetter ** getter);
    }

    [
        local
    ]
    interface IDataTypeInfo {
        GetName(
            [out] StringBuf name);

        GetSize(
            [out] MemorySize * size);

        GetDataType(
            [out] CarDataType * dataType);
    }

    [
        local
    ]
    interface IInterfaceInfo : IDataTypeInfo {
        GetId(
            [out] InterfaceID * iid);

        GetModuleInfo(
            [out] IModuleInfo ** moduleInfo);

        IsLocal(
            [out] Boolean * isLocal);

        HasBase(
            [out] Boolean * hasBase);

        GetBaseInfo(
            [out] IInterfaceInfo ** baseInfo);

        GetMethodCount(
            [out] Int32 * count);

        GetAllMethodInfos(
            [out] BufferOf<IMethodInfo *> methodInfos);

        GetMethodInfo(
            [in] CString name, 
            [out] IMethodInfo ** methodInfo);
    }

    [
        local
    ]
    interface IStructInfo : IDataTypeInfo {
        GetModuleInfo(
            [out] IModuleInfo ** moduleInfo);

        GetFieldCount(
            [out] Int32 * count);

        GetAllFieldInfos(
            [out] BufferOf<IFieldInfo *> fieldInfos);

        GetFieldInfo(
            [in] CString name, 
            [out] IFieldInfo ** fieldInfo);

        CreateVariable(
            [out] IVariableOfStruct ** variableBox);

        CreateVariableBox(
            [in] PVoid variableDescriptor, 
            [out] IVariableOfStruct ** variableBox);
    }

    [
        local
    ]
    interface IEnumInfo : IDataTypeInfo {
        GetModuleInfo(
            [out] IModuleInfo ** moduleInfo);

        GetItemCount(
            [out] Int32 * count);

        GetAllItemInfos(
            [out] BufferOf<IEnumItemInfo *> itemInfos);

        GetItemInfo(
            [in] CString name, 
            [out] IEnumItemInfo ** enumItemInfo);
    }

    interface IRegime {
        ObjectEnter(
            [in] PInterface object);

        ObjectLeave(
            [in] PInterface object);

        CreateObject(
            [in] ClassID clsid, 
            [in] InterfaceID iid, 
            [out] IInterface ** object);
    }

    interface ITestModuleInfo {
        GetPath(
            [out] StringBuf path);

        GetVersion(
            [out] Int32 * major, 
            [out] Int32 * minor, 
            [out] Int32 * build, 
            [out] Int32 * revision);

        GetClassCount(
            [out] Int32 * count);

        GetAllClassInfos(
            [out] BufferOf<IClassInfo *> classInfos);

        GetClassInfo(
            [in] CString name, 
            [out] IClassInfo ** classInfo);

        GetInterfaceCount(
            [out] Int32 * count);

        GetAllInterfaceInfos(
            [out] BufferOf<IInterfaceInfo *> interfaceInfos);

        GetInterfaceInfo(
            [in] CString name, 
            [out] IInterfaceInfo ** interfaceInfo);

        GetStructCount(
            [out] Int32 * count);

        GetAllStructInfos(
            [out] BufferOf<IStructInfo *> structInfos);

        GetStructInfo(
            [in] CString name, 
            [out] IStructInfo ** structInfo);

        GetEnumCount(
            [out] Int32 * count);

        GetAllEnumInfos(
            [out] BufferOf<IEnumInfo *> enumInfos);

        GetEnumInfo(
            [in] CString name, 
            [out] IEnumInfo ** enumInfo);

        GetTypeAliasCount(
            [out] Int32 * count);

        GetAllTypeAliasInfos(
            [out] BufferOf<ITypeAliasInfo *> typeAliasInfos);

        GetTypeAliasInfo(
            [in] CString name, 
            [out] ITypeAliasInfo ** typeAliasInfo);

        GetConstantCount(
            [out] Int32 * count);

        GetAllConstantInfos(
            [out] BufferOf<IConstantInfo *> constantInfos);

        GetConstantInfo(
            [in] CString name, 
            [out] IConstantInfo ** constantInfo);

        GetImportModuleInfoCount(
            [out] Int32 * count);

        GetAllImportModuleInfos(
            [out] BufferOf<IModuleInfo *> moduleInfos);
    }

    interface ITestClassInfo {
        GetName(
            [out] StringBuf name);

        GetId(
            [out] ClassID * clsid);

        GetModuleInfo(
            [out] IModuleInfo ** moduleInfo);

        IsSingleton(
            [out] Boolean * isSingleton);

        GetThreadingModel(
            [out] ThreadingModel * threadingModel);

        IsPrivate(
            [out] Boolean * isPrivate);

        IsReturnValue(
            [out] Boolean * returnValue);

        IsBaseClass(
            [out] Boolean * isBaseClass);

        HasBaseClass(
            [out] Boolean * hasBaseClass);

        GetBaseClassInfo(
            [out] IClassInfo ** baseClassInfo);

        IsGeneric(
            [out] Boolean * isGeneric);

        HasGeneric(
            [out] Boolean * hasGeneric);

        GetGenericInfo(
            [out] IClassInfo ** genericInfo);

        IsRegime(
            [out] Boolean * isRegime);

        GetAspectCount(
            [out] Int32 * count);

        GetAllAspectInfos(
            [out] BufferOf<IClassInfo *> aspectInfos);

        GetAspectInfo(
            [in] CString name, 
            [out] IClassInfo ** aspectInfo);

        IsAspect(
            [out] Boolean * isAspect);

        GetAggregateeCount(
            [out] Int32 * count);

        GetAllAggregateeInfos(
            [out] BufferOf<IClassInfo *> aggregateeInfos);

        GetAggregateeInfo(
            [in] CString name, 
            [out] IClassInfo ** aggregateeInfo);

        GetConstructorCount(
            [out] Int32 * count);

        GetAllConstructorInfos(
            [out] BufferOf<IConstructorInfo *> constructorInfos);

        GetConstructorInfoByParamNames(
            [in] CString name, 
            [out] IConstructorInfo ** constructorInfo);

        GetConstructorInfoByParamCount(
            [in] Int32 count, 
            [out] IConstructorInfo ** constructorInfo);

        GetInterfaceCount(
            [out] Int32 * count);

        GetAllInterfaceInfos(
            [out] BufferOf<IInterfaceInfo *> interfaceInfos);

        GetInterfaceInfo(
            [in] CString name, 
            [out] IInterfaceInfo ** interfaceInfo);

        GetCallbackInterfaceCount(
            [out] Int32 * count);

        GetAllCallbackInterfaceInfos(
            [out] BufferOf<IInterfaceInfo *> callbackInterfaceInfos);

        GetCallbackInterfaceInfo(
            [in] CString name, 
            [out] IInterfaceInfo ** callbackInterfaceInfo);

        GetMethodCount(
            [out] Int32 * count);

        GetAllMethodInfos(
            [out] BufferOf<IMethodInfo *> methodInfos);

        GetMethodInfo(
            [in] CString name, 
            [out] IMethodInfo ** methodInfo);

        GetCallbackMethodCount(
            [out] Int32 * count);

        GetAllCallbackMethodInfos(
            [out] BufferOf<ICallbackMethodInfo *> callbackMethodInfos);

        GetCallbackMethodInfo(
            [in] CString name, 
            [out] ICallbackMethodInfo ** callbackMethodInfo);

        RemoveAllCallbackHandlers(
            [in] PInterface server);

        CreateObject(
            [out] PInterface * object);

        CreateObjectInRegime(
            [in] PRegime rgm, 
            [out] PInterface * object);
    }

    interface ITestCarDataType {
        Test_NULL();

        Test_Int16(
            [in] Int16 inValue, 
            [out] Int16 * outValue);

        Test_Int16_Ref(
            [in] Int16 * inValue, 
            [out] Int16 * outValue);

        Test_Int32(
            [in] Int32 inValue, 
            [out] Int32 * outValue);

        Test_Int32_Ref(
            [in] Int32 * inValue, 
            [out] Int32 * outValue);

        Test_Int64(
            [in] Int64 inValue, 
            [out] Int64 * outValue);

        Test_Int64_Ref(
            [in] Int64 * inValue, 
            [out] Int64 * outValue);

        Test_Byte(
            [in] Byte inValue, 
            [out] Byte * outValue);

        Test_Byte_Ref(
            [in] Byte * inValue, 
            [out] Byte * outValue);

        Test_Float(
            [in] Float inValue, 
            [out] Float * outValue);

        Test_Float_Ref(
            [in] Float * inValue, 
            [out] Float * outValue);

        Test_Double(
            [in] Double inValue, 
            [out] Double * outValue);

        Test_Double_Ref(
            [in] Double * inValue, 
            [out] Double * outValue);

        Test_Char8(
            [in] Char8 inValue, 
            [out] Char8 * outValue);

        Test_Char8_Ref(
            [in] Char8 * inValue, 
            [out] Char8 * outValue);

        Test_Char16(
            [in] Char16 inValue, 
            [out] Char16 * outValue);

        Test_Char16_Ref(
            [in] Char16 * inValue, 
            [out] Char16 * outValue);

        Test_CString(
            [in] CString inCStr, 
            [out] CString * outCStr);

        Test_CString_Ref(
            [in] CString * inCStr, 
            [out] CString * outCStr);

        Test_String(
            [in] const String& inStr, 
            [out] String * outStr);

        Test_String_Ref(
            [in] String * inStr, 
            [out] String * outStr);

        Test_Boolean(
            [in] Boolean inValue, 
            [out] Boolean * outValue);

        Test_Boolean_Ref(
            [in] Boolean * inValue, 
            [out] Boolean * outValue);

        Test_EMuid(
            [in] EMuid inId, 
            [out] EMuid * outId);

        Test_EMuid_Ref(
            [in] EMuid * inId, 
            [out] EMuid * outId);

        Test_EGuid(
            [in] EGuid inId, 
            [out] EGuid * outId);

        Test_EGuid_Ref(
            [in] EGuid * inId, 
            [out] EGuid * outId);

        Test_ECode(
            [in] ECode inValue, 
            [out] ECode * outValue);

        Test_ECode_Ref(
            [in] ECode * inValue, 
            [out] ECode * outValue);

        Test_Enum(
            [in] CarDataType inValue, 
            [out] CarDataType * outValue);

        Test_Enum_Ref(
            [in] CarDataType * inValue, 
            [out] CarDataType * outValue);

        Test_StringBuf(
            [in] CString inValue, 
            [out, callee] StringBuf * outValue);

        Test_ArrayOf_Int16(
            [in] ArrayOf<Int16> inArrayOf, 
            [out, callee] ArrayOf<Int16> * outArrayOf);

        Test_ArrayOf_Ref(
            [in] ArrayOf<Int16> * inArrayOf, 
            [out, callee] ArrayOf<Int16> * outArrayOf);

        Test_ArrayOf_Int32(
            [in] ArrayOf<Int32> inArrayOf, 
            [out, callee] ArrayOf<Int32> * outArrayOf);

        Test_ArrayOf_Int64(
            [in] ArrayOf<Int64> inArrayOf, 
            [out, callee] ArrayOf<Int64> * outArrayOf);

        Test_ArrayOf_Byte(
            [in] ArrayOf<Byte> inArrayOf, 
            [out, callee] ArrayOf<Byte> * outArrayOf);

        Test_ArrayOf_Float(
            [in] ArrayOf<Float> inArrayOf, 
            [out, callee] ArrayOf<Float> * outArrayOf);

        Test_ArrayOf_Double(
            [in] ArrayOf<Double> inArrayOf, 
            [out, callee] ArrayOf<Double> * outArrayOf);

        Test_ArrayOf_Char8(
            [in] ArrayOf<Char8> inArrayOf, 
            [out, callee] ArrayOf<Char8> * outArrayOf);

        Test_ArrayOf_Char16(
            [in] ArrayOf<Char16> inArrayOf, 
            [out, callee] ArrayOf<Char16> * outArrayOf);

        Test_ArrayOf_CString(
            [in] ArrayOf<CString> inArrayOf, 
            [out, callee] ArrayOf<CString> * outArrayOf);

        Test_ArrayOf_String(
            [in] ArrayOf<String> inArrayOf, 
            [out, callee] ArrayOf<String> * outArrayOf);

        Test_ArrayOf_Boolean(
            [in] ArrayOf<Boolean> inArrayOf, 
            [out, callee] ArrayOf<Boolean> * outArrayOf);

        Test_ArrayOf_EMuid(
            [in] ArrayOf<EMuid> inArrayOf, 
            [out, callee] ArrayOf<EMuid> * outArrayOf);

        Test_ArrayOf_EGuid(
            [in] ArrayOf<EGuid> inArrayOf, 
            [out, callee] ArrayOf<EGuid> * outArrayOf);

        Test_ArrayOf_ECode(
            [in] ArrayOf<ECode> inArrayOf, 
            [out, callee] ArrayOf<ECode> * outArrayOf);

        Test_ArrayOf_Enum(
            [in] ArrayOf<CarDataType> inArrayOf, 
            [out, callee] ArrayOf<CarDataType> * outArrayOf);

        Test_ArrayOf_IInterface(
            [in] ArrayOf<IInterface> inArrayOf, 
            [out, callee] ArrayOf<IInterface> * outArrayOf);

        Test_BufferOf_Int32(
            [in] BufferOf<Int32> inValue, 
            [out, callee] BufferOf<Int32> * outValue);

        Test_BufferOf_Int32_Ref(
            [in] BufferOf<Int32> * inValue, 
            [out, callee] BufferOf<Int32> * outValue);

        Test_BufferOf_IInterface(
            [in] BufferOf<IInterface> inBufferOf, 
            [out, callee] BufferOf<IInterface> * outBufferOf);

        Test_MemoryBuf(
            [in] MemoryBuf inMemoryBuf, 
            [out, callee] MemoryBuf * outMemoryBuf);

        Test_MemoryBuf_Ref(
            [in] MemoryBuf * inMemoryBuf, 
            [out, callee] MemoryBuf * outMemoryBuf);

        Test_Interface(
            [in] IInterface * inObject, 
            [out] IInterface ** outObject);

        Test_Interface_Ref(
            [in] IInterface ** inObject, 
            [out] IInterface ** outObject);
    }

    interface ITestMethodInfo : ITestFunctionInfo {
        CreateArgumentList(
            [out] IArgumentList ** argumentList);

        Invoke(
            [in] PInterface target, 
            [in] IArgumentList * argumentList);
    }

    interface ITestParamInfo {
        GetMethodInfo(
            [out] IMethodInfo ** methodInfo);

        GetName(
            [out] StringBuf name);

        GetIndex(
            [out] Int32 * index);

        GetIOAttribute(
            [out] ParamIOAttribute * ioAttrib);

        IsReturnValue(
            [out] Boolean * returnValue);

        GetTypeInfo(
            [out] IDataTypeInfo ** typeInfo);

        GetAdvisedCapacity(
            [out] Int32 * advisedCapacity);

        IsUsingTypeAlias(
            [out] Boolean * usingTypeAlias);

        GetUsedTypeAliasInfo(
            [out] ITypeAliasInfo ** usedTypeAliasInfo);
    }

    interface ITestTypeAliasInfo {
        GetName(
            [out] StringBuf name);

        GetTypeInfo(
            [out] IDataTypeInfo ** typeInfo);

        GetModuleInfo(
            [out] IModuleInfo ** moduleInfo);

        IsDummy(
            [out] Boolean * isDummy);

        GetPtrLevel(
            [out] Int32 * level);
    }

    interface ITestArgumentList {
        GetFunctionInfo(
            [out] IFunctionInfo ** functionInfo);

        SetInputArgumentOfInt16(
            [in] Int32 index, 
            [in] Int16 value);

        SetInputArgumentOfInt32(
            [in] Int32 index, 
            [in] Int32 value);

        SetInputArgumentOfInt64(
            [in] Int32 index, 
            [in] Int64 value);

        SetInputArgumentOfByte(
            [in] Int32 index, 
            [in] Byte value);

        SetInputArgumentOfFloat(
            [in] Int32 index, 
            [in] Float value);

        SetInputArgumentOfDouble(
            [in] Int32 index, 
            [in] Double value);

        SetInputArgumentOfChar8(
            [in] Int32 index, 
            [in] Char8 value);

        SetInputArgumentOfChar16(
            [in] Int32 index, 
            [in] Char16 value);

        SetInputArgumentOfCString(
            [in] Int32 index, 
            [in] CString value);

        SetInputArgumentOfString(
            [in] Int32 index, 
            [in] const String& value);

        SetInputArgumentOfBoolean(
            [in] Int32 index, 
            [in] Boolean value);

        SetInputArgumentOfEMuid(
            [in] Int32 index, 
            [in] EMuid * value);

        SetInputArgumentOfEGuid(
            [in] Int32 index, 
            [in] EGuid * value);

        SetInputArgumentOfECode(
            [in] Int32 index, 
            [in] ECode value);

        SetInputArgumentOfLocalPtr(
            [in] Int32 index, 
            [in] Int32 value);

        SetInputArgumentOfLocalType(
            [in] Int32 index, 
            [in] Int32 value);

        SetInputArgumentOfEnum(
            [in] Int32 index, 
            [in] Int32 value);

        SetInputArgumentOfCarArray(
            [in] Int32 index, 
            [in] Int32 value);

        SetInputArgumentOfStructPtr(
            [in] Int32 index, 
            [in] Int32 value);

        SetInputArgumentOfObjectPtr(
            [in] Int32 index, 
            [in] PInterface value);

        SetOutputArgumentOfInt16Ptr(
            [in] Int32 index, 
            [out] Int16 * value);

        SetOutputArgumentOfInt32Ptr(
            [in] Int32 index, 
            [out] Int32 * value);

        SetOutputArgumentOfInt64Ptr(
            [in] Int32 index, 
            [out] Int64 * value);

        SetOutputArgumentOfBytePtr(
            [in] Int32 index, 
            [out] Byte * value);

        SetOutputArgumentOfFloatPtr(
            [in] Int32 index, 
            [out] Float * value);

        SetOutputArgumentOfDoublePtr(
            [in] Int32 index, 
            [out] Double * value);

        SetOutputArgumentOfChar8Ptr(
            [in] Int32 index, 
            [out] Char8 * value);

        SetOutputArgumentOfChar16Ptr(
            [in] Int32 index, 
            [out] Char16 * value);

        SetOutputArgumentOfStringPtr(
            [in] Int32 index, 
            [out] String * value);

        SetOutputArgumentOfBooleanPtr(
            [in] Int32 index, 
            [out] Boolean * value);

        SetOutputArgumentOfEMuidPtr(
            [in] Int32 index, 
            [out] EMuid * value);

        SetOutputArgumentOfEGuidPtr(
            [in] Int32 index, 
            [out] EGuid * value);

        SetOutputArgumentOfECodePtr(
            [in] Int32 index, 
            [out] ECode * value);

        SetOutputArgumentOfLocalPtrPtr(
            [in] Int32 index, 
            [out] Int32 * value);

        SetOutputArgumentOfLocalTypePtr(
            [in] Int32 index, 
            [out] Int32 * value);

        SetOutputArgumentOfEnumPtr(
            [in] Int32 index, 
            [out] Int32 * value);

        SetOutputArgumentOfStringBufPtr(
            [in] Int32 index, 
            [out] StringBuf value);

        SetOutputArgumentOfStringBufPtrPtr(
            [in] Int32 index, 
            [out, callee] StringBuf * value);

        SetOutputArgumentOfCarArrayPtr(
            [in] Int32 index, 
            [out] Int32 * value);

        SetOutputArgumentOfCarArrayPtrPtr(
            [in] Int32 index, 
            [out] PCarQuintet * value);

        SetOutputArgumentOfStructPtr(
            [in] Int32 index, 
            [out] Int32 * value);

        SetOutputArgumentOfStructPtrPtr(
            [in] Int32 index, 
            [out] Int32 * value);

        SetOutputArgumentOfObjectPtrPtr(
            [in] Int32 index, 
            [out] PInterface * value);
    }

    interface IMethodTest {
        TestMethod_00();
    }

    interface IProperty {
        GetProperty(
            [out] IInterface ** property);

        SetProperty(
            [in] IInterface * property);
    }
}
