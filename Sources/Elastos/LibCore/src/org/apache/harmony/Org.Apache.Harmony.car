
module
{
    importlib("Elastos.CoreLibrary.eco");
    importlib("Org.W3c.Dom.eco");
    importlib("Org.Xml.Sax.eco");
    importlib("Elastosx.Xml.eco");

    merge("../../../../car/org/apache/harmony/kernel/vm/IStringUtils.car");
    //merge("../../../../car/Org/Apache/Harmony/Lang/Annotation/IAnnotationFactory.car");
    //merge("../../../../car/Org/Apache/Harmony/Lang/Annotation/IAnnotationMember.car");
/*
    merge("../../../../car/org/apache/harmony/luni/lang/reflect/IGenericSignatureParser.car");
    merge("../../../../car/org/apache/harmony/luni/lang/reflect/IImplForArray.car");
    merge("../../../../car/org/apache/harmony/luni/lang/reflect/IImplForType.car");
    merge("../../../../car/org/apache/harmony/luni/lang/reflect/IImplForVariable.car");
    merge("../../../../car/org/apache/harmony/luni/lang/reflect/IImplForWildcard.car");
    merge("../../../../car/org/apache/harmony/luni/lang/reflect/IListOfTypes.car");
    merge("../../../../car/org/apache/harmony/luni/lang/reflect/ITypes.car");
*/
    merge("../../../../car/org/apache/harmony/luni/util/IDeleteOnExit.car");

    merge("../../../../car/org/apache/harmony/security/IPublicKeyImpl.car");
    merge("../../../../car/org/apache/harmony/security/IPrivateKeyImpl.car");

    merge("../../../../car/org/apache/harmony/security/asn1/IASN1Constants.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IBerInputStream.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IBerOutputStream.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1Type.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1Explicit.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1Choice.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1Any.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1StringType.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1BitString.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1Boolean.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1Enumerated.car");
    merge("../../../../car/org/apache/harmony/security/asn1/Exceptions.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1GeneralizedTime.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1Implicit.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1Integer.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1OctetString.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1Oid.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1ValueCollection.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1TypeCollection.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1Sequence.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1SequenceOf.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1Set.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1SetOf.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IASN1UTCTime.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IBitString.car");
    merge("../../../../car/org/apache/harmony/security/asn1/IObjectIdentifier.car");

    merge("../../../../car/org/apache/harmony/security/fortress/IEngine.car");
    merge("../../../../car/org/apache/harmony/security/fortress/ISecurityAccess.car");
    merge("../../../../car/org/apache/harmony/security/fortress/IServices.car");

    merge("../../../../car/org/apache/harmony/security/pkcs10/ICertificationRequest.car");
    merge("../../../../car/org/apache/harmony/security/pkcs10/ICertificationRequestInfo.car");

    merge("../../../../car/org/apache/harmony/security/pkcs7/IContentInfo.car");
    merge("../../../../car/org/apache/harmony/security/pkcs7/ISignedData.car");
    merge("../../../../car/org/apache/harmony/security/pkcs7/ISignerInfo.car");

    merge("../../../../car/org/apache/harmony/security/pkcs8/IPrivateKeyInfo.car");

    merge("../../../../car/org/apache/harmony/security/provider/cert/ICache.car");
    merge("../../../../car/org/apache/harmony/security/provider/cert/IDRLCertFactory.car");
    merge("../../../../car/org/apache/harmony/security/provider/cert/IX509CertFactoryImpl.car");
    merge("../../../../car/org/apache/harmony/security/provider/cert/IX509CertImpl.car");
    merge("../../../../car/org/apache/harmony/security/provider/cert/IX509CertPathImpl.car");

    merge("../../../../car/org/apache/harmony/security/provider/crypto/ICryptoProvider.car");
    merge("../../../../car/org/apache/harmony/security/provider/crypto/IDSAKeyFactoryImpl.car");
    merge("../../../../car/org/apache/harmony/security/provider/crypto/ISHA1_Data.car");
    merge("../../../../car/org/apache/harmony/security/provider/crypto/IRandomBitsSupplier.car");
    merge("../../../../car/org/apache/harmony/security/provider/crypto/ISHA1Impl.car");
    merge("../../../../car/org/apache/harmony/security/provider/crypto/ISHA1PRNG_SecureRandomImpl.car");
    merge("../../../../car/org/apache/harmony/security/provider/crypto/ISHA1_MessageDigestImpl.car");
    merge("../../../../car/org/apache/harmony/security/provider/crypto/ISHA1withDSA_SignatureImpl.car");
    merge("../../../../car/org/apache/harmony/security/utils/IAlgNameMapper.car");
    merge("../../../../car/org/apache/harmony/security/utils/IArray.car");
    merge("../../../../car/org/apache/harmony/security/utils/IObjectIdentifierInUtils.car");
    merge("../../../../car/org/apache/harmony/security/utils/IJarUtils.car");
    merge("../../../../car/org/apache/harmony/security/x501/IAttributeTypeAndValue.car");
    merge("../../../../car/org/apache/harmony/security/x501/IAttributeValue.car");
    merge("../../../../car/org/apache/harmony/security/x501/IDirectoryString.car");
    merge("../../../../car/org/apache/harmony/security/x501/IName.car");
    merge("../../../../car/org/apache/harmony/security/x509/tsp/IMessageImprint.car");
    merge("../../../../car/org/apache/harmony/security/x509/tsp/IPKIFailureInfo.car");
    merge("../../../../car/org/apache/harmony/security/x509/tsp/IPKIStatus.car");
    merge("../../../../car/org/apache/harmony/security/x509/tsp/IPKIStatusInfo.car");
    merge("../../../../car/org/apache/harmony/security/x509/tsp/ITSTInfo.car");
    merge("../../../../car/org/apache/harmony/security/x509/tsp/ITimeStampReq.car");
    merge("../../../../car/org/apache/harmony/security/x509/tsp/ITimeStampResp.car");

    merge("../../../../car/org/apache/harmony/security/x509/IExtensionValue.car");
    merge("../../../../car/org/apache/harmony/security/x509/IAccessDescription.car");
    merge("../../../../car/org/apache/harmony/security/x509/IAlgorithmIdentifier.car");
    merge("../../../../car/org/apache/harmony/security/x509/IAlternativeName.car");
    merge("../../../../car/org/apache/harmony/security/x509/IAuthorityKeyIdentifier.car");
    merge("../../../../car/org/apache/harmony/security/x509/IBasicConstraints.car");
    merge("../../../../car/org/apache/harmony/security/x509/ICRLDistributionPoints.car");
    merge("../../../../car/org/apache/harmony/security/x509/ICRLNumber.car");
    merge("../../../../car/org/apache/harmony/security/x509/ICertificate.car");
    merge("../../../../car/org/apache/harmony/security/x509/ICertificateIssuer.car");
    merge("../../../../car/org/apache/harmony/security/x509/ICertificateList.car");
    merge("../../../../car/org/apache/harmony/security/x509/ICertificatePolicies.car");
    merge("../../../../car/org/apache/harmony/security/x509/IDNParser.car");
    merge("../../../../car/org/apache/harmony/security/x509/IDistributionPoint.car");
    merge("../../../../car/org/apache/harmony/security/x509/IDistributionPointName.car");
    merge("../../../../car/org/apache/harmony/security/x509/IEDIPartyName.car");
    merge("../../../../car/org/apache/harmony/security/x509/IExtendedKeyUsage.car");
    merge("../../../../car/org/apache/harmony/security/x509/IExtension.car");
    merge("../../../../car/org/apache/harmony/security/x509/IExtensions.car");
    merge("../../../../car/org/apache/harmony/security/x509/IGeneralName.car");
    merge("../../../../car/org/apache/harmony/security/x509/IGeneralNames.car");
    merge("../../../../car/org/apache/harmony/security/x509/IGeneralSubtree.car");
    merge("../../../../car/org/apache/harmony/security/x509/IGeneralSubtrees.car");
    merge("../../../../car/org/apache/harmony/security/x509/IInfoAccessSyntax.car");
    merge("../../../../car/org/apache/harmony/security/x509/IInhibitAnyPolicy.car");
    merge("../../../../car/org/apache/harmony/security/x509/IInvalidityDate.car");
    merge("../../../../car/org/apache/harmony/security/x509/IIssuingDistributionPoint.car");
    merge("../../../../car/org/apache/harmony/security/x509/IKeyUsage.car");
    merge("../../../../car/org/apache/harmony/security/x509/INameConstraints.car");
    merge("../../../../car/org/apache/harmony/security/x509/IORAddress.car");
    merge("../../../../car/org/apache/harmony/security/x509/IOtherName.car");
    merge("../../../../car/org/apache/harmony/security/x509/IPolicyConstraints.car");
    merge("../../../../car/org/apache/harmony/security/x509/IPolicyInformation.car");
    merge("../../../../car/org/apache/harmony/security/x509/IPolicyQualifierInfo.car");
    merge("../../../../car/org/apache/harmony/security/x509/IPrivateKeyUsagePeriod.car");
    merge("../../../../car/org/apache/harmony/security/x509/IReasonCode.car");
    merge("../../../../car/org/apache/harmony/security/x509/IReasonFlags.car");
    merge("../../../../car/org/apache/harmony/security/x509/ISubjectKeyIdentifier.car");
    merge("../../../../car/org/apache/harmony/security/x509/ISubjectPublicKeyInfo.car");
    merge("../../../../car/org/apache/harmony/security/x509/ITBSCertList.car");
    merge("../../../../car/org/apache/harmony/security/x509/ITBSCertificate.car");
    merge("../../../../car/org/apache/harmony/security/x509/ITime.car");
    merge("../../../../car/org/apache/harmony/security/x509/IValidity.car");
    merge("../../../../car/org/apache/harmony/security/x509/IX509PublicKey.car");

    merge("../../../../car/org/apache/harmony/xml/dom/ILeafNodeImpl.car");
    merge("../../../../car/org/apache/harmony/xml/dom/ICharacterDataImpl.car");
    merge("../../../../car/org/apache/harmony/xml/dom/ICDATASectionImpl.car");
    merge("../../../../car/org/apache/harmony/xml/dom/ICommentImpl.car");
    merge("../../../../car/org/apache/harmony/xml/dom/IDOMConfigurationImpl.car");
    merge("../../../../car/org/apache/harmony/xml/dom/IDOMImplementationImpl.car");
    merge("../../../../car/org/apache/harmony/xml/dom/IDocumentImpl.car");

    merge("../../../../car/org/apache/harmony/xml/Exceptions.car");
    merge("../../../../car/org/apache/harmony/xml/IExpatAttributes.car");
    merge("../../../../car/org/apache/harmony/xml/IExpatReader.car");

    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IMessage.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/Exceptions.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IAppendable.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ICertPinManager.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ICertificateMessage.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ICertificateRequest.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ICipherSuite.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IClientHello.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IClientKeyExchange.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IClientSessionContext.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IDHParameters.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IDataStream.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IDigitalSignature.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IFileClientSessionCache.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IFinished.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IHandshake.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IHandshakeIODataStream.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IHandshakeProtocol.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ILogger.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/INativeCrypto.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IOpenSSLDSAParams.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IOpenSSLEngine.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IOpenSSLProvider.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IOpenSSLRSAPublicKey.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IOpenSSLSocketImpl.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IPinFailureLogger.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IPinListEntry.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IProtocolVersion.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ISSLClientSessionCache.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ISSLEngineDataStream.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ISSLParametersImpl.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ISSLServerSessionCache.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ISSLSessionImpl.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IServerHello.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IServerKeyExchange.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IServerSessionContext.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ITrustManagerImpl.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ITrustedCertificateIndex.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ITrustedCertificateStore.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ISSLRecordProtocol.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/IOpenSSLRSAPrivateKey.car");
    merge("../../../../car/org/apache/harmony/xnet/provider/jsse/ISSLInputStream.car");

    using interface Elastos.Security.Interfaces.IDSAPrivateKey;
    using interface Elastos.Security.Interfaces.IDSAPublicKey;
    using interface Elastos.Security.Interfaces.IRSAPrivateKey;
    using interface Elastos.Security.Interfaces.IRSAPublicKey;
    using interface Elastos.Security.Interfaces.IRSAPrivateCrtKey;
    using interface Elastosx.Crypto.ICipherSpi;
    //interface Org.Apache.Harmony.Lang.Annotation.IAnnotationFactory;
    using interface Elastos.Core.IClassLoader;
    using interface Elastos.Core.ICloneable;
    using interface Elastos.Core.IComparator;
    using interface Elastos.Core.IRunnable;
    using interface Elastos.IO.IInputStream;
    using interface Elastos.IO.IOutputStream;
    using interface Elastos.IO.IFile;
    using interface Elastos.IO.IFlushable;
    interface Org.Apache.Harmony.Security.X509.IAlgorithmIdentifier;
    interface Org.Apache.Harmony.Security.X509.IRevokedCertificate;
    using interface Elastosx.Security.Auth.X500.IX500Principal;
    using interface Elastos.Security.Cert.IX509CRLEntry;
    using interface Elastos.Security.Cert.IX509Extension;
    using interface Elastos.Security.Cert.IX509Certificate;
    interface Org.Apache.Harmony.Security.X509.ICertificateList;
    interface Org.Apache.Harmony.Security.X509.ICertificate;
    using interface Elastos.Utility.IList;
    using interface Elastos.Utility.ISet;
    using interface Elastos.Security.Spec.IDSAPrivateKeySpec;
    using interface Elastos.Security.Spec.IPKCS8EncodedKeySpec;
    using interface Elastos.Security.Spec.IDSAPublicKeySpec;
    using interface Elastos.Security.Spec.IX509EncodedKeySpec;
    using interface Elastos.Security.Spec.IAlgorithmParameterSpec;
    using interface Elastos.Security.Spec.IRSAPrivateCrtKeySpec;
    using interface Elastos.Security.Spec.IRSAPrivateKeySpec;
    using interface Elastos.IO.ISerializable;
    using interface Elastos.Math.IBigInteger;
    using interface Elastos.Utility.IDate;
    using interface Elastos.Security.IIdentityScope;
    using interface Elastos.Security.ISecureRandom;
    using interface Elastos.Security.IProvider;
    using interface Elastos.Security.IKeyFactorySpi;
    using interface Elastos.Security.IKeyPairGeneratorSpi;
    using interface Elastos.Security.IMessageDigest;
    using interface Elastos.Security.IKeyStore;
    using interface Elastos.Security.IKeyStoreSpi;
    using interface Elastos.Security.ISignature;
    interface Org.Apache.Harmony.Security.X509.IGeneralName;
    interface Org.Apache.Harmony.Security.X509.IExtensions;
    interface Org.Apache.Harmony.Security.X509.IAuthorityKeyIdentifier;
    interface Org.Apache.Harmony.Security.X509.IAccessDescription;
    interface Org.Apache.Harmony.Security.X509.IBasicConstraintsHelper;
    interface Org.Apache.Harmony.Security.X509.IAlternativeName;
    interface Org.Apache.Harmony.Security.X509.ICRLDistributionPoints;
    interface Org.Apache.Harmony.Security.X509.ICRLNumber;
    interface Org.Apache.Harmony.Security.X509.ICRLNumberHelper;
    interface Org.Apache.Harmony.Security.X509.ICRLDistributionPointsHelper;
    interface Org.Apache.Harmony.Security.Pkcs7.IContentInfo;
    interface Org.Apache.Harmony.Security.X501.IName;
    interface Org.Apache.Harmony.Security.IPrivateKeyImpl;
    interface Org.Apache.Harmony.Security.IPublicKeyImpl;
    using interface Org.W3c.Dom.INode;
    using interface Org.W3c.Dom.IAttr;
    using interface Org.W3c.Dom.IDocument;
    using interface Org.W3c.Dom.IText;
    using interface Org.W3c.Dom.IComment;
    using interface Org.W3c.Dom.IDOMError;
    using interface Org.W3c.Dom.ICDATASection;
    using interface Org.W3c.Dom.IDOMImplementation;
    using interface Org.W3c.Dom.IDocumentType;
    using interface Org.W3c.Dom.INamedNodeMap;
    using interface Org.W3c.Dom.IEntity;
    using interface Org.W3c.Dom.IEntityReference;
    using interface Org.W3c.Dom.INodeList;
    using interface Org.W3c.Dom.INotation;
    using interface Org.W3c.Dom.IProcessingInstruction;
    using interface Org.W3c.Dom.IElement;
    using interface Elastosx.Xml.Parsers.IDocumentBuilderFactory;
    using interface Elastosx.Xml.Parsers.ISAXParserFactory;
    using interface Elastosx.Xml.Parsers.ISAXParser;
    using interface Elastosx.Net.Ssl.ISSLContextSpi;
    using interface Elastosx.Net.Ssl.IKeyManagerFactorySpi;
    using interface Elastosx.Net.Ssl.IX509ExtendedKeyManager;
    using interface Elastosx.Net.Ssl.ISSLParameters;
    using interface Elastosx.Net.Ssl.ISSLServerSocketFactory;
    using interface Elastosx.Net.Ssl.ISSLServerSocket;
    using interface Elastosx.Net.Ssl.ISSLSession;
    using interface Elastosx.Net.Ssl.ISSLSocketFactory;
    using interface Elastosx.Net.Ssl.ISSLEngine;
    using interface Elastosx.Net.Ssl.ISSLSocket;
    using interface Elastosx.Net.Ssl.ITrustManagerFactorySpi;

    namespace Org {
    namespace Apache {
    namespace Harmony {

    namespace Crypto {
    namespace Internal {

    class CNullCipherSpi {
        interface ICipherSpi;
    }

    } // namespace Internal
    } // namespace Crypto

    namespace Kernel {
    namespace Vm {

    singleton class CStringUtils {
        interface IStringUtils;
    }

    } // namespace Vm
    } // namespace Kernel
/*
    namespace Lang {
    namespace Annotation {

    class CAnnotationFactory {
        interface IAnnotationFactory;
        interface IInvocationHandler;
        interface ISerializable;
    }

    singleton class CAnnotationFactoryHelper {
        interface IAnnotationFactoryHelper;
    }

    class CAnnotationMember {
        constructor(
            [in] String name,
            [in] IInterface* val);

        constructor(
            [in] String name,
            [in] IInterface* val,
            [in] ClassID type);
            // [in] Method m;)

        interface IAnnotationMember;
        interface ISerializable;
    }

    } // namespace Annotation
    } // namespace Lang
*/

    namespace Luni {
/*
    namespace Lang {
    namespace Reflect {

    [local]
    class CGenericSignatureParser {
        constructor(
            [in] IClassLoader* loader);

        interface IGenericSignatureParser;
    }

    class CImplForArray {
        constructor(
            [in] IType* componentType);

        interface IImplForArray;
    }

    class CImplForType {
        constructor(
            [in] IImplForType* ownerType,
            [in] String rawTypeName,
            [in] IListOfTypes* args,
            [in] IClassLoader* loader);

        interface IImplForType;
    }

    class CImplForVariable {
        interface IImplForVariable;
    }

    class CImplForWildcard {
        constructor(
            [in] IListOfTypes* extendsBound,
            [in] IListOfTypes* superBound);

        interface IImplForWildcard;
    }

    class CListOfTypes {
        interface IListOfTypes;
    }

    singleton class CTypes {
        interface ITypes;
    }

    } // namespace Reflect
    } // namespace Lang
*/
    namespace Util {

    class CDeleteOnExit {
        interface IDeleteOnExit;
    }

    singleton class CDeleteOnExitHelper {
        interface IDeleteOnExitHelper;
    }

    } // namespace Util
    } // namespace Luni

    namespace Security {
    namespace Asn1 {

    class CASN1Any {
        constructor();

        interface IASN1Any;
    }

    class CASN1AnyHelper {
        interface IASN1AnyHelper;
    }

    class CASN1BitString {
        constructor();

        interface IASN1BitString;
    }

    singleton class CASN1BitStringHelper {
        interface IASN1BitStringHelper;
    }

    class CASN1NamedBitList {
        constructor(
            [in] Int32 minBits);

        interface IASN1NamedBitList;
    }

    class CASN1Boolean {
        constructor();

        interface IASN1Boolean;
    }

    singleton class CASN1BooleanHelper {
        interface IASN1BooleanHelper;
    }

    [deprecated]
    class CASN1Choice {
        constructor(
            [in] ArrayOf<IASN1Type*>* asn1Type);

        interface IASN1Choice;
    }

    class CASN1Enumerated {
        constructor();

        interface IASN1Enumerated;
    }

    singleton class CASN1EnumeratedHelper {
        interface IASN1EnumeratedHelper;
    }

    class CASN1Explicit {
        constructor(
            [in] Int32 tagNumber,
            [in] IASN1Type* type);

        constructor(
            [in] Int32 tagClass,
            [in] Int32 tagNumber,
            [in] IASN1Type* type);

        interface IASN1Explicit;
    }

    class CASN1GeneralizedTime {
        constructor();

        interface IASN1GeneralizedTime;
    }

    singleton class CASN1GeneralizedTimeHelper {
        interface IASN1GeneralizedTimeHelper;
    }

    class CASN1Implicit {
        constructor(
            [in] Int32 tagNumber,
            [in] IASN1Type* type);

        interface IASN1Implicit;
    }

    class CASN1Integer {
        constructor();

        interface IASN1Integer;
    }

    singleton class CASN1IntegerHelper {
        interface IASN1IntegerHelper;
    }

    class CASN1OctetString {
        constructor();

        interface IASN1OctetString;
    }

    singleton class CASN1OctetStringHelper {
        interface IASN1OctetStringHelper;
    }

    class CASN1Oid {
        constructor();

        interface IASN1Oid;
    }

    singleton class CASN1OidHelper {
        interface IASN1OidHelper;
    }

    [deprecated]
    class CASN1Sequence {
        constructor(
            [in] ArrayOf<IASN1Type*>* type);

        interface IASN1Sequence;
    }

    [deprecated]
    class CASN1SequenceOf {
        constructor(
            [in] IASN1Type* asn1Type);

        interface IASN1SequenceOf;
    }

    [deprecated]
    class CASN1Set {
        constructor(
            [in] ArrayOf<IASN1Type*>* type);

        interface IASN1Set;
    }

    class CASN1SetOf {
        constructor(
            [in] IASN1Type* type);

        interface IASN1SetOf;
    }

    class CASN1StringTypeHelper {
        interface IASN1StringTypeHelper;
    }

    class CASN1UTCTime {
        constructor();

        interface IASN1UTCTime;
    }

    singleton class CASN1UTCTimeHelper {
        interface IASN1UTCTimeHelper;
    }

    [deprecated]
    class CBerInputStream {
        constructor(
            [in] ArrayOf<Byte>* encoded);
        constructor(
            [in] ArrayOf<Byte>* encoded,
            [in] Int32 offset,
            [in] Int32 expectedLength);
        constructor(
            [in] IInputStream* is);
        constructor(
            [in] IInputStream* is,
            [in] Int32 initialSize);

        interface IBerInputStream;
    }

    singleton class CBerInputStreamHelper {
        interface IBerInputStreamHelper;
    }

    class CBerOutputStream {
        interface IBerOutputStream;
    }

    [deprecated]
    class CBitString {
        constructor(
            [in] ArrayOf<Byte>* bytes,
            [in] Int32 unusedBits);

        constructor(
            [in] ArrayOf<Boolean>* values);

        interface IBitString;
    }

    [deprecated]
    class CDerInputStream {
        constructor(
            [in] ArrayOf<Byte>* encoded);
        constructor(
            [in] ArrayOf<Byte>* encoded,
            [in] Int32 offset,
            [in] Int32 encodingLen);
        constructor(
            [in] IInputStream* is);

        interface IBerInputStream;
    }

    class CDerOutputStream {
        constructor(
            [in] IASN1Type* asn1,
            [in] IInterface* object);

        interface IBerOutputStream;
    }

    [deprecated]
    class CObjectIdentifier {
        constructor(
            [in] ArrayOf<Int32>* oid);
        constructor(
            [in] String strOid);

        interface IObjectIdentifier;
    }

    class CObjectIdentifierHelper {
        interface IObjectIdentifierHelper;
    }

    } // namespace Asn1

    namespace Fortress {

    class CSpiAndProvider {
        interface ISpiAndProvider;
    }

    class CEngine {
        constructor(
            [in] String service);

        interface IEngine;
    }

    singleton class CEngineHelper {
        interface IEngineHelper;
    }

    class CServicesHelper {
        interface IServicesHelper;
    }

    } // namespace Fortress

    namespace Pkcs10 {

    [deprecated]
    class CCertificationRequest {
        constructor(
            [in] ICertificationRequestInfo* info,
            [in] IAlgorithmIdentifier* algId,
            [in] ArrayOf<Byte>* signature);

        interface ICertificationRequest;
    }

    singleton class CCertificationRequestHelper {
        interface ICertificationRequestHelper;
    }

    class CCertificationRequestInfo {
        interface ICertificationRequestInfo;
    }

    singleton class CCertificationRequestInfoHelper {
        interface ICertificationRequestInfoHelper;
    }

    } // namespace Pkcs10

    namespace Pkcs7 {

    singleton class CAuthenticatedAttributesHelper {
        interface IAuthenticatedAttributesHelper;
    }

    class CContentInfo {
        interface IContentInfo;
    }

    singleton class CContentInfoHelper {
        interface IContentInfoHelper;
    }

    class CSignedData {
        interface ISignedData;
    }

    singleton class CSignedDataHelper {
        interface ISignedDataHelper;
    }

    class CSignerInfo {
        interface ISignerInfo;
    }

    singleton class CSignerInfoHelper {
        interface ISignerInfoHelper;
    }

    } // namespace Pkcs7

    namespace Pkcs8 {

    [deprecated]
    class CPrivateKeyInfo {
        constructor(
            [in] Int32 version,
            [in] IAlgorithmIdentifier* privateKeyAlgorithm,
            [in] ArrayOf<Byte>* privateKey,
            [in] IList* attributes);

        interface IPrivateKeyInfo;
    }

    class CPrivateKeyInfoHelper {
        interface IPrivateKeyInfoHelper;
    }

    } // namespace Pkcs8

    namespace Provider {
    namespace Cert {

    class CCache {
        constructor(
            [in] Int32 pref_size,
            [in] Int32 size);

        constructor(
            [in] Int32 pref_size);

        constructor();

        interface ICache;
    }

    class CDRLCertFactory {
        constructor();

        interface IDRLCertFactory;
    }

    class CX509CRLEntryImpl {
        constructor(
            [in] IRevokedCertificate* rcert,
            [in] IX500Principal* issuer);

        interface IX509CRLEntry;
    }

    [deprecated]
    class CX509CRLImpl {
        constructor(
            [in] ICertificateList* crl);
        constructor(
            [in] IInputStream* is);
        constructor(
            [in] ArrayOf<Byte>* encoding);

        interface IX509CRLImpl;
    }

    class CX509CertFactoryImpl {
        constructor();

        interface IX509CertFactoryImpl;
    }

    [deprecated]
    class CX509CertImpl {
        constructor(
            [in] IInputStream* is);
        constructor(
            [in] ICertificate* certificate);
        constructor(
            [in] ArrayOf<Byte>* encoding);

        interface IX509CertImpl;
        interface IX509Extension;
    }

    class CX509CertPathImpl {
        constructor(
            [in] IList* certs);

        interface IX509CertPathImpl;
    }

    singleton class CX509CertPathImplHelper {
        interface IX509CertPathImplHelper;
    }

    } // namespace Cert

    namespace Crypto {

    class CCryptoProvider {
        constructor();

        interface ICryptoProvider;
    }

    class CDSAKeyFactoryImpl {
        interface IDSAKeyFactoryImpl;
    }

    class CDSAPrivateKeyImpl {
        constructor(
            [in] IDSAPrivateKeySpec* keySpec);
        constructor(
            [in] IPKCS8EncodedKeySpec* keySpec);

        interface IPrivateKeyImpl;
        interface IDSAPrivateKey;
    }

    class CDSAPublicKeyImpl {
        constructor(
            [in] IDSAPublicKeySpec* keySpec);
        constructor(
            [in] IX509EncodedKeySpec* keySpec);

        interface IPublicKeyImpl;
        interface IDSAPublicKey;
    }

    class CRandomBitsSupplierHelper {
        interface IRandomBitsSupplierHelper;
    }

    class CSHA1PRNG_SecureRandomImpl {
        interface ISHA1PRNG_SecureRandomImpl;
        interface ISHA1_Data;
    }

    class CSHA1_MessageDigestImpl {
        constructor();

        interface ISHA1_MessageDigestImpl;
        interface ISHA1_Data;
    }

    class CSHA1withDSA_SignatureImpl {
        constructor();

        interface ISHA1withDSA_SignatureImpl;
    }

    } // namespace Crypto

    } // namespace Provider

    namespace Utils {

    singleton class CAlgNameMapperHelper {
        interface IAlgNameMapperHelper;
    }

    singleton class CArrayHelper {
        interface IArrayHelper;
    }

    [deprecated]
    class CObjectIdentifierInUtils {
        constructor(
            [in] ArrayOf<Int32>* oid);
        constructor(
            [in] ArrayOf<Int32>* oid,
            [in] String name,
            [in] IObject* oidGroup);

        interface IObjectIdentifierInUtils;
    }

    singleton class CObjectIdentifierInUtilsHelper {
        interface IObjectIdentifierInUtilsHelper;
    }

    singleton class CJarUtils {
        interface IJarUtils;
    }

    } // namespace Utils

    namespace X501 {

    class CAttributeTypeAndValue {
        constructor(
            [in] String sOid,
            [in] IAttributeValue* value);

        interface IAttributeTypeAndValue;
    }

    singleton class CAttributeTypeAndValueHelper {
        interface IAttributeTypeAndValueHelper;
    }

    class CAttributeTypeAndValueComparator {
        interface IComparator;
        interface ISerializable;
    }

    [deprecated]
    class CAttributeValue {
        constructor(
            [in] String parsedString,
            [in] Boolean hasQorE);

        constructor(
            [in] String hexString,
            [in] ArrayOf<Byte>* encoded);

        constructor(
            [in] String rawString,
            [in] ArrayOf<Byte>* encoded,
            [in] Int32 tag);

        interface IAttributeValue;
    }

    singleton class CDirectoryString {
        interface IDirectoryString;
    }

    [deprecated]
    class CName {
        constructor(
            [in] ArrayOf<Byte>* encoding);
        constructor(
            [in] String name);
        constructor(
            [in] IList* rdn);

        interface IName;
    }

    singleton class CNameHelper {
        interface INameHelper;
    }

    } // namespace X501

    namespace X509 {
    namespace Tsp {

    [deprecated]
    class CMessageImprint {
        constructor(
            [in] IAlgorithmIdentifier* algId,
            [in] ArrayOf<Byte>* hashedMessage);

        interface IMessageImprint;
    }

    class CPKIStatusInfo {
        constructor(
            [in] Int32 pkiStatus,
            [in] IList* statusString,
            [in] Int32 failInfo);

        interface IPKIStatusInfo;
    }

    singleton class CPKIStatusInfoHelper {
        interface IPKIStatusInfoHelper;
    }

    [deprecated]
    class CTSTInfo {
        constructor(
            [in] Int32 ver,
            [in] String policy,
            [in] IMessageImprint* messageImprint,
            [in] IBigInteger* serialNumber,
            [in] IDate* genTime,
            [in] ArrayOf<Int32>* accuracy,
            [in] Boolean ordering,
            [in] IBigInteger* nonce,
            [in] IGeneralName* tsa,
            [in] IExtensions* extensions);

        interface ITSTInfo;
    }

    singleton class CTSTInfoHelper {
        interface ITSTInfoHelper;
    }

    class CTimeStampReq {
        constructor(
            [in] Int32 ver,
            [in] IMessageImprint* messageImprint,
            [in] String reqPolicy,
            [in] IBigInteger* nonce,
            [in] Boolean certReq,
            [in] IExtensions* extensions);

        interface ITimeStampReq;
    }

    singleton class CTimeStampReqHelper {
        interface ITimeStampReqHelper;
    }

    class CTimeStampResp {
        constructor(
            [in] IPKIStatusInfo* status,
            [in] IContentInfo* timeStampToken);

        interface ITimeStampResp;
    }

    singleton class CTimeStampRespHelper {
        interface ITimeStampRespHelper;
    }

    } // namespace Tsp

    class CAccessDescription {
        interface IAccessDescription;
    }

    singleton class CAccessDescriptionHelper {
        interface IAccessDescriptionHelper;
    }

    [deprecated]
    class CAlgorithmIdentifier {
        constructor(
            [in] String algorithm);
        constructor(
            [in] String algorithm,
            [in] ArrayOf<Byte>* parameters);

        interface IAlgorithmIdentifier;
    }

    singleton class CAlgorithmIdentifierHelper {
        interface IAlgorithmIdentifierHelper;
    }

    [deprecated]
    class CAlternativeName {
        constructor(
            [in] Boolean which,
            [in] ArrayOf<Byte>* encoding);

        interface IAlternativeName;
    }

    [deprecated]
    class CAuthorityKeyIdentifier {
        constructor(
            [in] ArrayOf<Byte>* keyIdentifier,
            [in] IGeneralNames* authorityCertIssuer,
            [in] IBigInteger* authorityCertSerialNumber);

        interface IAuthorityKeyIdentifier;
    }

    singleton class CAuthorityKeyIdentifierHelper {
        interface IAuthorityKeyIdentifierHelper;
    }

    [deprecated]
    class CBasicConstraints {
        constructor(
            [in] ArrayOf<Byte>* encoding);

        interface IBasicConstraints;
    }

    singleton class CBasicConstraintsHelper {
        interface IBasicConstraintsHelper;
    }

    class CCRLDistributionPoints {
        interface ICRLDistributionPoints;
    }

    singleton class CCRLDistributionPointsHelper {
        interface ICRLDistributionPointsHelper;
    }

    [deprecated]
    class CCRLNumber {
        constructor(
            [in] ArrayOf<Byte>* encoding);

        interface ICRLNumber;
    }

    singleton class CCRLNumberHelper {
        interface ICRLNumberHelper;
    }

    [deprecated]
    class CCertificate {
        constructor(
            [in] ITBSCertificate* tbsCertificate,
            [in] IAlgorithmIdentifier* signatureAlgorithm,
            [in] ArrayOf<Byte>* signatureValue);

        interface ICertificate;
    }

    singleton class CCertificateHelper {
        interface ICertificateHelper;
    }

    [deprecated]
    class CCertificateIssuer {
        constructor(
            [in] ArrayOf<Byte>* encoding);

        interface ICertificateIssuer;
    }

    singleton class CCertificateIssuerHelper {
        interface ICertificateIssuerHelper;
    }

    [deprecated]
    class CCertificateList {
        constructor(
            [in] ITBSCertList* tbsCertList,
            [in] IAlgorithmIdentifier* signatureAlgorithm,
            [in] ArrayOf<Byte>* signatureValue);

        interface ICertificateList;
    }

    singleton class CCertificateListHelper {
        interface ICertificateListHelper;
    }

    class CCertificatePolicies {
        constructor();

        interface ICertificatePolicies;
    }

    singleton class CCertificatePoliciesHelper {
        interface ICertificatePoliciesHelper;
    }

    class CDNParser {
        constructor(
            [in] String dn);

        interface IDNParser;
    }

    class CDistributionPoint {
        constructor(
            [in] IDistributionPointName* distributionPoint,
            [in] IReasonFlags* reasons,
            [in] IGeneralNames* cRLIssuer);

        interface IDistributionPoint;
    }

    singleton class CDistributionPointHelper {
        interface IDistributionPointHelper;
    }

    class CDistributionPointName {
        constructor(
            [in] IGeneralNames* fullName);
        constructor(
            [in] IName* nameRelativeToCRLIssuer);

        interface IDistributionPointName;
    }

    singleton class CDistributionPointNameHelper {
        interface IDistributionPointNameHelper;
    }

    class CEDIPartyName {
        interface IEDIPartyName;
    }

    singleton class CEDIPartyNameHelper {
        interface IEDIPartyNameHelper;
    }

    [deprecated]
    class CExtendedKeyUsage {
        constructor(
            [in] ArrayOf<Byte>* encoding);

        interface IExtendedKeyUsage;
    }

    singleton class CExtendedKeyUsageHelper {
        interface IExtendedKeyUsageHelper;
    }

    [deprecated]
    class CExtension {
        constructor(
            [in] String extnID,
            [in] Boolean critical,
            [in] IExtensionValue* extnValueObject);
        constructor(
            [in] String extnID,
            [in] Boolean critical,
            [in] ArrayOf<Byte>* extnValue);
        constructor(
            [in] ArrayOf<Int32>* extnID,
            [in] Boolean critical,
            [in] ArrayOf<Byte>* extnValue2);
        constructor(
            [in] String extnID,
            [in] ArrayOf<Byte>* extnValue);
        constructor(
            [in] ArrayOf<Int32>* extnID,
            [in] ArrayOf<Byte>* extnValue2);

        interface IExtension;
    }

    singleton class CExtensionHelper {
        interface IExtensionHelper;
    }

    [deprecated]
    class CExtensionValue {
        constructor();
        constructor(
            [in] ArrayOf<Byte>* encoding);

        interface IExtensionValue;
    }

    class CExtensions {
        constructor();
        constructor(
            [in] IList* extensions);

        interface IExtensions;
    }

    singleton class CExtensionsHelper {
        interface IExtensionsHelper;
    }

    [deprecated]
    class CGeneralName {
        constructor(
            [in] Int32 tag,
            [in] String name);
        constructor(
            [in] IOtherName* name);
        constructor(
            [in] IORAddress* name1);
        constructor(
            [in] IName* name2);
        constructor(
            [in] IEDIPartyName* name3);
        constructor(
            [in] ArrayOf<Byte>* name4);
        constructor(
            [in] Int32 tag,
            [in] ArrayOf<Byte>* name1);

        interface IGeneralName;
    }

    singleton class CGeneralNameHelper {
        interface IGeneralNameHelper;
    }

    class CGeneralNames {
        constructor();
        constructor(
            [in] IList* generalNames);

        interface IGeneralNames;
    }

    singleton class CGeneralNamesHelper {
        interface IGeneralNamesHelper;
    }

    class CGeneralSubtree {
        constructor(
            [in] IGeneralName* base,
            [in] Int32 minimum,
            [in] Int32 maximum);

        interface IGeneralSubtree;
    }

    singleton class CGeneralSubtreeHelper {
        interface IGeneralSubtreeHelper;
    }

    class CGeneralSubtrees {
        constructor(
            [in] IList* generalSubtrees);

        interface IGeneralSubtrees;
    }

    singleton class CGeneralSubtreesHelper {
        interface IGeneralSubtreesHelper;
    }

    class CInfoAccessSyntax {
        interface IInfoAccessSyntax;
    }

    singleton class CInfoAccessSyntaxHelper {
        interface IInfoAccessSyntaxHelper;
    }

    [deprecated]
    class CInhibitAnyPolicy {
        constructor(
            [in] ArrayOf<Byte>* encoding);

        interface IInhibitAnyPolicy;
    }

    [deprecated]
    class CInvalidityDate {
        constructor(
            [in] ArrayOf<Byte>* encoding);

        interface IInvalidityDate;
    }

    singleton class CInvalidityDateHelper {
        interface IInvalidityDateHelper;
    }

    class CIssuingDistributionPoint {
        constructor(
            [in] IDistributionPointName* distributionPoint,
            [in] IReasonFlags* onlySomeReasons);

        interface IIssuingDistributionPoint;
    }

    singleton class CIssuingDistributionPointHelper {
        interface IIssuingDistributionPointHelper;
    }

    [deprecated]
    class CKeyUsage {
        constructor(
            [in] ArrayOf<Byte>* encoding);

        interface IKeyUsage;
    }

    class CNameConstraints {
        constructor(
            [in] IGeneralSubtrees* permittedSubtrees,
            [in] IGeneralSubtrees* excludedSubtrees);

        interface INameConstraints;
    }

    singleton class CNameConstraintsHelper {
        interface INameConstraintsHelper;
    }

    class CORAddress {
        interface IORAddress;
    }

    singleton class CORAddressHelper {
        interface IORAddressHelper;
    }

    [deprecated]
    class COtherName {
        constructor(
            [in] String typeID,
            [in] ArrayOf<Byte>* value);

        interface IOtherName;
    }

    singleton class COtherNameHelper {
        interface IOtherNameHelper;
    }

    [deprecated]
    class CPolicyConstraints {
        constructor(
            [in] IBigInteger* requireExplicitPolicy,
            [in] IBigInteger* inhibitPolicyMapping);
        constructor(
            [in] ArrayOf<Byte>* encoding);

        interface IExtensionValue;
    }

    singleton class CPolicyConstraintsHelper {
        interface IPolicyConstraintsHelper;
    }

    class CPolicyInformation {
        constructor(
            [in] String policyIdentifier);

        interface IPolicyInformation;
    }

    singleton class CPolicyInformationHelper {
        interface IPolicyInformationHelper;
    }

    singleton class CPolicyQualifierInfoHelper {
        interface IPolicyQualifierInfoHelper;
    }

    class CPrivateKeyUsagePeriod {
        constructor(
            [in] IDate* notBeforeDate,
            [in] IDate* notAfterDate);

        interface IPrivateKeyUsagePeriod;
    }

    singleton class CPrivateKeyUsagePeriodHelper {
        interface IPrivateKeyUsagePeriodHelper;
    }

    [deprecated]
    class CReasonCode {
        constructor(
            [in] ArrayOf<Byte>* encoding);

        interface IReasonCode;
    }

    singleton class CReasonCodeHelper {
        interface IReasonCodeHelper;
    }

    [deprecated]
    class CReasonFlags {
        constructor(
            [in] ArrayOf<Boolean>* flags);

        interface IReasonFlags;
    }

    singleton class CReasonFlagsHelper {
        interface IReasonFlagsHelper;
    }

    [deprecated]
    class CSubjectKeyIdentifier {
        constructor(
            [in] ArrayOf<Byte>* keyIdentifier);

        interface ISubjectKeyIdentifier;
    }

    singleton class CSubjectKeyIdentifierHelper {
        interface ISubjectKeyIdentifierHelper;
    }

    [deprecated]
    class CSubjectPublicKeyInfo {
        constructor(
            [in] IAlgorithmIdentifier* algID,
            [in] ArrayOf<Byte>* subjectPublicKey);
        constructor(
            [in] IAlgorithmIdentifier* algID,
            [in] ArrayOf<Byte>* subjectPublicKey,
            [in] Int32 unused);

        interface ISubjectPublicKeyInfo;
    }

    singleton class CSubjectPublicKeyInfoHelper {
        interface ISubjectPublicKeyInfoHelper;
    }

    class CRevokedCertificate {
        constructor(
            [in] IBigInteger* userCertificate,
            [in] IDate* revocationDate,
            [in] IExtensions* crlEntryExtensions);

        interface IRevokedCertificate;
    }

    singleton class CRevokedCertificateHelper {
        interface IRevokedCertificateHelper;
    }

    class CTBSCertList {
        interface ITBSCertList;
    }

    singleton class CTBSCertListHelper {
        interface ITBSCertListHelper;
    }

    [deprecated]
    class CTBSCertificate {
        constructor(
            [in] Int32 ver,
            [in] IBigInteger* serialNumber,
            [in] IAlgorithmIdentifier* signature,
            [in] IName* issuer,
            [in] IValidity* validity,
            [in] IName* subject,
            [in] ISubjectPublicKeyInfo* subjectPublicKeyInfo,
            [in] ArrayOf<Boolean>* issuerUniqueID,
            [in] ArrayOf<Boolean>* subjectUniqueID,
            [in] IExtensions* extensions);

        interface ITBSCertificate;
    }

    singleton class CTBSCertificateHelper {
        interface ITBSCertificateHelper;
    }

    singleton class CTimeHelper {
        interface ITimeHelper;
    }

    class CValidity {
        constructor(
            [in] IDate* notBefore,
            [in] IDate* notAfter);

        interface IValidity;
    }

    singleton class CValidityHelper {
        interface IValidityHelper;
    }

    [deprecated]
    class CX509PublicKey {
        constructor(
            [in] String algorithm,
            [in] ArrayOf<Byte>* encoded,
            [in] ArrayOf<Byte>* keyBytes);

        interface IX509PublicKey;
    }

    } // namespace X509


    class CPrivateKeyImpl {
        constructor(
            [in] String algorithm);

        interface IPrivateKeyImpl;
    }

    class CPublicKeyImpl {
        constructor(
            [in] String algorithm);

        interface IPublicKeyImpl;
    }

    class CSystemScope {
        constructor();
        constructor(
            [in] String name);
        constructor(
            [in] String name,
            [in] IIdentityScope* scope);

        interface IIdentityScope;
    }

    } // namespace Security

    namespace Xml {
    namespace Dom {

    class CAttrImpl {
        interface IAttr;
    }

    class CCDATASectionImpl {
        constructor(
            [in] IDocument* document,
            [in] String data);

        interface ICDATASectionImpl;
    }

    class CCommentImpl {
        interface ICommentImpl;
    }

    class CDOMConfigurationImpl {
        interface IDOMConfigurationImpl;
    }

    class CDOMErrorImpl {
        constructor(
            [in] Int32 severity,
            [in] String type);

        interface IDOMError;
    }

    singleton class CDOMImplementationImplHelper {
        interface IDOMImplementationImplHelper;
    }

    class CDocumentFragmentImpl {
        interface ILeafNodeImpl;
    }

    class CDocumentImpl {
        constructor(
            [in] IDOMImplementation* impl,
            [in] String namespaceURI,
            [in] String qualifiedName,
            [in] IDocumentType* doctype,
            [in] String inputEncoding);

        interface ILeafNodeImpl;
        interface IDocument;
    }

    singleton class CDocumentImplHelper {
        interface IDocumentImplHelper;
    }

    class CDocumentTypeImpl {
        constructor(
            [in] IDocument* document,
            [in] String qualifiedName,
            [in] String publicId,
            [in] String systemId);

        interface ILeafNodeImpl;
        interface IDocumentType;
    }

    class CElementImpl {
        interface ILeafNodeImpl;
        interface IElement;
    }

    class CElementAttrNamedNodeMapImpl {
        interface INamedNodeMap;
    }

    class CEntityImpl {
        interface IEntity;
    }

    class CEntityReferenceImpl {
        interface ILeafNodeImpl;
    }

    class CNodeListImpl {
        interface INodeList;
    }

    class CNotationImpl {
        interface ILeafNodeImpl;
        interface INotation;
    }

    class CProcessingInstructionImpl {
        interface ILeafNodeImpl;
        interface IProcessingInstruction;
    }

    class CTextImpl {
        interface ICharacterDataImpl;
        interface IText;
    }

    } // namespace Dom

    namespace Parsers {

    class CDocumentBuilderFactoryImpl {
        interface IDocumentBuilderFactory;
    }

    class CSAXParserFactoryImpl {
        interface ISAXParserFactory;
    }

    class CSAXParserImpl {
        interface ISAXParser;
    }

    } // namespace Parsers

    class CExpatReader {
        interface IExpatReader;
    }

    } // namespace Xml

    namespace Xnet {
    namespace Provider {
    namespace Jsse {

    class CCertPinManager {
        constructor(
            [in] ITrustedCertificateStore* store);
        constructor(
            [in] String path,
            [in] ITrustedCertificateStore* store);

        interface ICertPinManager;
    }

    [deprecated]
    class CCertificateMessage {
        constructor(
            [in] IHandshakeIODataStream* ids,
            [in] Int32 length);
        constructor(
            [in] ArrayOf<IX509Certificate*>* certs);

        interface ICertificateMessage;
    }

    [deprecated]
    class CCertificateRequest {
        constructor(
            [in] ArrayOf<Byte>* certificate_types,
            [in] ArrayOf<IX509Certificate*>* accepted);
        constructor(
            [in] IHandshakeIODataStream* ids,
            [in] Int32 length);

        interface ICertificateRequest;
    }

    [deprecated]
    class CCertificateVerify {
        constructor(
            [in] ArrayOf<Byte>* hash);
        constructor(
            [in] IHandshakeIODataStream* ids,
            [in] Int32 length);

        interface IMessage;
    }

    class CCipherSuite {
        interface ICipherSuite;
    }

    singleton class CCipherSuiteHelper {
        interface ICipherSuiteHelper;
    }

    class CClientHandshakeImpl {
        interface IHandshakeProtocol;
    }

    [deprecated]
    class CClientHello {
        constructor(
            [in] ISecureRandom* sr,
            [in] ArrayOf<Byte>* ver,
            [in] ArrayOf<Byte>* ses_id,
            [in] ArrayOf<ICipherSuite*>* cipher_suite);
        constructor(
            [in] IHandshakeIODataStream* ids,
            [in] Int32 length);
        constructor(
            [in] IHandshakeIODataStream* ids);

        interface IClientHello;
    }

    [deprecated]
    class CClientKeyExchange {
        constructor(
            [in] ArrayOf<Byte>* encrypted_pre_master_secret,
            [in] Boolean isTLS);
        constructor(
            [in] IBigInteger* dh_Yc);
        constructor();
        constructor(
            [in] IHandshakeIODataStream* ids,
            [in] Int32 length,
            [in] Boolean isTLS,
            [in] Boolean isRSA);

        interface IClientKeyExchange;
    }

    class CClientSessionContext {
        constructor();

        interface IClientSessionContext;
    }

    singleton class CDHParametersHelper {
        interface IDHParametersHelper;
    }

    class CDefaultSSLContextImpl {
        interface ISSLContextSpi;
    }

    class CDelegatedTask {
        constructor(
            [in] IRunnable* action,
            [in] IHandshakeProtocol* handshaker);

        interface IRunnable;
    }

    class CDigitalSignature {
        constructor(
            [in] String authType);

        interface IDigitalSignature;
    }

    class CFileClientSessionCache {
        interface IFileClientSessionCache;
    }

    singleton class CFileClientSessionCacheHelper {
        interface IFileClientSessionCacheHelper;
    }

    [deprecated]
    class CFinished {
        constructor(
            [in] ArrayOf<Byte>* bytes);
        constructor(
            [in] IHandshakeIODataStream* ids,
            [in] Int32 length);

        interface IFinished;
    }

    class CHandshakeIODataStream {
        constructor();

        interface IHandshakeIODataStream;
        interface IAppendable;
        interface IDataStream;
    }

    class CHelloRequest {
        constructor();
        constructor(
            [in] IHandshakeIODataStream* ids,
            [in] Int32 length);

        interface IMessage;
    }

    class CJSSEProvider {
        interface IProvider;
    }

    class CKeyManagerFactoryImpl {
        interface IKeyManagerFactorySpi;
    }

    [deprecated]
    class CKeyManagerImpl {
        constructor(
            [in] IKeyStore* keyStore,
            [in] ArrayOf<Char32>* pwd);

        interface IX509ExtendedKeyManager;
    }

    class CLoggerStream {
        constructor(
            [in] String name);

        interface ILoggerStream;
    }

    singleton class CLoggerHelper {
        interface ILoggerHelper;
    }

    singleton class CNativeCrypto {
        interface INativeCrypto;
    }

    class COpenSSLCipherRSA_PKCS1 {
        interface ICipherSpi;
    }

    class COpenSSLCipherRSA_Raw {
        interface ICipherSpi;
    }

    class COpenSSLContextImpl {
        interface ISSLContextSpi;
    }

    class COpenSSLDSAKeyFactory {
        interface IKeyFactorySpi;
    }

    class COpenSSLDSAKeyPairGenerator {
        interface IKeyPairGeneratorSpi;
    }

    class COpenSSLDSAParams {
        interface IOpenSSLDSAParams;
        interface IAlgorithmParameterSpec;
    }

    class COpenSSLDSAPrivateKey {
        constructor();

        interface IDSAPrivateKey;
    }

    class COpenSSLDSAPublicKey {
        interface IDSAPublicKey;
    }

    class COpenSSLEngine {
        interface IOpenSSLEngine;
    }

    singleton class COpenSSLEngineHelper {
        interface IOpenSSLEngineHelper;
    }

    class COpenSSLMessageDigestJDK {
        interface IMessageDigest;
    }

    class COpenSSLMessageDigestJDK_MD5 {
        constructor();

        interface IMessageDigest;
    }

    class COpenSSLMessageDigestJDK_SHA1 {
        constructor();

        interface IMessageDigest;
    }

    class COpenSSLMessageDigestJDK_SHA256 {
        constructor();

        interface IMessageDigest;
    }

    class COpenSSLMessageDigestJDK_SHA384 {
        constructor();

        interface IMessageDigest;
    }

    class COpenSSLMessageDigestJDK_SHA512 {
        constructor();

        interface IMessageDigest;
    }

    class COpenSSLProvider {
        constructor();

        interface IOpenSSLProvider;
    }

    class COpenSSLRSAKeyPairGenerator {
        interface IKeyPairGeneratorSpi;
    }

    class COpenSSLRSAPrivateCrtKey {
        constructor(
            [in] IRSAPrivateCrtKeySpec* rsaKeySpec);

        interface IOpenSSLRSAPrivateKey;
        interface IRSAPrivateCrtKey;
    }

    class COpenSSLRSAPrivateKey {
        constructor(
            [in] IRSAPrivateKeySpec* rsaKeySpec);

        interface IOpenSSLRSAPrivateKey;
    }

    class COpenSSLRSAPublicKey {
        interface IOpenSSLRSAPublicKey;
    }

    class COpenSSLServerSocketFactoryImpl {
        constructor();
        constructor(
            [in] ISSLParameters* sslParameters);

        interface ISSLServerSocketFactory;
    }

    class COpenSSLServerSocketImpl {
        interface ISSLServerSocket;
    }

    class COpenSSLSessionImpl {
        interface ISSLSession;
    }

    class COpenSSLSignature {
        interface ISignature;
    }

    class COpenSSLSignature_MD5RSA {
        constructor();

        interface ISignature;
    }

    class COpenSSLSignature_SHA1RSA {
        constructor();

        interface ISignature;
    }

    class COpenSSLSignature_SHA256RSA {
        constructor();

        interface ISignature;
    }

    class COpenSSLSignature_SHA384RSA {
        constructor();

        interface ISignature;
    }

    class COpenSSLSignature_SHA512RSA {
        constructor();

        interface ISignature;
    }

    class COpenSSLSignature_SHA1DSA {
        constructor();

        interface ISignature;
    }

    class COpenSSLSignatureRawRSA {
        constructor();

        interface ISignature;
    }

    class COpenSSLSocketFactoryImpl {
        constructor();
        constructor(
            [in] ISSLParameters* sslParameters);

        interface ISSLSocketFactory;
    }

    class COpenSSLSocketImpl {
        interface IOpenSSLSocketImpl;
        interface ISSLHandshakeCallbacks;
    }

    class COpenSSLSocketImplWrapper {
        interface IOpenSSLSocketImpl;
    }

    singleton class CPinFailureLoggerHelper {
        interface IPinFailureLoggerHelper;
    }

    class CPinListEntry {
        constructor(
            [in] String entry,
            [in] ITrustedCertificateStore* store);

        interface IPinListEntry;
    }

    class CProtocolVersion {
        interface IProtocolVersion;
    }

    singleton class CProtocolVersionHelper {
        interface IProtocolVersionHelper;
    }

    class CSSLBufferedInput {
        interface Elastos.IO.IInputStream;
    }

    class CSSLContextImpl {
        constructor();

        interface ISSLContextSpi;
    }

    class CSSLEngineAppData {
        interface IAppendable;
    }

    class CSSLEngineDataStream {
        interface ISSLEngineDataStream;
    }

    class CSSLEngineImpl {
        interface ISSLEngine;
    }

    singleton class CSSLParametersImplHelper {
        interface ISSLParametersImplHelper;
    }

    class CSSLServerSocketFactoryImpl {
        constructor();

        interface ISSLServerSocketFactory;
    }

    class CSSLServerSocketImpl {
        interface ISSLServerSocket;
    }

    class CSSLSessionImpl {
        constructor(
            [in] ICipherSuite* cipher_suite,
            [in] ISecureRandom* secureRandom);
        constructor(
            [in] ISecureRandom* secureRandom);

        interface ISSLSession;
        interface ICloneable;
    }

    singleton class CSSLSessionImplHelper {
        interface ISSLSessionImplHelper;
    }

    class CSSLSocketFactoryImpl {
        constructor();

        interface ISSLSocketFactory;
    }

    class CSSLSocketImpl {
        interface ISSLSocket;
    }

    class CSSLSocketInputStream {
        interface IInputStream;
    }

    class CSSLSocketOutputStream {
        interface IOutputStream;
        interface IFlushable;
    }

    class CSSLSocketWrapper {
        interface ISSLSocket;
    }

    class CSSLStreamedInput {
        constructor(
            [in] IInputStream* is);

        interface ISSLInputStream;
    }

    class CServerHandshakeImpl {
        constructor(
            [in] IInterface* owner);

        interface IHandshakeProtocol;
    }

    [deprecated]
    class CServerHello {
        constructor(
            [in] ISecureRandom* sr,
            [in] ArrayOf<Byte>* server_version,
            [in] ArrayOf<Byte>* session_id,
            [in] ICipherSuite* cipher_suite,
            [in] Byte compression_method);

        constructor(
            [in] IHandshakeIODataStream* ids,
            [in] Int32 length);

        interface IServerHello;
    }

    class CServerHelloDone {
        constructor();
        constructor(
            [in] IHandshakeIODataStream* ids,
            [in] Int32 length);

        interface IMessage;
    }

    [deprecated]
    class CServerKeyExchange {
        constructor(
            [in] IBigInteger* par1,
            [in] IBigInteger* par2,
            [in] IBigInteger* par3,
            [in] ArrayOf<Byte>* hash);
        constructor(
            [in] IHandshakeIODataStream* ids,
            [in] Int32 length,
            [in] Int32 keyExchange);

        interface IServerKeyExchange;
    }

    singleton class CServerKeyExchangeHelper {
        interface IServerKeyExchangeHelper;
    }

    class CServerSessionContext {
        constructor();

        interface IServerSessionContext;
    }

    class CTrustManagerFactoryImpl {
        interface ITrustManagerFactorySpi;
    }

    class CTrustManagerImpl {
        constructor(
            [in] IKeyStore* keyStore);
        constructor(
            [in] IKeyStore* keyStore,
            [in] ICertPinManager* manager);

        interface ITrustManagerImpl;
    }

    class CTrustedCertificateIndex {
        constructor();
        constructor(
            [in] ISet* anchors);

        interface ITrustedCertificateIndex;
    }

    class CTrustedCertificateKeyStoreSpi {
        interface IKeyStoreSpi;
    }

    class CTrustedCertificateStore {
        constructor();
        constructor(
            [in] IFile* systemDir,
            [in] IFile* addedDir,
            [in] IFile* deletedDir);

        interface ITrustedCertificateStore;
    }

    singleton class CTrustedCertificateStoreHelper {
        interface ITrustedCertificateStoreHelper;
    }

    } // namespace Jsse
    } // namespace Provider
    } // namespace Xnet

    } // namespace Harmony
    } // namespace Apache
    } // namespace Org
}
