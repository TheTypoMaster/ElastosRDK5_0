
#include "CJDBCStatement.h"

namespace Elastos {
namespace Sql {
namespace SQLite {
namespace JDBC{

CAR_OBJECT_IMPL(CJDBCStatement)

PInterface CJDBCStatement::Probe(
    /* [in] */ REIID riid)
{
    if (riid == EIID_IInterface) {
        return (PInterface)(IJDBCPreparedStatement*)this;
    }
    else if (riid == EIID_IObject) {
        return (IObject*)this;
    }
    if (riid == EIID_IJDBCPreparedStatement) {
        return (IJDBCPreparedStatement *)this;
    }
    else if (riid == EIID_IJDBCStatement) {
       return (IJDBCStatement *)this;
    }
    else if (riid == EIID_IStatement) {
        return (IStatement*)this;
    }

    return NULL;
}

ECode CJDBCStatement::constructor(
    /* [in] */ AutoPtr<IJDBCConnection> conn)
{
    JDBCStatement::Init(conn);
    return NOERROR;
}

ECode CJDBCStatement::AddBatch(
    /* [in] */ const String& sql)
{
    JDBCStatement::AddBatch(sql);
    return NOERROR;
}

ECode CJDBCStatement::Cancel()
{
    CJDBCStatement::Cancel();
    return NOERROR;
}

ECode CJDBCStatement::ClearBatch()
{
    JDBCStatement::ClearBatch();
    return NOERROR;
}

ECode CJDBCStatement::ClearWarnings()
{
    JDBCStatement::ClearWarnings();
    return NOERROR;
}

ECode CJDBCStatement::Close()
{
    JDBCStatement::Close();
    return NOERROR;
}

ECode CJDBCStatement::Execute(
    /* [in] */ const String& sql,
    /* [out] */ Boolean* value)
{
    *value = JDBCStatement::Execute(sql);
    return NOERROR;
}

ECode CJDBCStatement::Execute(
    /* [in] */ const String& sql,
    /* [in] */ Int32 autoGeneratedKeys,
    /* [out] */ Boolean* value)
{
    *value = JDBCStatement::Execute(sql,autoGeneratedKeys);
    return NOERROR;
}

ECode CJDBCStatement::Execute(
    /* [in] */ const String& sql,
    /* [in] */ const ArrayOf<Int32>& columnIndexes,
    /* [out] */ Boolean* value)
{
    *value = JDBCStatement::Execute(sql,columnIndexes);
    return NOERROR;
}

ECode CJDBCStatement::Execute(
    /* [in] */ const String& sql,
    /* [in] */ const ArrayOf<String>& columnNames,
    /* [out] */ Boolean* value)
{
    *value = JDBCStatement::Execute(sql,columnNames);
    return NOERROR;
}

ECode CJDBCStatement::ExecuteBatch(
        /* [out, callee] */ ArrayOf<Int32> ** value)
{
    *value = JDBCStatement::ExecuteBatch();
    return NOERROR;
}

ECode CJDBCStatement::ExecuteQuery(
    /* [in] */ const String& sql,
    /* [out] */ IResultSet ** resultset )
{
    *resultset = JDBCStatement::ExecuteQuery(sql);
    return NOERROR;
}

ECode CJDBCStatement::ExecuteUpdate(
    /* [in] */ const String& sql,
    /* [out] */ Int32* value)
{
    *value = JDBCStatement::ExecuteUpdate(sql);
    return NOERROR;
}

ECode CJDBCStatement::ExecuteUpdate(
    /* [in] */ const String& sql,
    /* [in] */ Int32 autoGeneratedKeys,
    /* [out] */ Int32* value)
{
    *value = JDBCStatement::ExecuteUpdate(sql,autoGeneratedKeys);
    return NOERROR;
}

ECode CJDBCStatement::ExecuteUpdate(
    /* [in] */ const String& sql,
    /* [in] */ const ArrayOf<Int32>& columnIndexes,
    /* [out] */ Int32* value)
{
    *value = JDBCStatement::ExecuteUpdate(sql,columnIndexes);
    return NOERROR;
}

ECode CJDBCStatement::ExecuteUpdate(
    /* [in] */ const String& sql,
    /* [in] */ const ArrayOf<String>& columnNames,
    /* [out] */ Int32* value)
{
    *value = JDBCStatement::ExecuteUpdate(sql,columnNames);
    return NOERROR;
}

ECode CJDBCStatement::GetConnection(
    /* [out] */ IConnection ** conn)
{
    *conn = JDBCStatement::GetConnection();
    return NOERROR;
}

ECode CJDBCStatement::GetFetchDirection(
    /* [out] */ Int32* value)
{
    *value = JDBCStatement::GetFetchDirection();
    return NOERROR;
}

ECode CJDBCStatement::GetFetchSize(
    /* [out] */ Int32* value)
{
    *value = JDBCStatement::GetFetchSize();
    return NOERROR;
}

ECode CJDBCStatement::GetGeneratedKeys(
    /* [out] */ IResultSet ** resultset)
{
    *resultset = JDBCStatement::GetGeneratedKeys();
    return NOERROR;
}

ECode CJDBCStatement::GetMaxFieldSize(
    /* [out] */ Int32* value)
{
    *value = JDBCStatement::GetMaxFieldSize();
    return NOERROR;
}

ECode CJDBCStatement::GetMaxRows(
    /* [out] */ Int32* value)
{
    *value = JDBCStatement::GetMaxRows();
    return NOERROR;
}

ECode CJDBCStatement::GetMoreResults(
    /* [out] */ Boolean* value)
{
    *value = JDBCStatement::GetMoreResults();
    return NOERROR;
}

ECode CJDBCStatement::GetMoreResults(
    /* [in] */ Int32 current,
    /* [out] */ Boolean* value)
{
    *value = JDBCStatement::GetMoreResults(current);
    return NOERROR;
}

ECode CJDBCStatement::GetQueryTimeout(
    /* [out] */ Int32* value)
{
    *value = JDBCStatement::GetQueryTimeout();
    return NOERROR;
}

ECode CJDBCStatement::GetResultSet(
    /* [out] */ IResultSet ** resultset)
{
    *resultset = JDBCStatement::GetResultSet();
    return NOERROR;
}

ECode CJDBCStatement::GetResultSetConcurrency(
    /* [out] */ Int32* value)
{
    *value = JDBCStatement::GetResultSetConcurrency();
    return NOERROR;
}

ECode CJDBCStatement::GetResultSetHoldability(
    /* [out] */ Int32* value)
{
    *value = JDBCStatement::GetResultSetHoldability();
    return NOERROR;
}

ECode CJDBCStatement::GetResultSetType(
    /* [out] */ Int32* value)
{
    *value = JDBCStatement::GetResultSetType();
    return NOERROR;
}

ECode CJDBCStatement::GetUpdateCount(
    /* [out] */ Int32* value)
{
    *value = JDBCStatement::GetUpdateCount();
    return NOERROR;
}

ECode CJDBCStatement::GetWarnings(
    /* [out] */ ISQLWarning ** sqlwarn)
{
    *sqlwarn = JDBCStatement::GetWarnings();
    return NOERROR;
}

ECode CJDBCStatement::SetCursorName(
    /* [in] */ const String& name)
{
    JDBCStatement::SetCursorName(name);
    return NOERROR;
}

ECode CJDBCStatement::SetEscapeProcessing(
    /* [in] */ Boolean isable)
{
    JDBCStatement::SetEscapeProcessing(isable);
    return NOERROR;
}

ECode CJDBCStatement::SetFetchDirection(
    /* [in] */ Int32 direction)
{
    JDBCStatement::SetFetchDirection(direction);
    return NOERROR;
}

ECode CJDBCStatement::SetFetchSize(
    /* [in] */ Int32 rows)
{
    JDBCStatement::SetFetchSize(rows);
    return NOERROR;
}

ECode CJDBCStatement::SetMaxFieldSize(
    /* [in] */ Int32 max)
{
    JDBCStatement::SetMaxFieldSize(max);
    return NOERROR;
}

ECode CJDBCStatement::SetMaxRows(
    /* [in] */ Int32 max)
{
    JDBCStatement::SetMaxRows(max);
    return NOERROR;
}

ECode CJDBCStatement::SetQueryTimeout(
    /* [in] */ Int32 seconds)
{
    JDBCStatement::SetQueryTimeout(seconds);
    return NOERROR;
}

ECode CJDBCStatement::IsClosed(
    /* [out] */ Boolean * value)
{
    *value = JDBCStatement::IsClosed();
    return NOERROR;
}

ECode CJDBCStatement::SetPoolable(
    /* [in] */ Boolean poolable)
{
    JDBCStatement::SetPoolable(poolable);
    return NOERROR;
}

ECode CJDBCStatement::IsPoolable(
    /* [out] */ Boolean* value)
{
    *value = JDBCStatement::IsPoolable();
    return NOERROR;
}

ECode CJDBCStatement::IsWrapperFor(
    /* [in] */ IInterface * iface,
    /* [out] */ Boolean * value)
{
    *value = JDBCStatement::IsWrapperFor(iface);
    return NOERROR;
}

ECode CJDBCStatement::Unwrap(
    /* [in] */ PInterface iface,
    /* [out] */ IInterface ** oface)
{
    *oface = JDBCStatement::Unwrap(iface);
    return NOERROR;
}

} // namespace JDBC
} // namespace SQLite
} // namespace Sql
} // namespace Elastos
