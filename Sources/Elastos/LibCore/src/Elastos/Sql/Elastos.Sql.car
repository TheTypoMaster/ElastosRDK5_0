module
{
    merge("../../../car/Elastos/Sql/Exceptions.car");
    merge("../../../car/Elastos/Sql/ITypes.car");
    merge("../../../car/Elastos/Sql/IClob.car");
    merge("../../../car/Elastos/Sql/IBlob.car");
    merge("../../../car/Elastos/Sql/INClob.car");
    merge("../../../car/Elastos/Sql/IArray.car");
    merge("../../../car/Elastos/Sql/IStruct.car");
    merge("../../../car/Elastos/Sql/IDate.car");
    merge("../../../car/Elastos/Sql/ITime.car");
    merge("../../../car/Elastos/Sql/IWrapper.car");
    merge("../../../car/Elastos/Sql/IParameterMetaData.car");
    merge("../../../car/Elastos/Sql/IRowId.car");
    merge("../../../car/Elastos/Sql/ITimestamp.car");
    merge("../../../car/Elastos/Sql/IRef.car");
    merge("../../../car/Elastos/Sql/ISQLStruct.car");
    merge("../../../car/Elastos/Sql/ISQLXML.car");
    merge("../../../car/Elastos/Sql/ISQLInput.car");
    merge("../../../car/Elastos/Sql/ISQLOutput.car");
    merge("../../../car/Elastos/Sql/ISQLData.car");
    merge("../../../car/Elastos/Sql/IStatement.car");
    merge("../../../car/Elastos/Sql/ISQLWarning.car");
    merge("../../../car/Elastos/Sql/IRowIdLifeTime.car");
    merge("../../../car/Elastos/Sql/IResultSetMetaData.car");
    merge("../../../car/Elastos/Sql/IResultSet.car");
    merge("../../../car/Elastos/Sql/IDatabaseMetaData.car");
    merge("../../../car/Elastos/Sql/IPreparedStatement.car");
    merge("../../../car/Elastos/Sql/ICallableStatement.car");
    merge("../../../car/Elastos/Sql/ISavePoint.car");
    merge("../../../car/Elastos/Sql/ISQLPermission.car");
    merge("../../../car/Elastos/Sql/IConnection.car");
    merge("../../../car/Elastos/Sql/IDriver.car");
    merge("../../../car/Elastos/Sql/IDriverManagerHelper.car");
    merge("../../../car/Elastos/Sql/IDataTruncation.car");
    merge("../../../car/Elastos/Sql/IDriverPropertyInfo.car");

    merge("../../../car/Elastos/Sql/SQLite/IStringEncoderHelper.car");
    merge("../../../car/Elastos/Sql/SQLite/IAuthorizer.car");
    merge("../../../car/Elastos/Sql/SQLite/IBlob.car");
    merge("../../../car/Elastos/Sql/SQLite/ICallback.car");
    merge("../../../car/Elastos/Sql/SQLite/IBusyHandler.car");
    merge("../../../car/Elastos/Sql/SQLite/ITableResult.car");
    merge("../../../car/Elastos/Sql/SQLite/IFunctionContext.car");
    merge("../../../car/Elastos/Sql/SQLite/IFunction.car");
    merge("../../../car/Elastos/Sql/SQLite/ITrace.car");
    merge("../../../car/Elastos/Sql/SQLite/IProfile.car");
    merge("../../../car/Elastos/Sql/SQLite/IVm.car");
    merge("../../../car/Elastos/Sql/SQLite/IStmt.car");
    merge("../../../car/Elastos/Sql/SQLite/IBackup.car");
    merge("../../../car/Elastos/Sql/SQLite/IProgressHandler.car");
    merge("../../../car/Elastos/Sql/SQLite/IDatabase.car");

    merge("../../../car/Elastos/Sql/SQLite/IMockFunction.car");

    merge("../../../car/Elastos/Sql/SQLite/IConstants.car");
    merge("../../../car/Elastos/Sql/SQLite/IShell.car");

    merge("../../../car/Elastos/Sql/SQLite/JDBC/IJDBCConnection.car");
    merge("../../../car/Elastos/Sql/SQLite/JDBC/IJDBCStatement.car");
    merge("../../../car/Elastos/Sql/SQLite/JDBC/IJDBCPreparedStatement.car");
    merge("../../../car/Elastos/Sql/SQLite/JDBC/IJDBCResultSetMetaData.car");
    merge("../../../car/Elastos/Sql/SQLite/JDBC/ITableResultX.car");
    merge("../../../car/Elastos/Sql/SQLite/JDBC/IJDBCDatabaseMetaData.car");
    merge("../../../car/Elastos/Sql/SQLite/JDBC/IJDBCResultSet.car");

    namespace Elastos {
    namespace Sql {
        class CSQLWarning {
            constructor();

            constructor(
                [in] String theReason);

            constructor(
                [in] String theReason,
                [in] String theSQLState);

            constructor(
                [in] String theReason,
                [in] String theSQLState,
                [in] Int32 theErrorCode);

            //constructor(
            //    [in] IThrowable * cause);

            //constructor(
            //    [in] String reason,
            //    [in] IThrowable * cause);

            //constructor(
            //    [in] String reason,
            //    [in] String SQLState,
            //    [in] IThrowable * cause);

            //constructor(
            //    [in] String reason,
            //    [in] String SQLState,
            //    [in] Int32 vendorCode,
            //    [in] IThrowable * cause);

            interface ISQLWarning;
        }

        class CTime {
            constructor(
                [in] Int32 theHour,
                [in] Int32 theMinute,
                [in] Int32 theSecond);

            constructor(
                [in] Int64 theTime);

            interface ITime;
        }

        class CSqlDate {
            constructor(
                [in] Int32 theYear,
                [in] Int32 theMonth,
                [in] Int32 theDay);

            constructor(
                [in] Int64 theDate);

            interface IDate;
        }

        class CTimestamp {
            constructor(
                [in] Int32 theYear,
                [in] Int32 theMonth,
                [in] Int32 theDate,
                [in] Int32 theHour,
                [in] Int32 theMinute,
                [in] Int32 theSecond,
                [in] Int32 theNano);

            constructor(
                [in] Int64 theTime);

            interface ITimestamp;
        }

        class CDriverPropertyInfo {
            constructor(
                [in] String name,
                [in] String value);

            interface IDriverPropertyInfo;
        }

        class CDataTruncation {
            constructor(
                [in] Int32 index,
                [in] Boolean parameter,
                [in] Boolean read,
                [in] Int32 dataSize,
                [in] Int32 transferSize);

            // constructor(
            //     [in] Int32 index,
            //     [in] Boolean parameter,
            //     [in] Boolean read,
            //     [in] Int32 dataSize,
            //     [in] Int32 transferSize,
            //     [in] IThrowable * cause);

            interface IDataTruncation;
            interface Elastos.IO.ISerializable;
        }

        singleton class CDriverManager{
            interface IDriverManagerHelper;
        }

        class CSQLPermission {
            constructor(
                [in] String name);

            constructor(
                [in] String name,
                [in] String actions);

            interface ISQLPermission;
        }

    } //Sql
    } //Elastos

    namespace Elastos {
    namespace Sql {
    namespace SQLite {

        class CTableResult {
            constructor();

            constructor(
                [in] Int32 maxrows);

            interface ITableResult;
        }

        class CShell {
            constructor(
                [in] Elastos.IO.IPrintWriter* pw,
                [in] Elastos.IO.IPrintWriter* err);

            constructor(
                [in] Elastos.IO.IPrintStream* pw,
                [in] Elastos.IO.IPrintStream* errs);

            interface IShell;
        }

        class CDBDump {
            constructor(
                [in] IShell* s,
                [in] ArrayOf<String> tables);

            interface IDBDump;
        }

        class CVm {
            interface IVm;
        }

        class CBlob{
            interface IBlob;
        }

        class CBlobR {
            constructor(
                [in] IBlob* blob);
            interface IBlobR;
        }
        class CBlobW{
            constructor(
                [in] IBlob* blob);
            interface IBlobW;
        }

        class CDatabase {
            interface IDatabase;
        }

        singleton class CDatabaseHelper {
            interface IDatabaseHelper;
        }

        class CJDBCDriver {
            constructor();

            interface Elastos.Sql.IDriver;
        }

        class CBackup {
            interface IBackup;
        }

        class CFunctionContext {
            interface IFunctionContext;
        }

        class CStmt {
            interface IStmt;
        }

        class CStringEncoderHelper {
            interface IStringEncoderHelper;
        }

        class CSinFunc {
            constructor();

            interface IFunction;
        }

        class CTestTrace {
            constructor();

            interface ITrace;
            interface ICallback;
        }

        class CAuthorizerCallback {
            constructor();

            interface IAuthorizer;
            interface ICallback;
        }

        class CTestBusyHandler {
            constructor();

            interface IBusyHandler;
            interface ICallback;
        }

        class CTestProgressHandler {
            constructor();

            interface IProgressHandler;
            interface ICallback;
        }

        class CMockFunction {
            constructor();

            interface IMockFunction;
        }

    } //SQLite
    } //Sql
    } //Elastos

    namespace Elastos {
    namespace Sql {
    namespace SQLite {
    namespace JDBC{

        class CJDBCConnection {
            constructor(
                [in] String url,
                [in] String enc,
                [in] String pwd,
                [in] String drep,
                [in] String vfs);

            interface IJDBCConnection;
            interface Elastos.Sql.SQLite.IBusyHandler;
        }

        class CJDBCPreparedStatement {
            constructor(
                [in] IJDBCConnection* conn,
                [in] String sql);

            interface IJDBCPreparedStatement;
            interface Elastos.Sql.IPreparedStatement;
        }

        class CJDBCStatement {
            constructor(
                [in] IJDBCConnection* conn);

            interface IJDBCStatement;
        }

        class CJDBCResultSetMetaData {
            constructor(
                [in] IJDBCResultSet* r);

            interface IJDBCResultSetMetaData;
        }

        class CTableResultX {
            constructor();

            constructor(
                [in] Int32 maxrows);

            constructor(
                [in] Elastos.Sql.SQLite.ITableResult* tr);

            interface ITableResultX;
        }

        class CJDBCDatabaseMetaData {
            constructor(
                [in] IJDBCConnection* conn);

            interface IJDBCDatabaseMetaData;
        }

        class CJDBCResultSet {
            constructor(
                [in] Elastos.Sql.SQLite.ITableResult* tr,
                [in] IJDBCStatement* s);

            interface IJDBCResultSet;
        }

        class CDatabaseX {
            constructor();

            interface IDatabaseX;
        }


    } //JDBC
    } //SQLite
    } //Sql
    } //Elastos
}