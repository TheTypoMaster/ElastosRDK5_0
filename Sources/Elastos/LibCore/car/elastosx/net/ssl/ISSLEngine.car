
module
{
    interface Elastos.Core.IRunnable;
    interface Elastos.IO.IByteBuffer;
    interface Elastosx.Net.Ssl.ISSLSession;
    interface Elastosx.Net.Ssl.ISSLParameters;

    namespace Elastosx {
    namespace Net {
    namespace Ssl {

    /**
     * The abstract implementation of secure communications using SSL, TLS, or other
     * protocols. It includes the setup, handshake, and encrypt/decrypt
     * functionality needed to create a secure connection.
     *
     * @since 1.5
     */
    [deprecated]
    interface ISSLEngine {
        /**
         * Returns the name of the peer host.
         *
         * @return the name of the peer host, or {@code null} if none is available.
         */
        GetPeerHost(
            [out] String* host);

        /**
         * Returns the port number of the peer host.
         *
         * @return the port number of the peer host, or {@code -1} is none is
         *         available.
         */
        GetPeerPort(
            [out] Int32* port);

        /**
         * Initiates a handshake on this engine.
         * <p>
         * Calling this method is not needed for the initial handshake: it will be
         * called by {@code wrap} or {@code unwrap} if the initial handshake has not
         * been started yet.
         *
         * @throws SSLException
         *             if starting the handshake fails.
         * @throws IllegalStateException
         *             if the engine does not have all the needed settings (e.g.
         *             client/server mode not set).
         */
        BeginHandshake();

        /**
         * Notifies this engine instance that no more inbound network data will be
         * sent to this engine.
         *
         * @throws SSLException
         *             if this engine did not receive a needed protocol specific
         *             close notification message from the peer.
         */
        CloseInbound();

        /**
         * Notifies this engine instance that no more outbound application data will
         * be sent to this engine.
         */
        CloseOutbound();

        /**
         * Returns a delegate task for this engine instance. Some engine operations
         * may require the results of blocking or long running operations, and the
         * {@code SSLEngineResult} instances returned by this engine may indicate
         * that a delegated task result is needed. In this case the
         * {@link Runnable#run() run} method of the returned {@code Runnable}
         * delegated task must be called.
         *
         * @return a delegate task, or {@code null} if none are available.
         */
         GetDelegatedTask(
            [out] IRunnable** task);

        /**
         * Returns the SSL cipher suite names that are enabled in this engine
         * instance.
         *
         * @return the SSL cipher suite names that are enabled in this engine
         *         instance.
         */
        GetEnabledCipherSuites(
            [out, callee] ArrayOf<String>* suites);

        /**
         * Returns the protocol version names that are enabled in this engine
         * instance.
         *
         * @return the protocol version names that are enabled in this engine
         *         instance.
         */
        GetEnabledProtocols(
            [out, callee] ArrayOf<String>* protocols);

        /**
         * Returns whether new SSL sessions may be established by this engine.
         *
         * @return {@code true} if new session may be established, {@code false} if
         *         existing sessions must be reused.
         */
        GetEnableSessionCreation(
            [out] Boolean* enabled);

        /**
         * Returns the status of the handshake of this engine instance.
         *
         * @return the status of the handshake of this engine instance.
         */
        GetHandshakeStatus(
            [out] enum SSLEngineResult_HandshakeStatus* status);

        /**
         * Returns whether this engine instance will require client authentication.
         *
         * @return {@code true} if this engine will require client authentication,
         *         {@code false} if no client authentication is needed.
         */
        GetNeedClientAuth(
            [out] Boolean* auth);

        /**
         * Returns the SSL session for this engine instance.
         *
         * @return the SSL session for this engine instance.
         */
        GetSession(
            [out] ISSLSession** session);

        /**
         * Returns the SSL cipher suite names that are supported by this engine.
         * These cipher suites can be enabled using
         * {@link #setEnabledCipherSuites(String[])}.
         *
         * @return the SSL cipher suite names that are supported by this engine.
         */
        GetSupportedCipherSuites(
            [out, callee] ArrayOf<String>* suites);

        /**
         * Returns the protocol names that are supported by this engine. These
         * protocols can be enables using {@link #setEnabledProtocols(String[])}.
         *
         * @return the protocol names that are supported by this engine.
         */
        GetSupportedProtocols(
            [out, callee] ArrayOf<String>* protocols);

        /**
         * Returns whether this engine is set to act in client mode when
         * handshaking.
         *
         * @return {@code true} if the engine is set to do handshaking in client
         *         mode.
         */
        GetUseClientMode(
            [out] Boolean* mode);

        /**
         * Returns whether this engine will request client authentication.
         *
         * @return {@code true} if client authentication will be requested,
         *         {@code false} otherwise.
         */
        GetWantClientAuth(
            [out] Boolean* auth);

        /**
         * Returns whether no more inbound data will be accepted by this engine.
         *
         * @return {@code true} if no more inbound data will be accepted by this
         *         engine, {@code false} otherwise.
         */
        IsInboundDone(
            [out] Boolean* done);

        /**
         * Returns whether no more outbound data will be produced by this engine.
         *
         * @return {@code true} if no more outbound data will be producted by this
         *         engine, {@code otherwise} false.
         */
        IsOutboundDone(
            [out] Boolean* done);

        /**
         * Sets the SSL cipher suite names that should be enabled in this engine
         * instance. Only cipher suites listed by {@code getSupportedCipherSuites()}
         * are allowed.
         *
         * @param suites
         *            the SSL cipher suite names to be enabled.
         * @throws IllegalArgumentException
         *             if one of the specified cipher suites is not supported, or if
         *             {@code suites} is {@code null}.
         */
        SetEnabledCipherSuites(
            [in] ArrayOf<String>* suites);

        /**
         * Sets the protocol version names that should be enabled in this engine
         * instance. Only protocols listed by {@code getSupportedProtocols()} are
         * allowed.
         *
         * @param protocols
         *            the protocol version names to be enabled.
         * @throws IllegalArgumentException
         *             if one of the protocol version names is not supported, or if
         *             {@code protocols} is {@code null}.
         */
        SetEnabledProtocols(
            [in] ArrayOf<String>* protocols);

        /**
         * Sets whether new SSL sessions may be established by this engine instance.
         *
         * @param flag
         *            {@code true} if new SSL sessions may be established,
         *            {@code false} if existing SSL sessions must be reused.
         */
        SetEnableSessionCreation(
            [in] Boolean flag);

        /**
         * Sets whether this engine must require client authentication. The client
         * authentication is one of:
         * <ul>
         * <li>authentication required</li>
         * <li>authentication requested</li>
         * <li>no authentication needed</li>
         * </ul>
         * This method overrides the setting of {@link #setWantClientAuth(boolean)}.
         *
         * @param need
         *            {@code true} if client authentication is required,
         *            {@code false} if no authentication is needed.
         */
        SetNeedClientAuth(
            [in] Boolean need);

        /**
         * Sets whether this engine should act in client (or server) mode when
         * handshaking.
         *
         * @param mode
         *            {@code true} if this engine should act in client mode,
         *            {@code false} if not.
         * @throws IllegalArgumentException
         *             if this method is called after starting the initial
         *             handshake.
         */
        SetUseClientMode(
            [in] Boolean mode);

        /**
         * Sets whether this engine should request client authentication. The client
         * authentication is one of the following:
         * <ul>
         * <li>authentication required</li>
         * <li>authentication requested</li>
         * <li>no authentication needed</li>
         * </ul>
         * This method overrides the setting of {@link #setNeedClientAuth(boolean)}.
         *
         * @param want
         *            {@code true} if client authentication should be requested,
         *            {@code false} if no authentication is needed.
         */
        SetWantClientAuth(
            [in] Boolean want);

        /**
         * Decodes the incoming network data buffer into application data buffers.
         * If a handshake has not been started yet, it will automatically be
         * started.
         *
         * @param src
         *            the buffer with incoming network data
         * @param dsts
         *            the array of destination buffers for incoming application
         *            data.
         * @param offset
         *            the offset in the array of destination buffers to which data
         *            is to be transferred.
         * @param length
         *            the maximum number of destination buffers to be used.
         * @return the result object of this operation.
         * @throws SSLException
         *             if a problem occurred while processing the data.
         * @throws IndexOutOfBoundsException
         *             if {@code length} is greater than
         *             {@code dsts.length - offset}.
         * @throws java.nio.ReadOnlyBufferException
         *             if one of the destination buffers is read-only.
         * @throws IllegalArgumentException
         *             if {@code src}, {@code dsts}, or one of the entries in
         *             {@code dsts} is {@code null}.
         * @throws IllegalStateException
         *             if the engine does not have all the needed settings (e.g.
         *             client/server mode not set).
         */
        Unwrap(
            [in] IByteBuffer* src,
            [in] ArrayOf<IByteBuffer*>* dsts,
            [in] Int32 offset,
            [in] Int32 length,
            [out] ISSLEngineResult** result);

        /**
         * Encodes the outgoing application data buffers into the network data
         * buffer. If a handshake has not been started yet, it will automatically be
         * started.
         *
         * @param srcs
         *            the array of source buffers of outgoing application data.
         * @param offset
         *            the offset in the array of source buffers from which data is
         *            to be retrieved.
         * @param length
         *            the maximum number of source buffers to be used.
         * @param dst
         *            the destination buffer for network data.
         * @return the result object of this operation.
         * @throws SSLException
         *             if a problem occurred while processing the data.
         * @throws IndexOutOfBoundsException
         *             if {@code length} is greater than
         *             {@code srcs.length - offset}.
         * @throws java.nio.ReadOnlyBufferException
         *             if the destination buffer is readonly.
         * @throws IllegalArgumentException
         *             if {@code srcs}, {@code dst}, or one the entries in
         *             {@code srcs} is {@code null}.
         * @throws IllegalStateException
         *             if the engine does not have all the needed settings (e.g.
         *             client/server mode not set).
         */
        Wrap(
            [in] ArrayOf<IByteBuffer*>* srcs,
            [in] Int32 offset,
            [in] Int32 length,
            [in] IByteBuffer* dst,
            [out] ISSLEngineResult** result);


        /**
         * Decodes the incoming network data buffer into the application data
         * buffer. If a handshake has not been started yet, it will automatically be
         * started.
         *
         * @param src
         *            the buffer with incoming network data
         * @param dst
         *            the destination buffer for incoming application data.
         * @return the result object of this operation.
         * @throws SSLException
         *             if a problem occurred while processing the data.
         * @throws java.nio.ReadOnlyBufferException
         *             if one of the destination buffers is read-only.
         * @throws IllegalArgumentException
         *             if {@code src} or {@code dst} is {@code null}.
         * @throws IllegalStateException
         *             if the engine does not have all the needed settings (e.g.
         *             client/server mode not set).
         */
         Unwrap(
            [in] IByteBuffer* src,
            [in] IByteBuffer* dst,
            [out] ISSLEngineResult** result);

        /**
         * Decodes the incoming network data buffer into the application data
         * buffers. If a handshake has not been started yet, it will automatically
         * be started.
         *
         * @param src
         *            the buffer with incoming network data
         * @param dsts
         *            the array of destination buffers for incoming application
         *            data.
         * @return the result object of this operation.
         * @throws SSLException
         *             if a problem occurred while processing the data.
         * @throws java.nio.ReadOnlyBufferException
         *             if one of the destination buffers is read-only.
         * @throws IllegalArgumentException
         *             if {@code src} or {@code dsts} is {@code null}.
         * @throws IllegalStateException
         *             if the engine does not have all the needed settings (e.g.
         *             client/server mode not set).
         */
        Unwrap(
            [in] IByteBuffer* src,
            [in] ArrayOf<IByteBuffer*>* dsts,
            [out] ISSLEngineResult** result);

        /**
         * Encodes the outgoing application data buffers into the network data
         * buffer. If a handshake has not been started yet, it will automatically be
         * started.
         *
         * @param srcs
         *            the array of source buffers of outgoing application data.
         * @param dst
         *            the destination buffer for network data.
         * @return the result object of this operation.
         * @throws SSLException
         *             if a problem occurred while processing the data.
         * @throws java.nio.ReadOnlyBufferException
         *             if the destination buffer is readonly.
         * @throws IllegalArgumentException
         *             if {@code srcs} or {@code dst} is {@code null}.
         * @throws IllegalStateException
         *             if the engine does not have all the needed settings (e.g.
         *             client/server mode not set).
         */
        Wrap(
            [in] ArrayOf<IByteBuffer*>* srcs,
            [in] IByteBuffer* dst,
            [out] ISSLEngineResult** result);

        /**
         * Encodes the outgoing application data buffer into the network data
         * buffer. If a handshake has not been started yet, it will automatically be
         * started.
         *
         * @param src
         *            the source buffers of outgoing application data.
         * @param dst
         *            the destination buffer for network data.
         * @return the result object of this operation.
         * @throws SSLException
         *             if a problem occurred while processing the data.
         * @throws java.nio.ReadOnlyBufferException
         *             if the destination buffer is readonly.
         * @throws IllegalArgumentException
         *             if {@code src} or {@code dst} is {@code null}.
         * @throws IllegalStateException
         *             if the engine does not have all the needed settings (e.g.
         *             client/server mode not set).
         */
        Wrap(
            [in] IByteBuffer* src,
            [in] IByteBuffer* dst,
            [out] ISSLEngineResult** result);

        /**
         * Returns a new SSLParameters based on this SSLSocket's current
         * cipher suites, protocols, and client authentication settings.
         *
         * @since 1.6
         */
        GetSSLParameters(
            [out] ISSLParameters** parameters);

        /**
         * Sets various SSL handshake parameters based on the SSLParameter
         * argument. Specifically, sets the SSLEngine's enabled cipher
         * suites if the parameter's cipher suites are non-null. Similarly
         * sets the enabled protocols. If the parameters specify the want
         * or need for client authentication, those requirements are set
         * on the SSLEngine, otherwise both are set to false.
         * @since 1.6
         */
        SetSSLParameters(
            [in] ISSLParameters* p);
    }

    } // namespace Ssl
    } // namespace Crypto
    } // namespace Elastosx
}