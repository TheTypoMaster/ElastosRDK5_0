
module
{
    interface Elastos.Security.IPrincipal;
    interface Elastos.Utility.IDate;
    interface Elastos.Math.IBigInteger;
    interface Elastos.IO.IInputStream;

    namespace Elastosx {
    namespace Security {
    namespace Cert {

    /**
     * Abstract base class for X.509 certificates.
     * <p>
     * This represents a standard way for accessing the attributes of X.509 v1
     * certificates.
     * <p>
     * Note: This package is provided only for compatibility reasons.
     * It contains a simplified version of the java.security.cert package that was
     * previously used by JSSE (Java SSL package). All applications that do not have
     * to be compatible with older versions of JSSE (that is before Java SDK 1.5)
     * should only use java.security.cert.
     */
    /**
     * @Involve
     * interface ICertificate
     */
    interface IX509Certificate {
        /**
         * Checks whether the certificate is currently valid.
         * <p>
         * The validity defined in ASN.1:
         *
         * <pre>
         * validity             Validity
         *
         * Validity ::= SEQUENCE {
         *      notBefore       CertificateValidityDate,
         *      notAfter        CertificateValidityDate }
         *
         * CertificateValidityDate ::= CHOICE {
         *      utcTime         UTCTime,
         *      generalTime     GeneralizedTime }
         * </pre>
         *
         * @throws CertificateExpiredException
         *             if the certificate has expired.
         * @throws CertificateNotYetValidException
         *             if the certificate is not yet valid.
         */
        CheckValidity();

        /**
         * Checks whether the certificate is valid at the specified date.
         *
         * @param date
         *            the date to check the validity against.
         * @throws CertificateExpiredException
         *             if the certificate has expired.
         * @throws CertificateNotYetValidException
         *             if the certificate is not yet valid.
         * @see #checkValidity()
         */
        CheckValidity(
            [in] IDate* date);

        /**
         * Returns the certificates {@code version} (version number).
         * <p>
         * The version defined is ASN.1:
         *
         * <pre>
         * Version ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
         * </pre>
         *
         * @return the version number.
         */
        GetVersion(
            [out] Int32* vs);

        /**
         * Returns the {@code serialNumber} of the certificate.
         * <p>
         * The ASN.1 definition of {@code serialNumber}:
         *
         * <pre>
         * CertificateSerialNumber  ::=  INTEGER
         * </pre>
         *
         * @return the serial number.
         */
         GetSerialNumber(
            [out] IBigInteger** number);

        /**
         * Returns the {@code issuer} (issuer distinguished name) as an
         * implementation specific {@code Principal} object.
         * <p>
         * The ASN.1 definition of {@code issuer}:
         *
         * <pre>
         *  issuer      Name
         *
         *  Name ::= CHOICE {
         *      RDNSequence }
         *
         *    RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
         *
         *    RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
         *
         *    AttributeTypeAndValue ::= SEQUENCE {
         *      type     AttributeType,
         *      value    AttributeValue }
         *
         *    AttributeType ::= OBJECT IDENTIFIER
         *
         *    AttributeValue ::= ANY DEFINED BY AttributeType
         * </pre>
         *
         * @return the {@code issuer} as an implementation specific {@code
         *         Principal}.
         */
        GetIssuerDN(
            [out] IPrincipal** dn);

        /**
         * Returns the {@code subject} (subject distinguished name) as an
         * implementation specific {@code Principal} object.
         * <p>
         * The ASN.1 definition of {@code subject}:
         *
         * <pre>
         * subject      Name
         *
         *  Name ::= CHOICE {
         *      RDNSequence }
         *
         *    RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
         *
         *    RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
         *
         *    AttributeTypeAndValue ::= SEQUENCE {
         *      type     AttributeType,
         *      value    AttributeValue }
         *
         *    AttributeType ::= OBJECT IDENTIFIER
         *
         *    AttributeValue ::= ANY DEFINED BY AttributeType
         * </pre>
         *
         * @return the {@code subject} (subject distinguished name).
         */
        GetSubjectDN(
            [out] IPrincipal** dn);

        /**
         * Returns the {@code notBefore} date from the validity period of the
         * certificate.
         *
         * @return the start of the validity period.
         */
        GetNotBefore(
            [out] IDate** dt);

        /**
         * Returns the {@code notAfter} date of the validity period of the
         * certificate.
         *
         * @return the end of the validity period.
         */
        GetNotAfter(
            [out] IDate** dt);

        /**
         * Returns the name of the algorithm for the certificate signature.
         *
         * @return the signature algorithm name.
         */
        GetSigAlgName(
            [out] String* name);

        /**
         * Returns the OID of the signature algorithm from the certificate.
         *
         * @return the OID of the signature algorithm.
         */
        GetSigAlgOID(
            [out] String* oid);

        /**
         * Returns the parameters of the signature algorithm in DER-encoded format.
         *
         * @return the parameters of the signature algorithm, or null if none are
         *         used.
         */
        GetSigAlgParams(
            [out, callee] ArrayOf<Byte>* params);
    }

    [deprecated]
    interface IX509CertificateHelper {
        /**
         * Creates a new {@code X509Certificate} and initializes it from the
         * specified input stream.
         *
         * @param inStream
         *            input stream containing data to initialize the certificate.
         * @return the certificate initialized from the specified input stream
         * @throws CertificateException
         *             if the certificate cannot be created or initialized.
         */
        GetInstance(
            [in] IInputStream* inStream,
            [out] IX509Certificate** cert);

        /**
         * Creates a new {@code X509Certificate} and initializes it from the
         * specified byte array.
         *
         * @param certData
         *            byte array containing data to initialize the certificate.
         * @return the certificate initialized from the specified byte array
         * @throws CertificateException
         *             if the certificate cannot be created or initialized.
         */
        GetInstance(
            [in] ArrayOf<Byte>* certData,
            [out] IX509Certificate** cert);
    }

    } // namespace Auth
    } // namespace Security
    } // namespace Elastosx
}
