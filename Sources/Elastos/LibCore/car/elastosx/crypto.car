
module
{
    merge("crypto/ICipher.car");
    merge("crypto/ICipherInputStream.car");
    merge("crypto/ICipherOutputStream.car");
    merge("crypto/ICipherSpi.car");
    merge("crypto/IEncryptedPrivateKeyInfo.car");
    merge("crypto/IExemptionMechanism.car");
    merge("crypto/IExemptionMechanismSpi.car");
    merge("crypto/ISecretKey.car");
    merge("crypto/IKeyAgreement.car");

    merge("crypto/interfaces/IDHKey.car");
    merge("crypto/interfaces/IDHPrivateKey.car");
    merge("crypto/interfaces/IDHPublicKey.car");
    merge("crypto/interfaces/IPBEKey.car");

    merge("crypto/spec/IDESKeySpec.car");
    merge("crypto/spec/IDESedeKeySpec.car");
    merge("crypto/spec/IDHGenParameterSpec.car");
    merge("crypto/spec/IDHParameterSpec.car");
    merge("crypto/spec/IDHPrivateKeySpec.car");
    merge("crypto/spec/IDHPublicKeySpec.car");
    merge("crypto/spec/IGCMParameterSpec.car");
    merge("crypto/spec/IIvParameterSpec.car");
    merge("crypto/spec/IOAEPParameterSpec.car");
    merge("crypto/spec/IPBEKeySpec.car");
    merge("crypto/spec/IPBEParameterSpec.car");
    merge("crypto/spec/IPSource.car");
    merge("crypto/spec/IRC2ParameterSpec.car");
    merge("crypto/spec/IRC5ParameterSpec.car");
    merge("crypto/spec/ISecretKeySpec.car");

    using interface Elastos.Security.IProvider;

   namespace Elastosx {
   namespace Crypto {

    [deprecated]
    class CCipher {                        // 声明 CAR 类
        constructor(
            [in] ICipherSpi* cipherSpi,
            [in] IProvider* provider,
            [in] String transformation);

        constructor(
            [in] String transformation,
            [in] ArrayOf<String> * transformParts,
            [in] IProvider* provider);

        interface ICipher;              // 接口声明
    }

    singleton class CCipherHelper {     // 声明单例 CAR 类
        interface ICipherHelper;        // 接口声明
    }

   } // namespace Crypto
   } // namespace Elastosx
}
