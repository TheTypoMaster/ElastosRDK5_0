module{

    namespace Elastosx{
    namespace Sql{

    /**
     * An interface which provides facilities for getting information about the
     * columns in a {@code RowSet}.
     * <p>
     * {@code RowSetMetaData} extends {@link java.sql.ResultSetMetaData}, adding new
     * operations for carrying out value sets.
     * <p>
     * Application code would not normally call this interface directly. It would be
     * called internally when {@code RowSet.execute} is called.
     *
     * @see RowSetInternal#setMetaData(RowSetMetaData)
     */
    /**
     * @involve
     * interface IResultSetMetaData
     */
    interface IRowSetMetaData {

        /**
         * Sets automatic numbering for a specified column in the {@code RowSet}. If
         * automatic numbering is on, the column is read-only. The default value for
         * the auto increment parameter is {@code false}.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param autoIncrement
         *            {@code true} to set automatic numbering on, {@code false} to
         *            turn it off (default).
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetAutoIncrement(
            [in] Int32 columnIndex,
            [in] Boolean autoIncrement);

        /**
         * Sets the case sensitive property for a specified column in the {@code
         * RowSet}. The default is that the column is not case sensitive.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param caseSensitive
         *            {@code true} to make the column case sensitive, {@code false}
         *            to make it case insensitive (default).
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetCaseSensitive(
            [in] Int32 columnIndex,
            [in] Boolean caseSensitive);

        /**
         * Sets the catalog name for a specified column in the {@code RowSet}.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param catalogName
         *            the new catalog's name.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetCatalogName(
            [in] Int32 columnIndex,
            [in] String catalogName);

        /**
         * Sets the number of columns contained in the row set.
         *
         * @param columnCount
         *            the number of columns contained in the {@code RowSet}.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetColumnCount(
            [in] Int32 columnCount);

        /**
         * Sets the normal maximum width in characters for a specified column in the
         * {@code RowSet}.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param displaySize
         *            the normal maximum column width in characters.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetColumnDisplaySize(
            [in] Int32 columnIndex,
            [in] Int32 displaySize);

        /**
         * Sets the suggested name as label for the column contained in the {@code
         * RowSet}. The label is an alias for printing and displaying purposes.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param theLabel
         *            the alias name for the column.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetColumnLabel(
            [in] Int32 columnIndex,
            [in] String theLabel);

        /**
         * Sets the column name for a specified column in the {@code RowSet}.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param theColumnName
         *            the column's label.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetColumnName(
            [in] Int32 columnIndex,
            [in] String theColumnName);

        /**
         * Sets the SQL type for a specified column in the {@code RowSet}.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param theSQLType
         *            the SQL Type, as defined by {@code java.sql.Types}.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetColumnType(
            [in] Int32 columnIndex,
            [in] Int32 theSQLType);

        /**
         * Sets the type name for a specified column in the {@code RowSet}, where
         * the data type is specific to the data source.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param theTypeName
         *            the SQL type name for the column.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetColumnTypeName(
            [in] Int32 columnIndex,
            [in] String theTypeName);

        /**
         * Sets whether a specified column is a currency value. The default value is
         * {@code false}.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param isCurrency
         *            {@code true} if the column should be treated as a currency
         *            value, {@code false} if it should not be treated as a currency
         *            value (default).
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetCurrency(
            [in] Int32 columnIndex,
            [in] Boolean isCurrency);

        /**
         * Sets whether a specified column can contain SQL {@code NULL} values.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param nullability
         *            an integer which is one of the following values:
         *            <ul>
         *            <li>{@code ResultSetMetaData.columnNoNulls}</li>
         *            <li>{@code ResultSetMetaData.columnNullable}</li>
         *            <li>{@code ResultSetMetaData.columnNullableUnknown}</li>
         *            </ul>
         *            <p>
         *            The default value is {@code
         *            ResultSetMetaData.columnNullableUnknown}.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetNullable(
            [in] Int32 columnIndex,
            [in] Int32 nullability);

        /**
         * Sets the number of decimal digits for a specified column in the {@code
         * RowSet}.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param thePrecision
         *            the number of decimal digits.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetPrecision(
            [in] Int32 columnIndex,
            [in] Int32 thePrecision);

        /**
         * Declares how many decimal digits there should be after a decimal point
         * for the column specified by {@code columnIndex}.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param theScale
         *            the number of digits after the decimal point.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetScale(
            [in] Int32 columnIndex,
            [in] Int32 theScale);

        /**
         * Sets the schema name for a specified column in the {@code RowSet}.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param theSchemaName
         *            a {@code String} containing the schema name.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetSchemaName(
            [in] Int32 columnIndex,
            [in] String theSchemaName);

        /**
         * Sets whether a specified column can be used in a search involving a
         * {@code WHERE} clause. The default value is {@code false}.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param isSearchable
         *            {@code true} of the column can be used in a {@code WHERE}
         *            clause search, {@code false} otherwise.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetSearchable(
            [in] Int32 columnIndex,
            [in] Boolean isSearchable);

        /**
         * Sets if a specified column can contain signed numbers.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param isSigned
         *            {@code true} if the column can contain signed numbers, {@code
         *            false} otherwise.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetSigned(
            [in] Int32 columnIndex,
            [in] Boolean isSigned);

        /**
         * Sets the table name for a specified column in the {@code RowSet}.
         *
         * @param columnIndex
         *            the index number for the column; the first column's index is
         *            1.
         * @param theTableName
         *            the table name for the column.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        SetTableName(
            [in] Int32 columnIndex,
            [in] String theTableName);
    }

    } // namespace Sql
    } // namespace Elastosx
}