module{

    interface Elastos.IO.IInputStream;
    interface Elastos.IO.IReader;
    interface Elastos.Math.IBigDecimal;
    interface Elastos.Sql.IArray;
    interface Elastos.Sql.IBlob;
    interface Elastos.Sql.IClob;
    interface Elastos.Sql.ISQLDate;
    interface Elastos.Sql.INClob;
    interface Elastos.Sql.IRef;
    interface Elastos.Sql.IRowId;
    interface Elastos.Sql.ISQLXML;
    interface Elastos.Sql.ITime;
    interface Elastos.Sql.ITimestamp;
    interface Elastos.Utility.ICalendar;
    interface Elastos.Utility.IMap;
    interface Elastos.Net.IURL;

    namespace Elastosx{
    namespace Sql{
    /**
     * An interface which provides means to access data which
     * persists on a database. It extends the functionality of
     * {@link java.sql.ResultSet ResultSet} into a form that it can be used as a
     * JavaBean component, suited for a visual programming environment.
     * <p>
     * {@code RowSet} provides getters and setters for properties relating to the
     * general database environment together with the getters and setters for
     * distinct data values which constitute the row set. The {@code RowSet} class
     * supports JavaBean events so that other components in an application can be
     * informed when changes happen such as changes in data values.
     * <p>
     * {@code RowSet} is a facility implemented on top of the remainder of the JDBC
     * API. It may be <i>connected</i>, maintaining a connection to the database
     * throughout its lifecycle. The changes made on a <i>disconnected</i> {@code
     * RowSet} on the other hand can be persisted only establishing a new connection
     * with the database each time.
     * <p>
     * Disconnected {@code RowSets} make use of {@code RowSetReaders} to populate
     * the {@code RowSet} with data, possibly from a non-relational database source.
     * They may also use {@code RowSetWriters} to send data back to the underlying
     * data store. There is considerable freedom in the way that {@code
     * RowSetReaders} and {@code RowSetWriters} may be implemented to retrieve and
     * store data.
     *
     * @see RowSetReader
     * @see RowSetWriter
     */
    /**
     * @Involve
     * interface IResultSet
     */

    [deprecated]
    interface IRowSet {
         /**
         * Registers the supplied {@link RowSetListener} with this {@code RowSet}.
         * Once registered, the {@link RowSetListener} is notified of events
         * generated by the {@code RowSet}.
         *
         * @param theListener
         *            an object which implements the {@code rowSetListener}
         *            interface.
         */
        AddRowSetListener(
            [in] IRowSetListener* theListener);

        /**
         * Clears the parameters previously set for this {@code RowSet}.
         * <p>
         * The {@code RowSet} object retains its value until either a new value for
         * a parameter is set or its value is actively reset. {@code
         * clearParameters} provides a facility to clear the values for all
         * parameters with one method call.
         *
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        ClearParameters();

        /**
         * Fetches data for this {@code RowSet} from the database. If successful,
         * any existing data for the {@code RowSet} is discarded and its metadata is
         * overwritten.
         * <p>
         * Data is retrieved connecting to the database and executing an
         * according SQL statement. This requires some or all of the following
         * properties to be set: URL, database name, user name, password,
         * transaction isolation, type map; plus some or all of the properties:
         * command, read only, maximum field size, maximum rows, escape processing,
         * and query timeout.
         * <p>
         * The {@code RowSet} may use a {@code RowSetReader} to access the database
         * it will then invoke the {@link RowSetReader#readData} method on the
         * reader to fetch the data. When the new data is fetched all the listeners
         * are notified to take appropriate measures.
         *
         * @throws SQLException
         *             if a problem occurs accessing the database or if the
         *             properties needed to access the database have not been set.
         * @see RowSetMetaData
         * @see RowSetReader
         */
        Execute();

        /**
         * Gets the {@code RowSet}'s command property.
         *
         * @return a string containing the {@code RowSet}'s command property. A
         *         command is a SQL statement which is executed to fetch required
         *         data into the {@code RowSet}.
         */
        GetCommand(
            [out] String* command);

        /**
         * Gets the ODBC Data Source Name property associated with this {@code
         * RowSet}. The database name can be used to find a {@link DataSource}
         * which has been registered with a naming service - the {@link DataSource}
         * can then be used to create a connection to the database.
         *
         * @return the name of the database.
         */
        GetDataSourceName(
            [out] String* dataSourceName);

        /**
         * Reports if escape processing is enabled for this {@code RowSet}. If
         * escape processing is on, the driver performs a substitution of the escape
         * syntax with the applicable code before sending an SQL command to the
         * database. The default value for escape processing is {@code true}.
         *
         * @return {@code true} if escape processing is enabled, {@code
         *         false} otherwise.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        GetEscapeProcessing(
            [out] Boolean* value);

        /**
         * Gets the maximum number of bytes that can be returned for column values
         * which are of type {@code BINARY}, {@code VARBINARY}, {@code
         * LONGVARBINARYBINARY}, {@code CHAR}, {@code VARCHAR}, or {@code
         * LONGVARCHAR}. Excess data is silently discarded if the number is
         * exceeded.
         *
         * @return the current maximum size in bytes. 0 implies no size limit.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        GetMaxFieldSize(
            [out] Int32* size);

        /**
         * Gets the maximum number of rows for this {@code RowSet}. Excess rows are
         * discarded silently if the limit is exceeded.
         *
         * @return the previous maximum number of rows. 0 implies no row limit.
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        GetMaxRows(
            [out] Int32* rows);

        /**
         * Gets the value of the password property for this {@code RowSet}. This
         * property is used when a connection to the database is established.
         * Therefore it should be set prior to invoking the {@link #execute} method.
         *
         * @return the value of the password property.
         */
        GetPassword(
            [out] String* password);

        /**
         * Gets the timeout for the driver when a query operation is executed. If a
         * query takes longer than the timeout then a {@code SQLException} is
         * thrown.
         *
         * @return the timeout value in seconds.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        GetQueryTimeout(
            [out] Int32* value);

        /**
         * Gets the transaction isolation level property set for this
         * {@code RowSet}. The transaction isolation level defines the
         * policy implemented on the database for maintaining the data
         * values consistent.
         *
         * @return the current transaction isolation level. Must be one of:
         *         <ul>
         *         <li>{@code Connection.TRANSACTION_READ_UNCOMMITTED}</li>
         *         <li>{@code Connection.TRANSACTION_READ_COMMITTED}</li>
         *         <li>{@code Connection.TRANSACTION_REPEATABLE_READ}</li>
         *         <li>{@code Connection.TRANSACTION_SERIALIZABLE}</li>
         *         </ul>
         * @see java.sql.Connection
         */
        GetTransactionIsolation(
            [out] Int32* level);

        /**
         * Gets the custom mapping of SQL User-Defined Types (UDTs) and Java classes
         * for this {@code RowSet}, if applicable.
         *
         * @return the custom mappings of SQL types to Java classes.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        //public Map<String, Class<?>> GetTypeMap();

        /**
         * Gets the URL property value for this {@code RowSet}. If there is no
         * {@code DataSource} object specified, the {@code RowSet} uses the URL to
         * establish a connection to the database. The default value for the URL is
         * {@code null}.
         *
         * @return a String holding the value of the URL property.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        GetUrl(
            [out] String* url);

        /**
         * Gets the value of the {@code username} property for this {@code RowSet}.
         * The {@code username} is used when establishing a connection to the
         * database and should be set before the {@code execute} method is invoked.
         *
         * @return a {@code String} holding the value of the {@code username}
         *         property.
         */
        GetUsername(
            [out] String* username);

        /**
         * Indicates if this {@code RowSet} is read-only.
         *
         * @return {@code true} if this {@code RowSet} is read-only, {@code false}
         *         if it is updatable.
         */
        IsReadOnly(
            [out] Boolean* isReadOnly);

        /**
         * Removes a specified {@link RowSetListener} object from the set of
         * listeners which will be notified of events by this {@code RowSet}.
         *
         * @param theListener
         *            the {@link RowSetListener} to remove from the set of listeners
         *            for this {@code RowSet}.
         */
        RemoveRowSetListener(
            [in] IRowSetListener* theListener);

        /**
         * Sets the specified {@code ARRAY} parameter in the {@code RowSet} command
         * with the supplied {@code java.sql.Array} value.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theArray
         *            the {@code Array} data value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetArray(
            [in] Int32 parameterIndex,
            [in] IArray* theArray);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * with the ASCII data in the supplied {@code java.io.InputStream} value.
         * Data is read from the {@code InputStream} until end-of-file is reached.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theInputStream
         *            the ASCII data value to which the parameter is set.
         * @param length
         *            the length of the data in bytes.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetAsciiStream(
            [in] Int32 parameterIndex,
            [in] IInputStream* theInputStream,
            [in] Int32 length);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * ASCII data in the supplied java.io.InputStream value. Data is read from
         * the InputStream until end-of-file is reached.
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theInputStream
         *            an InputStream containing the ASCII data to set into the
         *            parameter value
         * @throws SQLException
         *             if an error occurs accessing the database.
         */

        SetAsciiStream(
            [in] Int32 parameterIndex,
            [in] IInputStream* theInputStream);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * ASCII data in the supplied java.io.InputStream value. Data is read from
         * the InputStream until end-of-file is reached.
         *
         * @param parameterName
         *            the name for parameter
         * @param theInputStream
         *            an InputStream containing the ASCII data to set into the
         *            parameter value
         * @throws SQLException
         *             if an error occurs accessing the database.
         */

        SetAsciiStream(
            [in] String parameterName,
            [in] IInputStream* theInputStream);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * ASCII data in the supplied java.io.InputStream value. Data is read from
         * the InputStream until end-of-file is reached.
         *
         * @param parameterName
         *            the name for parameter
         * @param theInputStream
         *            an InputStream containing the ASCII data to set into the
         *            parameter value
         * @param length
         *            the length of the data in bytes
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetAsciiStream(
            [in] String parameterName,
            [in] IInputStream* theInputStream,
            [in] Int32 length);

        /**
         * Sets the value of the specified SQL {@code NUMERIC} parameter in the
         * {@code RowSet} command with the data in the supplied {@code
         * java.math.BigDecimal} value.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theBigDecimal
         *            the big decimal value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBigDecimal(
            [in] Int32 parameterIndex,
            [in] IBigDecimal* theBigDecimal);

        /**
         * Sets the value of the specified SQL NUMERIC parameter in the RowSet
         * command with the data in the supplied java.math.BigDecimal value.
         *
         * @param parameterName
         *            the name for parameter
         * @param theBigDecimal
         *            the BigDecimal containing the value
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBigDecimal(
            [in] String parameterName,
            [in] IBigDecimal* theBigDecimal);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to the binary data in the supplied input stream. Data is read from the
         * input stream until end-of-file is reached.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theInputStream
         *            the binary data stream to which the parameter is set.
         * @param length
         *            the length of the data in bytes.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBinaryStream(
            [in] Int32 parameterIndex,
            [in] IInputStream* theInputStream,
            [in] Int32 length);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * binary data in the supplied java.io.InputStream value. Data is read from
         * the InputStream until end-of-file is reached.
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theInputStream
         *            an InputStream containing the binary data to set into the
         *            parameter value
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBinaryStream(
            [in] Int32 parameterIndex,
            [in] IInputStream* theInputStream);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * binary data in the supplied java.io.InputStream value. Data is read from
         * the InputStream until end-of-file is reached.
         *
         * @param parameterName
         *            the name for parameter
         * @param theInputStream
         *            an InputStream containing the binary data to set into the
         *            parameter value
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBinaryStream(
            [in] String parameterName,
            [in] IInputStream* theInputStream);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * binary data in the supplied java.io.InputStream value. Data is read from
         * the InputStream until end-of-file is reached.
         *
         * @param parameterName
         *            the name for parameter
         * @param theInputStream
         *            an InputStream containing the binary data to set into the
         *            parameter value
         * @param length
         *            the length of the data in bytes
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBinaryStream(
            [in] String parameterName,
            [in] IInputStream* theInputStream,
            [in] Int32 length);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to the supplied {@code Blob} value.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theBlob
         *            the {@code Blob} value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBlob(
            [in] Int32 parameterIndex,
            [in] IBlob* theBlob);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.InputStream. Data is read from the
         * InputStream until end-of-file is reached.
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theInputStream
         *            an InputStream containing the binary data to set into the
         *            parameter value
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBlob(
            [in] Int32 parameterIndex,
            [in] IInputStream* theInputStream);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.InputStream. Data is read from the
         * InputStream until end-of-file is reached.
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theInputStream
         *            an InputStream containing the binary data to set into the
         *            parameter value
         * @param length
         *            the length of the data in bytes
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBlob(
            [in] Int32 parameterIndex,
            [in] IInputStream* theInputStream,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.InputStream. Data is read from the
         * InputStream until end-of-file is reached.
         *
         * @param parameterName
         *            the name for parameter
         * @param theInputStream
         *            an InputStream containing the binary data to set into the
         *            parameter value
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBlob(
            [in] String parameterName,
            [in] IInputStream* theInputStream);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.InputStream. Data is read from the
         * InputStream until end-of-file is reached.
         *
         * @param parameterName
         *            the name for parameter
         * @param theInputStream
         *            an InputStream containing the binary data to set into the
         *            parameter value
         * @param length
         *            the length of the data in bytes
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBlob(
            [in] String parameterName,
            [in] IInputStream* theInputStream,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.sql.Blob.
         *
         * @param parameterName
         *            the name for parameter
         * @param theBlob
         *            the Blob value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBlob(
            [in] String parameterName,
            [in] IBlob* theBlob);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to the supplied boolean.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theBoolean
         *            the {@code boolean} value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBoolean(
            [in] Int32 parameterIndex,
            [in] Boolean theBoolean);

        /**
         * Sets the value of the specified parameter in the RowSet command to the
         * supplied boolean.
         *
         * @param parameterName
         *            name for parameter
         * @param theBoolean
         *            the boolean value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBoolean(
            [in] String parameterName,
            [in] Boolean theBoolean);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to the supplied byte value.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theByte
         *            the {@code byte} value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetByte(
            [in] Int32 parameterIndex,
            [in] Byte theByte);

        /**
         * Sets the value of the specified parameter in the RowSet command to the
         * supplied byte value.
         *
         * @param parameterName
         *            name for parameter
         * @param theByte
         *            the byte value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetByte(
            [in] String parameterName,
            [in] Byte theByte);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to the supplied byte array value.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theByteArray
         *            the {@code Array} of {@code bytes} to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBytes(
            [in] Int32 parameterIndex,
            [in] ArrayOf<Byte>* theByteArray);

        /**
         * Sets the value of the specified parameter in the RowSet command to the
         * supplied byte array value.
         *
         * @param parameterName
         *            name for parameter
         * @param theByteArray
         *            the array of bytes to set into the parameter.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetBytes(
            [in] String parameterName,
            [in] ArrayOf<Byte>* theByteArray);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to the sequence of Unicode characters carried by the supplied {@code
         * java.io.Reader}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theReader
         *            the {@code Reader} which contains the Unicode data to set the
         *            parameter.
         * @param length
         *            the length of the data in the {@code Reader} in characters.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetCharacterStream(
            [in] Int32 parameterIndex,
            [in] IReader* theReader,
            [in] Int32 length);

        /**
         * Sets the value of the specified parameter in the RowSet command to the
         * sequence of Unicode characters carried by the supplied java.io.Reader.
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetCharacterStream(
            [in] Int32 parameterIndex,
            [in] IReader* theReader);

        /**
         * Sets the value of the specified parameter in the RowSet command to the
         * sequence of Unicode characters carried by the supplied java.io.Reader.
         *
         * @param parameterName
         *            name for parameter
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetCharacterStream(
            [in] String parameterName,
            [in] IReader* theReader);
        /**
         * Sets the value of the specified parameter in the RowSet command to the
         * sequence of Unicode characters carried by the supplied java.io.Reader.
         *
         * @param parameterName
         *            name for parameter
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @param length
         *            the length of the data in the Reader in characters
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetCharacterStream(
            [in] String parameterName,
            [in] IReader* theReader,
            [in] Int32 length);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * with the value of a supplied {@code java.sql.Clob}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theClob
         *            the {@code Clob} value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetClob(
            [in] Int32 parameterIndex,
            [in] IClob* theClob);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.Reader.
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetClob(
            [in] Int32 parameterIndex,
            [in] IReader* theReader,
            [in] IClob* theClob);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.Reader.
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @param length
         *            the length of the data in the Reader in characters
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetClob(
            [in] Int32 parameterIndex,
            [in] IReader* theReader,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.sql.Clob.
         *
         * @param parameterName
         *            name for parameter
         * @param theClob
         *            the specific Clob object
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetClob(
            [in] String parameterName,
            [in] IClob* theClob);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.Reader.
         *
         * @param parameterName
         *            name for parameter
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetClob(
            [in] String parameterName,
            [in] IReader* theReader);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.Reader.
         *
         * @param parameterName
         *            name for parameter
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @param length
         *            the length of the data in the Reader in characters
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetClob(
            [in] String parameterName,
            [in] IReader* theReader,
            [in] Int64 length);

        /**
         * Sets the Command property for this {@code RowSet} - the command is an SQL
         * query which runs when the {@code execute} method is invoked. This
         * property is optional for databases that do not support commands.
         *
         * @param cmd
         *            the SQL query. Can be {@code null}.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetCommand(
            [in] String cmd);

        /**
         * Sets the concurrency property of this {@code RowSet}. The default value
         * is {@code ResultSet.CONCUR_READ_ONLY}.
         *
         * @param concurrency
         *            the concurrency value. One of:
         *            <ul>
         *            <li>{@code ResultSet.CONCUR_READ_ONLY}</li>
         *            <li>{@code ResultSet.CONCUR_UPDATABLE}</li>
         *            </ul>
         * @throws SQLException
         *             if an error occurs accessing the database.
         * @see java.sql.ResultSet
         */
        SetConcurrency(
            [in] Int32 concurrency);

        /**
         * Sets the database name property for the {@code RowSet}.
         * <p>
         * The database name can be used to find a {@link DataSource} which has been
         * registered with a naming service - the {@link DataSource} can then be
         * used to create a connection to the database.
         *
         * @param name
         *            the database name.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetDataSourceName(
            [in] String name);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * with the value of a supplied {@code java.sql.Date}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theDate
         *            the date value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetDate(
            [in] Int32 parameterIndex,
            [in] ISQLDate* theDate);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * with the value of a supplied {@code java.sql.Date}, where the conversion
         * of the date to an SQL {@code DATE} value is calculated using a supplied
         * {@code Calendar}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theDate
         *            the date to which the parameter is set.
         * @param theCalendar
         *            the {@code Calendar} to use in converting the Date to an SQL
         *            {@code DATE} value.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetDate(
            [in] Int32 parameterIndex,
            [in] ISQLDate* theDate,
            [in] ICalendar* theCalendar);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.sql.Date, where the conversion of the Date to an
         * SQL DATE value is calculated using a supplied Calendar.
         *
         * @param parameterName
         *            name for parameter
         * @param theDate
         *            the Date to use
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetDate(
            [in] String parameterName,
            [in] ISQLDate* theDate);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.sql.Date, where the conversion of the Date to an
         * SQL DATE value is calculated using a supplied Calendar.
         *
         * @param parameterName
         *            name for parameter
         * @param theDate
         *            the Date to use
         * @param theCalendar
         *            the Calendar to use in converting the Date to an SQL DATE
         *            value
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetDate(
            [in] String parameterName,
            [in] ISQLDate* theDate,
            [in] ICalendar* theCalendar);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * with the supplied {@code double}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theDouble
         *            the {@code double} value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetDouble(
            [in] Int32 parameterIndex,
            [in] Double theDouble);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * supplied double.
         *
         * @param parameterName
         *            name for parameter
         * @param theDouble
         *            the double value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetDouble(
            [in] String parameterName,
            [in] Double theDouble);

        /**
         * Sets the escape processing status for this {@code RowSet}. If escape
         * processing is on, the driver performs a substitution of the escape syntax
         * with the applicable code before sending an SQL command to the database.
         * The default value for escape processing is {@code true}.
         *
         * @param enable
         *            {@code true} to enable escape processing, {@code false} to
         *            turn it off.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetEscapeProcessing(
            [in] Boolean value);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * with the supplied {@code float}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theFloat
         *            the {@code float} value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetFloat(
            [in] Int32 parameterIndex,
            [in] Float theFloat);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * supplied float.
         *
         * @param parameterName
         *            name for parameter
         * @param theFloat
         *            the float value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetFloat(
            [in] String parameterName,
            [in] Float theFloat);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * with the supplied {@code integer}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theInteger
         *            the {@code integer} value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetInt32(
            [in] Int32 parameterIndex,
            [in] Int32 theInteger);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * supplied integer.
         *
         * @param parameterName
         *            name for parameter
         * @param theInteger
         *            the integer value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetInt32(
            [in] String parameterName,
            [in] Int32 theInteger);
        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * with the supplied {@code long}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theLong
         *            the {@code long} value value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetInt64(
            [in] Int32 parameterIndex,
            [in] Int64 theLong);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * supplied long.
         *
         * @param parameterName
         *            name for parameter
         * @param theLong
         *            the long value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetInt64(
            [in] String parameterName,
            [in] Int64 theLong);

        /**
         * Sets the maximum number of bytes which can be returned for a column value
         * where the column type is one of {@code BINARY}, {@code VARBINARY},
         * {@code LONGVARBINARYBINARY}, {@code CHAR}, {@code VARCHAR}, or {@code
         * LONGVARCHAR}. Data which exceeds this limit is silently discarded. For
         * portability, a value greater than 256 is recommended.
         *
         * @param max
         *            the maximum size of the returned column value in bytes. 0
         *            implies no size limit.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetMaxFieldSize(
            [in] Int32 max);

        /**
         * Sets the maximum number of rows which can be held by the {@code RowSet}.
         * Any additional rows are silently discarded.
         *
         * @param max
         *            the maximum number of rows which can be held in the {@code
         *            RowSet}. 0 means no limit.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetMaxRows(
            [in] Int32 max);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.Reader.
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNCharacterStream(
            [in] Int32 parameterIndex,
            [in] IReader* theReader);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.Reader.
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @param length
         *            the length of the data in the Reader in characters
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNCharacterStream(
            [in] Int32 parameterIndex,
            [in] IReader* theReader,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.Reader.
         *
         * @param parameterName
         *            name for parameter
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNCharacterStream(
            [in] String parameterName,
            [in] IReader* theReader);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.Reader.
         *
         * @param parameterName
         *            name for parameter
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @param length
         *            the length of the data in the Reader in characters
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNCharacterStream(
            [in] String parameterName,
            [in] IReader* theReader,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.sql.NClob.
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theNClob
         *            the NClob value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNClob(
            [in] Int32 parameterIndex,
            [in] INClob* theNClob);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.Reader.
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNClob(
            [in] Int32 parameterIndex,
            [in] IReader* theReader);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.Reader.
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @param length
         *            the length of the data in the Reader in characters
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNClob(
            [in] Int32 parameterIndex,
            [in] IReader* theReader,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.sql.NClob.
         *
         * @param parameterName
         *            name for parameter
         * @param theNClob
         *            the NClob value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNClob(
            [in] String parameterName,
            [in] INClob* theNClob);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.Reader.
         *
         * @param parameterName
         *            name for parameter
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNClob(
            [in] String parameterName,
            [in] IReader* theReader);

        /**
         * Sets the value of the specified parameter in the RowSet command with the
         * value of a supplied java.io.Reader.
         *
         * @param parameterName
         *            name for parameter
         * @param theReader
         *            the Reader which contains the Unicode data to set into the
         *            parameter
         * @param length
         *            the length of the data in the Reader in characters
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNClob(
            [in] String parameterName,
            [in] IReader* theReader,
            [in] Int64 length);

        /**
         * Sets the value of the specified parameter in the RowSet command to the
         * supplied NString
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theNString
         *            the NString value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNString(
            [in] Int32 parameterIndex,
            [in] String theNString);

        /**
         * Sets the value of the specified parameter in the RowSet command to the
         * supplied NString.
         *
         * @param parameterName
         *            name for parameter
         * @param theNString
         *            the NString value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNString(
            [in] String parameterName,
            [in] String theNString);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to SQL {@code NULL}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param sqlType
         *            the type of the parameter, as defined by {@code
         *            java.sql.Types}.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNull(
            [in] Int32 parameterIndex,
            [in] Int32 sqlType);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to SQL {@code NULL}. This form of the {@code setNull} method should be
         * used for User Defined Types and {@code REF} parameters.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param sqlType
         *            the type of the parameter, as defined by {@code
         *            java.sql.Types}.
         * @param typeName
         *            the fully qualified name of an SQL user defined type or the
         *            name of the SQL structured type referenced by a {@code REF}
         *            type. Ignored if the sqlType is not a UDT or REF type.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNull(
            [in] Int32 parameterIndex,
            [in] Int32 sqlType,
            [in] String typeName);

        /**
         * Sets the value of the specified parameter in the RowSet command to SQL
         * NULL. This form of the <code>setNull</code> method should be used for
         * User Defined Types and REF parameters.
         *
         * @param parameterName
         *            name for parameter
         * @param sqlType
         *            the type of the parameter, as defined by java.sql.Types.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNull(
            [in] String parameterName,
            [in] Int32 sqlType);

        /**
         * Sets the value of the specified parameter in the RowSet command to SQL
         * NULL. This form of the <code>setNull</code> method should be used for
         * User Defined Types and REF parameters.
         *
         * @param parameterName
         *            name for parameter
         * @param sqlType
         *            the type of the parameter, as defined by java.sql.Types.
         * @param typeName
         *            the fully qualified name of an SQL User Defined Type or the
         *            name of the SQL structured type referenced by a REF type.
         *            Ignored if the sqlType is not a UDT or REF type.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetNull(
            [in] String parameterName,
            [in] Int32 sqlType,
            [in] String typeName);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to a supplied Java object.
         * <p>
         * The JDBC specification provides a standard mapping for Java objects to
         * SQL data types. Database specific types can be mapped by JDBC driver
         * specific Java types.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theObject
         *            the Java object containing the data value to which the
         *            parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetObject(
            [in] Int32 parameterIndex,
            [in] IInterface* theObject);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to a supplied Java object.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theObject
         *            the Java object containing the data value.
         * @param targetSqlType
         *            the SQL type to send to the database, as defined in {@code
         *            java.sql.Types}.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetObject(
            [in] Int32 parameterIndex,
            [in] IInterface* theObject,
            [in] Int32 targetSqlType);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to a supplied Java object.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theObject
         *            the Java object containing the data value.
         * @param targetSqlType
         *            the SQL type to send to the database, as defined in {@code
         *            java.sql.Types}.
         * @param scale
         *            the number of digits after the decimal point, for {@code
         *            java.sql.Types.DECIMAL} and {@code java.sql.Types.NUMERIC}
         *            types. Ignored for all other types.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetObject(
            [in] Int32 parameterIndex,
            [in] IInterface* theObject,
            [in] Int32 targetSqlType,
            [in] Int32 scale);

         /**
         * Sets the value of the specified parameter in the RowSet command to a
         * supplied Java object.
         *
         * @param parameterName
         *            name for parameter
         * @param theObject
         *            the Java object containing the data value.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetObject(
            [in] String parameterName,
            [in] IInterface* theObject);

        /**
         * Sets the value of the specified parameter in the RowSet command to a
         * supplied Java object.
         *
         * @param parameterName
         *            name for parameter
         * @param theObject
         *            the Java object containing the data value.
         * @param targetSqlType
         *            the SQL type to send to the database, as defined in
         *            java.sql.Types.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetObject(
            [in] String parameterName,
            [in] IInterface* theObject,
            [in] Int32 targetSqlType);

        /**
         * Sets the value of the specified parameter in the RowSet command to a
         * supplied Java object.
         *
         * @param parameterName
         *            name for parameter
         * @param theObject
         *            the Java object containing the data value.
         * @param targetSqlType
         *            the SQL type to send to the database, as defined in
         *            java.sql.Types.
         * @param scale
         *            the number of digits after the decimal point, for
         *            java.sql.Types.DECIMAL and java.sql.Types.NUMERIC types.
         *            Ignored for all other types.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetObject(
            [in] String parameterName,
            [in] IInterface* theObject,
            [in] Int32 targetSqlType,
            [in] Int32 scale);

        /**
         * Sets the database Password for this {@code RowSet}. This property is used
         * when a connection to the database is established. Therefore it should be
         * set prior to invoking the {@link #execute} method.
         *
         * @param password
         *            a {@code String} holding the password.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetPassword(
            [in] String password);

        /**
         * Gets the timeout for the driver when a query operation is executed. If a
         * query takes longer than the timeout, a {@code SQLException} is thrown.
         *
         * @param seconds
         *            the number of seconds for the timeout.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetQueryTimeout(
            [in] Int32 seconds);

        /**
         * Sets whether the {@code RowSet} is read-only or updatable.
         *
         * @param readOnly
         *            {@code true} to set the {@code RowSet} to read-only state,
         *            {@code false} to allow updates.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetReadOnly(
            [in] Boolean readOnly);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to a supplied {@code java.sql.Ref}. This is sent to the database as an
         * SQL {@code REF} value.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theRef
         *            the value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         * @see java.sql.Ref
         */
        SetRef(
            [in] Int32 parameterIndex,
            [in] IRef* theRef);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to a supplied {@code short integer}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theShort
         *            the value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetInt16(
            [in] Int32 parameterIndex,
            [in] Int16 theShort);

        /**
         * Sets the value of the specified parameter in the RowSet command to a
         * supplied short integer.
         *
         * @param parameterName
         *            name for parameter
         * @param theShort
         *            the short value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetInt16(
            [in] String parameterName,
            [in] Int16 theShort);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to a supplied {@code String}. The string is placed into the database as a
         * {@code VARCHAR} or {@code LONGVARCHAR} SQL value, depending on the
         * database limits for the length of {@code VARCHAR} values.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theString
         *            the value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetString(
            [in] Int32 parameterIndex,
            [in] String theString);

        /**
         * Sets the value of the specified parameter in the RowSet command to a
         * supplied String. The String is placed into the database as a VARCHAR or
         * LONGVARCHAR SQL value, depending on the database limits for the length of
         * VARCHAR values.
         *
         * @param parameterName
         *            name for parameter
         * @param theString
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetString(
            [in] String parameterName,
            [in] String theString);

        /**
         * Sets the value of the specified parameter in the RowSet command to the
         * supplied RowId
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theRowId
         *            the RowId value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetRowId(
            [in] Int32 parameterIndex,
            [in] IRowId* theRowId);

        /**
         * Sets the value of the specified parameter in the RowSet command to the
         * supplied RowId.
         *
         * @param parameterName
         *            name for parameter
         * @param theRowId
         *            the RowId value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetRowId(
            [in] String parameterName,
            [in] IRowId* theRowId);

        /**
         * Sets the value of the specified parameter in the RowSet command to the
         * supplied SQLXML
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theSQLXML
         *            the SQLXML value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetSQLXML(
            [in] Int32 parameterIndex,
            [in] ISQLXML* theSQLXML);

        /**
         * Sets the value of the specified parameter in the RowSet command to the
         * supplied SQLXML.
         *
         * @param parameterName
         *            name for parameter
         * @param theSQLXML
         *            the SQLXML value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetSQLXML(
            [in] String parameterName,
            [in] ISQLXML* theSQLXML);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to a supplied {@code java.sql.Time}, converting it to an SQL {@code TIME}
         * value using the system default {@code Calendar}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theTime
         *            the value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         * @see java.util.Calendar
         * @see java.sql.Time
         */
        SetTime(
            [in] Int32 parameterIndex,
            [in] ITime* theTime);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to a supplied {@code java.sql.Time}, converting it to an SQL {@code TIME}
         * value using a supplied {@code Calendar}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theTime
         *            the value to which the parameter is set.
         * @param theCalendar
         *            the {@code Calendar} to use in the conversion operation.
         * @throws SQLException
         *             if an error occurs accessing the database.
         * @see java.util.Calendar
         * @see java.sql.Time
         */
        SetTime(
            [in] Int32 parameterIndex,
            [in] ITime* theTime,
            [in] ICalendar* theCalendar);

        /**
         * Sets the value of the specified parameter in the RowSet command to a
         * supplied java.sql.Time, converting to an SQL TIME value using a supplied
         * Calendar.
         *
         * @param parameterName
         *            name for parameter
         * @param theTime
         *            the Time value to set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetTime(
            [in] String parameterName,
            [in] ITime* theTime);

        /**
         * Sets the value of the specified parameter in the RowSet command to a
         * supplied java.sql.Time, converting to an SQL TIME value using a supplied
         * Calendar.
         *
         * @param parameterName
         *            name for parameter
         * @param theTime
         *            the Time value to set
         * @param theCalendar
         *            the Calendar to use in the conversion operation
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetTime(
            [in] String parameterName,
            [in] ITime* theTime,
            [in] ICalendar* theCalendar);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to a supplied {@code java.sql.Timestamp}, converting it to an SQL {@code
         * TIMESTAMP} value using the system default {@code Calendar}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theTimestamp
         *            the value to which the parameter is set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         * @see java.util.Calendar
         * @see java.sql.Timestamp
         */
        SetTimestamp(
            [in] Int32 parameterIndex,
            [in] ITimestamp* theTimestamp);

        /**
         * Sets the value of the specified parameter in the {@code RowSet} command
         * to a supplied {@code java.sql.Timestamp}, converting it to an SQL {@code
         * TIMESTAMP} value using a supplied {@code Calendar}.
         *
         * @param parameterIndex
         *            the index of the parameter to set; the first parameter's index
         *            is 1.
         * @param theTimestamp
         *            the value to which the parameter is set.
         * @param theCalendar
         *            the {@code Calendar} to use in the conversion operation
         * @throws SQLException
         *             if an error occurs accessing the database.
         * @see java.util.Calendar
         * @see java.sql.Timestamp
         */
        SetTimestamp(
            [in] Int32 parameterIndex,
            [in] ITimestamp* theTimestamp,
            [in] ICalendar* theCalendar);

         /**
         * Sets the value of the specified parameter in the RowSet command to a
         * supplied java.sql.Timestamp converting to an SQL TIMESTAMP value
         * using the system default {@code Calendar}.
         *
         * @param parameterName
         *            name for parameter
         * @param theTimestamp
         *            the value to which the parameter is set
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetTimestamp(
            [in] String parameterName,
            [in] ITimestamp* theTimestamp);

        /**
         * Sets the value of the specified parameter in the RowSet command to a
         * supplied java.sql.Timestamp converting to an SQL TIMESTAMP value using a
         * supplied Calendar.
         *
         * @param parameterName
         *            name for parameter
         * @param theTimestamp
         *            the value to which the parameter is set
         * @param theCalendar
         *            the Calendar to use in the conversion operation
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetTimestamp(
            [in] String parameterName,
            [in] ITimestamp* theTimestamp,
            [in] ICalendar* theCalendar);

        /**
         * Sets the target instance's transaction isolation level to one of a
         * discrete set of possible values. The transaction isolation level defines
         * the policy implemented on the database for maintaining the data values
         * consistent.
         * <p>
         * Keep in mind that setting a transaction isolation level has no effect
         * unless your driver and DBMS support it.
         *
         * @param level
         *            the transaction isolation level. One of:
         *            <ul>
         *            <li>{@code Connection.TRANSACTION_READ_UNCOMMITTED}</li>
         *            <li>{@code Connection.TRANSACTION_READ_COMMITTED}</li>
         *            <li>{@code Connection.TRANSACTION_REPEATABLE_READ}</li>
         *            <li>{@code Connection.TRANSACTION_SERIALIZABLE}</li>
         *            </ul>
         * @throws SQLException
         *             if an error occurs accessing the database.
         * @see java.sql.Connection
         */
        SetTransactionIsolation(
            [in] Int32 level);

        /**
         * Sets the type of this {@code RowSet}. By default, the type is
         * non-scrollable.
         *
         * @param type
         *            the type for the {@code RowSet}. One of:
         *            <ul>
         *            <li>{@code ResultSet.TYPE_FORWARD_ONLY}</li>
         *            <li>{@code ResultSet.TYPE_SCROLL_INSENSITIVE}</li>
         *            <li>{@code ResultSet.TYPE_SCROLL_SENSITIVE}</li>
         *            </ul>
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetType(
            [in] Int32 type);

        /**
         * Sets the mapping of SQL User Defined Types (UDTs) to Java classes. The
         * Java classes must all implement the {@link java.sql.SQLData SQLData}
         * interface.
         *
         * @param theTypeMap
         *            the names of SQL UDTs and the Java classes to which they are
         *            mapped.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetTypeMap(
            [in] IMap* theTypeMap);

        /**
         * Sets the URL used by this {@code RowSet} to access the database via a
         * {@code DriverManager}. The URL is optional - an alternative is to use a
         * database name to create a connection.
         *
         * @param theURL
         *            the URL for the database. Can be {@code null}.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetUrl(
            [in] String theURL);

        /**
         * Sets the URL used by this RowSet to access the database via a
         * <code>DriverManager</code>. The URL is optional - an alternative is to
         * use a Data Source Name to create a connection.
         *
         * @param parameterIndex
         *            index of the parameter to set, where the first parameter has
         *            index = 1.
         * @param theURL
         *            a java.net.URL containing the URL for the database.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetURL(
            [in] Int32 parameterIndex,
            [in] IURL* theURL);

        /**
         * Sets the {@code Username} property for the {@code RowSet}, used to
         * authenticate a connection to the database.
         *
         * @param theUsername
         *            the new user name for this row set.
         * @throws SQLException
         *             if an error occurs accessing the database.
         */
        SetUsername(
            [in] String theUsername);
    }

    } // namespace Sql
    } // namespace Elastosx
}