module{
    namespace Elastosx{
    namespace Sql{
    /**
     * An interface which provides functionality for a disconnected {@code RowSet}
     * to get data from a database into its rows. The {@code RowSet} calls the
     * {@code RowSetReader} interface when the {@code RowSet}'s execute method is
     * invoked - a {@code RowSetReader} must first be registered with the {@code
     * RowSet} for this to work.
     *
     * @see RowSet
     */
    interface IRowSetReader {
        /**
         * Reads new data into the {@code RowSet}. The calling {@code RowSet} object
         * must itself implement the {@code RowSetInternal} interface and the
         * {@code RowSetReader} must be registered as a reader on the
         * {@code RowSet}.
         * <p>
         * This method adds rows into the calling {@code RowSet}. The reader may
         * invoke any of the {@code RowSet}'s methods except for the {@code execute}
         * method (calling {@code execute} will cause an {@code SQLException} to be
         * thrown). However, when the reader calls the {@code RowSet}'s methods, no
         * events are sent to listeners - any listeners are informed by the calling
         * {@code RowSet}'s {@code execute} method once the reader returns from the
         * {@code readData} method.
         *
         * @param theCaller
         *            must be the calling {@code RowSet} object, which must have
         *            implemented the {@code RowSetInternal} interface.
         * @throws SQLException
         *             if a problem occurs accessing the database or if the reader
         *             calls the {@link RowSet#execute()} method.
         * @see RowSetInternal
         */
        ReadData(
            [in] IRowSetInternal* theCaller);
    }

    } // namespace Sql
    } // namespace Elastosx
}