module{
    namespace Elastosx{
    namespace Sql{

    /**
     * An interface used to receive events generated by a {@link PooledConnection}.
     * <p>
     * This interface would typically be implemented by a component which manages a
     * connection pool (a connection pool manager). A connection triggers an event
     * to a {@code ConnectionEventListener} either when the application closes a
     * connection it has been using or when a significant error occurs while the
     * connection is being used.
     * <p>
     * The connection pool manager can return closed connections to the pool for
     * later reuse. Connections experiencing an error should be discarded.
     */
    /**
     * @Involve
     * interface IEventListener
     */
    interface IConnectionEventListener {
        /**
         * Notifies the {@code ConnectionEventListener} that an application has
         * called the {@code close} method on a pooled connection.
         *
         * @param theEvent
         *            a {@code ConnectionEvent} containing details about the source
         *            of the event.
         */
        ConnectionClosed(
            [in] IConnectionEvent* theEvent);

        /**
         * Notifies the {@code ConnectionEventListener} that an error has occurred
         * on a {@code PooledConnection}. This notification is triggered <i>before</i> the
         * {@code SQLException}, which is available through the event argument, is
         * thrown.
         *
         * @param theEvent
         *            a {@code ConnectionEvent} containing details about the source
         *            of the event and the {@code SQLException} that has occurred.
         */
        ConnectionErrorOccurred(
            [in] IConnectionEvent* theEvent);
    }

    } // namespace Sql
    } // namespace Elastosx
}