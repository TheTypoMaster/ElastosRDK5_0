module{
    namespace Elastosx{
    namespace Sql{

    /**
     * An interface which provides functionality for a disconnected {@code RowSet}
     * to put data updates back to the data source from which the {@code RowSet} was
     * originally populated. An object implementing this interface is called a
     * writer.
     * <p>
     * The writer must establish a connection to the {@code RowSet}'s database
     * before writing the data. The {@code RowSet} calling this interface must
     * implement the {@code RowSetInternal} interface.
     * <p>
     * The writer may encounter a situation where the updated data needs to be
     * written back to the database, but has already been updated there in the mean
     * time. How a conflict of this kind is handled is determined by the
     * implementation of this writer.
     *
     * @see RowSetInternal
     */
    interface IRowSetWriter {
        /**
         * Writes changes made in the {@code RowSet}, which is associated with this
         * {@code RowSetWriter}, back to the database.
         *
         * @param theRowSet
         *            a row set that fulfills the following criteria:
         *            <ul>
         *            <li>it must implement the {@code RowSetInternal} interface,</li>
         *            <li>have this {@code RowSetWriter} registered with it,</li>
         *            <li>must call this method internally.</li>
         *            </ul>
         * @return {@code true} if the modified data was written, {@code false}
         *         otherwise (which typically implies some form of conflict).
         * @throws SQLException
         *             if a problem occurs accessing the database.
         */
        WriteData(
            [in] IRowSetInternal* theRowSet,
            [out] Boolean* value);
    }

    } // namespace Sql
    } // namespace Elastosx
}