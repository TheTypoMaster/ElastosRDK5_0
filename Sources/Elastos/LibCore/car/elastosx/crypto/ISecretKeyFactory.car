
module
{
    interface Elastos.Security.IProvider;
    interface Elastos.Security.Spec.IKeySpec;

    namespace Elastosx {
    namespace Crypto {

    /**
     * The public API for {@code SecretKeyFactory} implementations.
     * <p>
     * Secret key factories provide the following functionality:
     * <ul>
     * <li>convert {@link SecretKey} objects to and from {@link KeySpec} objects</li>
     * <li>translate {@link SecretKey} objects from one provider implementation to
     * another</li>
     * </ul>
     * Which key specifications are supported by the {@link #generateSecret} and
     * {@link #getKeySpec} is provider dependent.
     */
    interface ISecretKeyFactory {

        /**
         * Returns the name of the secret key algorithm.
         *
         * @return the name of the secret key algorithm.
         */
        GetAlgorithm(
            [out] String * al);

        /**
         * Returns the provider for this {@code SecretKeyFactory} instance.
         *
         * @return the provider for this {@code SecretKeyFactory} instance.
         */
        GetProvider(
            [out] IProvider ** provider);

        /**
         * Generate a secret key from the specified key specification.
         *
         * @param keySpec
         *            the key specification.
         * @return a secret key.
         * @throws InvalidKeySpecException
         *             if the specified key specification cannot be used to generate
         *             a secret key.
         */
        GenerateSecret(
            [in] IKeySpec * keySpec,
            [out] ISecretKey ** key);

        /**
         * Returns the key specification of the specified secret key.
         *
         * @param key
         *            the secret key to get the specification from.
         * @param keySpec
         *            the target key specification class.
         * @return an instance of the specified key specification class.
         * @throws InvalidKeySpecException
         *             if the specified secret key cannot be transformed into the
         *             requested key specification.
         */
        //@SuppressWarnings("unchecked")
        GetKeySpec(
            [in] ISecretKey * key,
            [in] ClassID keySpec,
            [out] IKeySpec ** spec);

        /**
         * Translates the specified secret key into an instance of the corresponding
         * key from the provider of this key factory.
         *
         * @param key
         *            the secret key to translate.
         * @return the corresponding translated key.
         * @throws InvalidKeyException
         *             if the specified key cannot be translated using this key
         *             factory.
         */
        TranslateKey(
            [in] ISecretKey * key,
            [out] ISecretKey ** secretKey);
    }


    interface ISecretKeyFactoryHelper {

        /**
         * Creates a new {@code SecretKeyFactory} instance for the specified key
         * algorithm.
         *
         * @param algorithm
         *            the name of the key algorithm.
         * @return a secret key factory for the specified key algorithm.
         * @throws NoSuchAlgorithmException
         *             if no installed provider can provide the requested algorithm.
         * @throws NullPointerException
         *             if the specified algorithm is {@code null}.
         */
        GetInstance(
            [in] String algorithm,
            [out] ISecretKeyFactory ** secretKeyFactory);

        /**
         * Creates a new {@code SecretKeyFactory} instance for the specified key
         * algorithm from the specified {@code provider}.
         *
         * @param algorithm
         *            the name of the key algorithm.
         * @param provider
         *            the name of the provider that provides the requested
         *            algorithm.
         * @return a secret key factory for the specified key algorithm from the
         *         specified provider.
         * @throws NoSuchAlgorithmException
         *             if the specified provider cannot provide the requested
         *             algorithm.
         * @throws NoSuchProviderException
         *             if the specified provider does not exist.
         * @throws IllegalArgumentException
         *             if the specified provider name is {@code null} or empty.
         */
        GetInstance(
            [in] String algorithm,
            [in] String provider,
            [out] ISecretKeyFactory ** secretKeyFactory);

        /**
         * Creates a new {@code SecretKeyFactory} instance for the specified key
         * algorithm from the specified provider. The {@code provider} supplied
         * does not have to be registered.
         *
         * @param algorithm
         *            the name of the key algorithm.
         * @param provider
         *            the provider that provides the requested algorithm.
         * @return a secret key factory for the specified key algorithm from the
         *         specified provider.
         * @throws NoSuchAlgorithmException
         *             if the specified provider cannot provider the requested
         *             algorithm.
         * @throws IllegalArgumentException
         *             if the specified provider is {@code null}.
         * @throws NullPointerException
         *             is the specified algorithm name is {@code null}.
         */
        GetInstance(
            [in] String algorithm,
            [in] IProvider * provider,
            [out] ISecretKeyFactory ** secretKeyFactory);
    }


    } // namespace Crypto
    } // namespace Elastosx
}
