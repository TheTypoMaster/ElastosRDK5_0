
module
{
    interface Elastos.Security.ISecureRandom;
    interface Elastos.Security.Spec.IAlgorithmParameterSpec;
    interface Elastosx.Crypto.ISecretKey;

    namespace Elastosx {
    namespace Crypto {

    /**
     * The <i>Service Provider Interface</i> (<b>SPI</b>) definition for the
     * {@code KeyGenerator} class.
     *
     * @see KeyGenerator
     */
    [deprecated]
    interface IKeyGeneratorSpi {

    /**
     * Generates a secret key.
     *
     * @return the generated secret key.
     */
    EngineGenerateKey(
        [out] ISecretKey** result);

    /**
     * Initializes this {@code KeyGeneratorSpi} instance with the specified
     * algorithm parameters and randomness source.
     *
     * @param params
     *            the parameters for the key generation algorithm.
     * @param random
     *            the randomness source for any random bytes.
     * @throws InvalidAlgorithmParameterException
     *             if the parameters cannot be uses to initialize this key
     *             generator algorithm.
     */
    EngineInit(
        [in] IAlgorithmParameterSpec* params,
        [in] ISecureRandom* random);

    /**
     * Initializes this {@code KeyGenerator} instance for the specified key
     * size (in bits) using the specified randomness source.
     *
     * @param keysize
     *            the size of the key (in bits).
     * @param random
     *            the randomness source for any random bytes.
     */
    EngineInit(
        [in] Int32 keysize,
        [in] ISecureRandom* random);

    /**
     * Initializes this {@code KeyGenerator} with the specified randomness
     * source.
     *
     * @param random
     *            the randomness source for any random bytes.
     */
    EngineInit(
        [in] ISecureRandom* random);

    }


    } // namespace Crypto
    } // namespace Elastosx
}
