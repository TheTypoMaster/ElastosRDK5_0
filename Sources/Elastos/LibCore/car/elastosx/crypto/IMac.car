
module
{
    interface Elastos.IO.IByteBuffer;
    interface Elastos.Security.IKey;
    interface Elastos.Security.IProvider;
    interface Elastos.Security.Spec.IAlgorithmParameterSpec;

    namespace Elastosx {
    namespace Crypto {

    /**
     * This class provides the public API for <i>Message Authentication Code</i>
     * (MAC) algorithms.
     */
    [deprecated]
    interface IMac {

        /**
         * Returns the name of the MAC algorithm.
         *
         * @return the name of the MAC algorithm.
         */
        GetAlgorithm(
            [out] String * al);

        /**
         * Returns the provider of this {@code Mac} instance.
         *
         * @return the provider of this {@code Mac} instance.
         */
        GetProvider(
            [out] IProvider ** provider);

        /**
         * Returns the length of this MAC (in bytes).
         *
         * @return the length of this MAC (in bytes).
         */
        GetMacLength(
            [out] Int32 * len);

        /**
         * Initializes this {@code Mac} instance with the specified key and
         * algorithm parameters.
         *
         * @param key
         *            the key to initialize this algorithm.
         * @param params
         *            the parameters for this algorithm.
         * @throws InvalidKeyException
         *             if the specified key cannot be used to initialize this
         *             algorithm, or it is null.
         * @throws InvalidAlgorithmParameterException
         *             if the specified parameters cannot be used to initialize this
         *             algorithm.
         */
        Init(
            [in] IKey * key,
            [in] IAlgorithmParameterSpec* spec);

        /**
         * Initializes this {@code Mac} instance with the specified key.
         *
         * @param key
         *            the key to initialize this algorithm.
         * @throws InvalidKeyException
         *             if initialization fails because the provided key is {@code
         *             null}.
         * @throws RuntimeException
         *             if the specified key cannot be used to initialize this
         *             algorithm.
         */
        Init(
            [in] IKey * key);

        /**
         * Updates this {@code Mac} instance with the specified byte.
         *
         * @param input
         *            the byte
         * @throws IllegalStateException
         *             if this MAC is not initialized.
         */
        Update(
            [in] Byte input);

        /**
         * Updates this {@code Mac} instance with the data from the specified buffer
         * {@code input} from the specified {@code offset} and length {@code len}.
         *
         * @param input
         *            the buffer.
         * @param offset
         *            the offset in the buffer.
         * @param len
         *            the length of the data in the buffer.
         * @throws IllegalStateException
         *             if this MAC is not initialized.
         * @throws IllegalArgumentException
         *             if {@code offset} and {@code len} do not specified a valid
         *             chunk in {@code input} buffer.
         */
        Update(
            [in] ArrayOf<Byte> * input,
            [in] Int32 offset,
            [in] Int32 len);

        /**
         * Copies the buffer provided as input for further processing.
         *
         * @param input
         *            the buffer.
         * @throws IllegalStateException
         *             if this MAC is not initialized.
         */
        Update(
            [in] ArrayOf<Byte> * input);

        /**
         * Updates this {@code Mac} instance with the data from the specified
         * buffer, starting at {@link ByteBuffer#position()}, including the next
         * {@link ByteBuffer#remaining()} bytes.
         *
         * @param input
         *            the buffer.
         * @throws IllegalStateException
         *             if this MAC is not initialized.
         */
        Update(
            [in] IByteBuffer * input);

        /**
         * Computes the digest of this MAC based on the data previously specified in
         * {@link #update} calls.
         * <p>
         * This {@code Mac} instance is reverted to its initial state and can be
         * used to start the next MAC computation with the same parameters or
         * initialized with different parameters.
         *
         * @return the generated digest.
         * @throws IllegalStateException
         *             if this MAC is not initialized.
         */
        DoFinal(
            [out, callee] ArrayOf<Byte> * result);

        /**
         * Computes the digest of this MAC based on the data previously specified in
         * {@link #update} calls and stores the digest in the specified {@code
         * output} buffer at offset {@code outOffset}.
         * <p>
         * This {@code Mac} instance is reverted to its initial state and can be
         * used to start the next MAC computation with the same parameters or
         * initialized with different parameters.
         *
         * @param output
         *            the output buffer
         * @param outOffset
         *            the offset in the output buffer
         * @throws ShortBufferException
         *             if the specified output buffer is either too small for the
         *             digest to be stored, the specified output buffer is {@code
         *             null}, or the specified offset is negative or past the length
         *             of the output buffer.
         * @throws IllegalStateException
         *             if this MAC is not initialized.
         */
        DoFinal(
            [in] ArrayOf<Byte> * output,
            [in] Int32 outOffset);

        /**
         * Computes the digest of this MAC based on the data previously specified on
         * {@link #update} calls and on the final bytes specified by {@code input}
         * (or based on those bytes only).
         * <p>
         * This {@code Mac} instance is reverted to its initial state and can be
         * used to start the next MAC computation with the same parameters or
         * initialized with different parameters.
         *
         * @param input
         *            the final bytes.
         * @return the generated digest.
         * @throws IllegalStateException
         *             if this MAC is not initialized.
         */
        DoFinal(
            [in] ArrayOf<Byte> * output,
            [out, callee] ArrayOf<Byte> * result);

        /**
         * Resets this {@code Mac} instance to its initial state.
         * <p>
         * This {@code Mac} instance is reverted to its initial state and can be
         * used to start the next MAC computation with the same parameters or
         * initialized with different parameters.
         */
        Reset();
    }


    interface IMacHelper {

        /**
         * Creates a new {@code Mac} instance that provides the specified MAC
         * algorithm.
         *
         * @param algorithm
         *            the name of the requested MAC algorithm.
         * @return the new {@code Mac} instance.
         * @throws NoSuchAlgorithmException
         *             if the specified algorithm is not available by any provider.
         * @throws NullPointerException
         *             if {@code algorithm} is {@code null} (instead of
         *             NoSuchAlgorithmException as in 1.4 release).
         */
        GetInstance(
            [in] String algorithm,
            [out] IMac ** mac);

        /**
         * Creates a new {@code Mac} instance that provides the specified MAC
         * algorithm from the specified provider.
         *
         * @param algorithm
         *            the name of the requested MAC algorithm.
         * @param provider
         *            the name of the provider that is providing the algorithm.
         * @return the new {@code Mac} instance.
         * @throws NoSuchAlgorithmException
         *             if the specified algorithm is not provided by the specified
         *             provider.
         * @throws NoSuchProviderException
         *             if the specified provider is not available.
         * @throws IllegalArgumentException
         *             if the specified provider name is {@code null} or empty.
         * @throws NullPointerException
         *             if {@code algorithm} is {@code null} (instead of
         *             NoSuchAlgorithmException as in 1.4 release).
         */
        GetInstance(
            [in] String algorithm,
            [in] String provider,
            [out] IMac ** mac);

        /**
         * Creates a new {@code Mac} instance that provides the specified MAC
         * algorithm from the specified provider. The {@code provider} supplied
         * does not have to be registered.
         *
         * @param algorithm
         *            the name of the requested MAC algorithm.
         * @param provider
         *            the provider that is providing the algorithm.
         * @return the new {@code Mac} instance.
         * @throws NoSuchAlgorithmException
         *             if the specified algorithm is not provided by the specified
         *             provider.
         * @throws IllegalArgumentException
         *             if {@code provider} is {@code null}.
         * @throws NullPointerException
         *             if {@code algorithm} is {@code null} (instead of
         *             NoSuchAlgorithmException as in 1.4 release).
         */
        GetInstance(
            [in] String algorithm,
            [in] IProvider * provider,
            [out] IMac ** mac);


    }


    } // namespace Crypto
    } // namespace Elastosx
}
