
module
{
    interface Elastos.Security.IKey;
    interface Elastos.Security.IProvider;
    interface Elastos.Security.ISecureRandom;
    interface Elastos.Security.Spec.IAlgorithmParameterSpec;
    interface Elastosx.Crypto.ISecretKey;

    namespace Elastosx {
    namespace Crypto {

    /**
     * This class provides the functionality for a key exchange protocol. This
     * enables two or more parties to agree on a secret key for symmetric
     * cryptography.
     */
    [deprecated]
    interface IKeyAgreement {

        /**
         * Returns the name of the key agreement algorithm.
         *
         * @return the name of the key agreement algorithm.
         */
        GetAlgorithm(
            [out] String * al);

        /**
         * Returns the provider for this {@code KeyAgreement} instance.
         *
         * @return the provider for this {@code KeyAgreement} instance.
         */
        GetProvider(
            [out] IProvider ** provider);

        /**
         * Initializes this {@code KeyAgreement} with the specified key and the
         * specified randomness source.
         *
         * @param key
         *            the key to initialize this key agreement.
         * @param random
         *            the source for any randomness needed.
         * @throws InvalidKeyException
         *             if the specified key cannot be used to initialize this key
         *             agreement.
         */
        Init(
            [in] IKey * key,
            [in] ISecureRandom * random);

        /**
         * Initializes this {@code KeyAgreement} with the specified key and the
         * algorithm parameters.
         *
         * @param key
         *            the key to initialize this key agreement.
         * @param params
         *            the parameters for this key agreement algorithm.
         * @throws InvalidKeyException
         *             if the specified key cannot be used to initialize this key
         *             agreement.
         * @throws InvalidAlgorithmParameterException
         *             if the specified parameters are invalid for this key
         *             agreement algorithm.
         */
        Init(
            [in] IKey * key,
            [in] IAlgorithmParameterSpec * random);

        /**
         * Initializes this {@code KeyAgreement} with the specified key, algorithm
         * parameters and randomness source.
         *
         * @param key
         *            the key to initialize this key agreement.
         * @param params
         *            the parameters for this key agreement algorithm.
         * @param random
         *            the source for any randomness needed.
         * @throws InvalidKeyException
         *             if the specified key cannot be used to initialize this key
         *             agreement.
         * @throws InvalidAlgorithmParameterException
         *             if the specified parameters are invalid for this key
         *             agreement algorithm.
         */
        Init(
            [in] IKey * key,
            [in] IAlgorithmParameterSpec * random,
            [in] ISecureRandom * sr);

        /**
         * Does the next (or the last) phase of the key agreement, using the
         * specified key.
         *
         * @param key
         *            the key received from the other party for this phase.
         * @param lastPhase
         *            set to {@code true} if this is the last phase of this key
         *            agreement.
         * @return the intermediate key from this phase or {@code null} if there is
         *         no intermediate key for this phase.
         * @throws InvalidKeyException
         *             if the specified key cannot be used in this key agreement or
         *             this phase,
         * @throws IllegalStateException
         *             if this instance has not been initialized.
         */
        DoPhase(
            [in] IKey * key,
            [in] Boolean lastPhase,
            [out] IKey ** result);

        /**
         * Generates the shared secret.
         *
         * @return the generated shared secret.
         * @throws IllegalStateException
         *             if this key agreement is not complete.
         */
        GenerateSecret(
            [out, callee] ArrayOf<Byte> * secret);

        /**
         * Generates the shared secret and stores it into the buffer {@code
         * sharedSecred} at {@code offset}.
         *
         * @param sharedSecret
         *            the buffer to store the shared secret.
         * @param offset
         *            the offset in the buffer.
         * @return the number of bytes stored in the buffer.
         * @throws IllegalStateException
         *             if this key agreement is not complete.
         * @throws ShortBufferException
         *             if the specified buffer is too small for the shared secret.
         */
        GenerateSecret(
            [in] ArrayOf<Byte> * sharedSecret,
            [in] Int32 offset,
            [out] Int32 * number);

        /**
         * Generates the shared secret.
         *
         * @param algorithm
         *            the algorithm to for the {@code SecretKey}
         * @return the shared secret as a {@code SecretKey} of the specified
         *         algorithm.
         * @throws IllegalStateException
         *             if this key agreement is not complete.
         * @throws NoSuchAlgorithmException
         *             if the specified algorithm for the secret key does not
         *             exists.
         * @throws InvalidKeyException
         *             if a {@code SecretKey} with the specified algorithm cannot be
         *             created using the generated shared secret.
         */
        GenerateSecret(
            [in] String algorithm,
            [out] ISecretKey ** key);
    }


    interface IKeyAgreementHelper {

        /**
         * Creates a new {@code KeyAgreement} for the specified algorithm.
         *
         * @param algorithm
         *            the name of the key agreement algorithm to create.
         * @return a key agreement for the specified algorithm.
         * @throws NoSuchAlgorithmException
         *             if no installed provider can provide the requested algorithm.
         * @throws NullPointerException
         *             if the specified algorithm is {@code null}.
         */
        GetInstance(
            [in] String algorithm,
            [out] IKeyAgreement ** ka);

        /**
         * Creates a new {@code KeyAgreement} for the specified algorithm from the
         * specified provider.
         *
         * @param algorithm
         *            the name of the key agreement algorithm to create.
         * @param provider
         *            the name of the provider that provides the requested
         *            algorithm.
         * @return a key agreement for the specified algorithm from the specified
         *         provider.
         * @throws NoSuchAlgorithmException
         *             if the specified provider cannot provide the requested
         *             algorithm.
         * @throws NoSuchProviderException
         *             if the specified provider does not exist.
         * @throws IllegalArgumentException
         *             if the specified provider name is {@code null} or empty.
         */
        GetInstance(
            [in] String algorithm,
            [in] String provider,
            [out] IKeyAgreement ** ka);

        /**
         * Create a new {@code KeyAgreement} for the specified algorithm from the
         * specified provider. The {@code provider} supplied does not have to be
         * registered.
         *
         * @param algorithm
         *            the name of the key agreement algorithm to create.
         * @param provider
         *            the provider that provides the requested algorithm.
         * @return a key agreement for the specified algorithm from the specified
         *         provider.
         * @throws NoSuchAlgorithmException
         *             if the specified provider cannot provide the requested
         *             algorithm.
         * @throws IllegalArgumentException
         *             if the specified provider is {@code null}.
         * @throws NullPointerException
         *             if the specified algorithm name is {@code null}.
         */
        GetInstance(
            [in] String algorithm,
            [in] IProvider * provider,
            [out] IKeyAgreement ** ka);


    }


    } // namespace Crypto
    } // namespace Elastosx
}
