
module
{
    using interface Elastos.Core.IClassLoader;
    interface Elastosx.Xml.Parsers.IDocumentBuilder;
    interface Elastosx.Xml.Validation.ISchema;

    namespace Elastosx {
    namespace Xml {
    namespace Parsers {

    /**
     * Defines a factory API that enables applications to obtain a
     * parser that produces DOM object trees from XML documents.
     *
     * @author <a href="Jeff.Suttor@Sun.com">Jeff Suttor</a>
     * @version $Revision: 884950 $, $Date: 2009-11-27 10:46:18 -0800 (Fri, 27 Nov 2009) $
     */
    interface IDocumentBuilderFactory {
        /**
         * Creates a new instance of a {@link javax.xml.parsers.DocumentBuilder}
         * using the currently configured parameters.
         *
         * @exception ParserConfigurationException if a DocumentBuilder
         * cannot be created which satisfies the configuration requested.
         * @return A new instance of a DocumentBuilder.
         */
        NewDocumentBuilder(
            [out] IDocumentBuilder** builder);

        /**
         * Specifies that the parser produced by this code will
         * provide support for XML namespaces. By default the value of this is set
         * to <code>false</code>
         *
         * @param awareness true if the parser produced will provide support
         *                  for XML namespaces; false otherwise.
         */
        SetNamespaceAware(
            [in] Boolean awareness);

        /**
         * Specifies that the parser produced by this code will
         * validate documents as they are parsed. By default the value of this
         * is set to <code>false</code>.
         *
         * <p>
         * Note that "the validation" here means
         * <a href="http://www.w3.org/TR/REC-xml#proc-types">a validating
         * parser</a> as defined in the XML recommendation.
         * In other words, it essentially just controls the DTD validation.
         * (except the legacy two properties defined in JAXP 1.2.
         * See <a href="#validationCompatibility">here</a> for more details.)
         * </p>
         *
         * <p>
         * To use modern schema languages such as W3C XML Schema or
         * RELAX NG instead of DTD, you can configure your parser to be
         * a non-validating parser by leaving the {@link #setValidating(boolean)}
         * method <tt>false</tt>, then use the {@link #setSchema(Schema)}
         * method to associate a schema to a parser.
         * </p>
         *
         * @param validating true if the parser produced will validate documents
         *                   as they are parsed; false otherwise.
         */
        SetValidating(
            [in] Boolean validating);

        /**
         * Specifies that the parsers created by this  factory must eliminate
         * whitespace in element content (sometimes known loosely as
         * 'ignorable whitespace') when parsing XML documents (see XML Rec
         * 2.10). Note that only whitespace which is directly contained within
         * element content that has an element only content model (see XML
         * Rec 3.2.1) will be eliminated. Due to reliance on the content model
         * this setting requires the parser to be in validating mode. By default
         * the value of this is set to <code>false</code>.
         *
         * @param whitespace true if the parser created must eliminate whitespace
         *                   in the element content when parsing XML documents;
         *                   false otherwise.
         */
        SetIgnoringElementContentWhitespace(
            [in] Boolean whitespace);

        /**
         * Specifies that the parser produced by this code will
         * expand entity reference nodes. By default the value of this is set to
         * <code>true</code>
         *
         * @param expandEntityRef true if the parser produced will expand entity
         *                        reference nodes; false otherwise.
         */
        SetExpandEntityReferences(
            [in] Boolean expandEntityRef);

        /**
         * <p>Specifies that the parser produced by this code will
         * ignore comments. By default the value of this is set to <code>false
         * </code>.</p>
         *
         * @param ignoreComments <code>boolean</code> value to ignore comments during processing
         */
        SetIgnoringComments(
            [in] Boolean ignoreComments);

        /**
         * Specifies that the parser produced by this code will
         * convert CDATA nodes to Text nodes and append it to the
         * adjacent (if any) text node. By default the value of this is set to
         * <code>false</code>
         *
         * @param coalescing  true if the parser produced will convert CDATA nodes
         *                    to Text nodes and append it to the adjacent (if any)
         *                    text node; false otherwise.
         */
        SetCoalescing(
            [in] Boolean coalescing);

        /**
         * Indicates whether or not the factory is configured to produce
         * parsers which are namespace aware.
         *
         * @return  true if the factory is configured to produce parsers which
         *          are namespace aware; false otherwise.
         */
        IsNamespaceAware(
            [out] Boolean* isAware);

        /**
         * Indicates whether or not the factory is configured to produce
         * parsers which validate the XML content during parse.
         *
         * @return  true if the factory is configured to produce parsers
         *          which validate the XML content during parse; false otherwise.
         */
        IsValidating(
            [out] Boolean* isValidating);

        /**
         * Indicates whether or not the factory is configured to produce
         * parsers which ignore ignorable whitespace in element content.
         *
         * @return  true if the factory is configured to produce parsers
         *          which ignore ignorable whitespace in element content;
         *          false otherwise.
         */
        IsIgnoringElementContentWhitespace(
            [out] Boolean* isIgnoringElementContentWhiteSpace);

        /**
         * Indicates whether or not the factory is configured to produce
         * parsers which expand entity reference nodes.
         *
         * @return  true if the factory is configured to produce parsers
         *          which expand entity reference nodes; false otherwise.
         */
        IsExpandEntityReferences(
            [out] Boolean* isExpandEntityReferences);

        /**
         * Indicates whether or not the factory is configured to produce
         * parsers which ignores comments.
         *
         * @return  true if the factory is configured to produce parsers
         *          which ignores comments; false otherwise.
         */
        IsIgnoringComments(
            [out] Boolean* comments);

        /**
         * Indicates whether or not the factory is configured to produce
         * parsers which converts CDATA nodes to Text nodes and appends it to
         * the adjacent (if any) Text node.
         *
         * @return  true if the factory is configured to produce parsers
         *          which converts CDATA nodes to Text nodes and appends it to
         *          the adjacent (if any) Text node; false otherwise.
         */
        IsCoalescing(
            [out] Boolean* isCoalescing);

        /**
         * Allows the user to set specific attributes on the underlying
         * implementation.
         * @param name The name of the attribute.
         * @param value The value of the attribute.
         * @exception IllegalArgumentException thrown if the underlying
         * implementation doesn't recognize the attribute.
         */
        SetAttribute(
            [in] String name,
            [in] IObject* value);

        /**
         * Allows the user to retrieve specific attributes on the underlying
         * implementation.
         * @param name The name of the attribute.
         * @return value The value of the attribute.
         * @exception IllegalArgumentException thrown if the underlying
         * implementation doesn't recognize the attribute.
         */
        GetAttribute(
            [in] String name,
            [out] IInterface** attri);

        /**
         * <p>Set a feature for this <code>DocumentBuilderFactory</code> and <code>DocumentBuilder</code>s created by this factory.</p>
         *
         * <p>
         * Feature names are fully qualified {@link java.net.URI}s.
         * Implementations may define their own features.
         * An {@link ParserConfigurationException} is thrown if this <code>DocumentBuilderFactory</code> or the
         * <code>DocumentBuilder</code>s it creates cannot support the feature.
         * It is possible for an <code>DocumentBuilderFactory</code> to expose a feature value but be unable to change its state.
         * </p>
         *
         * <p>
         * All implementations are required to support the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature.
         * When the feature is:</p>
         * <ul>
         *   <li>
         *     <code>true</code>: the implementation will limit XML processing to conform to implementation limits.
         *     Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources.
         *     If XML processing is limited for security reasons, it will be reported via a call to the registered
         *    {@link org.xml.sax.ErrorHandler#fatalError(SAXParseException exception)}.
         *     See {@link  DocumentBuilder#setErrorHandler(org.xml.sax.ErrorHandler errorHandler)}.
         *   </li>
         *   <li>
         *     <code>false</code>: the implementation will processing XML according to the XML specifications without
         *     regard to possible implementation limits.
         *   </li>
         * </ul>
         *
         * @param name Feature name.
         * @param value Is feature state <code>true</code> or <code>false</code>.
         *
         * @throws ParserConfigurationException if this <code>DocumentBuilderFactory</code> or the <code>DocumentBuilder</code>s
         *   it creates cannot support this feature.
         * @throws NullPointerException If the <code>name</code> parameter is null.
         */
        SetFeature(
            [in] String name,
            [in] Boolean value);

        /**
         * <p>Get the state of the named feature.</p>
         *
         * <p>
         * Feature names are fully qualified {@link java.net.URI}s.
         * Implementations may define their own features.
         * An {@link ParserConfigurationException} is thrown if this <code>DocumentBuilderFactory</code> or the
         * <code>DocumentBuilder</code>s it creates cannot support the feature.
         * It is possible for an <code>DocumentBuilderFactory</code> to expose a feature value but be unable to change its state.
         * </p>
         *
         * @param name Feature name.
         *
         * @return State of the named feature.
         *
         * @throws ParserConfigurationException if this <code>DocumentBuilderFactory</code>
         *   or the <code>DocumentBuilder</code>s it creates cannot support this feature.
         */
        GetFeature(
            [in] String name,
            [out] Boolean* feature);

        /**
         * Gets the {@link Schema} object specified through
         * the {@link #setSchema(Schema schema)} method.
         *
         *
         * @throws UnsupportedOperationException
         *      For backward compatibility, when implementations for
         *      earlier versions of JAXP is used, this exception will be
         *      thrown.
         *
         * @return
         *      the {@link Schema} object that was last set through
         *      the {@link #setSchema(Schema)} method, or null
         *      if the method was not invoked since a {@link DocumentBuilderFactory}
         *      is created.
         *
         * @since 1.5
         */
        GetSchema(
            [out] ISchema** schema);

        /**
         * <p>Set the {@link Schema} to be used by parsers created
         * from this factory.
         *
         * <p>
         * When a {@link Schema} is non-null, a parser will use a validator
         * created from it to validate documents before it passes information
         * down to the application.
         *
         * <p>When errors are found by the validator, the parser is responsible
         * to report them to the user-specified {@link org.xml.sax.ErrorHandler}
         * (or if the error handler is not set, ignore them or throw them), just
         * like any other errors found by the parser itself.
         * In other words, if the user-specified {@link org.xml.sax.ErrorHandler}
         * is set, it must receive those errors, and if not, they must be
         * treated according to the implementation specific
         * default error handling rules.
         *
         * <p>
         * A validator may modify the outcome of a parse (for example by
         * adding default values that were missing in documents), and a parser
         * is responsible to make sure that the application will receive
         * modified DOM trees.
         *
         * <p>
         * Initially, null is set as the {@link Schema}.
         *
         * <p>
         * This processing will take effect even if
         * the {@link #isValidating()} method returns <tt>false</tt>.
         *
         * <p>It is an error to use
         * the <code>http://java.sun.com/xml/jaxp/properties/schemaSource</code>
         * property and/or the <code>http://java.sun.com/xml/jaxp/properties/schemaLanguage</code>
         * property in conjunction with a {@link Schema} object.
         * Such configuration will cause a {@link ParserConfigurationException}
         * exception when the {@link #newDocumentBuilder()} is invoked.</p>
         *
         *
         * <h4>Note for implementors</h4>
         * <p>
         * A parser must be able to work with any {@link Schema}
         * implementation. However, parsers and schemas are allowed
         * to use implementation-specific custom mechanisms
         * as long as they yield the result described in the specification.
         *
         * @param schema <code>Schema</code> to use or <code>null</code> to remove a schema.
         *
         * @throws UnsupportedOperationException
         *      For backward compatibility, when implementations for
         *      earlier versions of JAXP is used, this exception will be
         *      thrown.
         *
         * @since 1.5
         */
        SetSchema(
            [in] ISchema* schema);

        /**
         * <p>Set state of XInclude processing.</p>
         *
         * <p>If XInclude markup is found in the document instance, should it be
         * processed as specified in <a href="http://www.w3.org/TR/xinclude/">
         * XML Inclusions (XInclude) Version 1.0</a>.</p>
         *
         * <p>XInclude processing defaults to <code>false</code>.</p>
         *
         * @param state Set XInclude processing to <code>true</code> or
         *   <code>false</code>
         *
         * @throws UnsupportedOperationException
         *      For backward compatibility, when implementations for
         *      earlier versions of JAXP is used, this exception will be
         *      thrown.
         *
         * @since 1.5
         */
        SetXIncludeAware(
            [in] Boolean state);

        /**
         * <p>Get state of XInclude processing.</p>
         *
         * @return current state of XInclude processing
         *
         * @throws UnsupportedOperationException
         *      For backward compatibility, when implementations for
         *      earlier versions of JAXP is used, this exception will be
         *      thrown.
         *
         * @since 1.5
         */
        IsXIncludeAware(
            [out] Boolean* isXIncludeAware);
    }

    [local]
    interface IDocumentBuilderFactoryHelper {
        /**
         * Returns Android's implementation of {@code DocumentBuilderFactory}.
         * Unlike other Java implementations, this method does not consult system
         * properties, property files, or the services API.
         *
         * @return a new DocumentBuilderFactory.
         */
        NewInstance(
            [out] IDocumentBuilderFactory** instance);

        /**
         * Returns an instance of the named implementation of {@code DocumentBuilderFactory}.
         *
         * @throws FactoryConfigurationError if {@code factoryClassName} is not available or cannot be
         *     instantiated.
         * @since 1.6
         */
         NewInstanceEx(
            [in] String factoryClassName,
            [in] IClassLoader* classLoader,
            [out] IDocumentBuilderFactory** instance);
    }

    } // namespace Auth
    } // namespace Security
    } // namespace Elastosx
}
