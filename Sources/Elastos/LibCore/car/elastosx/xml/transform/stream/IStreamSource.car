
module
{
    interface Elastos.IO.IInputStream;
    interface Elastos.IO.IReader;
    interface Elastos.IO.IFile;

    namespace Elastosx {
    namespace Xml {
    namespace Transform {
    namespace Stream {

    /**
      * @Involve
      * interface Elastosx.Xml.Transform.ISource
      */
    interface IStreamSource {

    /** If {@link javax.xml.transform.TransformerFactory#getFeature}
     * returns true when passed this value as an argument,
     * the Transformer supports Source input of this type.
     */
        const String FEATURE = "http://javax.xml.transform.stream.StreamSource/feature";

    /**
     * Set the byte stream to be used as input.  Normally,
     * a stream should be used rather than a reader, so that
     * the XML parser can resolve character encoding specified
     * by the XML declaration.
     *
     * <p>If this Source object is used to process a stylesheet, normally
     * setSystemId should also be called, so that relative URL references
     * can be resolved.</p>
     *
     * @param inputStream A valid InputStream reference to an XML stream.
     */
        SetInputStream(
            [in] IInputStream* inputStream);

    /**
     * Get the byte stream that was set with setByteStream.
     *
     * @return The byte stream that was set with setByteStream, or null
     * if setByteStream or the ByteStream constructor was not called.
     */
        GetInputStream(
            [out] IInputStream** inputStream);

    /**
     * Set the input to be a character reader.  Normally,
     * a stream should be used rather than a reader, so that
     * the XML parser can resolve character encoding specified
     * by the XML declaration.  However, in many cases the encoding
     * of the input stream is already resolved, as in the case of
     * reading XML from a StringReader.
     *
     * @param reader A valid Reader reference to an XML CharacterStream.
     */
        SetReader(
            [in] IReader* reader);

    /**
     * Get the character stream that was set with setReader.
     *
     * @return The character stream that was set with setReader, or null
     * if setReader or the Reader constructor was not called.
     */
        GetReader(
            [out] IReader** reader);

    /**
     * Set the public identifier for this Source.
     *
     * <p>The public identifier is always optional: if the application
     * writer includes one, it will be provided as part of the
     * location information.</p>
     *
     * @param publicId The public identifier as a string.
     */
        SetPublicId(
            [in] String publicId);

    /**
     * Get the public identifier that was set with setPublicId.
     *
     * @return The public identifier that was set with setPublicId, or null
     * if setPublicId was not called.
     */
        GetPublicId(
            [out] String* publicId);

    /**
     * Set the system identifier for this Source.
     *
     * <p>The system identifier is optional if there is a byte stream
     * or a character stream, but it is still useful to provide one,
     * since the application can use it to resolve relative URIs
     * and can include it in error messages and warnings (the parser
     * will attempt to open a connection to the URI only if
     * there is no byte stream or character stream specified).</p>
     *
     * @param systemId The system identifier as a URL string.
     */
        SetSystemId(
            [in] String systemId);

    /**
     * Get the system identifier that was set with setSystemId.
     *
     * @return The system identifier that was set with setSystemId, or null
     * if setSystemId was not called.
     */
        GetSystemId(
            [out] String* systemId);

    /**
     * Set the system ID from a File reference.
     *
     * @param f Must a non-null File reference.
     */
        SetSystemId(
            [in] IFile* f);
    }

    } // namespace Stream
    } // namespace Transform
    } // namespace Xml
    } // namespace Elastosx
}

