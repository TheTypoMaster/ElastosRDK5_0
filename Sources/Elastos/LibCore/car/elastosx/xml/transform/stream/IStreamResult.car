
module
{
    interface Elastos.IO.IOutputStream;
    interface Elastos.IO.IWriter;
    interface Elastos.IO.IFile;

    namespace Elastosx {
    namespace Xml {
    namespace Transform {
    namespace Stream {

    /**
      * @Involve
      * interface Elastosx.Xml.Transform.IResult
      */
    interface IStreamResult {

        /** If {@link javax.xml.transform.TransformerFactory#getFeature}
         * returns true when passed this value as an argument,
         * the Transformer supports Result output of this type.
         */
        const String FEATURE = "http://javax.xml.transform.stream.StreamResult/feature";

        /**
         * Set the ByteStream that is to be written to.  Normally,
         * a stream should be used rather than a reader, so that
         * the transformer may use instructions contained in the
         * transformation instructions to control the encoding.
         *
         * @param outputStream A valid OutputStream reference.
         */
        SetOutputStream(
            [in] IOutputStream* outputStream);

        /**
         * Get the byte stream that was set with setOutputStream.
         *
         * @return The byte stream that was set with setOutputStream, or null
         * if setOutputStream or the ByteStream constructor was not called.
         */
        GetOutputStream(
            [out] IOutputStream** outputStream);

        /**
         * Set the writer that is to receive the result.  Normally,
         * a stream should be used rather than a writer, so that
         * the transformer may use instructions contained in the
         * transformation instructions to control the encoding.  However,
         * there are times when it is useful to write to a writer,
         * such as when using a StringWriter.
         *
         * @param writer  A valid Writer reference.
         */
        SetWriter(
            [in] IWriter* writer);

        /**
         * Get the character stream that was set with setWriter.
         *
         * @return The character stream that was set with setWriter, or null
         * if setWriter or the Writer constructor was not called.
         */
        GetWriter(
            [out] IWriter** writer);

        /**
         * Set the systemID that may be used in association
         * with the byte or character stream, or, if neither is set, use
         * this value as a writeable URI (probably a file name).
         *
         * @param systemId The system identifier as a URI string.
         */
        SetSystemId(
            [in] String systemId);

        /**
         * <p>Set the system ID from a <code>File</code> reference.</p>
         *
         * <p>Note the use of {@link File#toURI()} and {@link File#toURL()}.
         * <code>toURI()</code> is preferred and used if possible.
         * To allow JAXP 1.3 to run on J2SE 1.3, <code>toURL()</code>
         * is used if a {@link NoSuchMethodException} is thrown by the attempt
         * to use <code>toURI()</code>.</p>
         *
         * @param f Must a non-null File reference.
         */
        SetSystemId(
            [in] IFile* f);

        /**
         * Get the system identifier that was set with setSystemId.
         *
         * @return The system identifier that was set with setSystemId, or null
         * if setSystemId was not called.
         */
        GetSystemId(
            [out] String* id);
    }

    } // namespace Stream
    } // namespace Transform
    } // namespace Xml
    } // namespace Elastosx
}

