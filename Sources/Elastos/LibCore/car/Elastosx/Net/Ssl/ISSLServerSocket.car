
module
{
    namespace Elastosx {
    namespace Net {
    namespace Ssl {

    /**
     * The extension of {@code ServerSocket} which provides secure server sockets
     * based on protocols like SSL, TLS, or others.
     */
    [deprecated]
    interface ISSLServerSocket extends Elastos.Net.IServerSocket {
        /**
         * Returns the names of the enabled cipher suites to be used for new
         * connections.
         *
         * @return the names of the enabled cipher suites to be used for new
         *         connections.
         */
        GetEnabledCipherSuites(
            [out, callee] ArrayOf<String>* suites);

        /**
         * Sets the names of the cipher suites to be enabled for new connections.
         * Only cipher suites returned by {@link #getSupportedCipherSuites()} are
         * allowed.
         *
         * @param suites
         *            the names of the to be enabled cipher suites.
         * @throws IllegalArgumentException
         *             if one of the cipher suite names is not supported.
         */
        SetEnabledCipherSuites(
            [in] ArrayOf<String>* suites);

        /**
         * Returns the names of the supported cipher suites.
         *
         * @return the names of the supported cipher suites.
         */
        GetSupportedCipherSuites(
            [out, callee] ArrayOf<String>* suites);

        /**
         * Returns the names of the supported protocols.
         *
         * @return the names of the supported protocols.
         */
        GetSupportedProtocols(
            [out, callee] ArrayOf<String>* protocols);

        /**
         * Returns the names of the enabled protocols to be used for new
         * connections.
         *
         * @return the names of the enabled protocols to be used for new
         *         connections.
         */
        GetEnabledProtocols(
            [out, callee] ArrayOf<String>* protocols);

        /**
         * Sets the names of the protocols to be enabled for new connections. Only
         * protocols returned by {@link #getSupportedProtocols()} are allowed.
         *
         * @param protocols
         *            the names of the to be enabled protocols.
         * @throws IllegalArgumentException
         *             if one of the protocols is not supported.
         */
        SetEnabledProtocols(
            [in] ArrayOf<String>* protocols);

        /**
         * Sets whether server-mode connections will be configured to require client
         * authentication. The client authentication is one of the following:
         * <ul>
         * <li>authentication required</li>
         * <li>authentication requested</li>
         * <li>no authentication needed</li>
         * </ul>
         * This method overrides the setting of {@link #setWantClientAuth(boolean)}.
         *
         * @param need
         *            {@code true} if client authentication is required,
         *            {@code false} if no authentication is needed.
         */
        SetNeedClientAuth(
            [in] Boolean need);

        /**
         * Returns whether server-mode connections will be configured to require
         * client authentication.
         *
         * @return {@code true} if client authentication is required, {@code false}
         *         if no client authentication is needed.
         */
        GetNeedClientAuth(
            [out] Boolean* need);

        /**
         * Sets whether server-mode connections will be configured to request client
         * authentication. The client authentication is one of the following:
         * <ul>
         * <li>authentication required</li>
         * <li>authentication requested</li>
         * <li>no authentication needed</li>
         * </ul>
         * This method overrides the setting of {@link #setNeedClientAuth(boolean)}.
         *
         * @param want
         *            {@code true} if client authentication should be requested,
         *            {@code false} if no authentication is needed.
         */
        SetWantClientAuth(
            [in] Boolean want);

        /**
         * Returns whether server-mode connections will be configured to request
         * client authentication.
         *
         * @return {@code true} is client authentication will be requested,
         *         {@code false} if no client authentication is needed.
         */
        GetWantClientAuth(
            [out] Boolean* want);

        /**
         * Sets whether new connections should act in client mode when handshaking.
         *
         * @param mode
         *            {@code true} if new connections should act in client mode,
         *            {@code false} if not.
         */
        SetUseClientMode(
            [in] Boolean mode);

        /**
         * Returns whether new connection will act in client mode when handshaking.
         *
         * @return {@code true} if new connections will act in client mode when
         *         handshaking, {@code false} if not.
         */
         GetUseClientMode(
            [out] Boolean* mode);

        /**
         * Sets whether new SSL sessions may be established for new connections.
         *
         * @param flag
         *            {@code true} if new SSL sessions may be established,
         *            {@code false} if existing SSL sessions must be reused.
         */
        SetEnableSessionCreation(
            [in] Boolean flag);

        /**
         * Returns whether new SSL sessions may be established for new connections.
         *
         * @return {@code true} if new SSL sessions may be established,
         *         {@code false} if existing SSL sessions must be reused.
         */
        GetEnableSessionCreation(
            [out] Boolean* enabled);
    }

    } // namespace Ssl
    } // namespace Net
    } // namespace Elastosx
}