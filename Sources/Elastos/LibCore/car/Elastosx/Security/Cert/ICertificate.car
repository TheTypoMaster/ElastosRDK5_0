
module
{
    interface Elastos.Security.IPublicKey;

    namespace Elastosx {
    namespace Security {
    namespace Cert {

    interface ICertificate {
        /**
         * Compares the argument to this Certificate. If both have the same bytes
         * they are assumed to be equal.
         *
         * @param obj
         *            the {@code Certificate} to compare with this object
         * @return <code>true</code> if {@code obj} is the same as this
         *         {@code Certificate}, <code>false</code> otherwise
         * @see #hashCode
         */
        Equals(
            [in] IInterface* obj,
            [out] Boolean* isEqual);

        /**
         * Returns an integer hash code for the receiver. Any two objects which
         * return <code>true</code> when passed to <code>equals</code> must answer
         * the same value for this method.
         *
         * @return the receiver's hash
         * @see #equals
         */
        GetHashCode(
            [out] Int32* hashCode);

        /**
         * Returns the encoded representation for this certificate.
         *
         * @return the encoded representation for this certificate.
         * @throws CertificateEncodingException
         *             if encoding fails.
         */
        GetEncoded(
            [out, callee] ArrayOf<Byte>* encode);

        /**
         * Verifies that this certificate was signed with the given public key.
         *
         * @param key
         *            public key for which verification should be performed.
         * @throws CertificateException
         *             if encoding errors are detected
         * @throws NoSuchAlgorithmException
         *             if an unsupported algorithm is detected
         * @throws InvalidKeyException
         *             if an invalid key is detected
         * @throws NoSuchProviderException
         *             if there is no default provider
         * @throws SignatureException
         *             if signature errors are detected
         */
        Verify(
            [in] IPublicKey* key);


        /**
         * Verifies that this certificate was signed with the given public key. Uses
         * the signature algorithm given by the provider.
         *
         * @param key
         *            public key for which verification should be performed.
         * @param sigProvider
         *            the name of the signature provider.
         * @exception CertificateException
         *                if encoding errors are detected
         * @exception NoSuchAlgorithmException
         *                if an unsupported algorithm is detected
         * @exception InvalidKeyException
         *                if an invalid key is detected
         * @exception NoSuchProviderException
         *                if the specified provider does not exists.
         * @exception SignatureException
         *                if signature errors are detected
         */
        VerifyEx(
            [in] IPublicKey* key,
            [in] String sigProvider);

        /**
         * Returns a string containing a concise, human-readable description of the
         * receiver.
         *
         * @return a printable representation for the receiver.
         */
        ToString(
            [out] String* str);

        /**
         * Returns the public key corresponding to this certificate.
         *
         * @return the public key corresponding to this certificate.
         */
        GetPublicKey(
            [out] IPublicKey** pubkey);
    }

    } // namespace Auth
    } // namespace Security
    } // namespace Elastosx
}
