
module
{
    merge("net/Exceptions.car");
    merge("net/IAuthenticator.car");
    merge("net/ICacheRequest.car");
    merge("net/ICacheResponse.car");
    merge("net/IContentHandler.car");
    merge("net/IContentHandlerFactory.car");
    merge("net/ICookieHandler.car");
    merge("net/IURLStreamHandler.car");
    merge("net/IURLStreamHandlerFactory.car");
    merge("net/IURI.car");
    merge("net/IURL.car");
    merge("net/ICookieManager.car");
    merge("net/ICookiePolicy.car");
    merge("net/ICookieStore.car");
    merge("net/IDatagramPacket.car");
    merge("net/IDatagramSocket.car");
    merge("net/ISocketOptions.car");
    merge("net/IDatagramSocketImpl.car");
    merge("net/IDatagramSocketImplFactory.car");
    merge("net/IResponseCache.car");
    merge("net/IURLConnection.car");
    merge("net/IHttpURLConnection.car");
    merge("net/IFileNameMap.car");
    merge("net/IHttpCookie.car");
    merge("net/IIDN.car");
    merge("net/IInetAddress.car");
    merge("net/ISocketAddress.car");
    merge("net/IInetSocketAddress.car");
    merge("net/IInterfaceAddress.car");
    merge("net/IMulticastSocket.car");
    merge("net/INetworkInterface.car");
    merge("net/IPasswordAuthentication.car");
    merge("net/IPlainDatagramSocketImpl.car");
    merge("net/ISocketImpl.car");
    merge("net/IPlainSocketImpl.car");
    merge("net/IPlainServerSocketImpl.car");
    merge("net/IProxy.car");
    merge("net/IProxySelector.car");
    merge("net/ISecureCacheResponse.car");
    merge("net/IServerSocket.car");
    merge("net/ISocket.car");
    merge("net/ISocketImplFactory.car");
    merge("net/ISocks4Message.car");
    merge("net/IURLEncoder.car");
    merge("net/IURLDecoder.car");
    merge("net/IJarURLConnection.car");
    merge("net/INetPermission.car");

    merge("../elastosx/net/ISocketFactory.car");
    merge("../elastosx/net/IServerSocketFactory.car");

    merge("../elastosx/net/ssl/IKeyManager.car");
    merge("../elastosx/net/ssl/IManagerFactoryParameters.car");
    merge("../elastosx/net/ssl/ITrustManager.car");
    merge("../elastosx/net/ssl/ISSLSession.car");
    merge("../elastosx/net/ssl/ISSLSessionContext.car");
    merge("../elastosx/net/ssl/ISSLEngineResult.car");
    merge("../elastosx/net/ssl/ISSLEngine.car");
    merge("../elastosx/net/ssl/ISSLParameters.car");
    merge("../elastosx/net/ssl/IHandshakeCompletedListener.car");
    merge("../elastosx/net/ssl/IHandshakeCompletedEvent.car");
    merge("../elastosx/net/ssl/ISSLSocket.car");
    merge("../elastosx/net/ssl/IX509TrustManager.car");
    merge("../elastosx/net/ssl/ISSLContextSpi.car");
    merge("../elastosx/net/ssl/ISSLSocketFactory.car");
    merge("../elastosx/net/ssl/ISSLServerSocketFactory.car");
    merge("../elastosx/net/ssl/IX509KeyManager.car");
    merge("../elastosx/net/ssl/IX509ExtendedKeyManager.car");
    merge("../elastosx/net/ssl/IKeyManagerFactorySpi.car");
    merge("../elastosx/net/ssl/ISSLServerSocket.car");
    merge("../elastosx/net/ssl/ITrustManagerFactorySpi.car");

    interface Elastos.Core.IComparable;
    interface Elastos.IO.ISerializable;

    namespace Elastos {
    namespace Net {

    singleton class CIDN {
        interface IIDN;
    }

    [deprecated]
    class CInet4Address {
        constructor(
            [in] ArrayOf<Byte>* address,
            [in] String hostName);

        interface IInet4Address;
        interface IInetAddress;
        interface ISerializable;
    }

    [deprecated]
    class CInet6Address {
        constructor(
            [in] ArrayOf<Byte>* address,
            [in] String hostName,
            [in] Int32 scope_id);

        interface IInet6Address;
        interface IInetAddress;
        interface ISerializable;
    }

    singleton class CNetworkInterfaceHelper {
        interface INetworkInterfaceHelper;
    }

    class CURI {
        /* private */
        constructor();

        /**
         * Creates a new URI instance by parsing {@code spec}.
         *
         * @param spec a URI whose illegal characters have all been encoded.
         */
        constructor(
            [in] String spec);

        /**
         * Creates a new URI instance of the given unencoded component parts.
         *
         * @param scheme the URI scheme, or null for a non-absolute URI.
         */
        constructor(
            [in] String scheme,
            [in] String schemeSpecificPart,
            [in] String fragment);

        /**
         * Creates a new URI instance of the given unencoded component parts.
         *
         * @param scheme the URI scheme, or null for a non-absolute URI.
         */
        constructor(
            [in] String scheme,
            [in] String userInfo,
            [in] String host,
            [in] Int32 port,
            [in] String path,
            [in] String query,
            [in] String fragment);

        /**
         * Creates a new URI instance of the given unencoded component parts.
         *
         * @param scheme the URI scheme, or null for a non-absolute URI.
         */
        constructor(
            [in] String scheme,
            [in] String host,
            [in] String path,
            [in] String fragment);

        /**
         * Creates a new URI instance of the given unencoded component parts.
         *
         * @param scheme the URI scheme, or null for a non-absolute URI.
         */
        constructor(
            [in] String scheme,
            [in] String authority,
            [in] String path,
            [in] String query,
            [in] String fragment);

        interface IURI;
        interface IComparable;
        interface ISerializable;
    }

    class CURL {
        /**
         * Creates a new URL instance by parsing {@code spec}.
         *
         * @throws MalformedURLException if {@code spec} could not be parsed as a
         *     URL.
         */
        constructor(
            [in] String spec);

        /**
         * Creates a new URL by resolving {@code spec} relative to {@code context}.
         *
         * @param context the URL to which {@code spec} is relative, or null for
         *     no context in which case {@code spec} must be an absolute URL.
         * @throws MalformedURLException if {@code spec} could not be parsed as a
         *     URL or has an unsupported protocol.
         */
        constructor(
            [in] IURL* context,
            [in] String spec);

        /**
         * Creates a new URL by resolving {@code spec} relative to {@code context}.
         *
         * @param context the URL to which {@code spec} is relative, or null for
         *     no context in which case {@code spec} must be an absolute URL.
         * @param handler the stream handler for this URL, or null for the
         *     protocol's default stream handler.
         * @throws MalformedURLException if the given string {@code spec} could not
         *     be parsed as a URL or an invalid protocol has been found.
         */
        constructor(
            [in] IURL* context,
            [in] String spec,
            [in] IURLStreamHandler* handler);

        /**
         * Creates a new URL of the given component parts. The URL uses the
         * protocol's default port.
         *
         * @throws MalformedURLException if the combination of all arguments do not
         *     represent a valid URL or if the protocol is invalid.
         */
        constructor(
            [in] String protocol,
            [in] String host,
            [in] String file);

        /**
         * Creates a new URL of the given component parts. The URL uses the
         * protocol's default port.
         *
         * @param host the host name or IP address of the new URL.
         * @param port the port, or {@code -1} for the protocol's default port.
         * @param file the name of the resource.
         * @throws MalformedURLException if the combination of all arguments do not
         *     represent a valid URL or if the protocol is invalid.
         */
        constructor(
            [in] String protocol,
            [in] String host,
            [in] Int32 port,
            [in] String file);

        /**
         * Creates a new URL of the given component parts. The URL uses the
         * protocol's default port.
         *
         * @param host the host name or IP address of the new URL.
         * @param port the port, or {@code -1} for the protocol's default port.
         * @param file the name of the resource.
         * @param handler the stream handler for this URL, or null for the
         *     protocol's default stream handler.
         * @throws MalformedURLException if the combination of all arguments do not
         *     represent a valid URL or if the protocol is invalid.
         */
        constructor(
            [in] String protocol,
            [in] String host,
            [in] Int32 port,
            [in] String file,
            [in] IURLStreamHandler* handler);

        interface IURL;
        interface ISerializable;
    }



    } //Net
    } // Elastos
}