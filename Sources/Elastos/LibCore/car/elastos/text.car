
module
{
    merge("text/ICharacterIterator.car");
    merge("text/ICollationKey.car");
    merge("text/IStringCharacterIterator.car");
    merge("text/IDecimalFormatSymbols.car");
    merge("text/IFieldPosition.car");
    merge("text/IParsePosition.car");
    merge("text/IAttributedCharacterIterator.car");
    merge("text/IAttributedString.car");

    merge("text/Exceptions.car");
    merge("text/IAnnotation.car");
    merge("text/IFormat.car");
    merge("text/IDateFormat.car");
    merge("text/IDateFormatSymbols.car");
    merge("text/INumberFormat.car");
    merge("text/IMessageFormat.car");
    merge("text/IChoiceFormat.car");
    merge("text/IDecimalFormat.car");
    merge("text/ISimpleDateFormat.car");
    merge("text/IBreakIterator.car");
    merge("text/ICollator.car");
    merge("text/ICollationElementIterator.car");
    merge("text/IRuleBasedCollator.car");
    merge("text/INormalizer.car");
    merge("text/IBidi.car");

    merge("text/spi/IBreakIteratorProvider.car");
    merge("text/spi/ICollatorProvider.car");
    merge("text/spi/IDateFormatProvider.car");
    merge("text/spi/IDateFormatSymbolsProvider.car");
    merge("text/spi/IDecimalFormatSymbolsProvider.car");
    merge("text/spi/INumberFormatProvider.car");

    interface Elastos.Text.IAnnotation;
    interface Elastos.Text.IAttributedCharacterIteratorAttribute;
    interface Elastos.IO.ISerializable;
    interface Libcore.ICU.INativeBreakIterator;

    namespace Elastos {
    namespace Text {

    class CAnnotation {
        constructor(
            [in] IInterface* attribute);

        interface IAnnotation;
    }

    class CAttributedCharacterIteratorAttribute {
        constructor(
            [in] String name);

        interface IAttributedCharacterIteratorAttribute;
        interface ISerializable;
    }

    [deprecated]
    class CBidi {
        constructor(
            [in] IAttributedCharacterIterator* paragraph);

        constructor(
            [in] ArrayOf<Char32>* text,
            [in] Int32 textStart,
            [in] ArrayOf<Byte>* embeddings,
            [in] Int32 embStart,
            [in] Int32 paragraphLength,
            [in] Int32 flags);

        constructor(
            [in] String paragraph,
            [in] Int32 flags);

        constructor(
            [in] Int64 pBidi);

        interface IBidi;
    }

    singleton class CBidiHelper {
        interface IBidiHelper;
    }

    [deprecated]
    class CRuleBasedBreakIterator {
        constructor(
            [in] INativeBreakIterator * iterator);

        interface IBreakIterator;
    }

    class CFieldPosition {
        constructor(
            [in] Int32 field);

        constructor(
            [in] IAttributedCharacterIteratorAttribute* attribute);

        constructor(
            [in] IAttributedCharacterIteratorAttribute* attribute,
            [in] Int32 field);

        interface IFieldPosition;
    }

    class CParsePosition {
        constructor(
            [in] Int32 index);

        interface IParsePosition;
    }

    [deprecated]
    class CAttributedString {
        constructor(
            [in] IAttributedCharacterIterator* iterator);

        constructor(
            [in] IAttributedCharacterIterator* iterator,
            [in] Int32 start,
            [in] Int32 end);

        constructor(
            [in] IAttributedCharacterIterator* iterator,
            [in] Int32 start,
            [in] Int32 end,
            [in] ArrayOf<IAttributedCharacterIteratorAttribute*>* attributes);

        constructor(
            [in] String value);

        // constructor(
        //     [in] String value,
        //     [in] IObjectMap * attributes);

        interface IAttributedString;
    }

    [deprecated]
    class CChoiceFormat {
        constructor(
            [in] ArrayOf<Double> limits,
            [in] ArrayOf<String> formats);

        constructor(
            [in] String tem);

        interface IChoiceFormat;
    }

    singleton class CChoiceFormatHelper {
        interface IChoiceFormatHelper;
    }

    class CNumberFormatField {
        constructor(
            [in] String fieldName);

        interface INumberFormatField;
    }

    singleton class CNumberFormatHelper {
        interface INumberFormatHelper;
    }

    class CDecimalFormat {
        constructor();

        constructor(
            [in] String pattern);

        constructor(
            [in] String pattern,
            [in] IDecimalFormatSymbols* value);

        constructor(
            [in] String pattern,
            [in] ILocale* locale);

        interface IDecimalFormat;
    }

    class CDecimalFormatSymbols {
        constructor();

        constructor(
            [in] ILocale* locale);

        interface IDecimalFormatSymbols;
    }

    singleton class CDecimalFormatSymbolsHelper {
        interface IDecimalFormatSymbolsHelper;
    }

    } // Text
    } // Elastos

}