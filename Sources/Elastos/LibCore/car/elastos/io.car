module
{
    merge("io/ICloseable.car");
    merge("io/IFlushable.car");
    merge("io/IInputStream.car");
    merge("io/IFilterInputStream.car");
    merge("io/IBufferedInputStream.car");
    merge("io/IOutputStream.car");
    merge("io/IFilterOutputStream.car");
    merge("io/IBufferedOutputStream.car");
    merge("io/IReadable.car");
    merge("io/IReader.car");
    merge("io/IBufferedReader.car");
    merge("io/IWriter.car");
    merge("io/IBufferedWriter.car");
    merge("io/IByteArrayInputStream.car");
    merge("io/IByteArrayOutputStream.car");
    merge("io/ICharArrayReader.car");
    merge("io/ICharArrayWriter.car");
    merge("io/IDataInput.car");
    merge("io/IDataInputStream.car");
    merge("io/IDataOutput.car");
    merge("io/IDataOutputStream.car");
    merge("io/IFile.car");
    merge("io/IFileDescriptor.car");
    merge("io/IFileFilter.car");
    merge("io/IFileInputStream.car");
    merge("io/IFileOutputStream.car");
    merge("io/IFilePermission.car");
    merge("io/IInputStreamReader.car");
    merge("io/IFileReader.car");
    merge("io/IOutputStreamWriter.car");
    merge("io/IFileWriter.car");
    merge("io/IFilenameFilter.car");
    merge("io/IFilterReader.car");
    merge("io/IFilterWriter.car");
    merge("io/ILineNumberInputStream.car");
    merge("io/ILineNumberReader.car");
    merge("io/IObjectInput.car");
    merge("io/IObjectInputStream.car");
    merge("io/IObjectInputValidation.car");
    merge("io/IObjectOutput.car");
    merge("io/IObjectOutputStream.car");
    //merge("io/ISerializable.car"); moved to core.car
    merge("io/IObjectStreamClass.car");
    merge("io/IObjectStreamField.car");
    merge("io/IPrintStream.car");
    merge("io/IPrintWriter.car");
    merge("io/IPushbackInputStream.car");
    merge("io/IPushbackReader.car");
    merge("io/IRandomAccessFile.car");
    merge("io/ISequenceInputStream.car");
    merge("io/IStreamTokenizer.car");
    merge("io/IStringBufferInputStream.car");
    merge("io/IStringReader.car");
    merge("io/IStringWriter.car");
    merge("io/Errors.car");
    merge("io/Exceptions.car");

    merge("io/ByteOrder.car");
    merge("io/IBuffer.car");
    merge("io/IByteBuffer.car");
    merge("io/ICharBuffer.car");
    merge("io/IDoubleBuffer.car");
    merge("io/IFloatBuffer.car");
    merge("io/IInt16Buffer.car");
    merge("io/IInt32Buffer.car");
    merge("io/IInt64Buffer.car");
    merge("io/IIoUtils.car");
    merge("io/IUnsafeByteSequence.car");
    merge("io/IMappedByteBuffer.car");
    merge("io/INIOAccess.car");

    merge("io/IFileDescriptorChannel.car");
    merge("io/ISelectorImpl.car");
    merge("io/ISelectionKeyImpl.car");
    merge("io/IPipeImpl.car");
    merge("io/IFileChannelImpl.car");

    merge("io/INativeConverterHelper.car");

    merge("io/channels/IChannel.car");
    merge("io/channels/IReadableByteChannel.car");
    merge("io/channels/IWritableByteChannel.car");
    merge("io/channels/IChannels.car");
    merge("io/channels/IScatteringByteChannel.car");
    merge("io/channels/IGatheringByteChannel.car");

    merge("io/channels/IInterruptibleChannel.car");
    merge("io/channels/IFileChannel.car");
    merge("io/channels/ISelectableChannel.car");
    merge("io/channels/ISelectionKey.car");
    merge("io/channels/ISelector.car");
    merge("io/channels/ISocketChannel.car");
    merge("io/channels/IServerSocketChannel.car");

    merge("io/channels/IDatagramChannel.car");
    merge("io/channels/ISinkChannel.car");
    merge("io/channels/ISourceChannel.car");
    merge("io/channels/IPipe.car");
    merge("io/channels/IFileLock.car");

    merge("io/channels/spi/ISelectorProvider.car");
    merge("io/channels/spi/IAbstractSelector.car");

    merge("io/charset/ICharset.car");
    merge("io/charset/ICoderResult.car");
    merge("io/charset/ICharsetDecoder.car");
    merge("io/charset/ICharsetEncoder.car");
    merge("io/charset/ICodingErrorAction.car");
    merge("io/charset/ICharsets.car");
    merge("io/charset/IModifiedUtf8.car");

    merge("io/charset/spi/ICharsetProvider.car");

    interface Elastos.Core.IAppendable;
    interface Elastos.Core.IComparable;

    interface Elastos.IO.Channels.Spi.ISelectorProvider;
    interface Elastos.IO.Channels.Spi.IAbstractSelector;
    interface Elastos.IO.Channels.IChannels;
    interface Elastos.IO.Channels.ISelector;
    interface Libcore.IO.IStreams;
    interface Elastos.IO.ICloseable;
    interface Elastos.Net.IURI;
    interface Elastos.Utility.IObjectEnumerator;
    interface Elastos.Security.IGuard;

    //
    // nio releated classes
    //
    interface Elastos.IO.IByteOrderHelper;

    namespace Elastos {
    namespace IO {

    class CBufferedInputStream {
        constructor(
            [in] IInputStream* is,
            [in] Int32 size);

        interface IBufferedInputStream;
        interface ICloseable;
        interface IInputStream;
        interface IFilterInputStream;
    }

    class CSelectorProviderImpl {
        constructor();

        interface ISelectorProvider;
    }

    // singleton class CStreams {
    //     interface IStreams;
    // }

    class CByteArrayOutputStream {
        /**
         * Constructs a new ByteArrayOutputStream with a default size of 32 bytes.
         * If more than 32 bytes are written to this instance, the underlying byte
         * array will expand.
         */
        constructor();

        /**
         * Constructs a new {@code ByteArrayOutputStream} with a default size of
         * {@code size} bytes. If more than {@code size} bytes are written to this
         * instance, the underlying byte array will expand.
         *
         * @param size
         *            initial size for the underlying byte array, must be
         *            non-negative.
         * @throws IllegalArgumentException
         *             if {@code size} < 0.
         */
        constructor(
            [in] Int32 size);

        interface IByteArrayOutputStream;
        interface IFlushable;
    }

    class CStringWriter {
        /**
         * Constructs a new {@code StringWriter} which has a {@link StringBuffer}
         * allocated with the default size of 16 characters. The {@code
         * StringBuffer} is also the {@code lock} used to synchronize access to this
         * writer.
         */
        constructor();

        /**
         * Constructs a new {@code StringWriter} which has a {@link StringBuffer}
         * allocated with a size of {@code initialSize} characters. The {@code
         * StringBuffer} is also the {@code lock} used to synchronize access to this
         * writer.
         *
         * @param initialSize
         *            the intial size of the target string buffer.
         */
        constructor(
            [in] Int32 initialSize);

        interface IWriter;
        interface IStringWriter;
        interface ICloseable;
        interface IFlushable;
    }

    class CFilterInputStream {
        constructor(
            [in] IInputStream* is);

        interface IFilterInputStream;
        interface ICloseable;
        interface IInputStream;
    }

    class CBufferedOutputStream {
        constructor(
            [in] IOutputStream* outs,
            [in] Int32 size);

        constructor(
            [in] IOutputStream* outs);

        interface IBufferedOutputStream;
        interface ICloseable;
        interface IOutputStream;
        interface IFilterOutputStream;
    }

    class CFilterOutputStream {
        constructor(
            [in] IOutputStream* outs);

        interface IFilterOutputStream;
        interface ICloseable;
        interface IOutputStream;
    }

    class CBufferedReader {
        constructor(
            [in] IReader* rin);

        interface IBufferedReader;
        interface IReadable;
        interface IReader;
    }

    class CBufferedWriter {
        constructor(
            [in] IWriter* wout);

        constructor(
            [in] IWriter* wout,
            [in] Int32 size);

        interface IAppendable;
        interface IWriter;
        interface IBufferedWriter;
    }

    [deprecated]
    class CByteArrayInputStream {
        constructor(
            [in] ArrayOf<Byte>* buffer);

        constructor(
            [in] ArrayOf<Byte>* buffer,
            [in] Int32 offset,
            [in] Int32 length);

        interface ICloseable;
        interface IInputStream;
        interface IByteArrayInputStream;
    }

    [deprecated]
    class CCharArrayReader {
        constructor(
            [in] ArrayOf<Char32>* buf);

        constructor(
            [in] ArrayOf<Char32>* buf,
            [in] Int32 offset,
            [in] Int32 length);

        interface IReadable;
        interface IReader;
        interface ICharArrayReader;
    }

    class CCharArrayWriter {
        constructor();

        constructor(
            [in] Int32 initialSize);

        interface IAppendable;
        interface IWriter;
        interface ICharArrayWriter;
    }

    class CDataInputStream {
        constructor(
            [in] IInputStream* is);

        interface ICloseable;
        interface IInputStream;
        interface IFilterInputStream;
        interface IDataInputStream;
    }

    class CPushbackInputStream {
        constructor(
            [in] IInputStream* is);

        constructor(
            [in] IInputStream* is,
            [in] Int32 size);

        interface ICloseable;
        interface IInputStream;
        interface IFilterInputStream;
        interface IPushbackInputStream;
    }

    class CDataOutputStream {
        constructor(
            [in] IOutputStream* os);

        interface ICloseable;
        interface IOutputStream;
        interface IFilterOutputStream;
        interface IDataOutputStream;
    }

    singleton class CByteBufferHelper {
        interface IByteBufferHelper;
    }

    singleton class CByteOrderHelper {
        interface IByteOrderHelper;
    }

    class CSelectorImpl {
        constructor();

        constructor(
            [in] ISelectorProvider* selectorProvider);

        interface ISelectorImpl;
        interface IAbstractSelector;
        interface ISelector;
    }

    [deprecated]
    class CByteArrayBuffer {
        constructor(
            [in] ArrayOf<Byte>* backingArray);

        constructor(
            [in] Int32 capacity,
            [in] ArrayOf<Byte>* backingArray,
            [in] Int32 arrayOffset,
            [in] Boolean isReadOnly);

        interface IByteBuffer;
        interface IBuffer;
        interface IComparable;

    }

    class CFileDescriptor {
        constructor();

        interface IFileDescriptor;
    }

//    class CFile {
//        constructor(
//            [in] IFile* dir,
//            [in] String name);

//        constructor(
//            [in] String path);

//        constructor(
//            [in] String dirPath,
//            [in] String name);

//        constructor(
//            [in] IURI* uri);

//        interface IFile;
//    }

//    class CInputStreamReader {
//        constructor(
//            [in] IInputStream *is);

//        constructor(
//            [in] IInputStream *is,
//            [in] String enc);

//        constructor(
//            [in] IInputStream* is,
//            [in] ICharset* charset);

//        interface IReadable;
//        interface IReader;
//        interface IInputStreamReader;
//    }

    namespace Channels {

        class CChannels {
            constructor();

            interface IChannels;
        }

    } // namespace Channels

    namespace Charset {

        class CCodingErrorAction {
            constructor();

            interface ICodingErrorAction;
        }

        singleton class CCharsetHelper {
            interface ICharsetHelper;
        }

        class CCoderResult {
            constructor();

            interface ICoderResult;
        }

        singleton class CCoderResultHelper {
            interface ICoderResultHelper;
        }

    } // namespace Charset

//    class CPrintWriter {
//        constructor(
//            [in] IOutputStream* outs);

//        constructor(
//            [in] IOutputStream* outs,
//            [in] Boolean autoflush);

//        constructor(
//            [in] IWriter* wr);

//        constructor(
//            [in] IWriter* wr,
//            [in] Boolean autoflush);

//        constructor(
//            [in] IFile* file);

//        constructor(
//            [in] IFile* file,
//            [in] String csn);

//        constructor(
//            [in] String fileName);

//        constructor(
//            [in] String fileName,
//            [in] String csn);

//        interface IAppendable;
//        interface IWriter;
//        interface IPrintWriter;
//    }

    class CLineNumberInputStream {
        constructor(
            [in] IInputStream* is);

        interface ICloseable;
        interface IInputStream;
        interface IFilterInputStream;
        interface ILineNumberInputStream;
    }

    class CLineNumberReader {
        constructor(
            [in] IReader* ir);

        constructor(
            [in] IReader* ir,
            [in] Int32 size);

        interface IReadable;
        interface IReader;
        interface IBufferedReader;
        interface ILineNumberReader;
    }

    class COutputStreamWriter {
        constructor(
            [in] IOutputStream *os);

        constructor(
            [in] IOutputStream *os,
            [in] String enc);

        interface IAppendable;
        interface IWriter;
        interface IOutputStreamWriter;
    }

//    class CPrintStream {
//        constructor(
//            [in] IOutputStream* outs);

//        constructor(
//            [in] IOutputStream* outs,
//            [in] Boolean autoflush);

//        constructor(
//            [in] IOutputStream* outs,
//            [in] Boolean autoflush,
//            [in] String enc);

//        constructor(
//            [in] IFile* file);

//        constructor(
//            [in] IFile* file,
//            [in] String csn);

//        constructor(
//            [in] String fileName);

//        constructor(
//            [in] String fileName,
//            [in] String csn);

//        interface ICloseable;
//        interface IOutputStream;
//        interface IFilterOutputStream;
//        interface IPrintStream;
//    }

    class CPushbackReader {
        constructor(
            [in] IReader* ir);

        constructor(
            [in] IReader* ir,
            [in] Int32 size);

        interface IReadable;
        interface IReader;
        interface IPushbackReader;
    }

//    class CRandomAccessFile {
//        constructor(
//            [in] IFile* file,
//            [in] String mode);

//        constructor(
//            [in] String fileName,
//            [in] String mode);

//        interface ICloseable;
//        interface IRandomAccessFile;
//    }

//    class CSequenceInputStream {
//        constructor(
//            [in] IInputStream* s1,
//            [in] IInputStream* s2);

//        constructor(
//            [in] IObjectEnumerator* e);

//        interface ICloseable;
//        interface IInputStream;
//        interface ISequenceInputStream;
//    }

    class CStringBufferInputStream {
        constructor(
            [in] String str);

        interface ICloseable;
        interface IInputStream;
        interface IStringBufferInputStream;
    }

    class CStringReader {
        constructor(
            [in] String str);

        interface IReadable;
        interface IReader;
        interface IStringReader;
    }

//    class CFileInputStream {
//        constructor(
//            [in] IFile* file);

//        constructor(
//            [in] IFileDescriptor* fd);

//        constructor(
//            [in] String fileName);

//        interface ICloseable;
//        interface IInputStream;
//        interface IFileInputStream;
//    }

//    class CFileOutputStream {
//        constructor(
//            [in] IFile* file);

//        constructor(
//            [in] IFile* file,
//            [in] Boolean append);

//        constructor(
//            [in] IFileDescriptor* fd);

//        constructor(
//            [in] String fileName);

//        constructor(
//            [in] String fileName,
//            [in] Boolean append);

//        interface ICloseable;
//        interface IOutputStream;
//        interface IFileOutputStream;
//    }

//    class CFilePermission {
//        constructor(
//            [in] String path,
//            [in] String actions);

//        interface IGuard;
//        interface IPermission;
//        interface IFilePermission;
//    }

    } // namespace IO
    } // namespace Elastos
}
