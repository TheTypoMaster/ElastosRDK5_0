
module
{
    namespace Elastos {
    namespace IO {

    /*
     * Defines an interface for classes that allow writing serialized objects.
     *
     * @implement Elastos.IO.IDataOutput
     * @sa IObjectOutputStream
     * @sa IObjectInput
     *
     */

     /**
     * @Involve
     * interface IDataOutput;
     */
    interface IObjectOutput {
        /**
         * Closes the target stream. Implementations of this method should free any
         * resources used by the stream.
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if an error occurs while closing the target stream.
         */
        Close();

        /**
         * Flushes the target stream. Implementations of this method should ensure
         * that any pending writes are written out to the target stream.
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if an error occurs while flushing the target stream.
         */
        Flush();

        /**
         * Writes the specified object {obj} to the target stream.
         *
         * @param obj
         *            the object to write.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if an error occurs while writing to the target stream.
         */
        WriteObject(
            [in] IInterface* obj);
    }

    } // namespace IO
    } // namespace Elastos
}