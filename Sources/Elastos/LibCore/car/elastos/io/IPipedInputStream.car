module
{
    interface IPipedOutputStream;

    namespace Elastos {
    namespace IO {

    /**
     * Receives information from a communications pipe. When two threads want to
     * pass data back and forth, one creates a piped output stream and the other one
     * creates a piped input stream.
     *
     * @see PipedOutputStream
     */
    /**
     * @Involve
     * interface ICloseable;
     * interface IInputStream
     */
    [deprecated]
    interface IPipedInputStream {
        /**
         * {@inheritDoc}
         *
         * <p>Unlike most streams, {@code PipedInputStream} returns 0 rather than throwing
         * {@code IOException} if the stream has been closed. Unconnected and broken pipes also
         * return 0.
         *
         * @throws IOException if an I/O error occurs
         */
        // @Override
        Available(
            [out] Int32* rev);

        /**
         * Closes this stream. This implementation releases the buffer used for the
         * pipe and notifies all threads waiting to read or write.
         *
         * @throws IOException
         *             if an error occurs while closing this stream.
         */
        // @Override
        Close();

        /**
         * Connects this {@code PipedInputStream} to a {@link PipedOutputStream}.
         * Any data written to the output stream becomes readable in this input
         * stream.
         *
         * @param src
         *            the source output stream.
         * @throws IOException
         *             if either stream is already connected.
         */
        Connect(
            [in] IPipedOutputStream* src);

        /**
         * Establishes the connection to the PipedOutputStream.
         *
         * @throws IOException
         *             If this Reader is already connected.
         */
        EstablishConnection();

        /**
         * Reads a single byte from this stream and returns it as an integer in the
         * range from 0 to 255. Returns -1 if the end of this stream has been
         * reached. If there is no data in the pipe, this method blocks until data
         * is available, the end of the stream is detected or an exception is
         * thrown.
         * <p>
         * Separate threads should be used to read from a {@code PipedInputStream}
         * and to write to the connected {@link PipedOutputStream}. If the same
         * thread is used, a deadlock may occur.
         *
         * @return the byte read or -1 if the end of the source stream has been
         *         reached.
         * @throws IOException
         *             if this stream is closed or not connected to an output
         *             stream, or if the thread writing to the connected output
         *             stream is no longer alive.
         */
        // @Override
        Read(
            [out] Int32* rev);

        /**
         * Reads up to {@code byteCount} bytes from this stream and stores them in the
         * byte array {@code bytes} starting at {@code byteOffset}. Blocks until at
         * least one byte has been read, the end of the stream is detected or an
         * exception is thrown.
         *
         * <p>Separate threads should be used to read from a {@code PipedInputStream}
         * and to write to the connected {@link PipedOutputStream}. If the same
         * thread is used, a deadlock may occur.
         *
         * <p>Returns the number of bytes actually read or -1 if the end of the stream
         * has been reached.
         *
         * @throws IndexOutOfBoundsException
         *     if {@code byteOffset < 0 || byteCount < 0 || byteOffset + byteCount > bytes.length}.
         * @throws InterruptedIOException
         *             if the thread reading from this stream is interrupted.
         * @throws IOException
         *             if this stream is closed or not connected to an output
         *             stream, or if the thread writing to the connected output
         *             stream is no longer alive.
         * @throws NullPointerException
         *             if {@code bytes} is {@code null}.
         */
        // @Override
        Read(
            [in] ArrayOf<Byte>* bytes,
            [in] Int32 byteOffset,
            [in] Int32 byteCount,
            [out] Int32* rev);

        Done();

        // Added additionally
        IsConnected(
            [out] Boolean* rev);
    }

    } // namespace IO
    } // namespace Elastos
}
