
module
{
    namespace Elastos {
    namespace IO {

    /**
     * Wraps an existing Writer and buffers the output. Expensive interaction with the
     * underlying reader is minimized, since most (smaller) requests can be satisfied
     * by accessing the buffer alone. The drawback is that some extra space is required
     * to hold the buffer and that copying takes place when filling that buffer, but
     * this is usually outweighed by the performance benefits.
     * <p>
     * A typical application pattern for the class looks like this:
     * <p>
     * BufferedWriter buf = new BufferedWriter(new FileWriter("file.java"));
     * @sa BufferedReader
     *@implement Elastos.IO.IWriter
     */
     /**
     * @Involve
     * interface Elastos.Core.IAppendable;
     * interface IWriter;
     */
    interface IBufferedWriter {
        /**
         * Writes a newline to this writer. A newline is determined by the System
         * property "line.separator". The target writer may or may not be flushed
         * when a newline is written.
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if an error occurs attempting to write to this writer.
         */
        NewLine();
    }

    } // namespace IO
    } // namespace Elastos
}