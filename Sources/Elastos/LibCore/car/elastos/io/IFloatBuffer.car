
module
{
    namespace Elastos {
    namespace IO {

     /**
     * @Involve
     * interface IBuffer;
     */
    interface IFloatBuffer {
        GetArray(
            [out, callee] ArrayOf<Float>* array);

        /**
         * Returns a read-only buffer that shares its content with this buffer.
         * <p>
         * The returned buffer is guaranteed to be a new instance, even if this
         * buffer is read-only itself. The new buffer's position, limit, capacity
         * and mark are the same as this buffer.
         * <p>
         * The new buffer shares its content with this buffer, which means this
         * buffer's change of content will be visible to the new buffer. The two
         * buffer's position, limit and mark are independent.
         *
         * @return a read-only version of this buffer.
         */
        AsReadOnlyBuffer(
            [out] IFloatBuffer** buffer);

        /**
         * Compacts this float buffer.
         * <p>
         * The remaining floats will be moved to the head of the buffer, starting
         * from position zero. Then the position is set to {remaining()}; the
         * limit is set to capacity; the mark is cleared.
         *
         * @return this buffer.
         * @exception ReadOnlyBufferException
         *                if no changes may be made to the contents of this buffer.
         */
        Compact();

        /**
         * Returns a duplicated buffer that shares its content with this buffer.
         * <p>
         * The duplicated buffer's position, limit, capacity and mark are the same
         * as this buffer. The duplicated buffer's read-only property and byte order
         * are same as this buffer too.
         * <p>
         * The new buffer shares its content with this buffer, which means either
         * buffer's change of content will be visible to the other. The two buffer's
         * position, limit and mark are independent.
         *
         * @return a duplicated buffer that shares its content with this buffer.
         */
        Duplicate(
            [out] IFloatBuffer** buffer);

        /**
         * Returns the float at the current position and increases the position by
         * 1.
         *
         * @return the float at the current position.
         * @exception BufferUnderflowException
         *                if the position is equal or greater than limit.
         */
        GetFloat(
            [out] Float* value);

        /**
         * Returns a float at the specified index; the position is not changed.
         *
         * @param index
         *            the index, must not be negative and less than limit.
         * @return a float at the specified index.
         * @exception IndexOutOfBoundsException
         *                if index is invalid.
         */
        GetFloatEx(
            [in] Int32 index,
            [out] Float* value);

        /**
         * Reads floats from the current position into the specified float array and
         * increases the position by the number of floats read.
         * <p>
         * Calling this method has the same effect as
         * {get(dst, 0, dst.length)}.
         *
         * @param dst
         *            the destination float array.
         * @return this buffer.
         * @exception BufferUnderflowException
         *                if {dst.length} is greater than {remaining()}.
         */
        GetFloats(
            [out] ArrayOf<Float> dst);

        /**
         * Reads floats from the current position into the specified float array,
         * starting from the specified offset, and increases the position by the
         * number of floats read.
         *
         * @param dst
         *            the target float array.
         * @param dstOffset
         *            the offset of the float array, must not be negative and no
         *            greater than {dst.length}.
         * @param floatCount
         *            the number of floats to read, must be no less than zero and no
         *            greater than {dst.length - off}.
         * @return this buffer.
         * @exception IndexOutOfBoundsException
         *                if either {off} or {len} is invalid.
         * @exception BufferUnderflowException
         *                if {len} is greater than {remaining()}.
         */
        GetFloatsEx(
            [out] ArrayOf<Float> dst,
            [in] Int32 dstOffset,
            [in] Int32 floatCount);

        /**
         * Returns the byte order used by this buffer when converting floats from/to
         * bytes.
         * <p>
         * If this buffer is not based on a byte buffer, then always return the
         * platform's native byte order.
         *
         * @return the byte order used by this buffer when converting floats from/to
         *         bytes.
         */
        GetOrder(
            [out] ByteOrder* byteOrder);

        /**
         * Writes the given float to the current position and increases the position
         * by 1.
         *
         * @param f
         *            the float to write.
         * @return this buffer.
         * @exception BufferOverflowException
         *                if position is equal or greater than limit.
         * @exception ReadOnlyBufferException
         *                if no changes may be made to the contents of this buffer.
         */
        PutFloat(
            [in] Float f);

        /**
         * Writes a float to the specified index of this buffer; the position is not
         * changed.
         *
         * @param index
         *            the index, must not be negative and less than the limit.
         * @param f
         *            the float to write.
         * @return this buffer.
         * @exception IndexOutOfBoundsException
         *                if index is invalid.
         * @exception ReadOnlyBufferException
         *                if no changes may be made to the contents of this buffer.
         */
        PutFloatEx(
            [in] Int32 index,
            [in] Float f);

        /**
         * Writes floats from the given float array to the current position and
         * increases the position by the number of floats written.
         * <p>
         * Calling this method has the same effect as
         * {put(src, 0, src.length)}.
         *
         * @param src
         *            the source float array.
         * @return this buffer.
         * @exception BufferOverflowException
         *                if {remaining()} is less than {src.length}.
         * @exception ReadOnlyBufferException
         *                if no changes may be made to the contents of this buffer.
         */
        PutFloats(
            [in] ArrayOf<Float> src);

        /**
         * Writes floats from the given float array, starting from the specified
         * offset, to the current position and increases the position by the number
         * of floats written.
         *
         * @param src
         *            the source float array.
         * @param srcOffset
         *            the offset of float array, must not be negative and not
         *            greater than {src.length}.
         * @param floatCount
         *            the number of floats to write, must be no less than zero and
         *            no greater than {src.length - off}.
         * @return this buffer.
         * @exception BufferOverflowException
         *                if {remaining()} is less than {len}.
         * @exception IndexOutOfBoundsException
         *                if either {off} or {len} is invalid.
         * @exception ReadOnlyBufferException
         *                if no changes may be made to the contents of this buffer.
         */
        PutFloatsEx(
            [in] ArrayOf<Float> src,
            [in] Int32 srcOffset,
            [in] Int32 floatCount);

        /**
         * Writes all the remaining floats of the {src} float buffer to this
         * buffer's current position, and increases both buffers' position by the
         * number of floats copied.
         *
         * @param src
         *            the source float buffer.
         * @return this buffer.
         * @exception BufferOverflowException
         *                if {src.remaining()} is greater than this buffer's
         *                {remaining()}.
         * @exception IllegalArgumentException
         *                if {src} is this buffer.
         * @exception ReadOnlyBufferException
         *                if no changes may be made to the contents of this buffer.
         */
        PutFloatBuffer(
            [in] IFloatBuffer* src);

        /**
         * Returns a sliced buffer that shares its content with this buffer.
         * <p>
         * The sliced buffer's capacity will be this buffer's {remaining()},
         * and its zero position will correspond to this buffer's current position.
         * The new buffer's position will be 0, limit will be its capacity, and its
         * mark is cleared. The new buffer's read-only property and byte order are
         * same as this buffer's.
         * <p>
         * The new buffer shares its content with this buffer, which means either
         * buffer's change of content will be visible to the other. The two buffer's
         * position, limit and mark are independent.
         *
         * @return a sliced buffer that shares its content with this buffer.
         */
        Slice(
            [out] IFloatBuffer** buffer);
    }

    [deprecated]
    interface IFloatBufferHelper {
        /**
         * Creates a float buffer based on a newly allocated float array.
         *
         * @param capacity
         *            the capacity of the new buffer.
         * @return the created float buffer.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalArgumentException | if {capacity} is less than zero.
         */
        Allocate(
            [in] Int32 capacity,
            [out] IFloatBuffer** floatBuffer);

        /**
         * Creates a new float buffer by wrapping the given float array.
         * <p>
         * Calling this method has the same effect as
         * {wrap(array, 0, array.length)}.
         *
         * @param array
         *            the float array which the new buffer will be based on.
         * @return the created float buffer.
         */
        WrapArray(
            [in] ArrayOf<Float>* array,
            [out] IFloatBuffer** floatBuffer);

        /**
         * Creates a new float buffer by wrapping the given float array.
         * <p>
         * The new buffer's position will be {start}, limit will be
         * {start + floatCount}, capacity will be the length of the array.
         *
         * @param array
         *            the float array which the new buffer will be based on.
         * @param start
         *            the start index, must not be negative and not greater than
         *            {array.length}.
         * @param floatCount
         *            the length, must not be negative and not greater than
         *            {array.length - start}.
         * @return the created float buffer.
         * @exception IndexOutOfBoundsException
         *                if either {start} or {floatCount} is invalid.
         * @exception NullPointerException
         *                if {array} is null.
         */
        WrapArrayEx(
            [in] ArrayOf<Float>* array,
            [in] Int32 start,
            [in] Int32 floatCount,
            [out] IFloatBuffer** floatBuffer);
    }

    } // namespace IO
    } // namespace Elastos
}
