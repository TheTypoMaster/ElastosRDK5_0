
module
{
    namespace Elastos {
    namespace IO {

    /**
     *Wraps an existing Reader and adds functionality to "push back" characters that have been read, so
     *that they can be read again. Parsers may find this useful. The number of characters which may be
     *pushed back can be specified during construction. If the buffer of pushed back bytes is empty,
     *characters are read from the underlying reader.
     *
     *@implements Elastos.IO.IReader
     *
     */


     /**
     * @Involve
     * interface IReadable;
     * interface IReader;
     */
    interface IPushbackReader {
        /**
         * Pushes the specified character oneChar back to this reader. This
         * is done in such a way that the next character read from this reader is
         * (char) oneChar.
         * <p>
         * If this reader's internal pushback buffer cannot store the character, an
         * IOException is thrown.
         *
         * @param oneChar
         *            the character to push back to this stream.
         *  @return ECode = NOERROR(0) if success, elas as follows:
         *  Value | Meaning |
         *  :-|:------------|
         *  IOException | if this reader is closed or the internal pushback buffer is full.
         */
        Unread(
            [in] Int32 oneChar);

        /**
         * Pushes all the characters in buffer back to this reader. The
         * characters are pushed back in such a way that the next character read
         * from this reader is buffer[0], then buffer[1] and so on.
         * <p>
         * If this reader's internal pushback buffer cannot store the entire
         * contents of buffer, an IOException is thrown. Parts of
         * buffer may have already been copied to the pushback buffer when
         * the exception is thrown.
         *
         * @param buffer
         *            the buffer containing the characters to push back to this
         *            reader.
         *  @return ECode = NOERROR(0) if success, elas as follows:
         *  Value | Meaning |
         *  :-|:------------|
         * IOException | if this reader is closed or the free space in the internal pushback buffer is not sufficient to store the contents of buffer.
         */
        UnreadChars(
            [in] ArrayOf<Char32> buffer);

        /**
         * Pushes a subset of the characters in buffer back to this reader.
         * The subset is defined by the start position offset within
         * buffer and the number of characters specified by length.
         * The bytes are pushed back in such a way that the next byte read from this
         * stream is buffer[offset], then buffer[1] and so on.
         * <p>
         * If this stream's internal pushback buffer cannot store the selected
         * subset of buffer, an IOException is thrown. Parts of
         * buffer may have already been copied to the pushback buffer when
         * the exception is thrown.
         *
         * @param buffer
         *            the buffer containing the characters to push back to this
         *            reader.
         * @param offset
         *            the index of the first byte in buffer to push back.
         * @param length
         *            the number of bytes to push back.
         *  @return ECode = NOERROR(0) if success, elas as follows:
         *  Value | Meaning |
         *  :-|:------------|
         * IndexOutOfBoundsException | if {offset < 0} or {count < 0}, or if {offset + count} is greater than the length of {buffer}.
         * IOException | if this reader is closed or the free space in the internal
         *             pushback buffer is not sufficient to store the selected
         *             contents of {buffer}
         * NullPointerException | if {buffer} is {null}
         */
        UnreadChars(
            [in] ArrayOf<Char32> buffer,
            [in] Int32 offset,
            [in] Int32 length);
    }

    } // namespace IO
    } // namespace Elastos
}