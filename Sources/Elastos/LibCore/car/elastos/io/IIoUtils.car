module
{
    interface Elastos.IO.IFileDescriptor;
    interface Elastos.IO.ICloseable;
    interface Elastos.IO.IUnsafeByteSequence;

    namespace Elastos {
    namespace IO {

    interface IIoUtils {
        /**
         * Calls close(2) on 'fd'. Also resets the internal int to -1. Does nothing if 'fd' is null
         * or invalid.
         */
        Close(
            [in] IFileDescriptor* fd);

        /**
         * Closes 'closeable', ignoring any checked exceptions. Does nothing if 'closeable' is null.
         */
        CloseQuietly(
            [in] ICloseable* closeable);

        /**
         * Closes 'fd', ignoring any exceptions. Does nothing if 'fd' is null or invalid.
         */
        CloseQuietly(
            [in] IFileDescriptor* fd);


        /**
         * Sets 'fd' to be blocking or non-blocking, according to the state of 'blocking'.
         */
        SetBlocking(
            [in] IFileDescriptor* fd,
            [in] Boolean blocking);

        /**
         * Returns the contents of 'path' as a byte array.
         */
        ReadFileAsByteArray(
            [in] String path,
            [out, callee] ArrayOf<Byte>* bytes);

        /**
         * Returns the contents of 'path' as a string. The contents are assumed to be UTF-8.
         */
        ReadFileAsString(
            [in] String path,
            [out] String* str);

        ReadFileAsBytes(
            [in] String path,
            [out] IUnsafeByteSequence** usbs);

        /**
         * Recursively delete everything in {@code dir}.
         */
        // TODO: this should specify paths as Strings rather than as Files
        DeleteContents(
            [in] IFile* dir);
    }

    } // namespace IO
    } // namespace Elastos
}
