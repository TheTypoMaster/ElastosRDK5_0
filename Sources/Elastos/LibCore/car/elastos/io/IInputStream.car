
module
{
    namespace Elastos {
    namespace IO {

    /**
     * A readable source of bytes.
     *<p>
     * Most clients will use input streams that read data from the file system (FileInputStream), the
     * network (getInputStream()/getInputStream()), or from an in-memory byte array (ByteArrayInputStream).
     *<p>
     *Use InputStreamReader to adapt a byte stream like this one into a character stream.
     *<p>
     *Most clients should wrap their input stream with BufferedInputStream. Callers that do only bulk
     *reads may omit buffering.
     *<p>
     *Some implementations support marking a position in the input stream and resetting back to this
     *position later. Implementations that don't return false from markSupported() and throw an
     *IOException when reset() is called.
     *
     * @sa IOutputStream
     * @implement Elastos.IO.ICloseable
     */
     /**
     * @Involve
     * interface Elastos.IO.ICloseable;
     */
    [deprecated]
    interface IInputStream {
        /**
         * Returns an estimated number of bytes that can be read or skipped without blocking for more
         * input.
         *
         * <p>Note that this method provides such a weak guarantee that it is not very useful in
         * practice.
         *
         * <p>Firstly, the guarantee is "without blocking for more input" rather than "without
         * blocking": a read may still block waiting for I/O to complete&nbsp;&mdash; the guarantee is
         * merely that it won't have to wait indefinitely for data to be written. The result of this
         * method should not be used as a license to do I/O on a thread that shouldn't be blocked.
         *
         * <p>Secondly, the result is a
         * conservative estimate and may be significantly smaller than the actual number of bytes
         * available. In particular, an implementation that always returns 0 would be correct.
         * In general, callers should only use this method if they'd be satisfied with
         * treating the result as a boolean yes or no answer to the question "is there definitely
         * data ready?".
         *
         * <p>Thirdly, the fact that a given number of bytes is "available" does not guarantee that a
         * read or skip will actually read or skip that many bytes: they may read or skip fewer.
         *
         * <p>It is particularly important to realize that you <i>must not</i> use this method to
         * size a container and assume that you can read the entirety of the stream without needing
         * to resize the container. Such callers should probably write everything they read to a
         * ByteArrayOutputStream and convert that to a byte array. Alternatively, if you're
         * reading from a file, File#length returns the current length of the file (though
         * assuming the file's length can't change may be incorrect, reading a file is inherently
         * racy).
         *
         * @sa ByteArrayOutputStream
         * @sa File#length
         *
         * <p>The default implementation of this method in {InputStream} always returns 0.
         * Subclasses should override this method if they are able to indicate the number of bytes
         * available.
         *
         * @return the estimated number of bytes available
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if this stream is closed or an error occurs
         */
        Available(
            [out] Int32* number);

        /**
         * Sets a mark position in this InputStream. The parameter {readlimit}
         * indicates how many bytes can be read before the mark is invalidated.
         * Sending {reset()} will reposition the stream back to the marked
         * position provided {readLimit} has not been surpassed.
         * <p>
         * This default implementation does nothing and concrete subclasses must
         * provide their own implementation.
         *
         * @param readlimit
         *            the number of bytes that can be read from this stream before
         *            the mark is invalidated.
         * @see #markSupported()
         * @see #reset()
         */
        Mark(
            [in] Int32 readLimit);

        /**
         * Indicates whether this stream supports the {mark()} and
         * {reset()} methods. The default implementation returns {false}.
         *
         * @return always {false}.
         * @see #mark(int)
         * @see #reset()
         */
        IsMarkSupported(
            [out] Boolean* supported);

        /**
         * Reads a single byte from this stream and returns it as an integer in the
         * range from 0 to 255. Returns -1 if the end of the stream has been
         * reached. Blocks until one byte has been read, the end of the source
         * stream is detected or an exception is thrown.
         *
         * @return the byte read or -1 if the end of stream has been reached.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if the stream is closed or another IOException occurs.
         */
        Read(
            [out] Int32* value);

        /**
         * Equivalent to {read(buffer, 0, buffer.length)}.
         */
        Read(
            [in] ArrayOf<Byte>* buffer,
            [out] Int32* number);

        /**
         * Reads at most {length} bytes from this stream and stores them in
         * the byte array {b} starting at {offset}.
         *
         * @param buffer
         *            the byte array in which to store the bytes read.
         * @param offset
         *            the initial position in {buffer} to store the bytes read
         *            from this stream.
         * @param length
         *            the maximum number of bytes to store in {b}.
         * @return the number of bytes actually read or -1 if the end of the stream
         *         has been reached.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IndexOutOfBoundsException | if {offset < 0} or {length < 0}, or if {offset + length} is greater than the length of {b}.
         * IOException | if the stream is closed or another IOException occurs.
         */
        Read(
            [in] ArrayOf<Byte>* buffer,
            [in] Int32 offset,
            [in] Int32 length,
            [out] Int32* number);

        /**
         * Resets this stream to the last marked location. Throws an
         * {IOException} if the number of bytes read since the mark has been
         * set is greater than the limit provided to {mark}, or if no mark
         * has been set.
         * <p>
         * This implementation always throws an {IOException} and concrete
         * subclasses should provide the proper implementation.
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if this stream is closed or another IOException occurs.
         */
        Reset();

        /**
         * Skips at most {n} bytes in this stream. This method does nothing and returns
         * 0 if {n} is negative, but some subclasses may throw.
         *
         * <p>Note the "at most" in the description of this method: this method may choose to skip
         * fewer bytes than requested. Callers should <i>always</i> check the return value.
         *
         * <p>This default implementation reads bytes into a temporary
         * buffer. Concrete subclasses should provide their own implementation.
         *
         * @param byteCount the number of bytes to skip.
         * @return the number of bytes actually skipped.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if this stream is closed or another IOException occurs.
         */
        Skip(
            [in] Int64 byteCount,
            [out] Int64* number);
    }

    } // namespace IO
    } // namespace Elastos
}
