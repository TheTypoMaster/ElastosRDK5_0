
module
{
    interface Elastos.IO.Channels.IDatagramChannel;
    interface Elastos.IO.Channels.IPipe;
    interface Elastos.IO.Channels.IServerSocketChannel;
    interface Elastos.IO.Channels.ISocketChannel;
    interface Elastos.IO.Channels.IChannel;
    interface Elastos.IO.Channels.Spi.IAbstractSelector;

    namespace Elastos {
    namespace IO {
    namespace Channels {
    namespace Spi {

    /**
     * {@code SelectorProvider} is an abstract base class that declares methods for
     * providing instances of {@link DatagramChannel}, {@link Pipe},
     * {@link java.nio.channels.Selector} , {@link ServerSocketChannel}, and
     * {@link SocketChannel}. All the methods of this class are thread-safe.
     *
     * <p>A provider instance can be retrieved through a system property or the
     * configuration file in a jar file; if no provider is available that way then
     * the system default provider is returned.
     */
     interface ISelectorProvider {
        /**
         * Creates a new open {DatagramChannel}.
         *
         * @return the new channel.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if an I/O error occurs.
         */
        OpenDatagramChannel(
            [out] IDatagramChannel** channel);

        /**
         * Creates a new {Pipe}.
         *
         * @return the new pipe.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         *  IOException  | if an I/O error occurs.
         */
        OpenPipe(
            [out] IPipe** pipe);

        /**
         * Creates a new selector.
         *
         * @return the new selector.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         *  IOException | if an I/O error occurs.
         */
        OpenSelector(
            [out] IAbstractSelector** selector);

        /**
         * Creates a new open {ServerSocketChannel}.
         *
         * @return the new channel.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException  | if an I/O error occurs.
         */
        OpenServerSocketChannel(
            [out] IServerSocketChannel** channel);

        /**
         * Create a new open {SocketChannel}.
         *
         * @return the new channel.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if an I/O error occurs.
         */
        OpenSocketChannel(
            [out] ISocketChannel** socketChannel);

        /**
         * Returns the channel inherited from the process that created this VM.
         * On Android, this method always returns null because stdin and stdout are
         * never connected to a socket.
         *
         * @return the channel.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         *  IOException |  if an I/O error occurs.
         */
        InheritedChannel(
            [out] IChannel** chanel);
    }

    interface ISelectorProviderHelper {
        /**
         * Gets a provider instance by executing the following steps when called for
         * the first time:
         * <ul>
         * <li> if the system property "java.nio.channels.spi.SelectorProvider" is
         * set, the value of this property is the class name of the provider
         * returned; </li>
         * <li>if there is a provider-configuration file named
         * "java.nio.channels.spi.SelectorProvider" in META-INF/services of a jar
         * file valid in the system class loader, the first class name is the
         * provider's class name; </li>
         * <li> otherwise, a system default provider will be returned.</li>
         * </ul>
         *
         * @return the provider.
         */
        GetProvider(
            [out] ISelectorProvider** provider);
    }

    } // namespace Spi
    } // namespace Channels
    } // namespace IO
    } // namespace Elastos
}
