
module
{
    interface Elastos.IO.IFile;
    interface Elastos.IO.IOutputStream;
    interface Elastos.IO.IInputStream;
    interface Elastos.Utility.IDate;
    interface Elastos.Utility.IEnumeration;
    interface Elastos.Security.IProvider;
    interface Elastos.Security.IKey;
    interface Elastos.Security.Cert.ICertificate;
    interface Elastosx.Crypto.ISecretKey;
    interface Elastosx.Security.Auth.Callback.ICallbackHandler;

    namespace Elastos {
    namespace Security {

    interface IKeyStore;
    interface IKeyStoreProtectionParameter;

    interface IKeyStoreBuilder {
        /**
         * Returns the {@code KeyStore} created by this {@code Builder}.
         *
         * @return the {@code KeyStore} created by this {@code Builder}.
         * @throws KeyStoreException
         *             if an error occurred during construction.
         */
        GetKeyStore(
            [out] IKeyStore** keyStore);

        /**
         * Returns the {@code ProtectionParameter} to be used when a {@code
         * Entry} with the specified alias is requested. Before this method is
         * invoked, {@link #getKeyStore()} must be called.
         *
         * @param alias
         *            the alias for the entry.
         * @return the {@code ProtectionParameter} to be used when a {@code
         *         Entry} with the specified alias is requested.
         * @throws KeyStoreException
         *             if an error occurred during the lookup for the protection
         *             parameter.
         * @throws IllegalStateException
         *             if {@link #getKeyStore()} is not called prior the
         *             invocation of this method.
         * @throws NullPointerException
         *             if {@code alias} is {@code null}.
         */
        GetProtectionParameter(
            [in] String alias,
            [out] IKeyStoreProtectionParameter** protectionParameter);
    }

    interface IKeyStoreBuilderHelper {
        /**
         * Returns a new {@code Builder} that holds the given {@code KeyStore}
         * and the given {@code ProtectionParameter}.
         *
         * @param keyStore
         *            the {@code KeyStore} to be held.
         * @param protectionParameter
         *            the {@code ProtectionParameter} to be held.
         * @return a new instance of {@code Builder} that holds the specified
         *         {@code KeyStore} and the specified {@code
         *         ProtectionParameter}.
         * @throws NullPointerException
         *             if {@code keyStore} or {@code protectionParameter} is
         *             {@code null}.
         * @throws IllegalArgumentException
         *             if the given {@code KeyStore} is not initialized.
         */
        NewInstance(
            [in] IKeyStore* keyStore,
            [in] IKeyStoreProtectionParameter* protectionParameter,
            [out] IKeyStoreBuilder** instance);

        /**
         * Returns a new {@code Builder} that creates a new {@code KeyStore}
         * based on the provided arguments.
         * <p>
         * If {@code provider} is {@code null}, all installed providers are
         * searched, otherwise the key store from the specified provider is
         * used.
         *
         * @param type
         *            the type of the {@code KeyStore} to be constructed.
         * @param provider
         *            the provider of the {@code KeyStore} to be constructed,
         *            maybe {@code null}.
         * @param file
         *            the {@code File} that contains the data for the {@code
         *            KeyStore}.
         * @param protectionParameter
         *            the {@code ProtectionParameter} used to protect the stored
         *            keys.
         * @return a new {@code Builder} that creates a new {@code KeyStore}
         *         based on the provided arguments.
         * @throws NullPointerException
         *             if {@code type, protectionParameter} or {@code file} is
         *             {@code null}.
         * @throws IllegalArgumentException
         *             {@code protectionParameter} not an instance of either
         *             {@code PasswordProtection} or {@code
         *             CallbackHandlerProtection}, {@code file} is not a file or
         *             does not exist at all.
         */
        NewInstanceEx(
            [in] String type,
            [in] IProvider* provider,
            [in] IFile* file,
            [in] IKeyStoreProtectionParameter* protectionParameter,
            [out] IKeyStoreBuilder** instance);

        /**
         * Returns a new {@code Builder} that creates a new {@code KeyStore}
         * based on the provided arguments.
         * <p>
         * If {@code provider} is {@code null}, all installed providers are
         * searched, otherwise the key store from the specified provider is
         * used.
         *
         * @param type
         *            the type of the {@code KeyStore} to be constructed.
         * @param provider
         *            the provider of the {@code KeyStore} to be constructed,
         *            maybe {@code null}.
         * @param protectionParameter
         *            the {@code ProtectionParameter} used to protect the stored
         *            keys.
         * @return a new {@code Builder} that creates a new {@code KeyStore}
         *         based on the provided arguments.
         * @throws NullPointerException
         *             if {@code type} or {@code protectionParameter} is {@code
         *             null}.
         * @throws IllegalArgumentException
         *             {@code protectionParameter} not an instance of either
         *             {@code PasswordProtection} or {@code
         *             CallbackHandlerProtection}, {@code file} is not a file or
         *             does not exist at all.
         */
        NewInstanceEx2(
            [in] String type,
            [in] IProvider* provider,
            [in] IKeyStoreProtectionParameter* protectionParameter,
            [out] IKeyStoreBuilder** instance);
    }

    /**
     * {@code Entry} is the common marker interface for a {@code KeyStore}
     * entry.
     */
    interface IKeyStoreEntry {
    }

    /**
     * {@code PrivateKeyEntry} represents a {@code KeyStore} entry that
     * holds a private key.
     */
    interface IKeyStorePrivateKeyEntry extends IKeyStoreEntry {
        /**
         * Returns the private key.
         *
         * @return the private key.
         */
        GetPrivateKey(
            [out] IPrivateKey **privateKey);

        /**
         * Returns the certificate chain.
         *
         * @return the certificate chain.
         */
        GetCertificateChain(
            [out, callee] ArrayOf<ICertificate*> *cc);

        /**
         * Returns the certificate corresponding to the private key.
         *
         * @return the certificate corresponding to the private key.
         */
        GetCertificate(
            [out] ICertificate **cert);

        /**
         * Returns a string containing a concise, human-readable description of
         * this {@code PrivateKeyEntry}.
         *
         * @return a printable representation for this {@code PrivateKeyEntry}.
         */
        //@Override
        ToString(
            [out] String *str);
    }

    interface IKeyStoreSecretKeyEntry extends IKeyStoreEntry {
        /**
         * Returns the secret key.
         *
         * @return the secret key.
         */
        GetSecretKey(
            [out] ISecretKey **key);

        /**
         * Returns a string containing a concise, human-readable description of
         * this {@code SecretKeyEntry}.
         *
         * @return a printable representation for this {@code
         *         SecretKeyEntry}.
         */
        //@Override
        ToString(
            [out] String *str);
    }

    interface IKeyStoreTrustedCertificateEntry extends IKeyStoreEntry {
        /**
         * Returns the trusted certificate.
         *
         * @return the trusted certificate.
         */
        GetTrustedCertificate(
            [out] ICertificate **cert);

        /**
         * Returns a string containing a concise, human-readable description of
         * this {@code TrustedCertificateEntry}.
         *
         * @return a printable representation for this {@code
         *         TrustedCertificateEntry}.
         */
        // @Override
        ToString(
            [out] String *str);
    }

    /**
     * {@code LoadStoreParameter} represents a parameter that specifies how a
     * {@code KeyStore} can be loaded and stored.
     *
     * @see KeyStore#load(LoadStoreParameter)
     * @see KeyStore#store(LoadStoreParameter)
     */
    interface IKeyStoreLoadStoreParameter {
        /**
         * Returns the {@code ProtectionParameter} which is used to protect data
         * in the {@code KeyStore}.
         *
         * @return the {@code ProtectionParameter} which is used to protect data
         *         in the {@code KeyStore}, maybe {@code null}.
         */
        GetProtectionParameter(
            [out] IKeyStoreProtectionParameter** protectionParameter);
    }

    /**
     * {@code ProtectionParameter} is a marker interface for protection
     * parameters. A protection parameter is used to protect the content of a
     * {@code KeyStore}.
     */
    interface IKeyStoreProtectionParameter {
    }

    /**
     * {@code CallbackHandlerProtection} is a {@code ProtectionParameter} that
     * encapsulates a {@link CallbackHandler}.
     */
    interface IKeyStoreCallbackHandlerProtection extends IKeyStoreProtectionParameter {
        GetCallbackHandler(
            [out] ICallbackHandler **handler);
    }

    /**
     * {@code PasswordProtection} is a {@code ProtectionParameter} that protects
     * a {@code KeyStore} using a password.
     */
    interface IKeyStorePasswordProtection /* extends IKeyStoreProtectionParameter, Elastosx.Security.Auth.IDestroyable */ {
        /**
         * Returns the password.
         *
         * @return the password.
         * @throws IllegalStateException
         *             if the password has been destroyed.
         */
        GetPassword(
            [out, callee] ArrayOf<Char32> *pwd);
    }

    [deprecated]
    interface IKeyStore {
        /**
         * Returns the provider associated with this {@code KeyStore}.
         *
         * @return the provider associated with this {@code KeyStore}.
         */
        GetProvider(
            [out] IProvider** provider);

        /**
         * Returns the type of this {@code KeyStore}.
         *
         * @return the type of this {@code KeyStore}.
         */
        GetType(
            [out] String* type);

        /**
         * Returns the key with the given alias, using the password to recover the
         * key from the store.
         *
         * @param alias
         *            the alias for the entry.
         * @param password
         *            the password used to recover the key.
         * @return the key with the specified alias, or {@code null} if the
         *         specified alias is not bound to an entry.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         * @throws NoSuchAlgorithmException
         *             if the algorithm for recovering the key is not available.
         * @throws UnrecoverableKeyException
         *             if the key can not be recovered.
         */
        GetKey(
            [in] String alias,
            [in] ArrayOf<Char32>* password,
            [out] IKey** key);

        /**
         * Returns the certificate chain for the entry with the given alias.
         *
         * @param alias
         *            the alias for the entry.
         * @return the certificate chain for the entry with the given alias, or
         *         {@code null} if the specified alias is not bound to an entry.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         */
        GetCertificateChain(
            [in] String alias,
            [out, callee] ArrayOf<ICertificate*>* certChain);

        /**
         * Returns the trusted certificate for the entry with the given alias.
         *
         * @param alias
         *            the alias for the entry.
         * @return the trusted certificate for the entry with the given alias, or
         *         {@code null} if the specified alias is not bound to an entry.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         */
        GetCertificate(
            [in] String alias,
            [out] ICertificate** cert);

        /**
         * Returns the creation date of the entry with the given alias.
         *
         * @param alias
         *            the alias for the entry.
         * @return the creation date, or {@code null} if the specified alias is not
         *         bound to an entry.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         */
        GetCreationDate(
            [in] String alias,
            [out] IDate** creationDate);

        /**
         * Associates the given alias with the key, password and certificate chain.
         * <p>
         * If the specified alias already exists, it will be reassigned.
         *
         * @param alias
         *            the alias for the key.
         * @param key
         *            the key.
         * @param password
         *            the password.
         * @param chain
         *            the certificate chain.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         * @throws IllegalArgumentException
         *             if {@code key} is a {@code PrivateKey} and {@code chain} does
         *             not contain any certificates.
         * @throws NullPointerException
         *             if {@code alias} is {@code null}.
         */
        SetKeyEntry(
            [in] String alias,
            [in] IKey* key,
            [in] ArrayOf<Char32>* password,
            [in] ArrayOf<ICertificate*>* chain);

        /**
         * Associates the given alias with a key and a certificate chain.
         * <p>
         * If the specified alias already exists, it will be reassigned.
         * <p>
         * If this {@code KeyStore} is of type {@code "jks"}, {@code key} must be
         * encoded conform to the PKS#8 standard as an
         * {@link javax.crypto.EncryptedPrivateKeyInfo}.
         *
         * @param alias
         *            the alias for the key.
         * @param key
         *            the key in an encoded format.
         * @param chain
         *            the certificate chain.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized or if {@code key}
         *             is null.
         * @throws IllegalArgumentException
         *             if {@code key} is a {@code PrivateKey} and {@code chain}
         *             does.
         * @throws NullPointerException
         *             if {@code alias} is {@code null}.
         */
        SetKeyEntryEx(
            [in] String alias,
            [in] ArrayOf<Byte>* key,
            [in] ArrayOf<ICertificate*>* chain);

        /**
         * Associates the given alias with a certificate.
         * <p>
         * If the specified alias already exists, it will be reassigned.
         *
         * @param alias
         *            the alias for the certificate.
         * @param cert
         *            the certificate.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized, or an existing
         *             alias is not associated to an entry containing a trusted
         *             certificate, or this method fails for any other reason.
         * @throws NullPointerException
         *             if {@code alias} is {@code null}.
         */
        SetCertificateEntry(
            [in] String alias,
            [in] ICertificate* cert);

        /**
         * Deletes the entry identified with the given alias from this {@code
         * KeyStore}.
         *
         * @param alias
         *            the alias for the entry.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized, or if the entry
         *             can not be deleted.
         */
        DeleteEntry(
            [in] String alias);

        /**
         * Returns an {@code Enumeration} over all alias names stored in this
         * {@code KeyStore}.
         *
         * @return an {@code Enumeration} over all alias names stored in this
         *         {@code KeyStore}.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         */
        Aliases(
            [out] IEnumeration **enumeration);

        /**
         * Indicates whether the given alias is present in this {@code KeyStore}.
         *
         * @param alias
         *            the alias of an entry.
         * @return {@code true} if the alias exists, {@code false} otherwise.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         */
        ContainsAlias(
            [in] String alias,
            [out] Boolean* result);

        /**
         * Returns the number of entries stored in this {@code KeyStore}.
         *
         * @return the number of entries stored in this {@code KeyStore}.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         */
        GetSize(
            [out] Int32* size);

        /**
         * Indicates whether the specified alias is associated with either a
         * {@link PrivateKeyEntry} or a {@link SecretKeyEntry}.
         *
         * @param alias
         *            the alias of an entry.
         * @return {@code true} if the given alias is associated with a key entry.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         */
        IsKeyEntry(
            [in] String alias,
            [out] Boolean* result);

        /**
         * Indicates whether the specified alias is associated with a
         * {@link TrustedCertificateEntry}.
         *
         * @param alias
         *            the alias of an entry.
         * @return {@code true} if the given alias is associated with a certificate
         *         entry.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         */
        IsCertificateEntry(
            [in] String alias,
            [out] Boolean* result);

        /**
         * Returns the alias associated with the first entry whose certificate
         * matches the specified certificate.
         *
         * @param cert
         *            the certificate to find the associated entry's alias for.
         * @return the alias or {@code null} if no entry with the specified
         *         certificate can be found.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         */
        GetCertificateAlias(
            [in] ICertificate* cert,
            [out] String* alias);

        /**
         * Writes this {@code KeyStore} to the specified {@code OutputStream}. The
         * data written to the {@code OutputStream} is protected by the specified
         * password.
         *
         * @param stream
         *            the {@code OutputStream} to write the store's data to.
         * @param password
         *            the password to protect the data.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         * @throws IOException
         *             if a problem occurred while writing to the stream.
         * @throws NoSuchAlgorithmException
         *             if the required algorithm is not available.
         * @throws CertificateException
         *             if an exception occurred while storing the certificates of
         *             this {@code KeyStore}.
         */
        Store(
            [in] IOutputStream* stream,
            [in] ArrayOf<Char32>* password);

        /**
         * Stores this {@code KeyStore} using the specified {@code
         * LoadStoreParameter}.
         *
         * @param param
         *            the {@code LoadStoreParameter} that specifies how to store
         *            this {@code KeyStore}, maybe {@code null}.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         * @throws IOException
         *             if a problem occurred while writing to the stream.
         * @throws NoSuchAlgorithmException
         *             if the required algorithm is not available.
         * @throws CertificateException
         *             if an exception occurred while storing the certificates of
         *             this {@code KeyStore}.
         * @throws IllegalArgumentException
         *             if the given {@link LoadStoreParameter} is not recognized.
         */
        StoreEx(
            [in] IKeyStoreLoadStoreParameter* param);

        /**
         * Initializes this {@code KeyStore} from the provided {@code InputStream}.
         * Pass {@code null} as the {@code stream} argument to initialize an empty
         * {@code KeyStore} or to initialize a {@code KeyStore} which does not rely
         * on an {@code InputStream}. This {@code KeyStore} utilizes the given
         * password to verify the stored data.
         *
         * @param stream
         *            the {@code InputStream} to load this {@code KeyStore}'s data
         *            from or {@code null}.
         * @param password
         *            the password to verify the stored data, maybe {@code null}.
         * @throws IOException
         *             if a problem occurred while reading from the stream.
         * @throws NoSuchAlgorithmException
         *             if the required algorithm is not available.
         * @throws CertificateException
         *             if an exception occurred while loading the certificates of
         *             this {@code KeyStore}.
         */
        Load(
            [in] IInputStream* stream,
            [in] ArrayOf<Char32>* password);

        /**
         * Loads this {@code KeyStore} using the specified {@code
         * LoadStoreParameter}.
         *
         * @param param
         *            the {@code LoadStoreParameter} that specifies how to load this
         *            {@code KeyStore}, maybe {@code null}.
         * @throws IOException
         *             if a problem occurred while reading from the stream.
         * @throws NoSuchAlgorithmException
         *             if the required algorithm is not available.
         * @throws CertificateException
         *             if an exception occurred while loading the certificates of
         *             this {@code KeyStore}.
         * @throws IllegalArgumentException
         *             if the given {@link LoadStoreParameter} is not recognized.
         */
        LoadEx(
            [in] IKeyStoreLoadStoreParameter* param);

        /**
         * Returns the {@code Entry} with the given alias, using the specified
         * {@code ProtectionParameter}.
         *
         * @param alias
         *            the alias of the requested entry.
         * @param param
         *            the {@code ProtectionParameter} used to protect the requested
         *            entry, maybe {@code null}.
         * @return he {@code Entry} with the given alias, using the specified
         *         {@code ProtectionParameter}.
         * @throws NoSuchAlgorithmException
         *             if the required algorithm is not available.
         * @throws UnrecoverableEntryException
         *             if the entry can not be recovered.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         * @throws NullPointerException
         *             if {@code alias} is {@code null}.
         */
        GetEntry(
            [in] String alias,
            [in] IKeyStoreProtectionParameter* param,
            [out] IKeyStoreEntry** entry);

        /**
         * Stores the given {@code Entry} in this {@code KeyStore} and associates
         * the entry with the given {@code alias}. The entry is protected by the
         * specified {@code ProtectionParameter}.
         * <p>
         * If the specified alias already exists, it will be reassigned.
         *
         * @param alias
         *            the alias for the entry.
         * @param entry
         *            the entry to store.
         * @param param
         *            the {@code ProtectionParameter} to protect the entry.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         * @throws NullPointerException
         *             if {@code alias} is {@code null} or {@code entry} is {@code
         *             null}.
         */
        SetEntry(
            [in] String alias,
            [in] IKeyStoreEntry* entry,
            [in] IKeyStoreProtectionParameter* param);

        /**
         * Indicates whether the entry for the given alias is assignable to the
         * provided {@code Class}.
         *
         * @param alias
         *            the alias for the entry.
         * @param entryClass
         *            the type of the entry.
         * @return {@code true} if the {@code Entry} for the alias is assignable to
         *         the specified {@code entryClass}.
         * @throws KeyStoreException
         *             if this {@code KeyStore} is not initialized.
         */
        EntryInstanceOf(
            [in] String alias,
            [in] ClassID entryClass,
            [out] Boolean* result);
    }

    interface IKeyStoreHelper {
        /**
         * Returns a new instance of {@code KeyStore} with the specified type.
         *
         * @param type
         *            the type of the returned {@code KeyStore}.
         * @return a new instance of {@code KeyStore} with the specified type.
         * @throws KeyStoreException
         *             if an error occurred during the creation of the new {@code
         *             KeyStore}.
         * @throws NullPointerException if {@code type == null}
         * @see #getDefaultType
         */
        GetInstance(
            [in] String type,
            [out] IKeyStore** instance);

        /**
         * Returns a new instance of {@code KeyStore} from the specified provider
         * with the given type.
         *
         * @param type
         *            the type of the returned {@code KeyStore}.
         * @param provider
         *            name of the provider of the {@code KeyStore}.
         * @return a new instance of {@code KeyStore} from the specified provider
         *         with the given type.
         * @throws KeyStoreException
         *             if an error occurred during the creation of the new {@code
         *             KeyStore}.
         * @throws NoSuchProviderException
         *             if the specified provider is not available.
         * @throws IllegalArgumentException if {@code provider == null || provider.isEmpty()}
         * @throws NullPointerException
         *             if {@code type} is {@code null} (instead of
         *             NoSuchAlgorithmException) as in 1.4 release
         * @see #getDefaultType
         */
        GetInstanceEx(
            [in] String type,
            [in] String provider,
            [out] IKeyStore** instance);

        /**
         * Returns a new instance of {@code KeyStore} from the specified provider
         * with the given type.
         *
         * @param type
         *            the type of the returned {@code KeyStore}.
         * @param provider
         *            the provider of the {@code KeyStore}.
         * @return a new instance of {@code KeyStore} from the specified provider
         *         with the given type.
         * @throws KeyStoreException
         *             if an error occurred during the creation of the new {@code
         *             KeyStore}.
         * @throws IllegalArgumentException
         *             if {@code provider} is {@code null} or the empty string.
         * @throws NullPointerException if {@code type == null} (instead of
         *             NoSuchAlgorithmException) as in 1.4 release
         * @see #getDefaultType
         */
        GetInstanceEx2(
            [in] String type,
            [in] IProvider* provider,
            [out] IKeyStore** instance);

        /**
         * Returns the default type for {@code KeyStore} instances.
         *
         * <p>The default is specified in the {@code 'keystore.type'} property in the
         * file named {@code java.security} properties file. If this property
         * is not set, {@code "jks"} will be used.
         *
         * @return the default type for {@code KeyStore} instances
         */
        GetDefaultType(
            [out] String* defaultType);
    }

    } // namespace Security
    } // namespace Elastos
}
