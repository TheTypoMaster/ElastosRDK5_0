
module
{
    interface Elastos.Security.IKey;
    interface Elastos.Utility.IDate;
    interface Elastos.Utility.IEnumeration;
    interface Elastos.IO.IOutputStream;
    interface Elastos.IO.IInputStream;
    interface Elastos.Security.Cert.ICertificate;

    namespace Elastos {
    namespace Security {

    [deprecated]
    interface IKeyStoreSpi {
        /**
         * Returns the key with the given alias, using the password to recover the
         * key from the store.
         *
         * @param alias
         *            the alias for the entry.
         * @param password
         *            the password used to recover the key.
         * @return the key with the specified alias, or {@code null} if the
         *         specified alias is not bound to an entry.
         * @throws NoSuchAlgorithmException
         *             if the algorithm for recovering the key is not available.
         * @throws UnrecoverableKeyException
         *             if the key can not be recovered.
         */
        EngineGetKey(
            [in] String alias,
            [in] ArrayOf<Char32>* password,
            [out] IKey** key);

        /**
         * Returns the certificate chain for the entry with the given alias.
         *
         * @param alias
         *            the alias for the entry
         * @return the certificate chain for the entry with the given alias, or
         *         {@code null} if the specified alias is not bound to an entry.
         */
        EngineGetCertificateChain(
            [in] String alias,
            [out, callee] ArrayOf<ICertificate*>* certChain);

        /**
         * Returns the trusted certificate for the entry with the given alias.
         *
         * @param alias
         *            the alias for the entry.
         * @return the trusted certificate for the entry with the given alias, or
         *         {@code null} if the specified alias is not bound to an entry.
         */
        EngineGetCertificate(
            [in] String alias,
            [out] ICertificate** cert);

        /**
         * Returns the creation date of the entry with the given alias.
         *
         * @param alias
         *            the alias for the entry.
         * @return the creation date, or {@code null} if the specified alias is not
         *         bound to an entry.
         */
        EngineGetCreationDate(
            [in] String alias,
            [out] IDate** creationDate);

        /**
         * Associates the given alias with the key, password and certificate chain.
         * <p>
         * If the specified alias already exists, it will be reassigned.
         *
         * @param alias
         *            the alias for the key.
         * @param key
         *            the key.
         * @param password
         *            the password.
         * @param chain
         *            the certificate chain.
         * @throws KeyStoreException
         *             if the specified key can not be protected, or if this
         *             operation fails for another reason.
         * @throws IllegalArgumentException
         *             if {@code key} is a {@code PrivateKey} and {@code chain} does
         *             not contain any certificates.
         */
        EngineSetKeyEntry(
            [in] String alias,
            [in] IKey* key,
            [in] ArrayOf<Char32>* password,
            [in] ArrayOf<ICertificate*>* chain);

        /**
         * Associates the given alias with a key and a certificate chain.
         * <p>
         * If the specified alias already exists, it will be reassigned.
         *
         * @param alias
         *            the alias for the key.
         * @param key
         *            the key in an encoded format.
         * @param chain
         *            the certificate chain.
         * @throws KeyStoreException
         *             if this operation fails.
         * @throws IllegalArgumentException
         *             if {@code key} is a {@code PrivateKey} and {@code chain}
         *             does.
         */
        EngineSetKeyEntry(
            [in] String alias,
            [in] ArrayOf<Byte>* key,
            [in] ArrayOf<ICertificate*>* chain);

        /**
         * Associates the given alias with a certificate.
         * <p>
         * If the specified alias already exists, it will be reassigned.
         *
         * @param alias
         *            the alias for the certificate.
         * @param cert
         *            the certificate.
         * @throws KeyStoreException
         *             if an existing alias is not associated to an entry containing
         *             a trusted certificate, or this method fails for any other
         *             reason.
         */
        EngineSetCertificateEntry(
            [in] String alias,
            [in] ICertificate* cert);

        /**
         * Deletes the entry identified with the given alias from this {@code
         * KeyStoreSpi}.
         *
         * @param alias
         *            the alias for the entry.
         * @throws KeyStoreException
         *             if the entry can not be deleted.
         */
        EngineDeleteEntry(
            [in] String alias);

        /**
         * Returns an {@code Enumeration} over all alias names stored in this
         * {@code KeyStoreSpi}.
         *
         * @return an {@code Enumeration} over all alias names stored in this
         *         {@code KeyStoreSpi}.
         */
        EngineAliases(
            [out] IEnumeration** aliases);

        /**
         * Indicates whether the given alias is present in this {@code KeyStoreSpi}.
         *
         * @param alias
         *            the alias of an entry.
         * @return {@code true} if the alias exists, {@code false} otherwise.
         */
        EngineContainsAlias(
            [in] String alias,
            [out] Boolean* result);

        /**
         * Returns the number of entries stored in this {@code KeyStoreSpi}.
         *
         * @return the number of entries stored in this {@code KeyStoreSpi}.
         */
        EngineSize(
            [out] Int32* size);

        /**
         * Indicates whether the specified alias is associated with either a
         * {@link KeyStore.PrivateKeyEntry} or a {@link KeyStore.SecretKeyEntry}.
         *
         * @param alias
         *            the alias of an entry.
         * @return {@code true} if the given alias is associated with a key entry.
         */
        EngineIsKeyEntry(
            [in] String alias,
            [out] Boolean* result);

        /**
         * Indicates whether the specified alias is associated with a
         * {@link KeyStore.TrustedCertificateEntry}.
         *
         * @param alias
         *            the alias of an entry.
         * @return {@code true} if the given alias is associated with a certificate
         *         entry.
         */
        EngineIsCertificateEntry(
            [in] String alias,
            [out] Boolean* result);

        /**
         * Returns the alias associated with the first entry whose certificate
         * matches the specified certificate.
         *
         * @param cert
         *            the certificate to find the associated entry's alias for.
         * @return the alias or {@code null} if no entry with the specified
         *         certificate can be found.
         */
        EngineGetCertificateAlias(
            [in] ICertificate* cert,
            [out] String* alias);

        /**
         * Writes this {@code KeyStoreSpi} to the specified {@code OutputStream}.
         * The data written to the {@code OutputStream} is protected by the
         * specified password.
         *
         * @param stream
         *            the {@code OutputStream} to write the store's data to.
         * @param password
         *            the password to protect the data.
         * @throws IOException
         *             if a problem occurred while writing to the stream.
         * @throws NoSuchAlgorithmException
         *             if the required algorithm is not available.
         * @throws CertificateException
         *             if the an exception occurred while storing the certificates
         *             of this code {@code KeyStoreSpi}.
         */
        EngineStore(
            [in] IOutputStream* stream,
            [in] ArrayOf<Char32>* password);

        /**
         * Stores this {@code KeyStoreSpi} using the specified {@code
         * LoadStoreParameter}.
         *
         * @param param
         *            the {@code LoadStoreParameter} that specifies how to store
         *            this {@code KeyStoreSpi}, maybe {@code null}.
         * @throws IOException
         *             if a problem occurred while writing to the stream.
         * @throws NoSuchAlgorithmException
         *             if the required algorithm is not available.
         * @throws CertificateException
         *             if the an exception occurred while storing the certificates
         *             of this code {@code KeyStoreSpi}.
         * @throws IllegalArgumentException
         *             if the given {@link KeyStore.LoadStoreParameter} is not
         *             recognized.
         */
        EngineStore(
            [in] IKeyStoreLoadStoreParameter* param);

        /**
         * Loads this {@code KeyStoreSpi} from the given {@code InputStream}.
         * Utilizes the given password to verify the stored data.
         *
         * @param stream
         *            the {@code InputStream} to load this {@code KeyStoreSpi}'s
         *            data from.
         * @param password
         *            the password to verify the stored data, maybe {@code null}.
         * @throws IOException
         *             if a problem occurred while reading from the stream.
         * @throws NoSuchAlgorithmException
         *             if the required algorithm is not available.
         * @throws CertificateException
         *             if the an exception occurred while loading the certificates
         *             of this code {@code KeyStoreSpi}.
         */
        EngineLoad(
            [in] IInputStream* stream,
            [in] ArrayOf<Char32>* password);

        /**
         * Loads this {@code KeyStoreSpi} using the specified {@code
         * LoadStoreParameter}.
         *
         * @param param
         *            the {@code LoadStoreParameter} that specifies how to load this
         *            {@code KeyStoreSpi}, maybe {@code null}.
         * @throws IOException
         *             if a problem occurred while reading from the stream.
         * @throws NoSuchAlgorithmException
         *             if the required algorithm is not available.
         * @throws CertificateException
         *             if the an exception occurred while loading the certificates
         *             of this code {@code KeyStoreSpi}.
         * @throws IllegalArgumentException
         *             if the given {@link KeyStore.LoadStoreParameter} is not
         *             recognized.
         */
        EngineLoad(
            [in] IKeyStoreLoadStoreParameter* param);

        /**
         * Returns the {@code Entry} with the given alias, using the specified
         * {@code ProtectionParameter}.
         *
         * @param alias
         *            the alias of the requested entry.
         * @param protParam
         *            the {@code ProtectionParameter}, used to protect the requested
         *            entry, maybe {@code null}.
         * @return he {@code Entry} with the given alias, using the specified
         *         {@code ProtectionParameter}.
         * @throws NoSuchAlgorithmException
         *             if the required algorithm is not available.
         * @throws UnrecoverableEntryException
         *             if the entry can not be recovered.
         * @throws KeyStoreException
         *             if this operation fails
         */
        EngineGetEntry(
            [in] String alias,
            [in] IKeyStoreProtectionParameter* protParam,
            [out] IKeyStoreEntry** entry);

        /**
         * Stores the given {@code Entry} in this {@code KeyStoreSpi} and associates
         * the entry with the given {@code alias}. The entry is protected by the
         * specified {@code ProtectionParameter}.
         * <p>
         * If the specified alias already exists, it will be reassigned.
         *
         * @param alias
         *            the alias for the entry.
         * @param entry
         *            the entry to store.
         * @param protParam
         *            the {@code ProtectionParameter} to protect the entry.
         * @throws KeyStoreException
         *             if this operation fails.
         */
        EngineSetEntry(
            [in] String alias,
            [in] IKeyStoreEntry* entry,
            [in] IKeyStoreProtectionParameter* protParam);

        /**
         * Indicates whether the entry for the given alias is assignable to the
         * provided {@code Class}.
         *
         * @param alias
         *            the alias for the entry.
         * @param entryClass
         *            the type of the entry.
         * @return {@code true} if the {@code Entry} for the alias is assignable to
         *         the specified {@code entryClass}.
         */
        EngineEntryInstanceOf(
            [in] String alias,
            [in] ClassID entryClass,
            [out] Boolean* result);
    }

    } // namespace Security
    } // namespace Elastos
}
