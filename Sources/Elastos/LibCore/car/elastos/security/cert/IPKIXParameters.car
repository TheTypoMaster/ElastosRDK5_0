
module
{
    interface Elastos.Core.ICloneable;
    interface Elastos.Utility.ISet;
    interface Elastos.Utility.IList;
    interface Elastos.Utility.IDate;
    interface Elastos.Security.Cert.IPKIXCertPathChecker;
    interface Elastos.Security.Cert.ICertStore;
    interface Elastos.Security.Cert.ICertSelector;

    namespace Elastos {
    namespace Security {
    namespace Cert {

    /**
      * @Involve
      * interface Elastos.Core.ICloneable;
      */
    interface IPKIXParameters {
        /**
         * Returns a unmodifiable set of the <i>trusted</i> certificate authorities.
         *
         * @return a unmodifiable set of the <i>trusted</i> certificate authorities.
         */
        GetTrustAnchors(
            [out] ISet** trustAnchors);

        /**
         * Sets the set of <i>trusted</i> certificate authorities.
         *
         * @param trustAnchors
         *            the set of <i>trusted</i> certificate authorities.
         * @throws InvalidAlgorithmParameterException
         *             if {@code trustAnchors} is empty.
         */
        SetTrustAnchors(
            [in] ISet* trustAnchors);

        /**
         * Returns whether the <i>any policy OID</i> will be inhibited if it's
         * included in a certificate.
         *
         * @return {@code true} if the <i>any policy OID</i> will be inhibited,
         *         otherwise {@code false}.
         */
        IsAnyPolicyInhibited(
            [out] Boolean* anyPolicyInhibited);

        /**
         * Sets whether the <i>any policy OID</i> should be inhibited if it's
         * included in a certificate.
         *
         * @param anyPolicyInhibited
         *            {@code true} if the <i>any policy OID</i> should be inhibited,
         *            otherwise {@code false}.
         */
        SetAnyPolicyInhibited(
            [in] Boolean anyPolicyInhibited);

        /**
         * Returns the list of checkers for the certification path.
         * <p>
         * The list is unmodifiable and the entries in the list are cloned.
         *
         * @return the list of checkers for the certification path.
         */
        GetCertPathCheckers(
            [out] IList** certPathCheckers);

        /**
         * Sets the list of checkers for the certification path.
         * <p>
         * The list is copied and the entries are cloned.
         *
         * @param certPathCheckers
         *            the list of checkers for the certification path, or {@code
         *            null} to clear the checkers.
         */
        SetCertPathCheckers(
            [in] IList* certPathCheckers);

        /**
         * Adds the specified {@code PKIXCertPathChecker} to the list of
         * certification path checkers.
         *
         * @param checker
         *            the {@code PKIXCertPathChecker} to add, if {@code null}, it
         *            will be ignored.
         */
        AddCertPathChecker(
            [in] IPKIXCertPathChecker* checker);

        /**
         * Returns the list of certificate stores that are used to find certificates
         * and CRLs.
         *
         * @return an immutable list of certificate stores.
         */
        GetCertStores(
            [out] IList** certStores);

        /**
         * Set the list of certificate stores that are used to find certificates and
         * CRLs.
         *
         * @param certStores the list of certificate stores.
         */
        SetCertStores(
            [in] IList* certStores);

        /**
         * Adds a certificate store to the list of certificate stores that are used
         * to find certificates and CRLs.
         *
         * @param store
         *            the store to add, if {@code null}, it will be ignored.
         */
        AddCertStore(
            [in] ICertStore* store);

        /**
         * Returns the time for which the validation of the certification path
         * should be evaluated.
         *
         * @return the time for the validation, or {@code null} for the current
         *         time.
         */
        GetDate(
            [out] IDate** date);

        /**
         * Sets the time for which the validation of the certification path should be
         * evaluated.
         *
         * @param date
         *            the time for the validation, or {@code null} for the current
         *            time.
         */
        SetDate(
            [in] IDate* date);

        /**
         * Returns whether an acceptable policy needs to be explicit identified in
         * every certificate.
         *
         * @return {@code true} if an explicit policy is required, otherwise {@code
         *         false}.
         */
        IsExplicitPolicyRequired(
            [out] Boolean* explicitPolicyRequired);

        /**
         * Sets whether an an acceptable policy needs to be explicit identified in
         * every certificate.
         *
         * @param explicitPolicyRequired
         *            {@code true} if an explicit policy is required, otherwise
         *            {@code false}.
         */
        SetExplicitPolicyRequired(
            [in] Boolean explicitPolicyRequired);

        /**
         * Returns the list of policies (as OID strings) that would be acceptable
         * for the purpose of certification path processing.
         *
         * @return the unmodifiable list of policies, or an empty set if any policy
         *         is acceptable.
         */
        GetInitialPolicies(
            [out] ISet** initialPolicies);

        /**
         * Sets the list of policies (as OID strings) that would be acceptable for
         * the purpose of certification path processing.
         *
         * @param initialPolicies
         *            the list of policies, or an empty set or {@code null} if any
         *            policy is acceptable.
         */
        SetInitialPolicies(
            [in] ISet* initialPolicies);

        /**
         * Returns whether policy mapping is inhibited.
         *
         * @return {@code true} if policy mapping is inhibited, otherwise {@code
         *         false}.
         */
        IsPolicyMappingInhibited(
            [out] Boolean* policyMappingInhibited);

        /**
         * Sets whether policy mapping is to be inhibited.
         *
         * @param policyMappingInhibited
         *            {@code true} if policy mapping is to be inhibited, otherwise
         *            {@code false}.
         */
        SetPolicyMappingInhibited(
            [in] Boolean policyMappingInhibited);

        /**
         * Returns whether certificates are rejected that include policy
         * qualifiers in a certificate policy extension that is marked as critical.
         *
         * @return {@code true} if the certificates should be rejected, otherwise
         *         {@code false}.
         */
        GetPolicyQualifiersRejected(
            [out] Boolean* policyQualifiersRejected);

        /**
         * Sets whether certificates should be rejected that include policy
         * qualifiers in a certificate policy extension that is marked as critical.
         *
         * @param policyQualifiersRejected
         *            {@code true} if the certificates should be rejected, otherwise
         *            {@code false}.
         */
        SetPolicyQualifiersRejected(
            [in] Boolean policyQualifiersRejected);

        /**
         * Returns whether the default revocation checking mechanism of the
         * underlying service provider is used.
         *
         * @return {@code true} if the default revocation checking mechanism is
         *         used, otherwise {@code false}.
         */
        IsRevocationEnabled(
            [out] Boolean* revocationEnabled);

        /**
         * Sets whether the default revocation checking mechanism of the underlying
         * service provider should be used.
         *
         * @param revocationEnabled
         *            {@code true} id the default revocation checking mechanism
         *            should be used, otherwise {@code false}.
         */
        SetRevocationEnabled(
            [in] Boolean revocationEnabled);

        /**
         * Returns the name of the signature provider.
         *
         * @return the name of the signature provider, or {@code null} if none is
         *         set.
         */
        GetSigProvider(
            [out] String* sigProvider);

        /**
         * Sets the name of the preferred signature provider.
         * <p>
         * If set, the specified provider will be preferred for creating signatures.
         * If not set, the first provider found supporting creation of signatures
         * will be used.
         *
         * @param sigProvider
         *            the name of the preferred signature provider, or {@code null}
         *            if none is preferred.
         */
        SetSigProvider(
            [in] String sigProvider);

        /**
         * Returns the constraints that are required for the target certificate.
         *
         * @return the constraints for the target certificate, or {@code null} if
         *         none are set.
         */
        GetTargetCertConstraints(
            [out] ICertSelector** targetCertConstraints);

        /**
         * Sets the constraints that are required for the target certificate.
         *
         * @param targetCertConstraints
         *            the constraints for the target certificate, or {@code null} if
         *            none should be used.
         */
        SetTargetCertConstraints(
            [in] ICertSelector* targetCertConstraints);

        /**
         * Returns a string representation of this {@code PKIXParameters} instance.
         *
         * @return a string representation of this {@code PKIXParameters} instance.
         */
        ToString(
            [out] String* str);
    }

    } // namespace Cert
    } // namespace Security
    } // namespace Elastos
}
