
module
{
    interface Elastos.Security.IPublicKey;

    namespace Elastos {
    namespace Security {
    namespace Cert {

    /**
     * Abstract class to represent identity certificates. It represents a way to
     * verify the binding of a Principal and its public key. Examples are X.509,
     * PGP, and SDSI.
     */
    interface ICertificate {
        /**
         * Returns the certificate type.
         *
         * @return the certificate type.
         */
        GetType(
            [out] String* type);

        /**
         * Compares the argument to the certificate, and returns {@code true} if they
         * represent the <em>same</em> object using a class specific comparison. The
         * implementation in Object returns {@code true} only if the argument is the
         * exact same object as the callee (==).
         *
         * @param other
         *            the object to compare with this object.
         * @return {@code true} if the object is the same as this object, {@code
         *         false} if it is different from this object.
         * @see #hashCode
         */
        Equals(
            [in] IInterface* other,
            [out] Boolean* result);

        /**
         * Returns an integer hash code for the certificate. Any two objects which
         * return {@code true} when passed to {@code equals} must return the same
         * value for this method.
         *
         * @return the certificate's hash
         * @see #equals
         */
        GetHashCode(
            [out] Int32* hashCode);

        /**
         * Returns the encoded representation for this certificate.
         *
         * @return the encoded representation for this certificate.
         * @throws CertificateEncodingException
         *             if the encoding fails.
         */
        GetEncoded(
            [out, callee] ArrayOf<Byte>* encoded);

        /**
         * Verifies that this certificate was signed with the given public key.
         *
         * @param key
         *            PublicKey public key for which verification should be
         *            performed.
         * @throws CertificateException
         *             if encoding errors are detected.
         * @throws NoSuchAlgorithmException
         *             if an unsupported algorithm is detected.
         * @throws InvalidKeyException
         *             if an invalid key is detected.
         * @throws NoSuchProviderException
         *             if there is no default provider.
         * @throws SignatureException
         *             if signature errors are detected.
         */
        Verify(
            [in] IPublicKey* key);

        /**
         * Verifies that this certificate was signed with the given public key. It
         * Uses the signature algorithm given by the provider.
         *
         * @param key
         *            PublicKey public key for which verification should be
         *            performed.
         * @param sigProvider
         *            String the name of the signature provider.
         * @exception CertificateException
         *                if encoding errors are detected.
         * @exception NoSuchAlgorithmException
         *                if an unsupported algorithm is detected.
         * @exception InvalidKeyException
         *                if an invalid key is detected.
         * @exception NoSuchProviderException
         *                if the specified provider does not exists.
         * @exception SignatureException
         *                if signature errors are detected.
         */
        Verify(
            [in] IPublicKey* key,
            [in] String sigProvider);

        /**
         * Returns a string containing a concise, human-readable description of the
         * receiver.
         *
         * @return a printable representation for the receiver.
         */
        ToString(
            [out] String *str);

        /**
         * Returns the public key corresponding to this certificate.
         *
         * @return the public key corresponding to this certificate.
         */
        GetPublicKey(
            [out] IPublicKey** key);
    }

    } // namespace Cert
    } // namespace Security
    } // namespace Elastos
}
