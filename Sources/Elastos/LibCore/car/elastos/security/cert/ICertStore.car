
module
{
    interface Elastos.Utility.ICollection;
    interface Elastos.Security.IProvider;
    interface Elastos.Security.Cert.ICertSelector;
    interface Elastos.Security.Cert.ICertStoreParameters;

    namespace Elastos {
    namespace Security {
    namespace Cert {

    interface ICertStore {
        /**
         * Returns the certificate store type.
         *
         * @return the certificate store type.
         */
        GetType(
            [out] String* type);

        /**
         * Returns the security provider.
         *
         * @return the security provider.
         */
        GetProvider(
            [out] IProvider** provider);

        /**
         * Returns a copy of the certificate store parameters that were used to
         * initialize this instance.
         *
         * @return a copy of the certificate store parameters or {@code null} if
         *         none were specified.
         */
        GetCertStoreParameters(
            [out] ICertStoreParameters** parameters);

        /**
         * Returns the list of {@code Certificate}s for the specified {@code
         * CertSelector} from this certificate store.
         *
         * @param selector
         *            the selector containing the criteria to search for
         *            certificates in this certificate store.
         * @return the list of {@code Certificate}s that match the criteria of the
         *         specified selector.
         * @throws CertStoreException
         *             if error(s) occur.
         */
        GetCertificates(
            [in] ICertSelector* selector,
            [out] ICollection** certs);

        /**
         * Returns the list of {@code CRL}s for the specified {@code CRLSelector}
         * from this certificate store.
         *
         * @param selector
         *            the selector containing the criteria to search for certificate
         *            revocation lists in this store.
         * @return the list of {@code CRL}s that match the criteria of the specified
         *         selector
         * @throws CertStoreException
         *             if error(s) occur.
         */
        GetCRLs(
            [in] ICRLSelector* selector,
            [out] ICollection** crls);
    }

    interface ICertStoreHelper {
        /**
         * Creates a new {@code CertStore} instance with the specified type and
         * initialized with the specified parameters.
         *
         * @param type
         *            the certificate store type.
         * @param params
         *            the certificate store parameters (may be {@code null}).
         * @return the new certificate store instance.
         * @throws NoSuchAlgorithmException
         *             if no provider can provide the specified certificate store
         *             type.
         * @throws InvalidAlgorithmParameterException
         *             if the specified parameters cannot be used to initialize this
         *             certificate store instance.
         * @throws NullPointerException if {@code type == null}
         */
        GetInstance(
            [in] String type,
            [in] ICertStoreParameters* params,
            [out] ICertStore** certStore);

        /**
         * Creates a new {@code CertStore} instance from the specified provider with
         * the specified type and initialized with the specified parameters.
         *
         * @param type
         *            the certificate store type.
         * @param params
         *            the certificate store parameters (may be {@code null}).
         * @param provider
         *            the name of the provider.
         * @return the new certificate store instance.
         * @throws NoSuchAlgorithmException
         *             if the specified provider cannot provide the requested
         *             certificate store type.
         * @throws NoSuchProviderException
         *             if no provider with the specified name can be found.
         * @throws InvalidAlgorithmParameterException
         *             if the specified parameters cannot be used to initialize this
         *             certificate store instance.
         * @throws IllegalArgumentException if {@code provider == null || provider.isEmpty()}
         * @throws NullPointerException
         *             if {@code type} is {@code null}.
         */
        GetInstanceEx(
            [in] String type,
            [in] ICertStoreParameters* params,
            [in] String provider,
            [out] ICertStore** certStore);

        /**
         * Creates a new {@code CertStore} instance from the specified provider with
         * the specified type and initialized with the specified parameters.
         * @param type
         *            the certificate store type.
         * @param params
         *            the certificate store parameters (may be {@code null}).
         * @param provider
         *            the name of the provider.
         * @return the new certificate store instance.
         * @throws NoSuchAlgorithmException
         *             if the specified provider cannot provide the requested
         *             certificate store type.
         * @throws InvalidAlgorithmParameterException
         *             if the specified parameters cannot be used to initialize this
         *             certificate store instance.
         * @throws IllegalArgumentException if {@code provider == null}
         * @throws NullPointerException if {@code type == null}
         */
        GetInstanceEx2(
            [in] String type,
            [in] ICertStoreParameters* params,
            [in] IProvider* provider,
            [out] ICertStore** certStore);

        /**
         * Returns the default {@code CertStore} type from the <i>Security
         * Properties</i>.
         *
         * @return the default {@code CertStore} type from the <i>Security
         *         Properties</i>, or the string {@code "LDAP"} if it cannot be
         *         determined.
         */
        GetDefaultType(
            [out] String* type);
    }

    } // namespace Cert
    } // namespace Security
    } // namespace Elastos
}
