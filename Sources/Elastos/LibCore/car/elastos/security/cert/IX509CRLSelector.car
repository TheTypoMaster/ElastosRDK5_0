
module
{
    interface Elastos.Math.IBigInteger;
    interface Elastos.Utility.ICollection;
    interface Elastos.Utility.IDate;
    interface Elastos.Security.Cert.IX509Certificate;
    interface Elastosx.Security.Auth.X500.IX500Principal;

    namespace Elastos {
    namespace Security {
    namespace Cert {

    [deprecated]
    interface IX509CRLSelector {
        /**
         * Sets the criterion for the issuer distinguished names.
         * <p>
         * The CRL issuer must match at least one of the specified distinguished
         * names.
         *
         * @param issuers
         *            the list of issuer distinguished names to match, or {@code
         *            null} if any issuer distinguished name will do.
         */
        SetIssuers(
            [in] ICollection* issuers);

        /**
         * <b>Do not use:</b> use {@link #setIssuers(Collection)} or one of
         * {@link #addIssuerName} instead. Sets the criterion for the issuer
         * distinguished names.
         * <p>
         * The CRL issuer must match at least one of the specified distinguished
         * names.
         * <p>
         * The specified parameter {@code names} is a collection with an entry for
         * each name to be included in the criterion. The name is specified as a
         * {@code String} or a byte array specifying the name (in RFC 2253 or ASN.1
         * DER encoded form)
         *
         * @param names
         *            the list of issuer distinguished names to match, or {@code
         *            null} if any issuer distinguished name will do.
         * @throws IOException
         *             if parsing fails.
         */
        SetIssuerNames(
            [in] ICollection* names);

        /**
         * Adds an issuer to the criterion for the issuer distinguished names.
         * <p>
         * The CRL issuer must match at least one of the specified distinguished
         * names.
         *
         * @param issuer
         *            the issuer to add to the criterion
         */
        AddIssuer(
            [in] IX500Principal* issuer);

        /**
         * <b>Do not use:</b>, use {@link #addIssuer(X500Principal)} or
         * {@link #addIssuerName(byte[])} instead. It can fail to match some CRLs
         * because of a loss of encoding information in a RFC 2253 string.
         * <p>
         * Adds an issuer to the criterion for the issuer distinguished names. The
         * CRK issuer must match at least one of the specified distinguished names.
         *
         * @param iss_name
         *            the RFC 2253 encoded name.
         * @throws IOException
         *             if parsing fails.
         */
        AddIssuerName(
            [in] String issuerName);

        /**
         * Adds an issuer to the criterion for the issuer distinguished names.
         * <p>
         * The CRL issuer must match at least one of the specified distinguished
         * names.
         *
         * @param iss_name
         *            the issuer to add to the criterion in ASN.1 DER encoded form.
         * @throws IOException
         *             if parsing fails.
         */
        AddIssuerNameEx(
            [in] ArrayOf<Byte>* iss_name);

        /**
         * Sets the criterion for the minimum CRL number.
         * <p>
         * The CRL must have a number extension with a value greater than or equal
         * to the specified parameter.
         *
         * @param minCRL
         *            the minimum CRL number or null to not check the minimum CRL
         *            number
         */
        SetMinCRLNumber(
            [in] IBigInteger* minCRL);

        /**
         * Sets the criterion for the maximum CRL number.
         * <p>
         * The CRL must have a number extension with a value less than or equal to
         * the specified parameter.
         *
         * @param maxCRL
         *            the maximum CRL number or null to not check the maximum CRL
         *            number.
         */
        SetMaxCRLNumber(
            [in] IBigInteger* maxCRL);

        /**
         * Sets the criterion for the CRL update period.
         * <p>
         * The CRL's {@code thisUpdate} value must be equal or before the specified
         * date and the {@code nextUpdate} value must be after the specified date.
         *
         * @param dateAndTime
         *            the date to search for valid CRL's or {@code null} to not
         *            check the date.
         */
        SetDateAndTime(
            [in] IDate* dateAndTime);

        /**
         * Sets a certificate hint to find CRLs. It's not a criterion but may help
         * finding relevant CRLs.
         *
         * @param cert
         *            the certificate hint or {@code null}.
         */
        SetCertificateChecking(
            [in] IX509Certificate* cert);

        /**
         * Returns the criterion for the issuer distinguished names.
         * <p>
         * The CRL issuer must match at least one of the distinguished names.
         *
         * @return the unmodifiable list of issuer distinguished names to match, or
         *         {@code null} if any issuer distinguished name will do.
         */
        GetIssuers(
            [out] ICollection** issuers);

        /**
         * Returns the criterion for the issuer distinguished names.
         * <p>
         * The CRL issuer must match at least one of the distinguished names.
         *
         * @return a copy of the list of issuer distinguished names to
         *         match, or {@code null} if any issuer distinguished name
         *         will do. The elements may be strings or ASN.1 DER
         *         encoded byte arrays.
         */
        GetIssuerNames(
            [out] ICollection** issuer);

        /**
         * Returns the criterion for the minimum CRL number.
         * <p>
         * The CRL must have a number extension with a value greater than or equal
         * to the returned value.
         *
         * @return the minimum CRL number or {@code null} if the minimum CRL number
         *         is not to be checked.
         */
        GetMinCRL(
            [out] IBigInteger** minCrl);

        /**
         * Returns the criterion for the maximum CRL number.
         * <p>
         * The CRL must have a number extension with a value less than or equal to
         * the returned value.
         *
         * @return the maximum CRL number or null if the maximum CRL number is not
         *         checked.
         */
        GetMaxCRL(
            [out] IBigInteger** maxCrl);

        /**
         * Returns the criterion for the CRL update period.
         * <p>
         * The CRL's {@code thisUpdate} value must be equal or before the returned
         * date and the {@code nextUpdate} value must be after the returned date.
         *
         * @return the date to search for valid CRL's or {@code null} if the date is
         *         not checked.
         */
        GetDateAndTime(
            [out] IDate** time);

        /**
         * Returns the certificate hint to find CRLs. It's not a criterion but may
         * help finding relevant CRLs.
         *
         * @return the certificate hint or {@code null} if none set.
         */
        GetCertificateChecking(
            [out] IX509Certificate** checking);

        /**
         * Returns a string representation of this {@code X509CRLSelector} instance.
         *
         * @return a string representation of this {@code X509CRLSelector} instance.
         */
        ToString(
            [out] String* str);

        /**
         * Returns whether the specified CRL matches all the criteria collected in
         * this instance.
         *
         * @param crl
         *            the CRL to check.
         * @return {@code true} if the CRL matches all the criteria, otherwise
         *         {@code false}.
         */
        Match(
            [in]  ICRL *crl,
            [out] Boolean *result);

        Clone(
            [out] IInterface **obj);
    }

    } // namespace Cert
    } // namespace Security
    } // namespace Elastos
}
