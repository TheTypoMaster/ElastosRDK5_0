
module
{
    interface Elastos.IO.IInputStream;
    interface Elastos.IO.IOutputStream;
    interface Elastos.Security.IPrincipal;
    interface Elastos.Security.IPublicKey;

    namespace Elastos {
    namespace Security {

    /**
     * {@code Certificate} represents an identity certificate, such as X.509 or PGP.
     * Note: A {@code Certificate} instances does not make any statement about the
     * validity of itself. It's in the responsibility of the application to verify
     * the validity of its certificates.
     *
     * @deprecated Replaced by behavior in {@link java.security.cert}
     * @see java.security.cert.Certificate
     */
    // @Deprecated
    interface ICertificate {
        /**
         * Decodes a certificate from the given {@code InputStream}. The format of
         * the data to encode must be that identified by {@link #getFormat()} and
         * encoded by {@link #encode(OutputStream)}.
         *
         * @param stream
         *            the {@code InputStream} to read from.
         * @throws KeyException
         *             if certificate information is incomplete or incorrect.
         * @throws IOException
         *             if an exception is thrown by accessing the provided stream.
         * @see #encode(OutputStream)
         * @see #getFormat()
         */
        Decode(
            [in] IInputStream* stream);

        /**
         * Encodes this certificate to an output stream. The
         * {@link #decode(InputStream)} method must be able to decode the format
         * written by this method.
         *
         * @param stream
         *            the {@code OutputStream} to encode this certificate to.
         * @throws KeyException
         *             if certificate information is incomplete or incorrect.
         * @throws IOException
         *             if an exception is thrown by accessing the provided stream.
         * @see #decode(InputStream)
         */
        Encode(
            [in] IOutputStream* stream);

        /**
         * Returns a string identifying the format of this certificate.
         *
         * @return a string identifying the format of this certificate.
         */
        GetFormat(
            [out] String* format);

        /**
         * Returns the guarantor of this certificate. That guarantor guarantees,
         * that the public key of this certificate is from the principal returned by
         * {@link #getPrincipal()}.
         *
         * @return the guarantor of this certificate.
         * @see #getPrincipal()
         */
        GetGuarantor(
            [out] IPrincipal** guarantor);

        /**
         * Returns the principal of this certificate. The principal is guaranteed by
         * the guarantor returned by {@link #getGuarantor()}.
         *
         * @return the principal of this certificate.
         * @see #getGuarantor()
         */
        GetPrincipal(
            [out] IPrincipal** principal);

        /**
         * Returns the public key of this certificate. The public key is guaranteed
         * by the guarantor to belong to the principal.
         *
         * @return the public key of this certificate.
         * @see #getGuarantor()
         * @see Certificate#getPrincipal()
         */
        GetPublicKey(
            [out] IPublicKey** pubKey);

        /**
         * Returns a string containing a concise, human-readable description of the
         * this {@code Certificate}.
         *
         * @param detailed
         *            whether or not this method should return detailed information.
         * @return a string representation of this certificate.
         */
        ToString(
            [in] Boolean detailed,
            [out] String* str);
    }

    } // namespace Security
    } // namespace Elastos
}
