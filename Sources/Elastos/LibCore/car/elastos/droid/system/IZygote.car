
module
{
    namespace Elastos {
    namespace Droid {
    namespace System {

    [deprecated, local]
    interface IZygote {
        /*
         * Bit values for "debugFlags" argument.  The definitions are duplicated
         * in the native code.
         */
        /** enable debugging over JDWP */
        const Int32 DEBUG_ENABLE_DEBUGGER   = 1;
        /** enable JNI checks */
        const Int32 DEBUG_ENABLE_CHECKJNI   = 1 << 1;
        /** enable Java programming language "assert" statements */
        const Int32 DEBUG_ENABLE_ASSERT     = 1 << 2;
        /** disable the JIT compiler */
        const Int32 DEBUG_ENABLE_SAFEMODE   = 1 << 3;
        /** Enable logging of third-party JNI activity. */
        const Int32 DEBUG_ENABLE_JNI_LOGGING = 1 << 4;

        /** No external storage should be mounted. */
        const Int32 MOUNT_EXTERNAL_NONE = 0;
        /** Single-user external storage should be mounted. */
        const Int32 MOUNT_EXTERNAL_SINGLEUSER = 1;
        /** Multi-user external storage should be mounted. */
        const Int32 MOUNT_EXTERNAL_MULTIUSER = 2;
        /** All multi-user external storage should be mounted. */
        const Int32 MOUNT_EXTERNAL_MULTIUSER_ALL = 3;

        /**
         * Forks a new VM instance.  The current VM must have been started
         * with the -Xzygote flag. <b>NOTE: new instance keeps all
         * root capabilities. The new process is expected to call capset()</b>.
         *
         * @param uid the UNIX uid that the new process should setuid() to after
         * fork()ing and and before spawning any threads.
         * @param gid the UNIX gid that the new process should setgid() to after
         * fork()ing and and before spawning any threads.
         * @param gids null-ok; a list of UNIX gids that the new process should
         * setgroups() to after fork and before spawning any threads.
         * @param debugFlags bit flags that enable debugging features.
         * @param rlimits null-ok an array of rlimit tuples, with the second
         * dimension having a length of 3 and representing
         * (resource, rlim_cur, rlim_max). These are set via the posix
         * setrlimit(2) call.
         * @param seInfo null-ok a string specifying SEAndroid information for
         * the new process.
         * @param niceName null-ok a string specifying the process name.
         *
         * @return 0 if this is the child, pid of the child
         * if this is the parent, or -1 on error.
         */
        ForkAndSpecialize(
            [in] Int32 uid,
            [in] Int32 gid,
            [in] ArrayOf<Int32>* gids,
            [in] Int32 debugFlags,
            [in] ArrayOf<Int32*>* rlimits, //int[][] rlimits,
            [in] Int32 mountExternal,
            [in] String seInfo,
            [in] String niceName,
            [out] Int32* pid);

        /**
         * Special method to start the system server process. In addition to the
         * common actions performed in forkAndSpecialize, the pid of the child
         * process is recorded such that the death of the child process will cause
         * zygote to exit.
         *
         * @param uid the UNIX uid that the new process should setuid() to after
         * fork()ing and and before spawning any threads.
         * @param gid the UNIX gid that the new process should setgid() to after
         * fork()ing and and before spawning any threads.
         * @param gids null-ok; a list of UNIX gids that the new process should
         * setgroups() to after fork and before spawning any threads.
         * @param debugFlags bit flags that enable debugging features.
         * @param rlimits null-ok an array of rlimit tuples, with the second
         * dimension having a length of 3 and representing
         * (resource, rlim_cur, rlim_max). These are set via the posix
         * setrlimit(2) call.
         * @param permittedCapabilities argument for setcap()
         * @param effectiveCapabilities argument for setcap()
         *
         * @return 0 if this is the child, pid of the child
         * if this is the parent, or -1 on error.
         */
        ForkSystemServer(
            [in] Int32 uid,
            [in] Int32 gid,
            [in] ArrayOf<Int32>* gids,
            [in] Int32 debugFlags,
            [in] ArrayOf<Int32*>* rlimits, //int[][] rlimits,
            [in] Int64 permittedCapabilities,
            [in] Int64 effectiveCapabilities,
            [out] Int32* pid);

        GetSystemInSafeMode(
            [out] Boolean* mode);
    }

    } // namespace System
    } // namespace Droid
    } // namespace Elastos
}
