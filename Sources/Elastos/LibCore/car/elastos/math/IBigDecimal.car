
module
{
    enum Elastos.Math.RoundingMode;

    interface Elastos.Math.IMathContext;
    interface Elastos.Math.IBigInteger;

    namespace Elastos {
    namespace Math {

    /**
     * An immutable arbitrary-precision signed decimal.
     * <p>
     * A value is represented by an arbitrary-precision "unscaled value" and
     * a signed 32-bit "scale", combined thus: unscaled * 10-scale. See
     * unscaledValue() and scale().</p>
     *
     * @sa unscaledValue()
     * @sa scale()
     * <p>
     * Most operations allow you to supply a MathContext to specify a desired rounding mode.</p>
     *
     * @sa MathContext
     *
     * @implements Elastos.Math.Elastos.Core.INumber
     *
     * @Involve
     * interface Elastos.IO.ISerializable;
     * interface Elastos.Core.INumber;
     * interface Elastos.Core.IComparable;
     */
    interface IBigDecimal {
        /**
         * Rounding mode where positive values are rounded towards positive infinity
         * and negative values towards negative infinity.
         *
         * @see RoundingMode#UP
         */
        const Int32 ROUND_UP = 0;

        /**
         * Rounding mode where the values are rounded towards zero.
         *
         * @see RoundingMode#DOWN
         */
        const Int32 ROUND_DOWN = 1;

        /**
         * Rounding mode to round towards positive infinity. For positive values
         * this rounding mode behaves as ROUND_UP, for negative values as ROUND_DOWN.
         *
         * @sa #ROUND_UP
         * @sa #ROUND_DOWN
         *
         * @see RoundingMode#CEILING
         */
        const Int32 ROUND_CEILING = 2;

        /**
         * Rounding mode to round towards negative infinity. For positive values
         * this rounding mode behaves as ROUND_DOWN, for negative values as ROUND_UP.
         *
         * @sa #ROUND_DOWN
         * @sa #ROUND_UP
         *
         * @see RoundingMode#FLOOR
         */
        const Int32 ROUND_FLOOR = 3;

        /**
         * Rounding mode where values are rounded towards the nearest neighbor.
         * Ties are broken by rounding up.
         *
         * @see RoundingMode#HALF_UP
         */
        const Int32 ROUND_HALF_UP = 4;

        /**
         * Rounding mode where values are rounded towards the nearest neighbor.
         * Ties are broken by rounding down.
         *
         * @see RoundingMode#HALF_DOWN
         */
        const Int32 ROUND_HALF_DOWN = 5;

        /**
         * Rounding mode where values are rounded towards the nearest neighbor.
         * Ties are broken by rounding to the even neighbor.
         *
         * @see RoundingMode#HALF_EVEN
         */
        const Int32 ROUND_HALF_EVEN = 6;

        /**
         * Rounding mode where the rounding operations throws an {
         * ArithmeticException} for the case that rounding is necessary, i.e. for
         * the case that the value cannot be represented exactly.
         *
         * @see RoundingMode#UNNECESSARY
         */
        const Int32 ROUND_UNNECESSARY = 7;

        /**
         * Returns a new {BigDecimal} whose value is {this + augend}.
         * The scale of the result is the maximum of the scales of the two
         * arguments.
         *
         * @param augend
         *            value to be added to {this}.
         * @return {this + augend}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {augend == null}.
         */
        Add(
            [in] IBigDecimal* augend,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {this + augend}.
         * The result is rounded according to the passed context {mc}.
         *
         * @param augend
         *            value to be added to {this}.
         * @param mc
         *            rounding mode and precision for the result of this operation.
         * @return {this + augend}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {augend == null} or {mc == null}.
         */
        Add(
            [in] IBigDecimal* augend,
            [in] IMathContext* mc,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {this - subtrahend}.
         * The scale of the result is the maximum of the scales of the two arguments.
         *
         * @param subtrahend
         *            value to be subtracted from {this}.
         * @return {this - subtrahend}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {subtrahend == null}.
         */
        Subtract(
            [in] IBigDecimal* subtrahend,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {this - subtrahend}.
         * The result is rounded according to the passed context {mc}.
         *
         * @param subtrahend
         *            value to be subtracted from {this}.
         * @param mc
         *            rounding mode and precision for the result of this operation.
         * @return {this - subtrahend}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {subtrahend == null} or {mc == null}.
         */
        Subtract(
            [in] IBigDecimal* subtrahend,
            [in] IMathContext* mc,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {this *multiplicand}.
         * The scale of the result is the sum of the scales of the
         * two arguments.
         *
         * @param multiplicand
         *            value to be multiplied with {this}.
         * @return {this * multiplicand}.
         * NullPointerException | if {multiplicand == null}.
         */
        Multiply(
            [in] IBigDecimal* multiplicand,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {this * multiplicand}.
         * The result is rounded according to the passed context {mc}.
         *
         * @param multiplicand
         *            value to be multiplied with {this}.
         * @param mc
         *            rounding mode and precision for the result of this operation.
         * @return {this * multiplicand}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {multiplicand == null} or {mc == null}.
         */
        Multiply(
            [in] IBigDecimal* multiplicand,
            [in] IMathContext* mc,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {this / divisor}.
         * As scale of the result the parameter {scale} is used. If rounding
         * is required to meet the specified scale, then the specified rounding mode
         * {roundingMode} is applied.
         *
         * @param divisor
         *            value by which {this} is divided.
         * @param scale
         *            the scale of the result returned.
         * @param roundingMode
         *            rounding mode to be used to round the result.
         * @return {this / divisor} rounded according to the given rounding
         *         mode.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {divisor == null} or {roundingMode == null}.
         * ArithmeticException | if {divisor == 0}.
         * ArithmeticException | if {roundingMode == RoundingMode.UNNECESSAR}Y and rounding is necessary according to the given scale and given precision.
         */
        Divide(
            [in] IBigDecimal* divisor,
            [in] Int32 scale,
            [in] RoundingMode roundingMode,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {this / divisor}.
         * The scale of the result is the scale of {this}. If rounding is
         * required to meet the specified scale, then the specified rounding mode
         * {roundingMode} is applied.
         *
         * @param divisor
         *            value by which {this} is divided.
         * @param roundingMode
         *            rounding mode to be used to round the result.
         * @return {this / divisor} rounded according to the given rounding
         *         mode.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {divisor == null}.
         * IllegalArgumentException | if {roundingMode} is not a valid rounding mode.
         * ArithmeticException | if {divisor == 0}.
         * ArithmeticException | if {roundingMode == ROUND_UNNECESSARY} and rounding is necessary according to the scale of this.
         */
        Divide(
            [in] IBigDecimal* divisor,
            [in] RoundingMode roundingMode,
            [out] IBigDecimal** result);

        /**
         * Returns a new { BigDecimal} whose value is {this / divisor}.
         * The scale of te result is the difference of the scales of {this}
         * and {divisor}. If the exact result requires more digits, then the
         * scale is adjusted accordingly. For example, {1/128 = 0.0078125}
         * which has a scale of {7} and precision {5}.
         *
         * @param divisor
         *            value by which {this} is divided.
         * @return {this / divisor}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {divisor == null}.
         * ArithmeticException | if {divisor == 0}.
         * ArithmeticException | if the result cannot be represented exactly.
         */
        Divide(
            [in] IBigDecimal* divisor,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {this / divisor}.
         * The result is rounded according to the passed context {mc}. If the
         * passed math context specifies precision {0}, then this call is
         * equivalent to {this.divide(divisor)}.
         *
         * @param divisor
         *            value by which {this} is divided.
         * @param mc
         *            rounding mode and precision for the result of this operation.
         * @return {this / divisor}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {divisor == null} or {mc == null}.
         * ArithmeticException | if {divisor == 0}.
         * ArithmeticException | if {mc.getRoundingMode() == UNNECESSARY} and rounding is necessary according {mc.getPrecision()}.
         */
        Divide(
            [in] IBigDecimal* divisor,
            [in] IMathContext* mc,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is the integral part of
         * {this / divisor}. The quotient is rounded down towards zero to the
         * next integer. For example, {0.5/0.2 = 2}.
         *
         * @param divisor
         *            value by which {this} is divided.
         * @return integral part of {this / divisor}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {divisor == null}.
         * ArithmeticException | if {divisor == 0}.
         */
        DivideToIntegralValue(
            [in] IBigDecimal* divisor,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is the integral part of
         * {this / divisor}. The quotient is rounded down towards zero to the
         * next integer. The rounding mode passed with the parameter {mc} is
         * not considered. But if the precision of {mc > 0} and the integral
         * part requires more digits, then an {ArithmeticException} is thrown.
         *
         * @param divisor
         *            value by which {this} is divided.
         * @param mc
         *            math context which determines the maximal precision of the
         *            result.
         * @return integral part of {this / divisor}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {divisor == null} or {mc == null}.
         * ArithmeticException | if {divisor == 0}.
         * ArithmeticException | if {mc.getPrecision() > 0} and the result requires more digits to be represented.
         */
        DivideToIntegralValue(
            [in] IBigDecimal* divisor,
            [in] IMathContext* mc,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {this % divisor}.
         * <p>
         * The remainder is defined as
         * {this - this.divideToIntegralValue(divisor) * divisor}.
         *
         * @param divisor
         *            value by which {this} is divided.
         * @return {this % divisor}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|* @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {divisor == null}.
         * ArithmeticException | if {divisor == 0}.
         */
        Remainder(
            [in] IBigDecimal* divisor,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {this % divisor}.
         * <p>
         * The remainder is defined as
         * {this - this.divideToIntegralValue(divisor) * divisor}.
         * <p>
         * The specified rounding mode {mc} is used for the division only.
         *
         * @param divisor
         *            value by which {this} is divided.
         * @param mc
         *            rounding mode and precision to be used.
         * @return {this % divisor}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {divisor == null}.
         * ArithmeticException | if {divisor == 0}.
         * ArithmeticException | if {mc.getPrecision() > 0} and the result of { this.divideToIntegralValue(divisor, mc)} requires more digits to be represented.
         */
        Remainder(
            [in] IBigDecimal* divisor,
            [in] IMathContext* mc,
            [out] IBigDecimal** result);

        /**
         * Returns a {BigDecimal} array which contains the integral part of
         * {this / divisor} at index 0 and the remainder {this % divisor} at index 1.
         * The quotient is rounded down towards zero to the next integer.
         *
         * @param divisor
         *            value by which {this} is divided.
         * @return {[this.divideToIntegralValue(divisor),
         *         this.remainder(divisor)]}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {divisor == null}.
         * ArithmeticException | if {divisor == 0}.
         * @see #divideToIntegralValue
         * @see #remainder
         */
        DivideAndRemainder(
            [in] IBigDecimal* divisor,
            [out, callee] ArrayOf<IBigDecimal*>* result);

        /**
         * Returns a {BigDecimal} array which contains the integral part of
         * {this / divisor} at index 0 and the remainder {this % divisor} at index 1.
         * The quotient is rounded down towards zero to the
         * next integer. The rounding mode passed with the parameter {mc} is
         * not considered. But if the precision of {mc > 0} and the integral
         * part requires more digits, then an {ArithmeticException} is thrown.
         *
         * @param divisor
         *            value by which {this} is divided.
         * @param mc
         *            math context which determines the maximal precision of the
         *            result.
         * @return {[this.divideToIntegralValue(divisor),
         *         this.remainder(divisor)]}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {divisor == null}.
         * ArithmeticException | if {divisor == 0}.
         * @see #divideToIntegralValue
         * @see #remainder
         */
        DivideAndRemainder(
            [in] IBigDecimal* divisor,
            [in] IMathContext* mc,
            [out, callee] ArrayOf<IBigDecimal*>* result);

        /**
         * Returns a new {BigDecimal} whose value is {this ^ n}. The
         * scale of the result is {n} times the scales of {this}.
         * <p>
         * {x.pow(0)} returns {1}, even if {x == 0}.
         * <p>
         * Implementation Note: The implementation is based on the ANSI standard
         * X3.274-1996 algorithm.
         *
         * @param n
         *            exponent to which {this} is raised.
         * @return {this ^ n}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * ArithmeticException | if {n < 0} or {n > 999999999}.
         */
        Pow(
            [in] Int32 n,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {this ^ n}. The
         * result is rounded according to the passed context {mc}.
         * <p>
         * Implementation Note: The implementation is based on the ANSI standard
         * X3.274-1996 algorithm.
         *
         * @param n
         *            exponent to which {this} is raised.
         * @param mc
         *            rounding mode and precision for the result of this operation.
         * @return {this ^ n}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * ArithmeticException | if {n < 0} or {n > 999999999}.
         */
        Pow(
            [in] Int32 n,
            [in] IMathContext* mc,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is the absolute value of
         * {this}. The scale of the result is the same as the scale of this.
         *
         * @return {abs(this)}
         */
        Abs(
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is the absolute value of
         * {this}. The result is rounded according to the passed context
         * {mc}.
         *
         * @param mc
         *            rounding mode and precision for the result of this operation.
         * @return {abs(this)}
         */
        Abs(
            [in] IMathContext* mc,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is the {-this}. The
         * scale of the result is the same as the scale of this.
         *
         * @return {-this}
         */
        Negate(
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is the {-this}. The
         * result is rounded according to the passed context {mc}.
         *
         * @param mc
         *            rounding mode and precision for the result of this operation.
         * @return {-this}
         */
        Negate(
            [in] IMathContext* mc,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {+this}. The scale
         * of the result is the same as the scale of this.
         *
         * @return {this}
         */
        Plus(
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {+this}. The result
         * is rounded according to the passed context {mc}.
         *
         * @param mc
         *            rounding mode and precision for the result of this operation.
         * @return {this}, rounded
         */
        Plus(
            [in] IMathContext* mc,
            [out] IBigDecimal** result);

        /**
         * Returns the sign of this {BigDecimal}.
         *
         * @return {-1} if {this < 0},
         *         {0} if {this == 0},
         *         {1} if {this > 0}.
         */
        GetSignum(
            [out] Int32* sign);

        /**
         * Returns the scale of this {BigDecimal}. The scale is the number of
         * digits behind the decimal point. The value of this {BigDecimal} is
         * the unsignedValue * 10^(-scale). If the scale is negative, then this
         * {BigDecimal} represents a big integer.
         *
         * @return the scale of this {BigDecimal}.
         */
        GetScale(
            [out] Int32* scale);

        /**
         * Returns the precision of this {BigDecimal}. The precision is the
         * number of decimal digits used to represent this decimal. It is equivalent
         * to the number of digits of the unscaled value. The precision of {0}
         * is {1} (independent of the scale).
         *
         * @return the precision of this {BigDecimal}.
         */
        GetPrecision(
            [out] Int32* precision);

        /**
         * Returns the unscaled value (mantissa) of this {@code BigDecimal} instance
         * as a {@code BigInteger}. The unscaled value can be computed as
         * {@code this * 10<sup>scale</sup>}.
         */
        GetUnscaledValue(
            [out] IBigInteger** value);

        /**
         * Returns a new {BigDecimal} whose value is {this}, rounded
         * according to the passed context {mc}.
         * <p>
         * If {mc.precision = 0}, then no rounding is performed.
         * <p>
         * If {mc.precision > 0} and {mc.roundingMode == UNNECESSARY},
         * then an {ArithmeticException} is thrown if the result cannot be
         * represented exactly within the given precision.
         *
         * @param mc
         *            rounding mode and precision for the result of this operation.
         * @return {this} rounded according to the passed context.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * ArithmeticException | if {mc.precision > 0} and {mc.roundingMode == UNNECESSARY} and this cannot be represented within the given precision.
         */
        Round(
            [in] IMathContext* mc,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} instance with the specified scale.
         * <p>
         * If the new scale is greater than the old scale, then additional zeros are
         * added to the unscaled value. In this case no rounding is necessary.
         * <p>
         * If the new scale is smaller than the old scale, then trailing digits are
         * removed. If these trailing digits are not zero, then the remaining
         * unscaled value has to be rounded. For this rounding operation the
         * specified rounding mode is used.
         *
         * @param newScale
         *            scale of the result returned.
         * @param roundingMode
         *            rounding mode to be used to round the result.
         * @return a new {BigDecimal} instance with the specified scale.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {roundingMode == null}.
         * ArithmeticException | if {roundingMode == ROUND_UNNECESSARY} and rounding is necessary according to the given scale.
         */
        SetScale(
            [in] Int32 newScale,
            [in] RoundingMode roundingMode,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} instance with the specified scale. If
         * the new scale is greater than the old scale, then additional zeros are
         * added to the unscaled value. If the new scale is smaller than the old
         * scale, then trailing zeros are removed. If the trailing digits are not
         * zeros then an ArithmeticException is thrown.
         * <p>
         * If no exception is thrown, then the following equation holds:
         * {x.setScale(s).compareTo(x) == 0}.
         *
         * @param newScale
         *            scale of the result returned.
         * @return a new {BigDecimal} instance with the specified scale.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * ArithmeticException | if rounding would be necessary.
         */
        SetScale(
            [in] Int32 newScale,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} instance where the decimal point has
         * been moved {n} places to the left. If {n < 0} then the
         * decimal point is moved {-n} places to the right.
         * <p>
         * The result is obtained by changing its scale. If the scale of the result
         * becomes negative, then its precision is increased such that the scale is
         * zero.
         * <p>
         * Note, that {movePointLeft(0)} returns a result which is
         * mathematically equivalent, but which has {scale >= 0}.
         *
         * @param n
         *            number of placed the decimal point has to be moved.
         * @return {this * 10^(-n}).
         */
        MovePointLeft(
           [in] Int32 n,
           [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} instance where the decimal point has
         * been moved {n} places to the right. If {n < 0} then the
         * decimal point is moved {-n} places to the left.
         * <p>
         * The result is obtained by changing its scale. If the scale of the result
         * becomes negative, then its precision is increased such that the scale is
         * zero.
         * <p>
         * Note, that {movePointRight(0)} returns a result which is
         * mathematically equivalent, but which has scale >= 0.
         *
         * @param n
         *            number of placed the decimal point has to be moved.
         * @return {this * 10^n}.
         */
        MovePointRight(
           [in] Int32 n,
           [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} whose value is {this} 10^{n}.
         * The scale of the result is {this.scale()} - {n}.
         * The precision of the result is the precision of {this}.
         * <p>
         * This method has the same effect as movePointRight, except that
         * the precision is not changed.
         *
         * @sa #movePointRight
         *
         * @param n
         *            number of places the decimal point has to be moved.
         * @return {this * 10^n}
         */
        ScaleByPowerOfTen(
            [in] Int32 n,
            [out] IBigDecimal** result);

        /**
         * Returns a new {BigDecimal} instance with the same value as
         * {this} but with a unscaled value where the trailing zeros have been
         * removed. If the unscaled value of {this} has n trailing zeros, then
         * the scale and the precision of the result has been reduced by n.
         *
         * @return a new {BigDecimal} instance equivalent to this where the
         *         trailing zeros of the unscaled value have been removed.
         */
        StripTrailingZeros(
           [out] IBigDecimal** result);

        /**
         * Returns the minimum of this {BigDecimal} and {val}.
         *
         * @param val
         *            value to be used to compute the minimum with this.
         * @return {min(this, val}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {val == null}.
         */
        Min(
            [in] IBigDecimal* val,
            [out] IBigDecimal** result);

        /**
         * Returns the maximum of this {BigDecimal} and {val}.
         *
         * @param val
         *            value to be used to compute the maximum with this.
         * @return {max(this, val}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NullPointerException | if {val == null}.
         */
        Max(
            [in] IBigDecimal* val,
            [out] IBigDecimal** result);

        /**
         * Returns a string representation of this {BigDecimal}. This
         * representation always prints all significant digits of this value.
         * <p>
         * If the scale is negative or if {scale - precision >= 6} then
         * engineering notation is used. Engineering notation is similar to the
         * scientific notation except that the exponent is made to be a multiple of
         * 3 such that the integer part is >= 1 and < 1000.
         *
         * @return a string representation of {this} in engineering notation
         *         if necessary.
         */
        ToEngineeringString(
            [out] String* representation);

        /**
         * Returns a string representation of this {BigDecimal}. No scientific
         * notation is used. This methods adds zeros where necessary.
         * <p>
         * If this string representation is used to create a new instance, this
         * instance is generally not identical to {this} as the precision
         * changes.
         * <p>
         * {x.equals(new BigDecimal(x.toPlainString())} usually returns
         * {false}.
         * <p>
         * {x.compareTo(new BigDecimal(x.toPlainString())} returns {0}.
         *
         * @return a string representation of {this} without exponent part.
         */
        ToPlainString(
            [out] String* representation);

        /**
         * Returns this {BigDecimal} as a big integer instance. A fractional
         * part is discarded.
         *
         * @return this {BigDecimal} as a big integer instance.
         */
        ToBigInteger(
            [out] IBigInteger** result);

        /**
         * Returns this {BigDecimal} as a big integer instance if it has no
         * fractional part. If this {BigDecimal} has a fractional part, i.e.
         * if rounding would be necessary, an {ArithmeticException} is thrown.
         *
         * @return this {BigDecimal} as a big integer value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * ArithmeticException | if rounding is necessary.
         */
        ToBigIntegerExact(
            [out] IBigInteger** result);

        /**
         * Returns this {BigDecimal} as a long value if it has no fractional
         * part and if its value fits to the int range ([-2^{63}..2^{63}-1]). If
         * these conditions are not met, an {ArithmeticException} is thrown.
         *
         * @return this {BigDecimal} as a long value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * ArithmeticException | if rounding is necessary or the number doesn't fit in a long.
         */
        Int64ValueExact(
            [out] Int64* value);

        /**
         * Returns this {BigDecimal} as a int value if it has no fractional
         * part and if its value fits to the int range ([-2^{31}..2^{31}-1]). If
         * these conditions are not met, an {ArithmeticException} is thrown.
         *
         * @return this {BigDecimal} as a int value.
         * ArithmeticException | if rounding is necessary or the number doesn't fit in a int.
         */
        Int32ValueExact(
            [out] Int32* value);

        /**
         * Returns this {BigDecimal} as a short value if it has no fractional
         * part and if its value fits to the short range ([-2^{15}..2^{15}-1]). If
         * these conditions are not met, an {ArithmeticException} is thrown.
         *
         * @return this {BigDecimal} as a short value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * ArithmeticException | if rounding is necessary of the number doesn't fit in a short.
         */
        Int16ValueExact(
            [out] Int16* value);

        /**
         * Returns this {BigDecimal} as a byte value if it has no fractional
         * part and if its value fits to the byte range ([-128..127]). If these
         * conditions are not met, an {ArithmeticException} is thrown.
         *
         * @return this {BigDecimal} as a byte value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * ArithmeticException | if rounding is necessary or the number doesn't fit in a byte.
         */
        ByteValueExact(
            [out] Byte* value);

        /**
         * Returns the unit in the last place (ULP) of this {BigDecimal}
         * instance. An ULP is the distance to the nearest big decimal with the same
         * precision.
         * <p>
         * The amount of a rounding error in the evaluation of aDIRS =  floating-point
         * operation is often expressed in ULPs. An error of 1 ULP is often seen as
         * a tolerable error.
         * <p>
         * For class {BigDecimal}, the ULP of a number is simply 10^(-scale).
         * <p>
         * For example, {new BigDecimal(0.1).ulp()} returns {1E-55}.
         *
         * @return unit in the last place (ULP) of this {BigDecimal} instance.
         */
        Ulp(
            [out] IBigDecimal** newObj);

        Equals(
            [in] IInterface* obj,
            [out] Boolean* result);
    }

    interface IBigDecimalHelper {
        /**
         * Returns a new {BigDecimal} instance whose value is equal to
         * {unscaledVal} 10^(-{scale}). The scale of the result is
         * {scale}, and its unscaled value is {unscaledVal}.
         *
         * @param unscaledVal
         *            unscaled value to be used to construct the new {BigDecimal}.
         * @param scale
         *            scale to be used to construct the new {BigDecimal}.
         * @return {BigDecimal} instance with the value {unscaledVal}*
         *         10^(-{unscaledVal}).
         */
        ValueOf(
            [in] Int64 unscaledVal,
            [in] Int32 scale,
            [out] IBigDecimal** newObj);

        /**
         * Returns a new {BigDecimal} instance whose value is equal to
         * {unscaledVal}. The scale of the result is {0}, and its unscaled
         * value is {unscaledVal}.
         *
         * @param unscaledVal
         *            value to be converted to a {BigDecimal}.
         * @return {BigDecimal} instance with the value {unscaledVal}.
         */
        ValueOf(
            [in] Int64 unscaledVal,
            [out] IBigDecimal** newObj);

        /**
         * Returns a new {BigDecimal} instance whose value is equal to {val}.
         * The new decimal is constructed as if the {BigDecimal(String)}
         * constructor is called with an argument which is equal to
         * {Double.toString(val)}. For example, {valueOf("0.1")} is converted to
         * (unscaled=1, scale=1), although the double {0.1} cannot be
         * represented exactly as a double value. In contrast to that, a new
         * {BigDecimal(0.1)} instance has the value
         * {0.1000000000000000055511151231257827021181583404541015625} with an
         * unscaled value
         * {1000000000000000055511151231257827021181583404541015625}
         * and the scale {55}.
         *
         * @param val
         *            double value to be converted to a {BigDecimal}.
         * @return {BigDecimal} instance with the value {val}.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * NumberFormatException | if {val} is infinite or {val} is not a number
         */
        ValueOf(
            [in] Double val,
            [out] IBigDecimal** newObj);

        GetZERO(
            [out] IBigDecimal** zero);

        GetONE(
            [out] IBigDecimal** one);

        GetTEN(
            [out] IBigDecimal** ten);
    }

    } // namespace Math
    } // namespace Elastos
}
