module
{
    interface Elastos.IO.IObjectInputStream;
    interface Elastos.IO.IObjectOutputStream;
    interface Elastos.IO.IObjectStreamField;
    interface Elastos.Utility.IDate;
    interface Elastos.Utility.ILocale;
    interface Elastos.Text.IFieldPosition;
    interface Elastos.Text.IParsePosition;
    interface Elastos.Core.IStringBuffer;

    namespace Elastos {
    namespace Text {

    /**
     * The instances of this inner class are used as attribute keys in
     * AttributedCharacterIterator that the formatToCharacterIterator(Object) method returns.
     *
     * @sa formatToCharacterIterator(Object)
     * <p>
     * There is no public constructor in this class, the only instances are the constants defined here.
     *
     * @implements Elastos.Text.IFormatField
     */
    interface IMessageFormatField extends IFormatField {

    }

    /**
     * The base class for all formats.
     * <p>
     * This is an abstract base class which specifies the protocol for classes which
     * convert other objects or values, such as numeric values and dates, and their
     * string representations. In some cases these representations may be localized or
     * contain localized characters or strings. For example, a numeric formatter such
     * as DecimalFormat may convert a numeric value such as 12345 to the string
     * "$12,345". It may also parse the string back into a numeric value. A date and
     * time formatter like SimpleDateFormat may represent a specific date, encoded
     * numerically, as a string such as "Wednesday, February 26, 1997 AD".
     * <p>
     * Many of the concrete subclasses of Format employ the notion of a pattern.
     * A pattern is a string representation of the rules which govern the conversion
     * between values and strings. For example, a DecimalFormat object may be
     * associated with the pattern "$#,##0.00;($#,##0.00)", which is a common US
     * English format for currency values, yielding strings such as "$1,234.45" for
     * 1234.45, and "($987.65)" for -987.6543. The specific syntax of a pattern is
     * defined by each subclass. Even though many subclasses use patterns, the notion
     * of a pattern is not inherent to Format classes in general, and is not part of
     * the explicit base class protocol.
     * <p>
     * Two complex formatting classes are worth mentioning: MessageFormat and
     * ChoiceFormat. ChoiceFormat is a subclass of NumberFormat which allows the user
     * to format different number ranges as strings. For instance, 0 may be
     * represented as "no files", 1 as "one file", and any number greater than 1 as
     * "many files". MessageFormat is a formatter which utilizes other Format objects
     * to format a string containing multiple values. For instance, a MessageFormat
     * object might produce the string "There are no files on the disk MyDisk on
     * February 27, 1997." given the arguments 0, "MyDisk", and the date value of
     * 2/27/97. See the ChoiceFormat and MessageFormat descriptions for further
     * information.
     *
     * @implements Elastos.Text.IFormat
     */
    [deprecated]
    interface IMessageFormat extends IFormat {
        /**
         * Changes this {MessageFormat} to use the specified pattern.
         */
        ApplyPattern(
            [in] String temp);

        /**
         * Converts the specified objects into a string which it appends to the
         * specified string buffer using the pattern of this message format.
         * <p>
         * If the {field} member of the specified {FieldPosition} is
         * {MessageFormat.Field.ARGUMENT}, then the begin and end index of
         * this field position is set to the location of the first occurrence of a
         * message format argument. Otherwise, the {FieldPosition} is ignored.
         */
        FormatObjects(
            [in] ArrayOf<IInterface*>* objects,
            [in] IStringBuffer * buffer,
            [in] IFieldPosition* field,
            [out] IStringBuffer ** value);

        /**
         * Returns the {Format} instances used by this message format.
         */
        GetFormats(
            [out, callee] ArrayOf<IFormat*>* formats);

        /**
         * Returns the formats used for each argument index. If an argument is
         * placed more than once in the pattern string, then this returns the format
         * of the last one.
         */
        GetFormatsByArgumentIndex(
            [out, callee] ArrayOf<IFormat*>* formatsByArgumentIndex);

        /**
         * Sets the format used for the argument at index {argIndex} to
         * {format}.
         */
        SetFormatByArgumentIndex(
            [in] Int32 argIndex,
            [in] IFormat* format);

        /**
         * Sets the formats used for each argument. The {formats} array
         * elements should be in the order of the argument indices.
         */
        SetFormatsByArgumentIndexEx(
            [in] ArrayOf<IFormat*>* formats);

        /**
         * Returns the locale used when creating formats.
         */
        GetLocale(
            [out] ILocale** locale);

        /**
         * Parses the message arguments from the specified string using the rules of
         * this message format.
         */
        Parse(
            [in] String string,
            [out, callee] ArrayOf<IInterface*>* result);

        /**
         * Parses the message argument from the specified string starting at the
         * index specified by {position}. If the string is successfully
         * parsed then the index of the {ParsePosition} is updated to the
         * index following the parsed text. On error, the index is unchanged and the
         * error index of {ParsePosition} is set to the index where the error
         * occurred.
         */
        ParseEx(
            [in] String string,
            [in] IParsePosition* position,
            [out, callee] ArrayOf<IInterface*>* result);

        /**
         * Sets the specified format used by this message format.
         */
        SetFormat(
            [in] Int32 offset,
            [in] IFormat* format);

        /**
         * Sets the formats used by this message format.
         */
        SetFormats(
            [in] ArrayOf<IFormat*>* formats);

        /**
         * Sets the locale to use when creating {Format} instances. Changing
         * the locale may change the behavior of {applyPattern},
         * {toPattern}, {format} and {formatToCharacterIterator}.
         */
        SetLocale(
            [in] ILocale* locale);

        /**
         * Returns the pattern of this message format.
         */
        ToPattern(
            [out] String* pattern);

        GetMaxOffset(
            [out] Int32* maxOffset);

        GetArgumentNumbers(
            [out,callee] ArrayOf<Int32>* argumentNumbers);

        GetStrings(
            [out,callee] ArrayOf<String>* strings);
    }

    } // namespace Text
    } // namespace Elastos
}