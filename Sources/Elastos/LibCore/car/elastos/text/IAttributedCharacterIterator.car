module
{
    interface Elastos.Utility.ISet;
    interface Elastos.Utility.IMap;

    namespace Elastos {
    namespace Text {

    /**
     * Defines keys for text attributes.
     */
    /**
      * @Involve
      * interface Serializable;
      */
    interface IAttributedCharacterIteratorAttribute {
        /**
         * Returns the name of this attribute.
         *
         * @return the name of this attribute.
         */
        GetName(
            [out] String* name);

        /**
         * Resolves a deserialized instance to the correct constant attribute.
         */
        ReadResolve(
            [out] IInterface** resolve);

        /**
         * Compares this attribute with the specified object. Checks if both
         * objects are the same instance. It is defined final so all subclasses
         * have the same behavior for this method.
         *
         * @param object
         *            the object to compare against.
         * @return {@code true} if the object passed is equal to this instance;
         *         {@code false} otherwise.
         */
        // @Override
        Equals(
            [in] IInterface * obj,
            [out] Boolean * value);

        /**
         * Calculates the hash code for objects of type {@code Attribute}. It
         * is defined final so all sub types calculate their hash code
         * identically.
         *
         * @return the hash code for this instance of {@code Attribute}.
         */
        // @Override
        GetHashCode(
            [out] Int32 * value);

        /**
         * Returns the name of the class followed by a "(", the name of the
         * attribute, and a ")".
         *
         * @return the string representing this instance.
         */
        // @Override
        ToString(
            [out] String * str);
    }

    interface IAttributedCharacterIteratorAttributeHelper {
        /**
         * This attribute marks segments from an input method. Most input
         * methods create these segments for words.
         *
         * The value objects are of the type {@code Annotation} which contain
         * {@code null}.
         */
        GetINPUT_METHOD_SEGMENT(
            [out] IAttributedCharacterIteratorAttribute** attr);

        /**
         * The attribute describing the language of a character. The value
         * objects are of type {@code Locale} or a subtype of it.
         */
        GetLANGUAGE(
            [out] IAttributedCharacterIteratorAttribute** attr);

        /**
         * For languages that have different reading directions of text (like
         * Japanese), this attribute allows to define which reading should be
         * used. The value objects are of type {@code Annotation} which
         * contain a {@code String}.
         */
        GetREADING(
            [out] IAttributedCharacterIteratorAttribute** attr);
    }

    /**
     * Extends the
     * {@link CharacterIterator} interface, adding support for iterating over
     * attributes and not only characters. An
     * {@code AttributedCharacterIterator} also allows the user to find runs and
     * their limits. Runs are defined as ranges of characters that all have the same
     * attributes with the same values.
     */
    /**
     * @Involve
     * interface ICharacterIterator
     */
    interface IAttributedCharacterIterator {
        /**
         * Returns a set of attributes present in the {
         * AttributedCharacterIterator}. An empty set is returned if no attributes
         * were defined.
         *
         * @return a set of attribute keys; may be empty.
         */
        GetAllAttributeKeys(
            [out] ISet** allAttrKeys);

        /**
         * Returns the value stored in the attribute for the current character. If
         * the attribute was not defined then {null} is returned.
         *
         * @param attribute the attribute for which the value should be returned.
         * @return the value of the requested attribute for the current character or
         *         {null} if it was not defined.
         */
        GetAttribute(
            [in] IAttributedCharacterIteratorAttribute* attribute,
            [out] IInterface** value);

        /**
         * Returns a map of all attributes of the current character. If no
         * attributes were defined for the current character then an empty map is
         * returned.
         *
         * @return a map of all attributes for the current character or an empty
         *         map.
         */
        GetAttributes(
            [out] IMap** map);

        /**
         * Returns the index of the last character in the run having the same
         * attributes as the current character.
         *
         * @return the index of the last character of the current run.
         */
        GetRunLimit(
            [out] Int32* index);

        /**
         * Returns the index of the last character in the run that has the same
         * attribute value for the given attribute as the current character.
         *
         * @param attribute
         *            the attribute which the run is based on.
         * @return the index of the last character of the current run.
         */
        GetRunLimit(
            [in] IAttributedCharacterIteratorAttribute* attribute,
            [out] Int32* index);

        /**
         * Returns the index of the last character in the run that has the same
         * attribute values for the attributes in the set as the current character.
         *
         * @param attributes
         *            the set of attributes which the run is based on.
         * @return the index of the last character of the current run.
         */
        GetRunLimit(
            [in] ISet* attributes,
            [out] Int32* index);

        /**
         * Returns the index of the first character in the run that has the same
         * attributes as the current character.
         *
         * @return the index of the last character of the current run.
         */
        GetRunStart(
            [out] Int32* index);

        /**
         * Returns the index of the first character in the run that has the same
         * attribute value for the given attribute as the current character.
         *
         * @param attribute
         *            the attribute which the run is based on.
         * @return the index of the last character of the current run.
         */
        GetRunStart(
            [in] IAttributedCharacterIteratorAttribute* attribute,
            [out] Int32* index);

        /**
         * Returns the index of the first character in the run that has the same
         * attribute values for the attributes in the set as the current character.
         *
         * @param attributes
         *            the set of attributes which the run is based on.
         * @return the index of the last character of the current run.
         */
        GetRunStart(
            [in] ISet* attributes,
            [out] Int32* index);
    }

    } // namespace Text
    } // namespace Elastos
}
