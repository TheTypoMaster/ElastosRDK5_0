module
{

    namespace Elastos {
    namespace Text {

    /**
     * Returns a fixed string based on a numeric value. The class can be used
     * in conjunction with the MessageFormat class to handle plurals in
     * messages. ChoiceFormat enables users to attach a format to a range of
     * numbers. The choice is specified with an ascending list of doubles,
     * where each item specifies a half-open interval up to the next item as
     * in the following: X matches j if and only if limit[j] <= X < limit[j+1].
     *
     * @sa MessageFormat
     * <p>
     * If there is no match, then either the first or last index is used.
     * The first or last index is used depending on whether the number is too
     * low or too high. The length of the format array must be the same as the length of the limits array.
     * <p>
     * Examples:
     * <pre>
     *   double[] limits = {1, 2, 3, 4, 5, 6, 7};
     *   String[] fmts = {"Sun", "Mon", "Tue", "Wed", "Thur", "Fri", "Sat"};
     *   double[] limits2 = {0, 1, ChoiceFormat.nextDouble(1)};
     *   String[] fmts2 = {"no files", "one file", "many files"};
     * </pre>
     * <p>
     * ChoiceFormat.nextDouble(double) allows to get the double following the one passed to the method. This is used to create half open intervals.
     * <p>
     * ChoiceFormat objects also may be converted to and from patterns. The
     * conversion can be done programmatically, as in the example above, or
     * by using a pattern like the following:
     * <pre>
     *  "1#Sun|2#Mon|3#Tue|4#Wed|5#Thur|6#Fri|7#Sat"
     *  "0#are no files|1#is one file|1<are many files"
     * <pre>
     *
     * where:
     * <p>
     *  "#" specifies an inclusive limit value;
     * <p>
     *  "<" specifies an exclusive limit value.
     *
     * @implements Elastos.Text.INumberFormat
     */
    /**
     * @Involve
     * interface INumberFormat
     */
    [deprecated]
    interface IChoiceFormat {
        /**
         * Parses the pattern to determine new strings and ranges for this
         * {ChoiceFormat}.
         */
        ApplyPattern(
            [in] String tem);

        /**
         * Returns the strings associated with the ranges of this {
         * ChoiceFormat}.
         */
        GetFormats(
            [out, callee] ArrayOf<IInterface*>* formats);

        GetFormats(
            [out, callee] ArrayOf<String>* formats);

        /**
         * Returns the limits of this {ChoiceFormat}.
         */
        GetLimits(
            [out, callee] ArrayOf<Double>* limits);

        /**
         * Sets the double values and associated strings of this ChoiceFormat. When
         * calling format(double, StringBuffer, FieldPosition) format with
         * a double value {d}, then the element {i} in {formats}
         * is selected where {i} fulfills
         * {limits[i] <= d < limits[i+1]}.
         *
         * @sa #format(double, StringBuffer, FieldPosition) format
         */
        SetChoices(
            [in] ArrayOf<Double> limits,
            [in] ArrayOf<String> formats);

        /**
         * Returns the pattern of this {ChoiceFormat} which specifies the
         * ranges and their associated strings.
         */
        ToPattern(
            [out] String* pattern);
    }

    interface IChoiceFormatHelper {
        /**
         * Returns the double value which is closest to the specified double but
         * larger.
         *
         * @param value
         *            a double value.
         * @return the next larger double value.
         */
        NextDouble(
            [in] Double value,
            [out] Double* nextValue);

        /**
         * Returns the double value which is closest to the specified double but
         * either larger or smaller as specified.
         *
         * @param value
         *            a double value.
         * @param increment
         *            {true} to get the next larger value, {false} to
         *            get the previous smaller value.
         * @return the next larger or smaller double value.
         */
        NextDouble(
            [in] Double value,
            [in] Boolean increment,
            [out] Double* nextValue);

        /**
         * Returns the double value which is closest to the specified double but
         * smaller.
         *
         * @param value
         *            a double value.
         * @return the next smaller double value.
         */
        PreviousDouble(
            [in] Double value,
            [out] Double* previousValue);
    }

    } // namespace Text
    } // namespace Elastos
}
