
module
{
    namespace Elastos {
    namespace Utility {
    namespace Zip {

    /**
     * This class decompresses data that was compressed using the DEFLATE algorithm (see specification).
     *
     * @sa specification
     * <p>
     * It is usually more convenient to use InflaterInputStream.
     *
     * @sa InflaterInputStream
     * <p>
     * To decompress an in-memory byte[] to another in-memory byte[] manually:
     * <pre>
     * byte[] compressedBytes = ...
     *  int decompressedByteCount = ... // From your format's metadata.
     *  Inflater inflater = new Inflater();
     *  inflater.setInput(compressedBytes, 0, compressedBytes.length);
     *  byte[] decompressedBytes = new byte[decompressedByteCount];
     *  if (inflater.inflate(decompressedBytes) != decompressedByteCount) {
     *       throw new AssertionError();
     *      }
     * inflater.end();
     * </pre>
     * <p>
     * In situations where you don't have all the input in one array (or have so much
     * input that you want to feed it to the inflater in chunks), it's possible to
     * call setInput(byte[]) repeatedly, but you're much better off using
     * InflaterInputStream to handle all this for you.
     *
     * @sa setInput(byte[])
     * @sa InflaterInputStream
     *
     * <p>
     * If you don't know how big the decompressed data will be, you can call
     * inflate(byte[]) repeatedly on a temporary buffer, copying the bytes to a
     * ByteArrayOutputStream, but this is probably another sign you'd be better off
     * using InflaterInputStream.
     *
     * @sa inflate(byte[])
     * @sa ByteArrayOutputStream
     * @sa InflaterInputStream
     *
     */
    [deprecated]
    interface IInflater {
        /**
         * Releases resources associated with this {Inflater}. Any unused
         * input or output is discarded. This method should be called explicitly in
         * order to free native resources as soon as possible. After {end()} is
         * called, other methods will typically throw {IllegalStateException}.
         */
        // synchronized
        End();

        /**
         * Indicates if the {Inflater} has inflated the entire deflated
         * stream. If deflated bytes remain and {@sa #needsInput} returns
         * {true} this method will return {false}. This method should be
         * called after all deflated input is supplied to the {Inflater}.
         *
         * @return {true} if all input has been inflated, {false}
         *         otherwise.
         */
        // synchronized
        Finished(
            [out] Boolean* finished);

        /**
         * Returns the {@sa Adler32} checksum of the bytes inflated so far, or the
         * checksum of the preset dictionary if {@sa #needsDictionary} returns true.
         */
        // synchronized
        GetAdler(
            [out] Int32* checksum);

        /**
         * Returns the total number of bytes read by the {Inflater}. This
         * method is the same as {@sa #getTotalIn} except that it returns a
         * {long} value instead of an integer.
         */
        // synchronized
        GetBytesRead(
            [out] Int64* number);

        /**
         * Returns a the total number of bytes written by this {Inflater}. This
         * method is the same as {getTotalOut} except it returns a
         * {long} value instead of an integer.
         */
        // synchronized
        GetBytesWritten(
            [out] Int64* number);

        /**
         * Returns the number of bytes of current input remaining to be read by this
         * inflater.
         */
        // synchronized
        GetRemaining(
            [out] Int32* number);

        /**
         * Returns the offset of the next byte to read in the underlying buffer.
         *
         * For internal use only.
         */
        GetCurrentOffset(
            [out] Int32* offset);

        /**
         * Returns the total number of bytes of input read by this {Inflater}. This
         * method is limited to 32 bits; use {@sa #getBytesRead} instead.
         */
        // synchronized
        GetTotalIn(
            [out] Int32* number);

        /**
         * Returns the total number of bytes written to the output buffer by this
         * {Inflater}. The method is limited to 32 bits; use {@sa #getBytesWritten} instead.
         */
        // synchronized
        GetTotalOut(
            [out] Int32* number);

        /**
         * Inflates bytes from the current input and stores them in {buf}.
         *
         * @param buf
         *            the buffer where decompressed data bytes are written.
         * @return the number of bytes inflated.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * DataFormatException | if the underlying stream is corrupted or was not compressed using a {Deflater}.
         */
        Inflate(
            [in] ArrayOf<Byte>* buf,
            [out] Int32* number);

         /**
         * Inflates up to {byteCount} bytes from the current input and stores them in
         * {buf} starting at {offset}.
         *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * DataFormatException | if the underlying stream is corrupted or was not compressed using a {Deflater}.
         * @return the number of bytes inflated.
         */
        // synchronized
        Inflate(
            [in] ArrayOf<Byte>* buf,
            [in] Int32 offset,
            [in] Int32 byteCount,
            [out] Int32* number);

        /**
         * Returns true if the input bytes were compressed with a preset
         * dictionary. This method should be called if the first call to {@sa #inflate} returns 0,
         * to determine whether a dictionary is required. If so, {@sa #setDictionary}
         * should be called with the appropriate dictionary before calling
         * {inflate} again. Use {@sa #getAdler} to determine which dictionary is required.
         */
        // synchronized
        NeedsDictionary(
            [out] Boolean* result);

        /**
         * Returns true if {@sa #setInput} must be called before inflation can continue.
         */
        // synchronized
        NeedsInput(
            [out] Boolean* result);

        /**
         * Resets this {Inflater}. Should be called prior to inflating a new
         * set of data.
         */
        // synchronized
        Reset();

        /**
         * Sets the preset dictionary to be used for inflation to {dictionary}.
         * See {@sa #needsDictionary} for details.
         */
        // synchronized
        SetDictionary(
            [in] ArrayOf<Byte>* buf);

        /**
         * Sets the preset dictionary to be used for inflation to a subsequence of {dictionary}
         * starting at {offset} and continuing for {byteCount} bytes. See {@sa
         * #needsDictionary} for details.
         */
        // synchronized
        SetDictionary(
            [in] ArrayOf<Byte>* buf,
            [in] Int32 offset,
            [in] Int32 byteCount);

        /**
         * Sets the current input to to be decompressed. This method should only be
         * called if {@sa #needsInput} returns {true}.
         */
        // synchronized
        SetInput(
            [in] ArrayOf<Byte>* buf);

        /**
         * Sets the current input to to be decompressed. This method should only be
         * called if {@sa #needsInput} returns {true}.
         */
        // synchronized
        SetInput(
            [in] ArrayOf<Byte>* buf,
            [in] Int32 offset,
            [in] Int32 byteCount);
    }

    } // namespace Zip
    } // namesapce Utility
    } // namespace Elastos
}
