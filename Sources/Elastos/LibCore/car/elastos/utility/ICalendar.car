
module
{
    interface Elastos.Utility.ILocale;
    interface Elastos.Utility.ITimeZone;
    interface Elastos.Utility.IDate;
    interface Elastos.Utility.IMap;

    namespace Elastos{
    namespace Utility{


    /**
     * Calendar is an abstract base class for converting between a Date object
     * and a set of integer fields such as YEAR, MONTH, DAY, HOUR, and so on.
     * (A Date object represents a specific instant in time with millisecond precision
     *. See Date for information about the Date class.)
     *
     * @sa Date
     *
     * <p>
     * Subclasses of Calendar interpret a Date according to the rules of a specific calendar system.
     * <p>
     * Like other locale-sensitive classes, Calendar provides a class method,
     * getInstance, for getting a default instance of this class for general use.
     * Calendar's getInstance method returns a calendar whose locale is based on
     * system settings and whose time fields have been initialized with the current
     * date and time:
     * <pre>
     * Calendar rightNow = Calendar.getInstance()
     * </pre>
     * <p>
     * A Calendar object can produce all the time field values needed to implement
     * the date-time formatting for a particular language and calendar style (for
     * example, Japanese-Gregorian, Japanese-Traditional). Calendar defines the range
     * of values returned by certain fields, as well as their meaning. For example,
     * the first month of the year has value MONTH == JANUARY for all calendars.
     * Other values are defined by the concrete subclass, such as ERA and YEAR. See
     * individual field documentation and subclass documentation for details.
     * <p>
     * When a Calendar is lenient, it accepts a wider range of field values than it
     * produces. For example, a lenient GregorianCalendar interprets MONTH ==
     * JANUARY, DAY_OF_MONTH == 32 as February 1. A non-lenient GregorianCalendar
     * throws an exception when given out-of-range field settings. When calendars
     * recompute field values for return by get(), they normalize them. For example,
     * a GregorianCalendar always produces DAY_OF_MONTH values between 1 and the
     * length of the month.
     * <p>
     * Calendar defines a locale-specific seven day week using two parameters: the
     * first day of the week and the minimal days in first week (from 1 to 7). These
     * numbers are taken from the locale resource data when a Calendar is constructed.
     * They may also be specified explicitly through the API.
     * <p>
     * When setting or getting the WEEK_OF_MONTH or WEEK_OF_YEAR fields, Calendar
     * must determine the first week of the month or year as a reference point. The
     * first week of a month or year is defined as the earliest seven day period
     * beginning on getFirstDayOfWeek() and containing at least
     * getMinimalDaysInFirstWeek() days of that month or year. Weeks numbered
     * ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow it. Note
     * that the normalized numbering returned by get() may be different. For example,
     * a specific Calendar subclass may designate the week before week 1 of a year as week n of the previous year.
     * <p>
     * When computing a Date from time fields, two special circumstances may arise:
     * there may be insufficient information to compute the Date (such as only year
     * and month but no day in the month), or there may be inconsistent information
     * (such as "Tuesday, July 15, 1996" -- July 15, 1996 is actually a Monday).
     * <p>
     * <strong>Insufficient information. </strong>The calendar will use default
     * information to specify the missing fields. This may vary by calendar; for the
     * Gregorian calendar, the default for a field is the same as that of the start
     * of the epoch: i.e., YEAR = 1970, MONTH = JANUARY, DATE = 1, etc.
     * <p>
     * <strong>Inconsistent information. </strong>If fields conflict, the calendar
     * will give preference to fields set more recently. For example, when
     * determining the day, the calendar will look for one of the following
     * combinations of fields. The most recent combination, as determined by the most
     * recently set single field, will be used.
     * <pre>
     * MONTH + DAY_OF_MONTH
     * MONTH + WEEK_OF_MONTH + DAY_OF_WEEK
     * MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK
     * DAY_OF_YEAR
     * DAY_OF_WEEK + WEEK_OF_YEAR
     * </pre>
     * <p>
     * For the time of day:
     * <pre>
     * HOUR_OF_DAY
     * AM_PM + HOUR
     * </pre>
     * <strong>Note:</strong>There are certain possible ambiguities in interpretation of certain singular times, which are resolved in the following ways:
     * <p>
     * 1.24:00:00 "belongs" to the following day. That is, 23:59 on Dec 31, 1969 < 24:00 on Jan 1, 1970 < 24:01:00 on Jan 1, 1970 form a sequence of three consecutive minutes in time.
     * <p>
     * 2.Although historically not precise, midnight also belongs to "am", and noon belongs to "pm", so on the same day, we have 12:00 am (midnight) < 12:01 am, and 12:00 pm (noon) < 12:01 pm
     * <p>
     * The date or time format strings are not part of the definition of a calendar,
     * as those must be modifiable or overridable by the user at runtime.
     * Use DateFormat to format dates.
     *
     * @sa DateFormat
     * <p>
     * <strong>Field manipulation methods</strong>
     * <p>
     * Calendar fields can be changed using three methods: set(), add(), and roll().
     * <p>
     * set(f, value) changes field f to value. In addition, it sets an internal
     * member variable to indicate that field f has been changed. Although field f is
     * changed immediately, the calendar's milliseconds is not recomputed until the
     * next call to get(), getTime(), or getTimeInMillis() is made. Thus, multiple
     * calls to set() do not trigger multiple, unnecessary computations. As a result
     * of changing a field using set(), other fields may also change, depending on
     * the field, the field value, and the calendar system. In addition, get(f) will
     * not necessarily return value after the fields have been recomputed. The
     * specifics are determined by the concrete calendar class.
     * <p>
     * Example: Consider a GregorianCalendar originally set to August 31, 1999.
     * Calling set(Calendar.MONTH, Calendar.SEPTEMBER) sets the calendar to September
     * 31, 1999. This is a temporary internal representation that resolves to October
     * 1, 1999 if getTime()is then called. However, a call to set(Calendar.
     * DAY_OF_MONTH, 30) before the call to getTime() sets the calendar to September
     * 30, 1999, since no recomputation occurs after set() itself.
     * <p>
     * add(f, delta) adds delta to field f. This is equivalent to calling set(f, get(f) + delta) with two adjustments:
     * <p><li><strong>Add rule 1.</strong> The value of field f after the call minus
     * the value of field f before the call is delta, modulo any overflow that has
     * occurred in field f. Overflow occurs when a field value exceeds its range and,
     * as a result, the next larger field is incremented or decremented and the field
     * value is adjusted back into its range.</li>
     * <p><li><strong>Add rule 2.</strong> If a smaller field is expected to be
     * invariant, but   it is impossible for it to be equal to its prior value
     * because of changes in its minimum or maximum after field f is changed, then
     * its value is adjusted to be as close as possible to its expected value. A
     * smaller field represents a smaller unit of time. HOUR is a smaller field than
     * DAY_OF_MONTH. No adjustment is made to smaller fields that are not expected to
     * be invariant. The calendar system determines what fields are expected to be invariant.</li>
     * <p>In addition, unlike set(), add() forces an immediate recomputation of the
     * calendar's milliseconds and all fields.
     * <p>
     * <em>Example</em>: Consider a GregorianCalendar originally set to August 31,
     * 1999. Calling add(Calendar.MONTH, 13) sets the calendar to September 30, 2000.
     * <strong>Add rule 1</strong> sets the MONTH field to September, since adding 13
     * months to August gives September of the next year. Since DAY_OF_MONTH cannot
     * be 31 in September in a GregorianCalendar, <strong>add rule 2</strong> sets
     * the DAY_OF_MONTH to 30, the closest possible value. Although it is a smaller
     * field, DAY_OF_WEEK is not adjusted by rule 2, since it is expected to change
     * when the month changes in a GregorianCalendar.
     * <p>
     * roll(f, delta) adds delta to field f without changing larger fields. This is equivalent to calling add(f, delta) with the following adjustment:
     * <p>
     * <li><strong>Roll rule.</storng> Larger fields are unchanged after the call.
     * A larger field represents a larger unit of time. DAY_OF_MONTH is a larger field than HOUR.</li>
     * <p>
     * <em>Example</em>: Consider a GregorianCalendar originally set to August 31, <strong>1999</strong>. Calling roll(Calendar.MONTH, 8) sets the calendar to April 30, 1999. Add rule 1 sets the MONTH field to April. Using a GregorianCalendar, the DAY_OF_MONTH cannot be 31 in the month April. Add rule 2 sets it to the closest possible value, 30. Finally, the <strong>roll rule</strong> maintains the YEAR field value of 1999.
     * <p>
     * <em>Example</em>: Consider a GregorianCalendar originally set to Sunday June 6, 1999.
     * Calling roll(Calendar.WEEK_OF_MONTH, -1) sets the calendar to Tuesday June 1,
     * 1999, whereas calling add(Calendar.WEEK_OF_MONTH, -1) sets the calendar to
     * Sunday May 30, 1999. This is because the roll rule imposes an additional
     * constraint: The MONTH must not change when the WEEK_OF_MONTH is rolled. Taken
     * together with add rule 1, the resultant date must be between Tuesday June 1
     * and Saturday June 5. According to add rule 2, the DAY_OF_WEEK, an invariant
     * when changing the WEEK_OF_MONTH, is set to Tuesday, the closest possible value
     * to Sunday (where Sunday is the first day of the week).
     * <p>
     * <strong>Usage model</strong>. To motivate the behavior of add() and roll(),
     * consider a user interface component with increment and decrement buttons for
     * the month, day, and year, and an underlying GregorianCalendar. If the
     * interface reads January 31, 1999 and the user presses the month increment
     * button, what should it read? If the underlying implementation uses set(), it
     * might read March 3, 1999. A better result would be February 28, 1999.
     * Furthermore, if the user presses the month increment button again, it should
     * read March 31, 1999, not March 28, 1999. By saving the original date and using
     * either add() or roll(), depending on whether larger fields should be affected,
     * the user interface can behave as most users will intuitively expect.
     * <p>
     * <strong>Note</strong>: You should always use roll and add rather than
     * attempting to perform arithmetic operations directly on the fields of a
     * Calendar. It is quite possible for Calendar subclasses to have fields with
     * non-linear behavior, for example missing months or days during non-leap years.
     * The subclasses' add and roll methods will take this into account, while simple
     * arithmetic manipulations may give invalid results.
     *
     * @sa Date
     * @sa GregorianCalendar
     * @sa TimeZone
     */

    interface ICalendar {
        /**
         * Value of the {MONTH} field indicating the first month of the
         * year.
         */
        const Int32 JANUARY = 0;

        /**
         * Value of the {MONTH} field indicating the second month of
         * the year.
         */
        const Int32 FEBRUARY = 1;

        /**
         * Value of the {MONTH} field indicating the third month of the
         * year.
         */
        const Int32 MARCH = 2;

        /**
         * Value of the {MONTH} field indicating the fourth month of
         * the year.
         */
        const Int32 APRIL = 3;

        /**
         * Value of the {MONTH} field indicating the fifth month of the
         * year.
         */
        const Int32 MAY = 4;

        /**
         * Value of the {MONTH} field indicating the sixth month of the
         * year.
         */
        const Int32 JUNE = 5;

        /**
         * Value of the {MONTH} field indicating the seventh month of
         * the year.
         */
        const Int32 JULY = 6;

        /**
         * Value of the {MONTH} field indicating the eighth month of
         * the year.
         */
        const Int32 AUGUST = 7;

        /**
         * Value of the {MONTH} field indicating the ninth month of the
         * year.
         */
        const Int32 SEPTEMBER = 8;

        /**
         * Value of the {MONTH} field indicating the tenth month of the
         * year.
         */
        const Int32 OCTOBER = 9;

        /**
         * Value of the {MONTH} field indicating the eleventh month of
         * the year.
         */
        const Int32 NOVEMBER = 10;

        /**
         * Value of the {MONTH} field indicating the twelfth month of
         * the year.
         */
        const Int32 DECEMBER = 11;

        /**
         * Value of the {MONTH} field indicating the thirteenth month
         * of the year. Although {GregorianCalendar} does not use this
         * value, lunar calendars do.
         */
        const Int32 UNDECIMBER = 12;

        /**
         * Value of the {DAY_OF_WEEK} field indicating Sunday.
         */
        const Int32 SUNDAY = 1;

        /**
         * Value of the {DAY_OF_WEEK} field indicating Monday.
         */
        const Int32 MONDAY = 2;

        /**
         * Value of the {DAY_OF_WEEK} field indicating Tuesday.
         */
        const Int32 TUESDAY = 3;

        /**
         * Value of the {DAY_OF_WEEK} field indicating Wednesday.
         */
        const Int32 WEDNESDAY = 4;

        /**
         * Value of the {DAY_OF_WEEK} field indicating Thursday.
         */
        const Int32 THURSDAY = 5;

        /**
         * Value of the {DAY_OF_WEEK} field indicating Friday.
         */
        const Int32 FRIDAY = 6;

        /**
         * Value of the {DAY_OF_WEEK} field indicating Saturday.
         */
        const Int32 SATURDAY = 7;

        /**
         * Field number for {get} and {set} indicating the
         * era, e.g., AD or BC in the Julian calendar. This is a calendar-specific
         * value; see subclass documentation.
         *
         * @see GregorianCalendar#AD
         * @see GregorianCalendar#BC
         */
        const Int32 ERA = 0;

        /**
         * Field number for {get} and {set} indicating the
         * year. This is a calendar-specific value; see subclass documentation.
         */
        const Int32 YEAR = 1;

        /**
         * Field number for {get} and {set} indicating the
         * month. This is a calendar-specific value. The first month of the year is
         * {JANUARY}; the last depends on the number of months in a
         * year.
         *
         * @see #JANUARY
         * @see #FEBRUARY
         * @see #MARCH
         * @see #APRIL
         * @see #MAY
         * @see #JUNE
         * @see #JULY
         * @see #AUGUST
         * @see #SEPTEMBER
         * @see #OCTOBER
         * @see #NOVEMBER
         * @see #DECEMBER
         * @see #UNDECIMBER
         */
        const Int32 MONTH = 2;

        /**
         * Field number for {get} and {set} indicating the
         * week number within the current year. The first week of the year, as
         * defined by {getFirstDayOfWeek()} and
         * {getMinimalDaysInFirstWeek()}, has value 1. Subclasses
         * define the value of {WEEK_OF_YEAR} for days before the first
         * week of the year.
         *
         * @see #getFirstDayOfWeek
         * @see #getMinimalDaysInFirstWeek
         */
        const Int32 WEEK_OF_YEAR = 3;

        /**
         * Field number for {get} and {set} indicating the
         * week number within the current month. The first week of the month, as
         * defined by {getFirstDayOfWeek()} and
         * {getMinimalDaysInFirstWeek()}, has value 1. Subclasses
         * define the value of {WEEK_OF_MONTH} for days before the
         * first week of the month.
         *
         * @see #getFirstDayOfWeek
         * @see #getMinimalDaysInFirstWeek
         */
        const Int32 WEEK_OF_MONTH = 4;

        /**
         * Field number for {get} and {set} indicating the
         * day of the month. This is a synonym for {DAY_OF_MONTH}. The
         * first day of the month has value 1.
         *
         * @see #DAY_OF_MONTH
         */
        const Int32 DATE = 5;

        /**
         * Field number for {get} and {set} indicating the
         * day of the month. This is a synonym for {DATE}. The first
         * day of the month has value 1.
         *
         * @see #DATE
         */
        const Int32 DAY_OF_MONTH = 5;

        /**
         * Field number for {get} and {set} indicating the
         * day number within the current year. The first day of the year has value
         * 1.
         */
        const Int32 DAY_OF_YEAR = 6;

        /**
         * Field number for {get} and {set} indicating the
         * day of the week. This field takes values {SUNDAY},
         * {MONDAY}, {TUESDAY}, {WEDNESDAY},
         * {THURSDAY}, {FRIDAY}, and
         * {SATURDAY}.
         *
         * @see #SUNDAY
         * @see #MONDAY
         * @see #TUESDAY
         * @see #WEDNESDAY
         * @see #THURSDAY
         * @see #FRIDAY
         * @see #SATURDAY
         */
        const Int32 DAY_OF_WEEK = 7;

        /**
         * Field number for {get} and {set} indicating the
         * ordinal number of the day of the week within the current month. Together
         * with the {DAY_OF_WEEK} field, this uniquely specifies a day
         * within a month. Unlike {WEEK_OF_MONTH} and
         * {WEEK_OF_YEAR}, this field's value does <em>not</em>
         * depend on {getFirstDayOfWeek()} or
         * {getMinimalDaysInFirstWeek()}. {DAY_OF_MONTH 1}
         * through {7} always correspond to <code>DAY_OF_WEEK_IN_MONTH
         * 1</code>;
         * {8} through {15} correspond to
         * {DAY_OF_WEEK_IN_MONTH 2}, and so on.
         * {DAY_OF_WEEK_IN_MONTH 0} indicates the week before
         * {DAY_OF_WEEK_IN_MONTH 1}. Negative values count back from
         * the end of the month, so the last Sunday of a month is specified as
         * {DAY_OF_WEEK = SUNDAY, DAY_OF_WEEK_IN_MONTH = -1}. Because
         * negative values count backward they will usually be aligned differently
         * within the month than positive values. For example, if a month has 31
         * days, {DAY_OF_WEEK_IN_MONTH -1} will overlap
         * {DAY_OF_WEEK_IN_MONTH 5} and the end of {4}.
         *
         * @see #DAY_OF_WEEK
         * @see #WEEK_OF_MONTH
         */
        const Int32 DAY_OF_WEEK_IN_MONTH = 8;

        /**
         * Field number for {get} and {set} indicating
         * whether the {HOUR} is before or after noon. E.g., at
         * 10:04:15.250 PM the {AM_PM} is {PM}.
         *
         * @see #AM
         * @see #PM
         * @see #HOUR
         */
        const Int32 AM_PM = 9;

        /**
         * Field number for {get} and {set} indicating the
         * hour of the morning or afternoon. {HOUR} is used for the
         * 12-hour clock. E.g., at 10:04:15.250 PM the {HOUR} is 10.
         *
         * @see #AM_PM
         * @see #HOUR_OF_DAY
         */
        const Int32 HOUR = 10;

        /**
         * Field number for {get} and {set} indicating the
         * hour of the day. {HOUR_OF_DAY} is used for the 24-hour
         * clock. E.g., at 10:04:15.250 PM the {HOUR_OF_DAY} is 22.
         *
         * @see #HOUR
         */
        const Int32 HOUR_OF_DAY = 11;

        /**
         * Field number for {get} and {set} indicating the
         * minute within the hour. E.g., at 10:04:15.250 PM the {MINUTE}
         * is 4.
         */
        const Int32 MINUTE = 12;

        /**
         * Field number for {get} and {set} indicating the
         * second within the minute. E.g., at 10:04:15.250 PM the
         * {SECOND} is 15.
         */
        const Int32 SECOND = 13;

        /**
         * Field number for {get} and {set} indicating the
         * millisecond within the second. E.g., at 10:04:15.250 PM the
         * {MILLISECOND} is 250.
         */
        const Int32 MILLISECOND = 14;

        /**
         * Field number for {get} and {set} indicating the
         * raw offset from GMT in milliseconds.
         */
        const Int32 ZONE_OFFSET = 15;

        /**
         * Field number for {get} and {set} indicating the
         * daylight savings offset in milliseconds.
         */
        const Int32 DST_OFFSET = 16;

        /**
         * This is the total number of fields in this calendar.
         */
        const Int32 FIELD_COUNT = 17;

        /**
         * Value of the {AM_PM} field indicating the period of the day
         * from midnight to just before noon.
         */
        const Int32 AM = 0;

        /**
         * Value of the {AM_PM} field indicating the period of the day
         * from noon to just before midnight.
         */
        const Int32 PM = 1;

        /**
         * Requests both {SHORT} and {LONG} styles in the map returned by
         * #getDisplayNames.
         *
         * @sa #getDisplayNames
         * @since 1.6
         */
        const Int32 ALL_STYLES = 0;

        /**
         * Requests short names (such as "Jan") from
         * #getDisplayName or #getDisplayNames.
         *
         * @sa #getDisplayName
         * @sa #getDisplayNames
         * @since 1.6
         */
        const Int32 SHORT = 1;

        /**
         * Requests long names (such as "January") from
         * #getDisplayName or #getDisplayNames.
         *
         * @sa #getDisplayName
         * @sa #getDisplayNames
         * @since 1.6
         */
        const Int32 LONG = 2;

		/**
		 * Adds the specified amount to a {Calendar} field.
		 *
		 * @param field
		 *            the {Calendar} field to modify.
		 * @param value
		 *            the amount to add to the field.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
		 * IllegalArgumentException | if {field} is {DST_OFFSET} or {ZONE_OFFSET}.
		 */
		Add(
            [in] Int32 field,
            [in] Int32 value);

		/**
		 * Returns whether the {Date} specified by this {Calendar} instance is after the {Date}
		 * specified by the parameter. The comparison is not dependent on the time
		 * zones of the {Calendar}.
		 *
		 * @param calendar
		 *            the {Calendar} instance to compare.
		 * @return {true} when this Calendar is after calendar, {false} otherwise.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
		 * IllegalArgumentException | if the time is not set and the time cannot be computed from the current field values.
		 */
		IsAfter(
            [in] ICalendar* calendar,
            [out] Boolean* result);

		/**
		 * Returns whether the {Date} specified by this {Calendar} instance is before the
		 * {Date} specified by the parameter. The comparison is not dependent on the
		 * time zones of the {Calendar}.
		 *
		 * @param calendar
		 *            the {Calendar} instance to compare.
		 * @return {true} when this Calendar is before calendar, {false} otherwise.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
		 * IllegalArgumentException | if the time is not set and the time cannot be computed from the current field values.
		 */
		IsBefore(
            [in] ICalendar* calendar,
            [out] Boolean* result);

		/**
		 * Clears all of the fields of this {Calendar}. All fields are initialized to
		 * zero.
		 */
		Clear();

		/**
		 * Clears the specified field to zero and sets the isSet flag to {false}.
		 *
		 * @param field
		 *            the field to clear.
		 */
		Clear(
            [in] Int32 field);

        /**
         * Compares the specified object to this {Calendar} and returns whether they are
         * equal. The object must be an instance of {Calendar} and have the same
         * properties.
         *
         * @param object
         *            the object to compare with this object.
         * @return {true} if the specified object is equal to this {Calendar}, {false}
         *         otherwise.
         */
        Equals(
            [in] IInterface* obj,
            [out] Boolean* result);

		/**
		 * Gets the value of the specified field after computing the field values by
		 * calling {complete()} first.
		 *
		 * @param field
		 *            the field to get.
		 * @return the value of the specified field.
		 *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
		 * IllegalArgumentException | if the fields are not set, the time is not set, and the time cannot be computed from the current field values.
		 * ArrayIndexOutOfBoundsException | if the field is not inside the range of possible fields. The range is starting at 0 up to {FIELD_COUNT}.
		 */
		Get(
            [in] Int32 field,
            [out] Int32* value);

		/**
         * Returns the maximum value of the specified field for the current date.
         * For example, the maximum number of days in the current month.
         */
		GetActualMaximum(
            [in] Int32 field,
            [out] Int32* value);

		/**
		 * Gets the minimum value of the specified field for the current date.
		 *
		 * @param field
		 *            the field.
		 * @return the minimum value of the specified field.
		 */
		GetActualMinimum(
            [in] Int32 field,
            [out] Int32* value);

		/**
		 * Gets the first day of the week for this {Calendar}.
		 *
		 * @return the first day of the week.
		 */
		GetFirstDayOfWeek(
		    [out] Int32* firstDayOfWeek);

		/**
		 * Gets the greatest minimum value of the specified field. This is the
		 * biggest value that {getActualMinimum} can return for any possible
		 * time.
		 *
		 * @param field
		 *            the field.
		 * @return the greatest minimum value of the specified field.
		 */
		GetGreatestMinimum(
            [in] Int32 field,
            [out] Int32* minimum);

		/**
		 * Gets the smallest maximum value of the specified field. This is the
		 * smallest value that {getActualMaximum()} can return for any
		 * possible time.
		 *
		 * @param field
		 *            the field number.
		 * @return the smallest maximum value of the specified field.
		 */
		GetLeastMaximum(
            [in] Int32 field,
            [out] Int32* maximum);

		/**
		 * Gets the greatest maximum value of the specified field. This returns the
		 * biggest value that {get} can return for the specified field.
		 *
		 * @param field
		 *            the field.
		 * @return the greatest maximum value of the specified field.
		 */
		GetMaximum(
            [in] Int32 field,
            [out] Int32* maximum);

		/**
		 * Gets the minimal days in the first week of the year.
		 *
		 * @return the minimal days in the first week of the year.
		 */
		GetMinimalDaysInFirstWeek(
            [out] Int32* minimalDaysInFirstWeek);

		/**
		 * Gets the smallest minimum value of the specified field. this returns the
		 * smallest value thet {get} can return for the specified field.
		 *
		 * @param field
		 *            the field number.
		 * @return the smallest minimum value of the specified field.
		 */
		GetMinimum(
            [in] Int32 field,
            [out] Int32* minimum);

		/**
		 * Gets the time of this {Calendar} as a {Date} object.
		 *
		 * @return a new {Date} initialized to the time of this {Calendar}.
		 *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
		 * IllegalArgumentException | if the time is not set and the time cannot be computed from the current field values.
		 */
		GetTime(
		    [out] IDate** newObj);

		/**
		 * Computes the time from the fields if required and returns the time.
		 *
		 * @return the time of this {Calendar}.
		 *
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
		 * IllegalArgumentException | if the time is not set and the time cannot be computed from the current field values.
		 */
        GetTimeInMillis(
            [out] Int64* time);

		/**
		 * Gets the timezone of this {Calendar}.
		 *
		 * @return the {TimeZone} used by this {Calendar}.
		 */
        GetTimeZone(
            [out] ITimeZone** timezone);

		/**
		 * Returns if this {Calendar} accepts field values which are outside the valid
		 * range for the field.
		 *
		 * @return {true} if this {Calendar} is lenient, {false} otherwise.
		 */
		IsLenient(
            [out] Boolean* lenient);

		/**
		 * Returns whether the specified field is set. Note that the interpretation of "is set" is
		 * somewhat technical. In particular, it does <i>not</i> mean that the field's value is up
		 * to date. If you want to know whether a field contains an up-to-date value, you must also
		 * check {areFieldsSet}, making this method somewhat useless unless you're a subclass,
		 * in which case you can access the {isSet} array directly.
		 * <p>
		 * A field remains "set" from the first time its value is computed until it's cleared by one
		 * of the {clear} methods. Thus "set" does not mean "valid". You probably want to call
		 * {get} -- which will update fields as necessary -- rather than try to make use of
		 * this method.
		 *
		 * @param field
		 *            a {Calendar} field number.
		 * @return {true} if the specified field is set, {false} otherwise.
		 */
		IsSet(
            [in] Int32 field,
            [out] Boolean* set);

		/**
		 * Adds the specified amount to the specified field and wraps the value of
		 * the field when it goes beyond the maximum or minimum value for the
		 * current date. Other fields will be adjusted as required to maintain a
		 * consistent date.
		 *
		 * @param field
		 *            the field to roll.
		 * @param value
		 *            the amount to add.
		 */
		Roll(
            [in] Int32 field,
            [in] Int32 value);

		/**
		 * Increment or decrement the specified field and wrap the value of the
		 * field when it goes beyond the maximum or minimum value for the current
		 * date. Other fields will be adjusted as required to maintain a consistent
		 * date.
		 *
		 * @param field
		 *            the number indicating the field to roll.
		 * @param increment
		 *            {true} to increment the field, {false} to decrement.
		 */
		Roll(
            [in] Int32 field,
            [in] Boolean increment);

		/**
		 * Sets a field to the specified value.
		 *
		 * @param field
		 *            the code indicating the {Calendar} field to modify.
		 * @param value
		 *            the value.
		 */
		Set(
            [in] Int32 field,
            [in] Int32 value);

		/**
		 * Sets the year, month and day of the month fields. Other fields are not
		 * changed.
		 *
		 * @param year
		 *            the year.
		 * @param month
		 *            the month.
		 * @param day
		 *            the day of the month.
		 */
		Set(
            [in] Int32 year,
            [in] Int32 month,
            [in] Int32 day);

		/**
		 * Sets the year, month, day of the month, hour of day and minute fields.
		 * Other fields are not changed.
		 *
		 * @param year
		 *            the year.
		 * @param month
		 *            the month.
		 * @param day
		 *            the day of the month.
		 * @param hourOfDay
		 *            the hour of day.
		 * @param minute
		 *            the minute.
		 */
		Set(
            [in] Int32 year,
            [in] Int32 month,
            [in] Int32 day,
            [in] Int32 hourOfDay,
            [in] Int32 minute);

		/**
		 * Sets the year, month, day of the month, hour of day, minute and second
		 * fields. Other fields are not changed.
		 *
		 * @param year
		 *            the year.
		 * @param month
		 *            the month.
		 * @param day
		 *            the day of the month.
		 * @param hourOfDay
		 *            the hour of day.
		 * @param minute
		 *            the minute.
		 * @param second
		 *            the second.
		 */
		Set(
            [in] Int32 year,
            [in] Int32 month,
            [in] Int32 day,
            [in] Int32 hourOfDay,
            [in] Int32 minute,
            [in] Int32 second);

		/**
		 * Sets the first day of the week for this {Calendar}.
		 *
		 * @param value
		 *            a {Calendar} day of the week.
		 */
		SetFirstDayOfWeek(
            [in] Int32 value);

		/**
		 * Sets this {Calendar} to accept field values which are outside the valid
		 * range for the field.
		 *
		 * @param value
		 *            a boolean value.
		 */
		SetLenient(
            [in] Boolean value);

		/**
		 * Sets the minimal days in the first week of the year.
		 *
		 * @param value
		 *            the minimal days in the first week of the year.
		 */
		SetMinimalDaysInFirstWeek(
            [in] Int32 value);

		/**
		 * Sets the time of this {Calendar}.
		 *
		 * @param date
		 *            a {Date} object.
		 */
		SetTime(
            [in] IDate* date);

		/**
		 * Sets the time of this {Calendar}.
		 *
		 * @param milliseconds
		 *            the time as the number of milliseconds since Jan. 1, 1970.
		 */
		SetTimeInMillis(
            [in] Int64 milliseconds);

		/**
		 * Sets the {TimeZone} used by this Calendar.
		 *
		 * @param timezone
		 *            a {TimeZone}.
		 */
        SetTimeZone(
            [in] ITimeZone* timezone);

		/**
		 * Returns a human-readable string for the value of {field}
		 * using the given style and locale. If no string is available, returns null.
		 * The value is retrieved by invoking {get(field)}.
		 *
		 * <p>For example, {getDisplayName(MONTH, SHORT, Locale.US)} will return "Jan"
		 * while {getDisplayName(MONTH, LONG, Locale.US)} will return "January".
		 *
		 * @param field the field
		 * @param style {SHORT} or {LONG}
		 * @param locale the locale
		 * @return the display name, or null
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
		 * NullPointerException | if {locale == null}
		 * IllegalArgumentException | if {field} or {style} is invalid
		 * @since 1.6
		 */
        GetDisplayName(
            [in] Int32 field,
            [in] Int32 style,
            [in] ILocale* locale,
            [out] String* name);

		/**
		 * Returns a map of human-readable strings to corresponding values,
		 * for the given field, style, and locale.
		 * Returns null if no strings are available.
		 *
		 * <p>For example, {getDisplayNames(MONTH, ALL_STYLES, Locale.US)} would
		 * contain mappings from "Jan" and "January" to #JANUARY, and so on.
         *
         * @sa #JANUARY
		 *
		 * @param field the field
		 * @param style {SHORT}, {LONG}, or {ALL_STYLES}
		 * @param locale the locale
		 * @return the display name, or null
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
		 * NullPointerException | if {locale == null}
		 * IllegalArgumentException | if {field} or {style} is invalid
		 * @since 1.6
		 */
        GetDisplayNames(
            [in] Int32 field,
            [in] Int32 style,
            [in] ILocale* locale,
            [out] IMap** names);
	}

	interface ICalendarHelper {
        /**
         * Returns an array of locales for which custom {Calendar} instances
         * are available.
         * <p>Note that Android does not support user-supplied locale service providers.
         */
        GetAvailableLocales(
            [out, callee] ArrayOf<ILocale*>* locales);

        /**
         * Constructs a new instance of the {Calendar} subclass appropriate for the
         * default {Locale}.
         *
         * @return a {Calendar} subclass instance set to the current date and time in
         *         the default {Timezone}.
         */
        GetInstance(
	        [out] ICalendar** calenar);

        /**
         * Constructs a new instance of the {Calendar} subclass appropriate for the
         * specified {Locale}.
         *
         * @param locale
         *            the locale to use.
         * @return a {Calendar} subclass instance set to the current date and time.
         */
        GetInstance(
            [in] ILocale* locale,
            [out] ICalendar** calenar);

        /**
         * Constructs a new instance of the {Calendar} subclass appropriate for the
         * default {Locale}, using the specified {TimeZone}.
         *
         * @param timezone
         *            the {TimeZone} to use.
         * @return a {Calendar} subclass instance set to the current date and time in
         *         the specified timezone.
         */
        GetInstance(
            [in] ITimeZone* timezone,
            [out] ICalendar** calenar);

        /**
         * Constructs a new instance of the {Calendar} subclass appropriate for the
         * specified {Locale}.
         *
         * @param timezone
         *            the {TimeZone} to use.
         * @param locale
         *            the {Locale} to use.
         * @return a {Calendar} subclass instance set to the current date and time in
         *         the specified timezone.
         */
        GetInstance(
            [in] ITimeZone* timezone,
            [in] ILocale* locale,
            [out] ICalendar** calenar);
	}

    } // namespace Utility
    } // namespace Elastos
}
