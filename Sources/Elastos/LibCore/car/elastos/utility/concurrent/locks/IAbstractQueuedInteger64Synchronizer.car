module
{
    interface Elastos.Core.IThread;
    interface Elastos.Utility.ICollection;

    namespace Elastos {
    namespace Utility {
    namespace Concurrent {
    namespace Locks {

    interface IAbstractQueuedInteger64Synchronizer {
        /*
         * Various flavors of acquire, varying in exclusive/shared and
         * control modes.  Each is mostly the same, but annoyingly
         * different.  Only a little bit of factoring is possible due to
         * interactions of exception mechanics (including ensuring that we
         * cancel if tryAcquire throws exception) and other control, at
         * least not without hurting performance too much.
         */

        /**
         * Acquires in exclusive uninterruptible mode for thread already in
         * queue. Used by condition wait methods as well as acquire.
         *
         * @param node the node
         * @param arg the acquire argument
         * @return {@code true} if interrupted while waiting
         */
        AcquireQueued(
            [in] IInterface* node,
            [in] Int64 arg,
            [out] Boolean* value);

        /**
         * Acquires in exclusive mode, ignoring interrupts.  Implemented
         * by invoking at least once {@link #tryAcquire},
         * returning on success.  Otherwise the thread is queued, possibly
         * repeatedly blocking and unblocking, invoking {@link
         * #tryAcquire} until success.  This method can be used
         * to implement method {@link Lock#lock}.
         *
         * @param arg the acquire argument.  This value is conveyed to
         *        {@link #tryAcquire} but is otherwise uninterpreted and
         *        can represent anything you like.
         */
        Acquire(
            [in] Int64 arg);

        /**
         * Acquires in exclusive mode, aborting if interrupted.
         * Implemented by first checking interrupt status, then invoking
         * at least once {@link #tryAcquire}, returning on
         * success.  Otherwise the thread is queued, possibly repeatedly
         * blocking and unblocking, invoking {@link #tryAcquire}
         * until success or the thread is interrupted.  This method can be
         * used to implement method {@link Lock#lockInterruptibly}.
         *
         * @param arg the acquire argument.  This value is conveyed to
         *        {@link #tryAcquire} but is otherwise uninterpreted and
         *        can represent anything you like.
         * @throws InterruptedException if the current thread is interrupted
         */
        AcquireInterruptibly(
            [in] IInterface* arg);

        /**
         * Attempts to acquire in exclusive mode, aborting if interrupted,
         * and failing if the given timeout elapses.  Implemented by first
         * checking interrupt status, then invoking at least once {@link
         * #tryAcquire}, returning on success.  Otherwise, the thread is
         * queued, possibly repeatedly blocking and unblocking, invoking
         * {@link #tryAcquire} until success or the thread is interrupted
         * or the timeout elapses.  This method can be used to implement
         * method {@link Lock#tryLock(long, TimeUnit)}.
         *
         * @param arg the acquire argument.  This value is conveyed to
         *        {@link #tryAcquire} but is otherwise uninterpreted and
         *        can represent anything you like.
         * @param nanosTimeout the maximum number of nanoseconds to wait
         * @return {@code true} if acquired; {@code false} if timed out
         * @throws InterruptedException if the current thread is interrupted
         */
        TryAcquireNanos(
            [in] Int64 arg,
            [in] Int64 nanosTimeout,
            [out] Boolean* value);

        /**
         * Releases in exclusive mode.  Implemented by unblocking one or
         * more threads if {@link #tryRelease} returns true.
         * This method can be used to implement method {@link Lock#unlock}.
         *
         * @param arg the release argument.  This value is conveyed to
         *        {@link #tryRelease} but is otherwise uninterpreted and
         *        can represent anything you like.
         * @return the value returned from {@link #tryRelease}
         */
        ToRelease(
            [in] Int64 arg,
            [out] Boolean* value);

        /**
         * Acquires in shared mode, ignoring interrupts.  Implemented by
         * first invoking at least once {@link #tryAcquireShared},
         * returning on success.  Otherwise the thread is queued, possibly
         * repeatedly blocking and unblocking, invoking {@link
         * #tryAcquireShared} until success.
         *
         * @param arg the acquire argument.  This value is conveyed to
         *        {@link #tryAcquireShared} but is otherwise uninterpreted
         *        and can represent anything you like.
         */
        AcquireShared(
            [in] Int64 arg);

        /**
         * Acquires in shared mode, aborting if interrupted.  Implemented
         * by first checking interrupt status, then invoking at least once
         * {@link #tryAcquireShared}, returning on success.  Otherwise the
         * thread is queued, possibly repeatedly blocking and unblocking,
         * invoking {@link #tryAcquireShared} until success or the thread
         * is interrupted.
         * @param arg the acquire argument
         * This value is conveyed to {@link #tryAcquireShared} but is
         * otherwise uninterpreted and can represent anything
         * you like.
         * @throws InterruptedException if the current thread is interrupted
         */
        AcquireSharedInterruptibly(
            [in] Int64 arg);

        /**
         * Attempts to acquire in shared mode, aborting if interrupted, and
         * failing if the given timeout elapses.  Implemented by first
         * checking interrupt status, then invoking at least once {@link
         * #tryAcquireShared}, returning on success.  Otherwise, the
         * thread is queued, possibly repeatedly blocking and unblocking,
         * invoking {@link #tryAcquireShared} until success or the thread
         * is interrupted or the timeout elapses.
         *
         * @param arg the acquire argument.  This value is conveyed to
         *        {@link #tryAcquireShared} but is otherwise uninterpreted
         *        and can represent anything you like.
         * @param nanosTimeout the maximum number of nanoseconds to wait
         * @return {@code true} if acquired; {@code false} if timed out
         * @throws InterruptedException if the current thread is interrupted
         */
        TryAcquireSharedNanos(
            [in] Int64 arg,
            [in] Int64 nanosTimeout,
            [out] Boolean* value);

        /**
         * Releases in shared mode.  Implemented by unblocking one or more
         * threads if {@link #tryReleaseShared} returns true.
         *
         * @param arg the release argument.  This value is conveyed to
         *        {@link #tryReleaseShared} but is otherwise uninterpreted
         *        and can represent anything you like.
         * @return the value returned from {@link #tryReleaseShared}
         */
        ReleaseShared(
            [in] Int64 arg,
            [out] Boolean* value);

        // Queue inspection methods

        /**
         * Queries whether any threads are waiting to acquire. Note that
         * because cancellations due to interrupts and timeouts may occur
         * at any time, a {@code true} return does not guarantee that any
         * other thread will ever acquire.
         *
         * <p>In this implementation, this operation returns in
         * constant time.
         *
         * @return {@code true} if there may be other threads waiting to acquire
         */
        HasQueuedThreads(
            [out] Boolean* value);

        /**
         * Queries whether any threads have ever contended to acquire this
         * synchronizer; that is if an acquire method has ever blocked.
         *
         * <p>In this implementation, this operation returns in
         * constant time.
         *
         * @return {@code true} if there has ever been contention
         */
        HasContended(
            [out] Boolean* value);

        /**
         * Returns the first (longest-waiting) thread in the queue, or
         * {@code null} if no threads are currently queued.
         *
         * <p>In this implementation, this operation normally returns in
         * constant time, but may iterate upon contention if other threads are
         * concurrently modifying the queue.
         *
         * @return the first (longest-waiting) thread in the queue, or
         *         {@code null} if no threads are currently queued
         */
        GetFirstQueuedThread(
            [out] IThread** outhread);

        /**
         * Returns true if the given thread is currently queued.
         *
         * <p>This implementation traverses the queue to determine
         * presence of the given thread.
         *
         * @param thread the thread
         * @return {@code true} if the given thread is on the queue
         * @throws NullPointerException if the thread is null
         */
        IsQueued(
            [in] IThread* thread,
            [out] Boolean* value);

        /**
         * Returns {@code true} if the apparent first queued thread, if one
         * exists, is waiting in exclusive mode.  If this method returns
         * {@code true}, and the current thread is attempting to acquire in
         * shared mode (that is, this method is invoked from {@link
         * #tryAcquireShared}) then it is guaranteed that the current thread
         * is not the first queued thread.  Used only as a heuristic in
         * ReentrantReadWriteLock.
         */
        ApparentlyFirstQueuedIsExclusive(
            [out] Boolean* value);

        /**
         * Queries whether any threads have been waiting to acquire longer
         * than the current thread.
         *
         * <p>An invocation of this method is equivalent to (but may be
         * more efficient than):
         *  <pre> {@code
         * getFirstQueuedThread() != Thread.currentThread() &&
         * hasQueuedThreads()}</pre>
         *
         * <p>Note that because cancellations due to interrupts and
         * timeouts may occur at any time, a {@code true} return does not
         * guarantee that some other thread will acquire before the current
         * thread.  Likewise, it is possible for another thread to win a
         * race to enqueue after this method has returned {@code false},
         * due to the queue being empty.
         *
         * <p>This method is designed to be used by a fair synchronizer to
         * avoid <a href="AbstractQueuedSynchronizer.html#barging">barging</a>.
         * Such a synchronizer's {@link #tryAcquire} method should return
         * {@code false}, and its {@link #tryAcquireShared} method should
         * return a negative value, if this method returns {@code true}
         * (unless this is a reentrant acquire).  For example, the {@code
         * tryAcquire} method for a fair, reentrant, exclusive mode
         * synchronizer might look like this:
         *
         *  <pre> {@code
         * protected boolean tryAcquire(int arg) {
         *   if (isHeldExclusively()) {
         *     // A reentrant acquire; increment hold count
         *     return true;
         *   } else if (hasQueuedPredecessors()) {
         *     return false;
         *   } else {
         *     // try to acquire normally
         *   }
         * }}</pre>
         *
         * @return {@code true} if there is a queued thread preceding the
         *         current thread, and {@code false} if the current thread
         *         is at the head of the queue or the queue is empty
         * @since 1.7
         */
        HasQueuedPredecessors(
            [out] Boolean* value);


        // Instrumentation and monitoring methods

        /**
         * Returns an estimate of the number of threads waiting to
         * acquire.  The value is only an estimate because the number of
         * threads may change dynamically while this method traverses
         * internal data structures.  This method is designed for use in
         * monitoring system state, not for synchronization
         * control.
         *
         * @return the estimated number of threads waiting to acquire
         */
        GetQueueLength(
            [out] Int32* value);

        /**
         * Returns a collection containing threads that may be waiting to
         * acquire.  Because the actual set of threads may change
         * dynamically while constructing this result, the returned
         * collection is only a best-effort estimate.  The elements of the
         * returned collection are in no particular order.  This method is
         * designed to facilitate construction of subclasses that provide
         * more extensive monitoring facilities.
         *
         * @return the collection of threads
         */
        GetQueuedThreads(
            [out] ICollection** lection);

        /**
         * Returns a collection containing threads that may be waiting to
         * acquire in exclusive mode. This has the same properties
         * as {@link #getQueuedThreads} except that it only returns
         * those threads waiting due to an exclusive acquire.
         *
         * @return the collection of threads
         */
        GetExclusiveQueuedThreads(
            [out] ICollection** lection);

        /**
         * Returns a collection containing threads that may be waiting to
         * acquire in shared mode. This has the same properties
         * as {@link #getQueuedThreads} except that it only returns
         * those threads waiting due to a shared acquire.
         *
         * @return the collection of threads
         */
        GetSharedQueuedThreads(
            [out] ICollection** lection);

        /**
         * Returns a string identifying this synchronizer, as well as its state.
         * The state, in brackets, includes the String {@code "State ="}
         * followed by the current value of {@link #getState}, and either
         * {@code "nonempty"} or {@code "empty"} depending on whether the
         * queue is empty.
         *
         * @return a string identifying this synchronizer, as well as its state
         */
        ToString(
            [out] String* str);


        // Internal support methods for Conditions

        /**
         * Returns true if a node, always one that was initially placed on
         * a condition queue, is now waiting to reacquire on sync queue.
         * @param node the node
         * @return true if is reacquiring
         */
        IsOnSyncQueue(
            [in] IInterface* node,
            [out] Boolean* value);

        /**
         * Transfers a node from a condition queue onto sync queue.
         * Returns true if successful.
         * @param node the node
         * @return true if successfully transferred (else the node was
         * cancelled before signal).
         */
        TransferForSignal(
            [in] IInterface* node,
            [out] Boolean* value);

        /**
         * Transfers node, if necessary, to sync queue after a cancelled
         * wait. Returns true if thread was cancelled before being
         * signalled.
         * @param node its node
         * @return true if cancelled before the node was signalled
         */
        TransferAfterCancelledWait(
            [in] IInterface* node,
            [out] Boolean* value);

        /**
         * Invokes release with current state value; returns saved state.
         * Cancels node and throws exception on failure.
         * @param node the condition node for this wait
         * @return previous sync state
         */
        FullyRelease(
            [in] IInterface* node,
            [out] Int64* value);

        // Instrumentation methods for conditions

        /**
         * Queries whether the given ConditionObject
         * uses this synchronizer as its lock.
         *
         * @param condition the condition
         * @return <tt>true</tt> if owned
         * @throws NullPointerException if the condition is null
         */
        Owns(
            [in] IInterface* condition,
            [out] Boolean* value);

        /**
         * Queries whether any threads are waiting on the given condition
         * associated with this synchronizer. Note that because timeouts
         * and interrupts may occur at any time, a <tt>true</tt> return
         * does not guarantee that a future <tt>signal</tt> will awaken
         * any threads.  This method is designed primarily for use in
         * monitoring of the system state.
         *
         * @param condition the condition
         * @return <tt>true</tt> if there are any waiting threads
         * @throws IllegalMonitorStateException if exclusive synchronization
         *         is not held
         * @throws IllegalArgumentException if the given condition is
         *         not associated with this synchronizer
         * @throws NullPointerException if the condition is null
         */
        HasWaiters(
            [in] IInterface* condition,
            [out] Boolean* value);

        /**
         * Returns an estimate of the number of threads waiting on the
         * given condition associated with this synchronizer. Note that
         * because timeouts and interrupts may occur at any time, the
         * estimate serves only as an upper bound on the actual number of
         * waiters.  This method is designed for use in monitoring of the
         * system state, not for synchronization control.
         *
         * @param condition the condition
         * @return the estimated number of waiting threads
         * @throws IllegalMonitorStateException if exclusive synchronization
         *         is not held
         * @throws IllegalArgumentException if the given condition is
         *         not associated with this synchronizer
         * @throws NullPointerException if the condition is null
         */
        GetWaitQueueLength(
            [in] IInterface* condition,
            [out] Int32* value);

        /**
         * Returns a collection containing those threads that may be
         * waiting on the given condition associated with this
         * synchronizer.  Because the actual set of threads may change
         * dynamically while constructing this result, the returned
         * collection is only a best-effort estimate. The elements of the
         * returned collection are in no particular order.
         *
         * @param condition the condition
         * @return the collection of threads
         * @throws IllegalMonitorStateException if exclusive synchronization
         *         is not held
         * @throws IllegalArgumentException if the given condition is
         *         not associated with this synchronizer
         * @throws NullPointerException if the condition is null
         */
        GetWaitingThreads(
            [in] IInterface* condition,
            [out] ICollection** outlect);
    }

    } // namespace Locks
    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}
