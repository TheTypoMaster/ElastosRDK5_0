
module
{
    namespace Elastos {
    namespace Utility {
    namespace Concurrent {
    /**
     * A thread managed by a {@link ForkJoinPool}, which executes
     * {@link ForkJoinTask}s.
     * This class is subclassable solely for the sake of adding
     * functionality -- there are no overridable methods dealing with
     * scheduling or execution.  However, you can override initialization
     * and termination methods surrounding the main task processing loop.
     * If you do create such a subclass, you will also need to supply a
     * custom {@link ForkJoinPool.ForkJoinWorkerThreadFactory} to use it
     * in a {@code ForkJoinPool}.
     *
     * @since 1.7
     * @hide
     * @author Doug Lea
     */

    /**
     * @Involve
     * interface ISynchronize;
     * interface IThread;
     */
    interface IForkJoinWorkerThread {
        /**
         * Returns the pool hosting this thread.
         *
         * @return the pool
         */
        GetPool(
            [out] IForkJoinPool** outpool);

        /**
         * Returns the index number of this thread in its pool.  The
         * returned value ranges from zero to the maximum number of
         * threads (minus one) that have ever been created in the pool.
         * This method may be useful for applications that track status or
         * collect results per-worker rather than per-task.
         *
         * @return the index number
         */
        GetPoolIndex(
            [out] Int32* value);

        /**
         * This method is required to be public, but should never be
         * called explicitly. It performs the main run loop to execute
         * {@link ForkJoinTask}s.
         */
        Run();
    }

    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}