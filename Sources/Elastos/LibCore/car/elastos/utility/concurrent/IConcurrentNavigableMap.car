
module
{
    interface Elastos.Utility.INavigableSet;

    namespace Elastos {
    namespace Utility {
    namespace Concurrent {

    /**
     * A {@link ConcurrentMap} supporting {@link NavigableMap} operations,
     * and recursively so for its navigable sub-maps.
     *
     * @author Doug Lea
     * @param <K> the type of keys maintained by this map
     * @param <V> the type of mapped values
     * @since 1.6
     */

    /**
     * @Involve
     * interface IMap;
     * interface IConcurrentMap;
     * interface ISortedMap;
     * interface INavigableMap;
     */
    interface IConcurrentNavigableMap {
        /**
         * @throws ClassCastException       {@inheritDoc}
         * @throws NullPointerException     {@inheritDoc}
         * @throws IllegalArgumentException {@inheritDoc}
         */
        SubMap(
            [in] IInterface* fromKey,
            [in] Boolean fromInclusive,
            [in] IInterface* toKey,
            [in] Boolean toInclusive,
            [out] IConcurrentNavigableMap** res);

        /**
         * @throws ClassCastException       {@inheritDoc}
         * @throws NullPointerException     {@inheritDoc}
         * @throws IllegalArgumentException {@inheritDoc}
         */
        HeadMap(
            [in] IInterface* toKey,
            [in] Boolean inclusive,
            [out] IConcurrentNavigableMap** res);


        /**
         * @throws ClassCastException       {@inheritDoc}
         * @throws NullPointerException     {@inheritDoc}
         * @throws IllegalArgumentException {@inheritDoc}
         */
        TailMap(
            [in] IInterface* fromKey,
            [in] Boolean inclusive,
            [out] IConcurrentNavigableMap** res);

        /**
         * @throws ClassCastException       {@inheritDoc}
         * @throws NullPointerException     {@inheritDoc}
         * @throws IllegalArgumentException {@inheritDoc}
         */
        SubMap(
            [in] IInterface* fromKey,
            [in] IInterface* toKey,
            [out] IConcurrentNavigableMap** res);

        /**
         * @throws ClassCastException       {@inheritDoc}
         * @throws NullPointerException     {@inheritDoc}
         * @throws IllegalArgumentException {@inheritDoc}
         */
        HeadMap(
            [in] IInterface* toKey,
            [out] IConcurrentNavigableMap** res);

        /**
         * @throws ClassCastException       {@inheritDoc}
         * @throws NullPointerException     {@inheritDoc}
         * @throws IllegalArgumentException {@inheritDoc}
         */
        TailMap(
            [in] IInterface* fromKey,
            [out] IConcurrentNavigableMap** res);

        /**
         * Returns a reverse order view of the mappings contained in this map.
         * The descending map is backed by this map, so changes to the map are
         * reflected in the descending map, and vice-versa.
         *
         * <p>The returned map has an ordering equivalent to
         * <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>.
         * The expression {@code m.descendingMap().descendingMap()} returns a
         * view of {@code m} essentially equivalent to {@code m}.
         *
         * @return a reverse order view of this map
         */
        DescendingMap(
            [out] IConcurrentNavigableMap** res);

        /**
         * Returns a {@link NavigableSet} view of the keys contained in this map.
         * The set's iterator returns the keys in ascending order.
         * The set is backed by the map, so changes to the map are
         * reflected in the set, and vice-versa.  The set supports element
         * removal, which removes the corresponding mapping from the map,
         * via the {@code Iterator.remove}, {@code Set.remove},
         * {@code removeAll}, {@code retainAll}, and {@code clear}
         * operations.  It does not support the {@code add} or {@code addAll}
         * operations.
         *
         * <p>The view's {@code iterator} is a "weakly consistent" iterator
         * that will never throw {@link ConcurrentModificationException},
         * and guarantees to traverse elements as they existed upon
         * construction of the iterator, and may (but is not guaranteed to)
         * reflect any modifications subsequent to construction.
         *
         * @return a navigable set view of the keys in this map
         */
        NavigableKeySet(
            [out] INavigableSet** res);

        /**
         * Returns a {@link NavigableSet} view of the keys contained in this map.
         * The set's iterator returns the keys in ascending order.
         * The set is backed by the map, so changes to the map are
         * reflected in the set, and vice-versa.  The set supports element
         * removal, which removes the corresponding mapping from the map,
         * via the {@code Iterator.remove}, {@code Set.remove},
         * {@code removeAll}, {@code retainAll}, and {@code clear}
         * operations.  It does not support the {@code add} or {@code addAll}
         * operations.
         *
         * <p>The view's {@code iterator} is a "weakly consistent" iterator
         * that will never throw {@link ConcurrentModificationException},
         * and guarantees to traverse elements as they existed upon
         * construction of the iterator, and may (but is not guaranteed to)
         * reflect any modifications subsequent to construction.
         *
         * <p>This method is equivalent to method {@code navigableKeySet}.
         *
         * @return a navigable set view of the keys in this map
         */
        KeySet(
            [out] INavigableSet** res);

        /**
         * Returns a reverse order {@link NavigableSet} view of the keys contained in this map.
         * The set's iterator returns the keys in descending order.
         * The set is backed by the map, so changes to the map are
         * reflected in the set, and vice-versa.  The set supports element
         * removal, which removes the corresponding mapping from the map,
         * via the {@code Iterator.remove}, {@code Set.remove},
         * {@code removeAll}, {@code retainAll}, and {@code clear}
         * operations.  It does not support the {@code add} or {@code addAll}
         * operations.
         *
         * <p>The view's {@code iterator} is a "weakly consistent" iterator
         * that will never throw {@link ConcurrentModificationException},
         * and guarantees to traverse elements as they existed upon
         * construction of the iterator, and may (but is not guaranteed to)
         * reflect any modifications subsequent to construction.
         *
         * @return a reverse order navigable set view of the keys in this map
         */
        DescendingKeySet(
            [out] INavigableSet** res);
    }

    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}