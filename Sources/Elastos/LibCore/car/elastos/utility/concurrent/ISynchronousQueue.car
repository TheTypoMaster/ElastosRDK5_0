
module
{
    interface Elastos.Utility.ICollection;

    namespace Elastos {
    namespace Utility {
    namespace Concurrent {
    /**
     * A {@linkplain BlockingQueue blocking queue} in which each insert
     * operation must wait for a corresponding remove operation by another
     * thread, and vice versa.  A synchronous queue does not have any
     * internal capacity, not even a capacity of one.  You cannot
     * <tt>peek</tt> at a synchronous queue because an element is only
     * present when you try to remove it; you cannot insert an element
     * (using any method) unless another thread is trying to remove it;
     * you cannot iterate as there is nothing to iterate.  The
     * <em>head</em> of the queue is the element that the first queued
     * inserting thread is trying to add to the queue; if there is no such
     * queued thread then no element is available for removal and
     * <tt>poll()</tt> will return <tt>null</tt>.  For purposes of other
     * <tt>Collection</tt> methods (for example <tt>contains</tt>), a
     * <tt>SynchronousQueue</tt> acts as an empty collection.  This queue
     * does not permit <tt>null</tt> elements.
     *
     * <p>Synchronous queues are similar to rendezvous channels used in
     * CSP and Ada. They are well suited for handoff designs, in which an
     * object running in one thread must sync up with an object running
     * in another thread in order to hand it some information, event, or
     * task.
     *
     * <p> This class supports an optional fairness policy for ordering
     * waiting producer and consumer threads.  By default, this ordering
     * is not guaranteed. However, a queue constructed with fairness set
     * to <tt>true</tt> grants threads access in FIFO order.
     *
     * <p>This class and its iterator implement all of the
     * <em>optional</em> methods of the {@link Collection} and {@link
     * Iterator} interfaces.
     *
     * @since 1.5
     * @author Doug Lea and Bill Scherer and Michael Scott
     * @param <E> the type of elements held in this collection
     */

    /**
     * @Involve
     * interface IIterable;
     * interface ICollection;
     * interface IQueue;
     * interface IBlockingQueue;
     */
    interface ISynchronousQueue {
    }

    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}
