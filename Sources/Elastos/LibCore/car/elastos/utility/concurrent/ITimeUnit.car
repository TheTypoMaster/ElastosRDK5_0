
module
{
    interface Elastos.Core.ISynchronize;
    interface Elastos.Core.IThread;

    namespace Elastos {
    namespace Utility {
    namespace Concurrent {

    /**
     * A <tt>TimeUnit</tt> represents time durations at a given unit of
     * granularity and provides utility methods to convert across units,
     * and to perform timing and delay operations in these units.  A
     * <tt>TimeUnit</tt> does not maintain time information, but only
     * helps organize and use time representations that may be maintained
     * separately across various contexts.  A nanosecond is defined as one
     * thousandth of a microsecond, a microsecond as one thousandth of a
     * millisecond, a millisecond as one thousandth of a second, a minute
     * as sixty seconds, an hour as sixty minutes, and a day as twenty four
     * hours.
     *
     * <p>A <tt>TimeUnit</tt> is mainly used to inform time-based methods
     * how a given timing parameter should be interpreted. For example,
     * the following code will timeout in 50 milliseconds if the {@link
     * java.util.concurrent.locks.Lock lock} is not available:
     *
     *  <pre> {@code
     * Lock lock = ...;
     * if (lock.tryLock(50L, TimeUnit.MILLISECONDS)) ...}</pre>
     *
     * while this code will timeout in 50 seconds:
     *  <pre> {@code
     * Lock lock = ...;
     * if (lock.tryLock(50L, TimeUnit.SECONDS)) ...}</pre>
     *
     * Note however, that there is no guarantee that a particular timeout
     * implementation will be able to notice the passage of time at the
     * same granularity as the given <tt>TimeUnit</tt>.
     *
     * @since 1.5
     * @author Doug Lea
     */
    interface ITimeUnit {
        /**
         * Convert the given time duration in the given unit to this
         * unit.  Conversions from finer to coarser granularities
         * truncate, so lose precision. For example converting
         * <tt>999</tt> milliseconds to seconds results in
         * <tt>0</tt>. Conversions from coarser to finer granularities
         * with arguments that would numerically overflow saturate to
         * <tt>Long.MIN_VALUE</tt> if negative or <tt>Long.MAX_VALUE</tt>
         * if positive.
         *
         * <p>For example, to convert 10 minutes to milliseconds, use:
         * <tt>TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)</tt>
         *
         * @param sourceDuration the time duration in the given <tt>sourceUnit</tt>
         * @param sourceUnit the unit of the <tt>sourceDuration</tt> argument
         * @return the converted duration in this unit,
         * or <tt>Long.MIN_VALUE</tt> if conversion would negatively
         * overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
         */
        Convert(
            [in] Int64 sourceDuration,
            [in] ITimeUnit* sourceUnit,
            [out] Int64* result);

        /**
         * Equivalent to <tt>NANOSECONDS.convert(duration, this)</tt>.
         * @param duration the duration
         * @return the converted duration,
         * or <tt>Long.MIN_VALUE</tt> if conversion would negatively
         * overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
         * @see #convert
         */
        ToNanos(
            [in] Int64 duration,
            [out] Int64* result);

        /**
         * Equivalent to <tt>MICROSECONDS.convert(duration, this)</tt>.
         * @param duration the duration
         * @return the converted duration,
         * or <tt>Long.MIN_VALUE</tt> if conversion would negatively
         * overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
         * @see #convert
         */
        ToMicros(
            [in] Int64 duration,
            [out] Int64* result);

        /**
         * Equivalent to <tt>MILLISECONDS.convert(duration, this)</tt>.
         * @param duration the duration
         * @return the converted duration,
         * or <tt>Long.MIN_VALUE</tt> if conversion would negatively
         * overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
         * @see #convert
         */
        ToMillis(
            [in] Int64 duration,
            [out] Int64* result);

        /**
         * Equivalent to <tt>SECONDS.convert(duration, this)</tt>.
         * @param duration the duration
         * @return the converted duration,
         * or <tt>Long.MIN_VALUE</tt> if conversion would negatively
         * overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
         * @see #convert
         */
        ToSeconds(
            [in] Int64 duration,
            [out] Int64* result);

        /**
         * Equivalent to <tt>MINUTES.convert(duration, this)</tt>.
         * @param duration the duration
         * @return the converted duration,
         * or <tt>Long.MIN_VALUE</tt> if conversion would negatively
         * overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
         * @see #convert
         * @since 1.6
         */
        ToMinutes(
            [in] Int64 duration,
            [out] Int64* result);

        /**
         * Equivalent to <tt>HOURS.convert(duration, this)</tt>.
         * @param duration the duration
         * @return the converted duration,
         * or <tt>Long.MIN_VALUE</tt> if conversion would negatively
         * overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
         * @see #convert
         * @since 1.6
         */
        ToHours(
            [in] Int64 duration,
            [out] Int64* result);

        /**
         * Equivalent to <tt>DAYS.convert(duration, this)</tt>.
         * @param duration the duration
         * @return the converted duration
         * @see #convert
         * @since 1.6
         */
        ToDays(
            [in] Int64 duration,
            [out] Int64* result);

        /**
         * Utility to compute the excess-nanosecond argument to wait,
         * sleep, join.
         * @param d the duration
         * @param m the number of milliseconds
         * @return the number of nanoseconds
         */
        ExcessNanos(
            [in] Int64 d,
            [in] Int64 m,
            [out] Int32* result);

        /**
         * Performs a timed {@link Object#wait(long, int) Object.wait}
         * using this time unit.
         * This is a convenience method that converts timeout arguments
         * into the form required by the <tt>Object.wait</tt> method.
         *
         * <p>For example, you could implement a blocking <tt>poll</tt>
         * method (see {@link BlockingQueue#poll BlockingQueue.poll})
         * using:
         *
         *  <pre> {@code
         * public synchronized Object poll(long timeout, TimeUnit unit)
         *     throws InterruptedException {
         *   while (empty) {
         *     unit.timedWait(this, timeout);
         *     ...
         *   }
         * }}</pre>
         *
         * @param obj the object to wait on
         * @param timeout the maximum time to wait. If less than
         * or equal to zero, do not wait at all.
         * @throws InterruptedException if interrupted while waiting
         */
        TimedWait(
            [in] ISynchronize* obj,
            [in] Int64 timeout);

        /**
         * Performs a timed {@link Thread#join(long, int) Thread.join}
         * using this time unit.
         * This is a convenience method that converts time arguments into the
         * form required by the <tt>Thread.join</tt> method.
         *
         * @param thread the thread to wait for
         * @param timeout the maximum time to wait. If less than
         * or equal to zero, do not wait at all.
         * @throws InterruptedException if interrupted while waiting
         */
        TimedJoin(
            [in] IThread* thread,
            [in] Int64 timeout);

        /**
         * Performs a {@link Thread#sleep(long, int) Thread.sleep} using
         * this time unit.
         * This is a convenience method that converts time arguments into the
         * form required by the <tt>Thread.sleep</tt> method.
         *
         * @param timeout the minimum time to sleep. If less than
         * or equal to zero, do not sleep at all.
         * @throws InterruptedException if interrupted while sleeping
         */
        Sleep(
            [in] Int64 timeout);
    }

    interface ITimeUnitHelper {
        GetNANOSECONDS(
            [out] ITimeUnit** unit);

        GetMICROSECONDS(
            [out] ITimeUnit** unit);

        GetMILLISECONDS(
            [out] ITimeUnit** unit);

        GetSECONDS(
            [out] ITimeUnit** unit);

        GetMINUTES(
            [out] ITimeUnit** unit);

        GetHOURS(
            [out] ITimeUnit** unit);

        GetDAYS(
            [out] ITimeUnit** unit);
    }

    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}