
module
{
    namespace Elastos {
    namespace Utility {
    namespace Concurrent {
    namespace Atomic {

    interface IAtomicInteger32 {
        /**
         * Gets the current value.
         *
         * @return the current value
         */
        Get(
            [out] Int32* value);

        /**
         * Sets to the given value.
         *
         * @param newValue the new value
         */
        Set(
            [in] Int32 newValue);

        /**
         * Eventually sets to the given value.
         *
         * @param newValue the new value
         * @since 1.6
         */
        LazySet(
            [in] Int32 newValue);

        /**
         * Atomically sets to the given value and returns the old value.
         *
         * @param newValue the new value
         * @return the previous value
         */
        GetAndSet(
            [in] Int32 newValue,
            [out] Int32* value);

        /**
         * Atomically sets the value to the given updated value
         * if the current value {@code ==} the expected value.
         *
         * @param expect the expected value
         * @param update the new value
         * @return true if successful. False return indicates that
         * the actual value was not equal to the expected value.
         */
        CompareAndSet(
            [in] Int32 expect,
            [in] Int32 update,
            [out] Boolean* result);

        /**
         * Atomically sets the value to the given updated value
         * if the current value {@code ==} the expected value.
         *
         * <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
         * and does not provide ordering guarantees, so is only rarely an
         * appropriate alternative to {@code compareAndSet}.
         *
         * @param expect the expected value
         * @param update the new value
         * @return true if successful.
         */
        WeakCompareAndSet(
            [in] Int32 expect,
            [in] Int32 update,
            [out] Boolean* result);

        /**
         * Atomically increments by one the current value.
         *
         * @return the previous value
         */
        GetAndIncrement(
            [out] Int32* value);

        /**
         * Atomically decrements by one the current value.
         *
         * @return the previous value
         */
        GetAndDecrement(
            [out] Int32* value);

        /**
         * Atomically adds the given value to the current value.
         *
         * @param delta the value to add
         * @return the previous value
         */
        GetAndAdd(
            [in] Int32 delta,
            [out] Int32* value);

        /**
         * Atomically increments by one the current value.
         *
         * @return the updated value
         */
        IncrementAndGet(
            [out] Int32* value);

        /**
         * Atomically decrements by one the current value.
         *
         * @return the updated value
         */
        DecrementAndGet(
            [out] Int32* value);

        /**
         * Atomically adds the given value to the current value.
         *
         * @param delta the value to add
         * @return the updated value
         */
        AddAndGet(
            [in] Int32 delta,
            [out] Int32* value);

        /**
         * Returns the value of this {@code AtomicInteger} as an {@code int}.
         */
        Int32Value(
            [out] Int32* value);

        /**
         * Returns the value of this {@code AtomicInteger} as a {@code long}
         * after a widening primitive conversion.
         */
        Int64Value(
            [out] Int64* value);

        /**
         * Returns the value of this {@code AtomicInteger} as a {@code float}
         * after a widening primitive conversion.
         */
        FloatValue(
            [out] Float* value);

        /**
         * Returns the value of this {@code AtomicInteger} as a {@code double}
         * after a widening primitive conversion.
         */
        DoubleValue(
            [out] Double* value);
    }

    } // namespace Atomic
    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}
