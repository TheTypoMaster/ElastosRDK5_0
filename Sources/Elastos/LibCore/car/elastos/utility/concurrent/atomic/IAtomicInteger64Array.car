
module
{
    namespace Elastos {
    namespace Utility {
    namespace Concurrent {
    namespace Atomic {

    interface IAtomicInteger64Array {
        /**
         * Returns the length of the array.
         *
         * @return the length of the array
         */
        GetLength(
            [out] Int32* value);

        /**
         * Gets the current value at position {@code i}.
         *
         * @param i the index
         * @return the current value
         */
        Get(
            [in] Int32 i,
            [out] Int64* value);

        /**
         * Sets the element at position {@code i} to the given value.
         *
         * @param i the index
         * @param newValue the new value
         */
        Set(
            [in] Int32 i,
            [in] Int64 newValue);

        /**
         * Eventually sets the element at position {@code i} to the given value.
         *
         * @param i the index
         * @param newValue the new value
         * @since 1.6
         */
        LazySet(
            [in] Int32 i,
            [in] Int64 newValue);


        /**
         * Atomically sets the element at position {@code i} to the given value
         * and returns the old value.
         *
         * @param i the index
         * @param newValue the new value
         * @return the previous value
         */
        GetAndSet(
            [in] Int32 i,
            [in] Int64 newValue,
            [out] Int64* value);

        /**
         * Atomically sets the element at position {@code i} to the given
         * updated value if the current value {@code ==} the expected value.
         *
         * @param i the index
         * @param expect the expected value
         * @param update the new value
         * @return true if successful. False return indicates that
         * the actual value was not equal to the expected value.
         */
        CompareAndSet(
            [in] Int32 i,
            [in] Int64 expect,
            [in] Int64 update,
            [out] Boolean* value);

        /**
         * Atomically sets the element at position {@code i} to the given
         * updated value if the current value {@code ==} the expected value.
         *
         * <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
         * and does not provide ordering guarantees, so is only rarely an
         * appropriate alternative to {@code compareAndSet}.
         *
         * @param i the index
         * @param expect the expected value
         * @param update the new value
         * @return true if successful.
         */
        WeakCompareAndSet(
            [in] Int32 i,
            [in] Int64 expect,
            [in] Int64 update,
            [out] Boolean* value);

        /**
         * Atomically increments by one the element at index {@code i}.
         *
         * @param i the index
         * @return the previous value
         */
        GetAndIncrement(
            [in] Int32 i,
            [out] Int64* value);

        /**
         * Atomically decrements by one the element at index {@code i}.
         *
         * @param i the index
         * @return the previous value
         */
        GetAndDecrement(
            [in] Int32 i,
            [out] Int64* value);

        /**
         * Atomically adds the given value to the element at index {@code i}.
         *
         * @param i the index
         * @param delta the value to add
         * @return the previous value
         */
        GetAndAdd(
            [in] Int32 i,
            [in] Int64 delta,
            [out] Int64* value);

        /**
         * Atomically increments by one the element at index {@code i}.
         *
         * @param i the index
         * @return the updated value
         */
        IncrementAndGet(
            [in] Int32 i,
            [out] Int64* value);

        /**
         * Atomically decrements by one the element at index {@code i}.
         *
         * @param i the index
         * @return the updated value
         */
        DecrementAndGet(
            [in] Int32 i,
            [out] Int64* value);

        /**
         * Atomically adds the given value to the element at index {@code i}.
         *
         * @param i the index
         * @param delta the value to add
         * @return the updated value
         */
        AddAndGet(
            [in] Int32 i,
            [in] Int64 delta,
            [out] Int64* value);

        /**
         * Returns the String representation of the current values of array.
         * @return the String representation of the current values of array
         */
        ToString(
            [out] String* str);
    }

    } // namespace Atomic
    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}
