
module
{
    namespace Elastos {
    namespace Utility {
    namespace Concurrent {
    namespace Atomic {

    [deprecated]
    interface IAtomicStampedReference {
        /**
         * Returns the current value of the reference.
         *
         * @return the current value of the reference
         */
        GetReference(
            [out] IInterface** outface);

        /**
         * Returns the current value of the stamp.
         *
         * @return the current value of the stamp
         */
        GetStamp(
            [out] Int32* value);

        /**
         * Returns the current values of both the reference and the stamp.
         * Typical usage is {@code int[1] holder; ref = v.get(holder); }.
         *
         * @param stampHolder an array of size of at least one.  On return,
         * {@code stampholder[0]} will hold the value of the stamp.
         * @return the current value of the reference
         */
        Get(
            [in] ArrayOf<Int32>* stampHolder,
            [out] IInterface** outface);

        /**
         * Atomically sets the value of both the reference and stamp
         * to the given update values if the
         * current reference is {@code ==} to the expected reference
         * and the current stamp is equal to the expected stamp.
         *
         * <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
         * and does not provide ordering guarantees, so is only rarely an
         * appropriate alternative to {@code compareAndSet}.
         *
         * @param expectedReference the expected value of the reference
         * @param newReference the new value for the reference
         * @param expectedStamp the expected value of the stamp
         * @param newStamp the new value for the stamp
         * @return true if successful
         */
        WeakCompareAndSet(
            [in] IInterface* expectedReference,
            [in] IInterface* newReference,
            [in] Int32 expectedStamp,
            [in] Int32 newStamp,
            [out] Boolean* value);

        /**
         * Atomically sets the value of both the reference and stamp
         * to the given update values if the
         * current reference is {@code ==} to the expected reference
         * and the current stamp is equal to the expected stamp.
         *
         * @param expectedReference the expected value of the reference
         * @param newReference the new value for the reference
         * @param expectedStamp the expected value of the stamp
         * @param newStamp the new value for the stamp
         * @return true if successful
         */
        CompareAndSet(
            [in] IInterface* expectedReference,
            [in] IInterface* newReference,
            [in] Int32 expectedStamp,
            [in] Int32 newStamp,
            [out] Boolean* value);


        /**
         * Unconditionally sets the value of both the reference and stamp.
         *
         * @param newReference the new value for the reference
         * @param newStamp the new value for the stamp
         */
        Set(
            [in] IInterface* newReference,
            [in] Int32 newStamp);

        /**
         * Atomically sets the value of the stamp to the given update value
         * if the current reference is {@code ==} to the expected
         * reference.  Any given invocation of this operation may fail
         * (return {@code false}) spuriously, but repeated invocation
         * when the current value holds the expected value and no other
         * thread is also attempting to set the value will eventually
         * succeed.
         *
         * @param expectedReference the expected value of the reference
         * @param newStamp the new value for the stamp
         * @return true if successful
         */
        AttemptStamp(
            [in] IInterface* expectedReference,
            [in] Int32 newStamp,
            [out] Boolean* value);
    }

    } // namespace Atomic
    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}
