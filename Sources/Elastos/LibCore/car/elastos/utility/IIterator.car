
module
{
    namespace Elastos {
    namespace Utility {

    /**
     * An iterator over a sequence of objects, such as a collection.
     *
     * <p>If a collection has been changed since the iterator was created,
     * methods {@code next} and {@code hasNext()} may throw a {@code ConcurrentModificationException}.
     * It is not possible to guarantee that this mechanism works in all cases of unsynchronized
     * concurrent modification. It should only be used for debugging purposes. Iterators with this
     * behavior are called fail-fast iterators.
     *
     * <p>Implementing {@link Iterable} and returning an {@code Iterator} allows your
     * class to be used as a collection with the enhanced for loop.
     *
     * @param <E>
     *            the type of object returned by the iterator.
     */
    interface IIterator {
        /**
         * Returns true if there is at least one more element, false otherwise.
         * @see #next
         */
        HasNext(
            [out] Boolean* result);

        /**
         * Returns the next object and advances the iterator.
         *
         * @return the next object.
         * @throws NoSuchElementException
         *             if there are no more elements.
         * @see #hasNext
         */
        GetNext(
            [out] IInterface** object);

        /**
         * Removes the last object returned by {@code next} from the collection.
         * This method can only be called once between each call to {@code next}.
         *
         * @throws UnsupportedOperationException
         *             if removing is not supported by the collection being
         *             iterated.
         * @throws IllegalStateException
         *             if {@code next} has not been called, or {@code remove} has
         *             already been called after the last call to {@code next}.
         */
        Remove();
    }

    } // namespace Utility
    } // namespace Elastos
}