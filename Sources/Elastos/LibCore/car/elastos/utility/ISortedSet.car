module
{
    using interface Elastos.Core.IComparator;

    namespace Elastos {
    namespace Utility {
    /**
     * SortedSet is a Set which iterates over its elements in a sorted order. The
     * order is determined either by the elements natural ordering, or by a
     * {@link Comparator} which is passed into a concrete implementation at
     * construction time. All elements in this set must be mutually comparable. The
     * ordering in this set must be consistent with {@code equals} of its elements.
     *
     * @see Comparator
     * @see Comparable
     */

    /**
     * @Involve
     * interface IIterable;
     * interface ICollection;
     * interface ISet;
     */
    interface ISortedSet {

        /**
         * Returns the comparator used to compare elements in this {@code SortedSet}.
         *
         * @return a comparator or null if the natural ordering is used.
         */
        Comparator(
            [out] IComparator** outcom);

        /**
         * Returns the first element in this {@code SortedSet}. The first element
         * is the lowest element.
         *
         * @return the first element.
         * @throws NoSuchElementException
         *             when this {@code SortedSet} is empty.
         */
        First(
            [out] IInterface** outface);

        /**
         * Returns a {@code SortedSet} of the specified portion of this
         * {@code SortedSet} which contains elements less than the end element. The
         * returned {@code SortedSet} is backed by this {@code SortedSet} so changes
         * to one set are reflected by the other.
         *
         * @param end
         *            the end element.
         * @return a subset where the elements are less than {@code end}.
         * @throws ClassCastException
         *             when the class of the end element is inappropriate for this
         *             SubSet.
         * @throws NullPointerException
         *             when the end element is null and this {@code SortedSet} does
         *             not support null elements.
         */
        HeadSet(
            [in] IInterface* end,
            [out] ISortedSet** outsort);

        /**
         * Returns the last element in this {@code SortedSet}. The last element is
         * the highest element.
         *
         * @return the last element.
         * @throws NoSuchElementException
         *             when this {@code SortedSet} is empty.
         */
        Last(
            [out] IInterface** outface);

        /**
         * Returns a {@code SortedSet} of the specified portion of this
         * {@code SortedSet} which contains elements greater or equal to the start
         * element but less than the end element. The returned {@code SortedSet} is
         * backed by this SortedMap so changes to one set are reflected by the
         * other.
         *
         * @param start
         *            the start element.
         * @param end
         *            the end element.
         * @return a subset where the elements are greater or equal to {@code start}
         *         and less than {@code end}.
         * @throws ClassCastException
         *             when the class of the start or end element is inappropriate
         *             for this SubSet.
         * @throws NullPointerException
         *             when the start or end element is null and this
         *             {@code SortedSet} does not support null elements.
         * @throws IllegalArgumentException
         *             when the start element is greater than the end element.
         */
        SubSet(
            [in] IInterface* start,
            [in] IInterface* end,
            [out] ISortedSet** outsort);

        /**
         * Returns a {@code SortedSet} of the specified portion of this
         * {@code SortedSet} which contains elements greater or equal to the start
         * element. The returned {@code SortedSet} is backed by this
         * {@code SortedSet} so changes to one set are reflected by the other.
         *
         * @param start
         *            the start element.
         * @return a subset where the elements are greater or equal to {@code start} .
         * @throws ClassCastException
         *             when the class of the start element is inappropriate for this
         *             SubSet.
         * @throws NullPointerException
         *             when the start element is null and this {@code SortedSet}
         *             does not support null elements.
         */
        TailSet(
            [in] IInterface* start,
            [out] ISortedSet** outsort);
    }

    } // namespace Utility
    } // namespace Elastos
}