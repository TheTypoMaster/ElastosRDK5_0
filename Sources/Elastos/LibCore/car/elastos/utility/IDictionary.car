module
{
    interface Elastos.Utility.IEnumeration;

    namespace Elastos {
    namespace Utility {
    /**
     * <strong>Note: Do not use this class since it is obsolete. Please use the
     * {@link Map} interface for new implementations.</strong>
     * <p>
     * Dictionary is an abstract class which is the superclass of all classes that
     * associate keys with values, such as {@code Hashtable}.
     *
     * @see Hashtable
     * @since 1.0
     */
    interface IDictionary {

        /**
         * Returns an enumeration on the elements of this dictionary.
         *
         * @return an enumeration of the values of this dictionary.
         * @see #keys
         * @see #size
         * @see Enumeration
         */
        GetElements(
            [out] IEnumeration** enm);

        /**
         * Returns the value which is associated with {@code key}.
         *
         * @param key
         *            the key of the value returned.
         * @return the value associated with {@code key}, or {@code null} if the
         *         specified key does not exist.
         * @see #put
         */
        Get(
            [in] IInterface* key,
            [out] IInterface** outface);

        /**
         * Returns true if this dictionary has no key/value pairs.
         *
         * @return {@code true} if this dictionary has no key/value pairs,
         *         {@code false} otherwise.
         * @see #size
         */
        IsEmpty(
            [out] Boolean* value);

        /**
         * Returns an enumeration on the keys of this dictionary.
         *
         * @return an enumeration of the keys of this dictionary.
         * @see #elements
         * @see #size
         * @see Enumeration
         */
        GetKeys(
            [out] IEnumeration** enm);

        /**
         * Associate {@code key} with {@code value} in this dictionary. If {@code
         * key} exists in the dictionary before this call, the old value in the
         * dictionary is replaced by {@code value}.
         *
         * @param key
         *            the key to add.
         * @param value
         *            the value to add.
         * @return the old value previously associated with {@code key} or {@code
         *         null} if {@code key} is new to the dictionary.
         * @see #elements
         * @see #get
         * @see #keys
         */
        Put(
            [in] IInterface* key,
            [in] IInterface* value,
            [out] IInterface** outface);

        Put(
            [in] IInterface* key,
            [in] IInterface* value);

        /**
         * Removes the key/value pair with the specified {@code key} from this
         * dictionary.
         *
         * @param key
         *            the key to remove.
         * @return the associated value before the deletion or {@code null} if
         *         {@code key} was not known to this dictionary.
         * @see #get
         * @see #put
         */
        Remove(
            [in] IInterface* key,
            [out] IInterface** outface);

        Remove(
            [in] IInterface* key);

        /**
         * Returns the number of key/value pairs in this dictionary.
         *
         * @return the number of key/value pairs in this dictionary.
         * @see #elements
         * @see #keys
         */
        GetSize(
            [out] Int32* value);
    }

    } // namespace Utility
    } // namespace Elastos
}