module
{
    interface Elastos.Core.IComparator;

    namespace Elastos {
    namespace Utility {
    /**
     * A map that has its keys ordered. The sorting is according to either the
     * natural ordering of its keys or the ordering given by a specified comparator.
     */

    /**
     * @Involve
     * interface IMap;
     */
    interface ISortedMap {

        /**
         * Returns the comparator used to compare keys in this sorted map.
         *
         * @return the comparator or {@code null} if the natural order is used.
         */
        GetComparator(
            [out] IComparator** comp);

        /**
         * Returns the first key in this sorted map.
         *
         * @return the first key in this sorted map.
         * @throws NoSuchElementException
         *                if this sorted map is empty.
         */
        GetFirstKey(
            [out] IInterface** outface);

        /**
         * Returns a sorted map over a range of this sorted map with all keys that
         * are less than the specified {@code endKey}. Changes to the returned
         * sorted map are reflected in this sorted map and vice versa.
         * <p>
         * Note: The returned map will not allow an insertion of a key outside the
         * specified range.
         *
         * @param endKey
         *            the high boundary of the range specified.
         * @return a sorted map where the keys are less than {@code endKey}.
         * @throws ClassCastException
         *             if the class of the end key is inappropriate for this sorted
         *             map.
         * @throws NullPointerException
         *             if the end key is {@code null} and this sorted map does not
         *             support {@code null} keys.
         * @throws IllegalArgumentException
         *             if this map is itself a sorted map over a range of another
         *             map and the specified key is outside of its range.
         */
        GetHeadMap(
            [in] IInterface* endKey,
            [out] ISortedMap** sortmap);

        /**
         * Returns the last key in this sorted map.
         *
         * @return the last key in this sorted map.
         * @throws NoSuchElementException
         *                if this sorted map is empty.
         */
        GetLastKey(
            [out] IInterface** outface);

        /**
         * Returns a sorted map over a range of this sorted map with all keys
         * greater than or equal to the specified {@code startKey} and less than the
         * specified {@code endKey}. Changes to the returned sorted map are
         * reflected in this sorted map and vice versa.
         * <p>
         * Note: The returned map will not allow an insertion of a key outside the
         * specified range.
         *
         * @param startKey
         *            the low boundary of the range (inclusive).
         * @param endKey
         *            the high boundary of the range (exclusive),
         * @return a sorted map with the key from the specified range.
         * @throws ClassCastException
         *             if the class of the start or end key is inappropriate for
         *             this sorted map.
         * @throws NullPointerException
         *             if the start or end key is {@code null} and this sorted map
         *             does not support {@code null} keys.
         * @throws IllegalArgumentException
         *             if the start key is greater than the end key, or if this map
         *             is itself a sorted map over a range of another sorted map and
         *             the specified range is outside of its range.
         */
        GetSubMap(
            [in] IInterface* startKey,
            [in] IInterface* endKey,
            [out] ISortedMap** sortmap);

        /**
         * Returns a sorted map over a range of this sorted map with all keys that
         * are greater than or equal to the specified {@code startKey}. Changes to
         * the returned sorted map are reflected in this sorted map and vice versa.
         * <p>
         * Note: The returned map will not allow an insertion of a key outside the
         * specified range.
         *
         * @param startKey
         *            the low boundary of the range specified.
         * @return a sorted map where the keys are greater or equal to
         *         {@code startKey}.
         * @throws ClassCastException
         *             if the class of the start key is inappropriate for this
         *             sorted map.
         * @throws NullPointerException
         *             if the start key is {@code null} and this sorted map does not
         *             support {@code null} keys.
         * @throws IllegalArgumentException
         *             if this map itself a sorted map over a range of another map
         *             and the specified key is outside of its range.
         */
        GetTailMap(
            [in] IInterface* startKey,
            [out] ISortedMap** sortmap);


        /**
         * interfaces from IMap
         */
        Clear();

        ContainsKey(
            [in] IInterface* key,
            [out] Boolean* result);

        ContainsValue(
            [in] IInterface* value,
            [out] Boolean* result);

        GetEntrySet(
            [out] ISet** entries);

        Equals(
            [in] IInterface* object,
            [out] Boolean* result);

        Get(
            [in] IInterface* key,
            [out] IInterface** value);

        GetHashCode(
            [out] Int32* hashCode);

        IsEmpty(
            [out] Boolean* result);

        GetKeySet(
            [out] ISet** keySet);

        Put(
            [in] IInterface* key,
            [in] IInterface* value,
            [out] IInterface** oldValue);

        Put(
            [in] IInterface* key,
            [in] IInterface* value);

        PutAll(
            [in] IMap* map);

        Remove(
            [in] IInterface* key,
            [out] IInterface** value);

        Remove(
            [in] IInterface* key);

        GetSize(
            [out] Int32* size);

        GetValues(
            [out] ICollection** value);
    }

    } // namespace Utility
    } // namespace Elastos
}