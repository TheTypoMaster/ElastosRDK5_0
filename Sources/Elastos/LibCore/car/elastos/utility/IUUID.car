module
{
    interface Elastos.IO.IInt64Buffer;
    interface Elastos.IO.IByteBuffer;

    namespace Elastos {
    namespace Utility {

    interface IUUID {
        /**
         * <p>
         * The 64 least significant bits of the UUID.
         *
         * @return the 64 least significant bits.
         */
        GetLeastSignificantBits(
            [out] Int64* leastSigBits);

        /**
         * <p>
         * The 64 most significant bits of the UUID.
         *
         * @return the 64 most significant bits.
         */
        GetMostSignificantBits(
            [out] Int64* mostSigBits);

        /**
         * <p>
         * The version of the variant 2 UUID as per <a
         * href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>. If the variant
         * is not 2, then the version will be 0.
         * <ul>
         * <li>1 - Time-based UUID</li>
         * <li>2 - DCE Security UUID</li>
         * <li>3 - Name-based with MD5 hashing UUID ({@link #nameUUIDFromBytes(byte[])})</li>
         * <li>4 - Randomly generated UUID ({@link #randomUUID()})</li>
         * <li>5 - Name-based with SHA-1 hashing UUID</li>
         * </ul>
         *
         * @return an {@code int} value.
         */
        Version(
            [out] Int32* v);

        /**
         * <p>
         * The variant of the UUID as per <a
         * href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
         * <ul>
         * <li>0 - Reserved for NCS compatibility</li>
         * <li>2 - RFC 4122/Leach-Salz</li>
         * <li>6 - Reserved for Microsoft Corporation compatibility</li>
         * <li>7 - Reserved for future use</li>
         * </ul>
         *
         * @return an {@code int} value.
         */
        Variant(
            [out] Int32* variant);

        /**
         * <p>
         * The timestamp value of the version 1, variant 2 UUID as per <a
         * href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
         *
         * @return a {@code long} value.
         * @throws UnsupportedOperationException
         *             if {@link #version()} is not 1.
         */
        Timestamp(
            [out] Int64* timeStamp);

        /**
         * <p>
         * The clock sequence value of the version 1, variant 2 UUID as per <a
         * href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
         *
         * @return a {@code long} value.
         * @throws UnsupportedOperationException
         *             if {@link #version()} is not 1.
         */
        ClockSequence(
            [out] Int32* clockSequence);

        /**
         * <p>
         * The node value of the version 1, variant 2 UUID as per <a
         * href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
         *
         * @return a {@code long} value.
         * @throws UnsupportedOperationException
         *             if {@link #version()} is not 1.
         */
        Node(
            [out] Int64* node);

        CompareTo(
            [in] IUUID* other,
            [out] Int32* result);

        Equals(
            [in] IInterface* obj,
            [out] Boolean* result);

        GetHashCode(
            [out] Int32* hash);

        ToString(
            [out] String* str);
    }

    interface IUUIDHelper {
        /**
         * <p>
         * Generates a variant 2, version 4 (randomly generated number) UUID as per
         * <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
         *
         * @return an UUID instance.
         */
        RandomUUID(
            [out] IUUID** uuid);

        /**
         * <p>
         * Generates a variant 2, version 3 (name-based, MD5-hashed) UUID as per <a
         * href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.
         *
         * @param name
         *            the name used as byte array to create an UUID.
         * @return an UUID instance.
         */
        NameUUIDFromBytes(
            [in] ArrayOf<Byte> name,
            [out] IUUID** uuid);

        /**
         * <p>
         * Parses a UUID string with the format defined by {@link #toString()}.
         *
         * @param uuid
         *            the UUID string to parse.
         * @return an UUID instance.
         * @throws NullPointerException
         *             if {@code uuid} is {@code null}.
         * @throws IllegalArgumentException
         *             if {@code uuid} is not formatted correctly.
         */
        FromString(
            [in] String name,
            [out] IUUID** uuid);
    }

    } // namespace Utility
    } // namespace Elastos
}
