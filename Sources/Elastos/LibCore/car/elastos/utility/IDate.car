
module
{
    namespace Elastos{
    namespace Utility{

    /**
     * A specific moment in time, with millisecond precision. Values
     * typically come from currentTimeMillis(), and are always UTC,
     * regardless of the system's time zone. This is often called "Unix time"
     * or "epoch time".
     *
     * @sa currentTimeMillis()
     * <p>
     * Instances of this class are suitable for comparison, but little else.
     * Use DateFormat to format a Date for display to a human. Use Calendar
     * to break down a Date if you need to extract fields such as the current
     * month or day of week, or to construct a Date from a broken-down time.
     * That is: this class' deprecated display-related functionality is now
     * provided by DateFormat, and this class' deprecated computational
     * functionality is now provided by Calendar. Both of these other classes
     * (and their subclasses) allow you to interpret a Date in a given time zone.
     *
     * @sa DateFormat
     * @sa Calendar
     * <p>
     * Note that, surprisingly, instances of this class are mutable.
    */

    interface IDate {
        /**
         * Returns if this {Date} is after the specified Date.
         *
         * @param date
         *            a Date instance to compare.
         * @return {true} if this {Date} is after the specified {Date},
         *         {false} otherwise.
         */
        IsAfter(
            [in] IDate* date,
            [out] Boolean* isAfter);

        /**
         * Returns if this {Date} is before the specified Date.
         *
         * @param date
         *            a {Date} instance to compare.
         * @return {true} if this {Date} is before the specified {Date},
         *         {false} otherwise.
         */
        IsBefore(
            [in] IDate* date,
            [out] Boolean* isBefore);

        /**
         * Returns the gregorian calendar day of the month for this {Date} object.
         *
         * @return the day of the month.
         *
         * @deprecated use {Calendar.get(Calendar.DATE)}
         */
        //@Deprecated
        GetDate(
            [out] Int32* date);

        /**
         * Returns the gregorian calendar day of the week for this {Date} object.
         *
         * @return the day of the week.
         *
         * @deprecated use {Calendar.get(Calendar.DAY_OF_WEEK)}
         */
        //@Deprecated
        GetDay(
            [out] Int32* day);

        /**
         * Returns the gregorian calendar hour of the day for this {Date} object.
         *
         * @return the hour of the day.
         *
         * @deprecated use {Calendar.get(Calendar.HOUR_OF_DAY)}
         */
        //@Deprecated
        GetHours(
            [out] Int32* hours);

        /**
         * Returns the gregorian calendar minute of the hour for this {Date} object.
         *
         * @return the minutes.
         *
         * @deprecated use {Calendar.get(Calendar.MINUTE)}
         */
        //@Deprecated
        GetMinutes(
            [out] Int32* minutes);

        /**
         * Returns the gregorian calendar month for this {Date} object.
         *
         * @return the month.
         *
         * @deprecated use {Calendar.get(Calendar.MONTH)}
         */
        //@Deprecated
        GetMonth(
            [out] Int32* month);

        /**
         * Returns the gregorian calendar second of the minute for this {Date} object.
         *
         * @return the seconds.
         *
         * @deprecated use {Calendar.get(Calendar.SECOND)}
         */
        //@Deprecated
        GetSeconds(
            [out] Int32* seconds);

        /**
         * Returns this {Date} as a millisecond value. The value is the number of
         * milliseconds since Jan. 1, 1970, midnight GMT.
         *
         * @return the number of milliseconds since Jan. 1, 1970, midnight GMT.
         */
        GetTime(
            [out] Int64* time);

        /**
         * Returns the timezone offset in minutes of the default {TimeZone}.
         *
         * @return the timezone offset in minutes of the default {TimeZone}.
         *
         * @deprecated use
         *             {(Calendar.get(Calendar.ZONE_OFFSET) + Calendar.get(Calendar.DST_OFFSET)) / 60000}
         */
        //@Deprecated
        GetTimezoneOffset(
            [out] Int32* timezoneOffset);

        /**
         * Returns the gregorian calendar year since 1900 for this {Date} object.
         *
         * @return the year - 1900.
         *
         * @deprecated use {Calendar.get(Calendar.YEAR) - 1900}
         */
        //@Deprecated
        GetYear(
            [out] Int32* year);

        /**
         * Sets the gregorian calendar day of the month for this {Date} object.
         *
         * @param day
         *            the day of the month.
         *
         * @deprecated use {Calendar.set(Calendar.DATE, day)}
         */
        //@Deprecated
        SetDate(
            [in] Int32 day);

        /**
         * Sets the gregorian calendar hour of the day for this {Date} object.
         *
         * @param hour
         *            the hour of the day.
         *
         * @deprecated use {Calendar.set(Calendar.HOUR_OF_DAY, hour)}
         */
        //@Deprecated
        SetHours(
            [in] Int32 hour);

        /**
         * Sets the gregorian calendar minute of the hour for this {Date} object.
         *
         * @param minute
         *            the minutes.
         *
         * @deprecated use {Calendar.set(Calendar.MINUTE, minute)}
         */
        //@Deprecated
        SetMinutes(
            [in] Int32 minute);

        /**
         * Sets the gregorian calendar month for this {Date} object.
         *
         * @param month
         *            the month.
         *
         * @deprecated use {Calendar.set(Calendar.MONTH, month)}
         */
        //@Deprecated
        SetMonth(
            [in] Int32 month);

        /**
         * Sets the gregorian calendar second of the minute for this {Date} object.
         *
         * @param second
         *            the seconds.
         *
         * @deprecated use {Calendar.set(Calendar.SECOND, second)}
         */
        //@Deprecated
        SetSeconds(
            [in] Int32 second);

        /**
         * Sets this {Date} to the specified millisecond value. The value is the
         * number of milliseconds since Jan. 1, 1970 GMT.
         *
         * @param milliseconds
         *            the number of milliseconds since Jan. 1, 1970 GMT.
         */
        SetTime(
            [in] Int64 milliseconds);

        /**
         * Sets the gregorian calendar year since 1900 for this {Date} object.
         *
         * @param year
         *            the year since 1900.
         *
         * @deprecated use {Calendar.set(Calendar.YEAR, year + 1900)}
         */
        //@Deprecated
        SetYear(
            [in] Int32 year);

        /**
         * Returns the string representation of this {Date} in GMT in the format: 22
         * Jun 1999 13:02:00 GMT
         *
         * @return the string representation of this {Date} in GMT.
         *
         * @deprecated use DateFormat
         *
         * @sa DateFormat
         */
        //@Deprecated
        ToGMTString(
            [out] String* gmtStr);

        /**
         * Returns the string representation of this {Date} for the default {Locale}.
         *
         * @return the string representation of this {Date} for the default {Locale}.
         *
         * @deprecated use DateFormat
         *
         * @sa DateFormat
         */
        //@Deprecated
        ToLocaleString(
            [out] String* localeStr);

        /**
         * Returns a string representation of this {Date}.
         * The formatting is equivalent to using a {SimpleDateFormat} with
         * the format string "EEE MMM dd HH:mm:ss zzz yyyy", which looks something
         * like "Tue Jun 22 13:07:00 PDT 1999". The current default time zone and
         * locale are used. If you need control over the time zone or locale,
         * use {SimpleDateFormat} instead.
         */
        ToString(
            [out] String* localeStr);
    }

    interface IDateHelper {
        /**
         * Returns the millisecond value of the date and time parsed from the
         * specified {String}. Many date/time formats are recognized, including IETF
         * standard syntax, i.e. Tue, 22 Jun 1999 12:16:00 GMT-0500
         *
         * @param string
         *            the String to parse.
         * @return the millisecond value parsed from the String.
         *
         * @deprecated use DateFormat
         *
         * @sa DateFormat
         */
        //@Deprecated
        Parse(
            [in] String string,
            [out] Int64* value);

        /**
         * Returns the millisecond value of the specified date and time in GMT.
         *
         * @param year
         *            the year, 0 is 1900.
         * @param month
         *            the month, 0 - 11.
         * @param day
         *            the day of the month, 1 - 31.
         * @param hour
         *            the hour of day, 0 - 23.
         * @param minute
         *            the minute of the hour, 0 - 59.
         * @param second
         *            the second of the minute, 0 - 59.
         * @return the date and time in GMT in milliseconds.
         *
         * @deprecated use: <code>
         *  Calendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT"));
         *  cal.set(year + 1900, month, day, hour, minute, second);
         *  cal.getTime().getTime();</code>
         */
        //@Deprecated
        UTC(
            [in] Int32 year,
            [in] Int32 month,
            [in] Int32 day,
            [in] Int32 hour,
            [in] Int32 minute,
            [in] Int32 second,
            [out] Int64* value);
    }

    } // namespace Utility
    } // namespace Elastos
}
