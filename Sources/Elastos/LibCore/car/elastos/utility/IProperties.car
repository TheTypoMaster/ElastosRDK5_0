module
{
    interface Elastos.IO.IInputStream;
    interface Elastos.IO.IOutputStream;
    interface Elastos.IO.IPrintStream;
    interface Elastos.IO.IPrintWriter;
    interface Elastos.IO.IReader;
    interface Elastos.IO.IWriter;

    namespace Elastos {
    namespace Utility {

    /**
     * @Involve
     * interface IHashtable;
     * interface IDictionary;
     * interface IMap;
     * interface ICloneable;
     * interface ISerializable;
     */
    interface IProperties {

        /**
         * Searches for the property with the specified name. If the property is not
         * found, the default {@code Properties} are checked. If the property is not
         * found in the default {@code Properties}, {@code null} is returned.
         *
         * @param name
         *            the name of the property to find.
         * @return the named property value, or {@code null} if it can't be found.
         */
        GetProperty(
            [in] String name,
            [out] String* str);

        /**
         * Searches for the property with the specified name. If the property is not
         * found, it looks in the default {@code Properties}. If the property is not
         * found in the default {@code Properties}, it returns the specified
         * default.
         *
         * @param name
         *            the name of the property to find.
         * @param defaultValue
         *            the default value.
         * @return the named property value.
         */
        GetProperty(
            [in] String name,
            [in] String defaultValue,
            [out] String* str);

        /**
         * Lists the mappings in this {@code Properties} to {@code out} in a human-readable form.
         * Note that values are truncated to 37 characters, so this method is rarely useful.
         */
        List(
            [in] IPrintStream* outstream);

        /**
         * Lists the mappings in this {@code Properties} to {@code out} in a human-readable form.
         * Note that values are truncated to 37 characters, so this method is rarely useful.
         */
        List(
            [in] IPrintWriter* outwriter);

        /**
         * Loads properties from the specified {@code InputStream}, assumed to be ISO-8859-1.
         * See "<a href="#character_encoding">Character Encoding</a>".
         *
         * @param in the {@code InputStream}
         * @throws IOException
         */
        Load(
            [in] IInputStream* instream);

        /**
         * Loads properties from the specified {@code Reader}.
         * The properties file is interpreted according to the following rules:
         * <ul>
         * <li>Empty lines are ignored.</li>
         * <li>Lines starting with either a "#" or a "!" are comment lines and are
         * ignored.</li>
         * <li>A backslash at the end of the line escapes the following newline
         * character ("\r", "\n", "\r\n"). If there's whitespace after the
         * backslash it will just escape that whitespace instead of concatenating
         * the lines. This does not apply to comment lines.</li>
         * <li>A property line consists of the key, the space between the key and
         * the value, and the value. The key goes up to the first whitespace, "=" or
         * ":" that is not escaped. The space between the key and the value contains
         * either one whitespace, one "=" or one ":" and any amount of additional
         * whitespace before and after that character. The value starts with the
         * first character after the space between the key and the value.</li>
         * <li>Following escape sequences are recognized: "\ ", "\\", "\r", "\n",
         * "\!", "\#", "\t", "\b", "\f", and "&#92;uXXXX" (unicode character).</li>
         * </ul>
         *
         * @param in the {@code Reader}
         * @throws IOException
         * @since 1.6
         */
        // @SuppressWarnings("fallthrough")
        Load(
            [in] IReader* inreader);

        /**
         * Returns all of the property names (keys) in this {@code Properties} object.
         */
        PropertyNames(
            [out] IEnumeration** names);

        /**
         * Returns those property names (keys) in this {@code Properties} object for which
         * both key and value are strings.
         *
         * @return a set of keys in the property list
         * @since 1.6
         */
        StringPropertyNames(
            [out] ISet** setNames);

        /**
         * Saves the mappings in this {@code Properties} to the specified {@code
         * OutputStream}, putting the specified comment at the beginning. The output
         * from this method is suitable for being read by the
         * {@link #load(InputStream)} method.
         *
         * @param out the {@code OutputStream} to write to.
         * @param comment the comment to add at the beginning.
         * @throws ClassCastException if the key or value of a mapping is not a
         *                String.
         * @deprecated This method ignores any {@code IOException} thrown while
         *             writing -- use {@link #store} instead for better exception
         *             handling.
         */
        // @Deprecated
        Save(
            [in] IOutputStream* outstream,
            [in] String comment);

        /**
         * Maps the specified key to the specified value. If the key already exists,
         * the old value is replaced. The key and value cannot be {@code null}.
         *
         * @param name
         *            the key.
         * @param value
         *            the value.
         * @return the old value mapped to the key, or {@code null}.
         */
        SetProperty(
            [in] String name,
            [in] String value ,
            [out] String* obj);

        /**
         * Stores properties to the specified {@code OutputStream}, ISO-8859-1.
         * See "<a href="#character_encoding">Character Encoding</a>".
         *
         * @param out the {@code OutputStream}
         * @param comment an optional comment to be written, or null
         * @throws IOException
         * @throws ClassCastException if a key or value is not a string
         */
        Store(
            [in] IOutputStream * outstream,
            [in] String comment);

        /**
         * Stores the mappings in this {@code Properties} object to {@code out},
         * putting the specified comment at the beginning.
         *
         * @param writer the {@code Writer}
         * @param comment an optional comment to be written, or null
         * @throws IOException
         * @throws ClassCastException if a key or value is not a string
         * @since 1.6
         */
        Store(
            [in] IWriter* writer,
            [in] String comment);

        /**
         * Loads the properties from an {@code InputStream} containing the
         * properties in XML form. The XML document must begin with (and conform to)
         * following DOCTYPE:
         *
         * <pre>
         * &lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;
         * </pre>
         *
         * Also the content of the XML data must satisfy the DTD but the xml is not
         * validated against it. The DTD is not loaded from the SYSTEM ID. After
         * this method returns the InputStream is not closed.
         *
         * @param in the InputStream containing the XML document.
         * @throws IOException in case an error occurs during a read operation.
         * @throws InvalidPropertiesFormatException if the XML data is not a valid
         *             properties file.
         */
        LoadFromXML(
            [in] IInputStream* instream);

        /**
         * Writes all properties stored in this instance into the {@code
         * OutputStream} in XML representation. The DOCTYPE is
         *
         * <pre>
         * &lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;
         * </pre>
         *
         * If the comment is null, no comment is added to the output. UTF-8 is used
         * as the encoding. The {@code OutputStream} is not closed at the end. A
         * call to this method is the same as a call to {@code storeToXML(os,
         * comment, "UTF-8")}.
         *
         * @param os the {@code OutputStream} to write to.
         * @param comment the comment to add. If null, no comment is added.
         * @throws IOException if an error occurs during writing to the output.
         */
        StoreToXML(
            [in] IOutputStream * os,
            [in] String comment);

        /**
         * Writes all properties stored in this instance into the {@code
         * OutputStream} in XML representation. The DOCTYPE is
         *
         * <pre>
         * &lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;
         * </pre>
         *
         * If the comment is null, no comment is added to the output. The parameter
         * {@code encoding} defines which encoding should be used. The {@code
         * OutputStream} is not closed at the end.
         *
         * @param os the {@code OutputStream} to write to.
         * @param comment the comment to add. If null, no comment is added.
         * @param encoding the code identifying the encoding that should be used to
         *            write into the {@code OutputStream}.
         * @throws IOException if an error occurs during writing to the output.
         */
        StoreToXML(
            [in] IOutputStream* os,
            [in] String comment,
            [in] String encoding);
    }

    } // namespace Utility
    } // namespace Elastos
}
