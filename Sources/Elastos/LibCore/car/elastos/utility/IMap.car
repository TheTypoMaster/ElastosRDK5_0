
module
{
    interface Elastos.Utility.ISet;
    interface Elastos.Utility.ICollection;

    namespace Elastos {
    namespace Utility {

    interface IMapEntry {
        /**
        * Compares the specified object to this {@code Map.Entry} and returns if they
        * are equal. To be equal, the object must be an instance of {@code Map.Entry} and have the
        * same key and value.
        *
        * @param object
        *            the {@code Object} to compare with this {@code Object}.
        * @return {@code true} if the specified {@code Object} is equal to this
        *         {@code Map.Entry}, {@code false} otherwise.
        * @see #hashCode()
        */
        Equals(
            [in] IInterface* entry,
            [out] Boolean* result);

        /**
         * Returns the key.
         *
         * @return the key
        */
        GetKey(
            [out] IInterface** key);

        /**
         * Returns the value.
         *
         * @return the value
         */
        GetValue(
            [out] IInterface** value);

        /**
         * Returns an integer hash code for the receiver. {@code Object} which are
         * equal return the same value for this method.
         *
         * @return the receiver's hash code.
         * @see #equals(Object)
         */
        GetHashCode(
            [out] Int32* hashCode);

        /**
         * Sets the value of this entry to the specified value, replacing any
         * existing value.
         *
         * @param object
         *            the new value to set.
         * @return object the replaced value of this entry.
         */
        SetValue(
            [in] IInterface* valueReplacer,
            [out] IInterface** valueReplacee);
    }

    interface IMap {
        /**
         * Removes all elements from this {@code Map}, leaving it empty.
         *
         * @throws UnsupportedOperationException
         *                if removing elements from this {@code Map} is not supported.
         * @see #isEmpty()
         * @see #size()
         */
        Clear();

        /**
         * Returns whether this {@code Map} contains the specified key.
         *
         * @param key
         *            the key to search for.
         * @return {@code true} if this map contains the specified key,
         *         {@code false} otherwise.
         */
        ContainsKey(
            [in] IInterface* key,
            [out] Boolean* result);

        /**
         * Returns whether this {@code Map} contains the specified value.
         *
         * @param value
         *            the value to search for.
         * @return {@code true} if this map contains the specified value,
         *         {@code false} otherwise.
         */
        ContainsValue(
            [in] IInterface* value,
            [out] Boolean* result);

        /**
         * Returns a {@code Set} containing all of the mappings in this {@code Map}. Each mapping is
         * an instance of {@link Map.Entry}. As the {@code Set} is backed by this {@code Map},
         * changes in one will be reflected in the other.
         *
         * @return a set of the mappings
         */
        EntrySet(
            [out] ISet** entries);

        /**
         * Compares the argument to the receiver, and returns {@code true} if the
         * specified object is a {@code Map} and both {@code Map}s contain the same mappings.
         *
         * @param object
         *            the {@code Object} to compare with this {@code Object}.
         * @return boolean {@code true} if the {@code Object} is the same as this {@code Object}
         *         {@code false} if it is different from this {@code Object}.
         * @see #hashCode()
         * @see #entrySet()
         */
        Equals(
            [in] IInterface* object,
            [out] Boolean* result);

        /**
         * Returns the value of the mapping with the specified key.
         *
         * @param key
         *            the key.
         * @return the value of the mapping with the specified key, or {@code null}
         *         if no mapping for the specified key is found.
         */
        Get(
            [in] IInterface* key,
            [out] IInterface** value);

        /**
         * Returns an integer hash code for the receiver. {@code Object}s which are equal
         * return the same value for this method.
         *
         * @return the receiver's hash.
         * @see #equals(Object)
         */
        GetHashCode(
            [out] Int32* hashCode);

        /**
         * Returns whether this map is empty.
         *
         * @return {@code true} if this map has no elements, {@code false}
         *         otherwise.
         * @see #size()
         */
        IsEmpty(
            [out] Boolean* result);

        /**
         * Returns a set of the keys contained in this {@code Map}. The {@code Set} is backed by
         * this {@code Map} so changes to one are reflected by the other. The {@code Set} does not
         * support adding.
         *
         * @return a set of the keys.
         */
        KeySet(
            [out] ISet** keySet);

        /**
         * Maps the specified key to the specified value.
         *
         * @param key
         *            the key.
         * @param value
         *            the value.
         * @return the value of any previous mapping with the specified key or
         *         {@code null} if there was no mapping.
         * @throws UnsupportedOperationException
         *                if adding to this {@code Map} is not supported.
         * @throws ClassCastException
         *                if the class of the key or value is inappropriate for
         *                this {@code Map}.
         * @throws IllegalArgumentException
         *                if the key or value cannot be added to this {@code Map}.
         * @throws NullPointerException
         *                if the key or value is {@code null} and this {@code Map} does
         *                not support {@code null} keys or values.
         */
        Put(
            [in] IInterface* key,
            [in] IInterface* value,
            [out] IInterface** oldValue);

        Put(
            [in] IInterface* key,
            [in] IInterface* value);

        /**
         * Copies every mapping in the specified {@code Map} to this {@code Map}.
         *
         * @param map
         *            the {@code Map} to copy mappings from.
         * @throws UnsupportedOperationException
         *                if adding to this {@code Map} is not supported.
         * @throws ClassCastException
         *                if the class of a key or a value of the specified {@code Map} is
         *                inappropriate for this {@code Map}.
         * @throws IllegalArgumentException
         *                if a key or value cannot be added to this {@code Map}.
         * @throws NullPointerException
         *                if a key or value is {@code null} and this {@code Map} does not
         *                support {@code null} keys or values.
         */
        PutAll(
            [in] IMap* map);

        /**
         * Removes a mapping with the specified key from this {@code Map}.
         *
         * @param key
         *            the key of the mapping to remove.
         * @return the value of the removed mapping or {@code null} if no mapping
         *         for the specified key was found.
         * @throws UnsupportedOperationException
         *                if removing from this {@code Map} is not supported.
         */
        Remove(
            [in] IInterface* key,
            [out] IInterface** value);

        Remove(
            [in] IInterface* key);

        /**
         * Returns the number of mappings in this {@code Map}.
         *
         * @return the number of mappings in this {@code Map}.
         */
        GetSize(
            [out] Int32* size);

        /**
         * Returns a {@code Collection} of the values contained in this {@code Map}. The {@code Collection}
         * is backed by this {@code Map} so changes to one are reflected by the other. The
         * {@code Collection} supports {@link Collection#remove}, {@link Collection#removeAll},
         * {@link Collection#retainAll}, and {@link Collection#clear} operations,
         * and it does not support {@link Collection#add} or {@link Collection#addAll} operations.
         * <p>
         * This method returns a {@code Collection} which is the subclass of
         * {@link AbstractCollection}. The {@link AbstractCollection#iterator} method of this subclass returns a
         * "wrapper object" over the iterator of this {@code Map}'s {@link #entrySet()}. The {@link AbstractCollection#size} method
         * wraps this {@code Map}'s {@link #size} method and the {@link AbstractCollection#contains} method wraps this {@code Map}'s
         * {@link #containsValue} method.
         * <p>
         * The collection is created when this method is called at first time and
         * returned in response to all subsequent calls. This method may return
         * different Collection when multiple calls to this method, since it has no
         * synchronization performed.
         *
         * @return a collection of the values contained in this map.
         */
        Values(
            [out] ICollection** value);
    }

    } // namespace Utility
    } // namespace Elastos
}
