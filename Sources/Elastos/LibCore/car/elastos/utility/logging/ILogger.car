module
{
    interface Elastos.Utility.Logging.ILogManager;
    interface Elastos.Utility.Logging.ILogRecord;
    using interface Elastos.Utility.IResourceBundle;
    using interface Elastos.Core.IThrowable;

    namespace Elastos {
    namespace Utility {
    namespace Logging {
    /**
     * Loggers are used to log records to a variety of destinations such as log files or
     * the console. They use instances of {@link Handler} to actually do the destination-specific
     * operations.
     *
     * <p>Client applications can get named loggers by calling the {@code getLogger}
     * methods. They can also get anonymous loggers by calling the
     * {@code getAnonymousLogger} methods. Named loggers are organized in a
     * namespace hierarchy managed by a log manager. The naming convention is
     * usually the Java package naming convention. Anonymous loggers do not belong to any namespace.
     *
     * <p>Developers should use named loggers to enable logging to be controlled on a
     * per-{@code Logger} granularity. The recommended idiom is to create and assign the logger to
     * a {@code static final} field. This ensures that there's always a strong reference to the logger,
     * preventing it from being garbage collected. In particular, {@link LogManager#addLogger(Logger)}
     * will <i>not</i> keep your logger live.
     *
     * <p>Loggers "inherit" log level setting from their parent if their own level is
     * set to {@code null}. This is also true for the resource bundle. The logger's
     * resource bundle is used to localize the log messages if no resource bundle
     * name is given when a log method is called. If {@code getUseParentHandlers()}
     * returns {@code true}, loggers also inherit their parent's handlers. In this
     * context, "inherit" only means that "behavior" is inherited. The internal
     * field values will not change, for example, {@code getLevel()} still returns
     * {@code null}.
     * <p>
     * When loading a given resource bundle, the logger first tries to use the
     * context {@code ClassLoader}. If that fails, it tries the system {@code ClassLoader}. And if
     * that still fails, it searches up the class stack and uses each class's
     * {@code ClassLoader} to try to locate the resource bundle.
     * <p>
     * Some log methods accept log requests that do not specify the source class and
     * source method. In these cases, the logging framework will automatically infer
     * the calling class and method, but this is not guaranteed to be accurate.
     * <p>
     * Once a {@code LogRecord} object has been passed into the logging framework,
     * it is owned by the logging framework and the client applications should not
     * use it any longer.
     * <p>
     * All methods of this class are thread-safe.
     *
     * @see LogManager
     */
    [deprecated]
    interface ILogger {
        /**
         * We've optimized for the common case: logging to a single handler that
         * implements {@link DalvikLogHandler}. This is how Android framework
         * applications are configured by default.
         *
         * <p>This optimization has been measured to show a 2.75x improvement in
         * throughput in the common case: 154ns vs. 56ns per message on a Cortex-A8.
         * Direct use of {@code android.util.Log} takes 29ns per message.
         *
         * <p>Each time the handler configuration changes, either directly or
         * indirectly, it's necessary to either turn on or off this optimization.
         * When the optimization is off, {@link #dalvikLogHandler} is assigned to
         * {@link #GENERAL_LOG_HANDLER} which can satisfy arbitrary configuration.
         * When the optimization is possible, {@link #dalvikLogHandler} is assigned
         * to the user's efficient implementation. In pratice this is usually the
         * {@code com.android.internal.logging.AndroidHandler}.
         */
        UpdateDalvikLogHandler();

        /**
         * Adds a handler to this logger. The {@code name} will be fed with log
         * records received by this logger.
         *
         * @param handler
         *            the handler object to add, cannot be {@code null}.
         */
        AddHandler(
            [in] ILogHandler* handler);

        /**
         * Set the logger's manager and initializes its configuration from the
         * manager's properties.
         */
        SetManager(
            [in] ILogManager* manager);

        /**
         * Gets all the handlers associated with this logger.
         *
         * @return an array of all the handlers associated with this logger.
         */
        GetHandlers(
            [out, callee] ArrayOf<ILogHandler*> *arrhanle);

        /**
         * Removes a handler from this logger. If the specified handler does not
         * exist then this method has no effect.
         *
         * @param handler
         *            the handler to be removed.
         */
        RemoveHandler(
            [in] ILogHandler* handler);

        /**
         * Gets the filter used by this logger.
         *
         * @return the filter used by this logger, may be {@code null}.
         */
        GetFilter(
            [out] IFilter** outfilter);

        /**
         * Sets the filter used by this logger.
         *
         * @param newFilter
         *            the filter to set, may be {@code null}.
         */
        SetFilter(
            [in] IFilter* newFilter);

        /**
         * Gets the logging level of this logger. A {@code null} level indicates
         * that this logger inherits its parent's level.
         *
         * @return the logging level of this logger.
         */
        GetLevel(
            [out] ILevel** outlevel);

        /**
         * Sets the logging level for this logger. A {@code null} level indicates
         * that this logger will inherit its parent's level.
         *
         * @param newLevel
         *            the logging level to set.
         */
        SetLevel(
            [in] ILevel* newLevel);

        /**
         * Gets the flag which indicates whether to use the handlers of this
         * logger's parent to publish incoming log records, potentially recursively
         * up the namespace.
         *
         * @return {@code true} if set to use parent's handlers, {@code false}
         *         otherwise.
         */
        GetUseParentHandlers(
            [out] Boolean* value);

        /**
         * Sets the flag which indicates whether to use the handlers of this
         * logger's parent, potentially recursively up the namespace.
         *
         * @param notifyParentHandlers
         *            the new flag indicating whether to use the parent's handlers.
         */
        SetUseParentHandlers(
            [in] Boolean notifyParentHandlers);

        /**
         * Gets the nearest parent of this logger in the namespace, a {@code null}
         * value will be returned if called on the root logger.
         *
         * @return the parent of this logger in the namespace.
         */
        GetParent(
            [out] ILogger** outlog);

        /**
         * Sets the parent of this logger in the namespace. This method should be
         * used by the {@code LogManager} object only.
         *
         * @param parent
         *            the parent logger to set.
         */
        SetParent(
            [in] ILogger* parent);

        /**
         * Gets the name of this logger, {@code null} for anonymous loggers.
         *
         * @return the name of this logger.
         */
        GetName(
            [out] String* str);

        /**
         * Gets the loaded resource bundle used by this logger to localize logging
         * messages. If the value is {@code null}, the parent's resource bundle will be
         * inherited.
         *
         * @return the loaded resource bundle used by this logger.
         */
        GetResourceBundle(
            [out] IResourceBundle** outbundle);

        /**
         * Gets the name of the loaded resource bundle used by this logger to
         * localize logging messages. If the value is {@code null}, the parent's resource
         * bundle name will be inherited.
         *
         * @return the name of the loaded resource bundle used by this logger.
         */
        GetResourceBundleName(
            [out] String* str);

        /**
         * Determines whether this logger will actually log messages of the
         * specified level. The effective level used to do the determination may be
         * inherited from its parent. The default level is {@code Level.INFO}.
         *
         * @param l
         *            the level to check.
         * @return {@code true} if this logger will actually log this level,
         *         otherwise {@code false}.
         */
        IsLoggable(
            [in] ILevel* l,
            [out] Boolean* value);

        /**
         * Logs a message indicating that a method has been entered. A log record
         * with log level {@code Level.FINER}, log message "ENTRY", the specified
         * source class name and source method name is submitted for logging.
         *
         * @param sourceClass
         *            the calling class name.
         * @param sourceMethod
         *            the method name.
         */
        Entering(
            [in] String sourceClass,
            [in] String sourceMethod);

        /**
         * Logs a message indicating that a method has been entered. A log record
         * with log level {@code Level.FINER}, log message "ENTRY", the specified
         * source class name, source method name and one parameter is submitted for
         * logging.
         *
         * @param sourceClass
         *            the source class name.
         * @param sourceMethod
         *            the source method name.
         * @param param
         *            the parameter for the method call.
         */
        Entering(
            [in] String sourceClass,
            [in] String sourceMethod,
            [in] IInterface* param);

        /**
         * Logs a message indicating that a method has been entered. A log record
         * with log level {@code Level.FINER}, log message "ENTRY", the specified
         * source class name, source method name and array of parameters is
         * submitted for logging.
         *
         * @param sourceClass
         *            the source class name.
         * @param sourceMethod
         *            the source method name.
         * @param params
         *            an array of parameters for the method call.
         */
        Entering(
            [in] String sourceClass,
            [in] String sourceMethod,
            [in] ArrayOf<IInterface*>* params);

        /**
         * Logs a message indicating that a method is exited. A log record with log
         * level {@code Level.FINER}, log message "RETURN", the specified source
         * class name and source method name is submitted for logging.
         *
         * @param sourceClass
         *            the calling class name.
         * @param sourceMethod
         *            the method name.
         */
        Exiting(
            [in] String sourceClass,
            [in] String sourceMethod);

        /**
         * Logs a message indicating that a method is exited. A log record with log
         * level {@code Level.FINER}, log message "RETURN", the specified source
         * class name, source method name and return value is submitted for logging.
         *
         * @param sourceClass
         *            the source class name.
         * @param sourceMethod
         *            the source method name.
         * @param result
         *            the return value of the method call.
         */
        Exiting(
            [in] String sourceClass,
            [in] String sourceMethod,
            [in] IInterface* result);

        /**
         * Logs a message indicating that an exception is thrown. A log record with
         * log level {@code Level.FINER}, log message "THROW", the specified source
         * class name, source method name and the {@code Throwable} object is
         * submitted for logging.
         *
         * @param sourceClass
         *            the source class name.
         * @param sourceMethod
         *            the source method name.
         * @param thrown
         *            the {@code Throwable} object.
         */
        Throwing(
            [in] String sourceClass,
            [in] String sourceMethod,
            [in] IThrowable* thrown);

        /**
         * Logs a message of level {@code Level.SEVERE}; the message is transmitted
         * to all subscribed handlers.
         *
         * @param msg
         *            the message to log.
         */
        Severe(
            [in] String msg);

        /**
         * Logs a message of level {@code Level.WARNING}; the message is
         * transmitted to all subscribed handlers.
         *
         * @param msg
         *            the message to log.
         */
        Warning(
            [in] String msg);

        /**
         * Logs a message of level {@code Level.INFO}; the message is transmitted
         * to all subscribed handlers.
         *
         * @param msg
         *            the message to log.
         */
        Info(
            [in] String msg);

        /**
         * Logs a message of level {@code Level.CONFIG}; the message is transmitted
         * to all subscribed handlers.
         *
         * @param msg
         *            the message to log.
         */
        Config(
            [in] String msg);

        /**
         * Logs a message of level {@code Level.FINE}; the message is transmitted
         * to all subscribed handlers.
         *
         * @param msg
         *            the message to log.
         */
        Fine(
            [in] String msg);

        /**
         * Logs a message of level {@code Level.FINER}; the message is transmitted
         * to all subscribed handlers.
         *
         * @param msg
         *            the message to log.
         */
        Finer(
            [in] String msg);

        /**
         * Logs a message of level {@code Level.FINEST}; the message is transmitted
         * to all subscribed handlers.
         *
         * @param msg
         *            the message to log.
         */
        Finest(
            [in] String msg);

        /**
         * Logs a message of the specified level. The message is transmitted to all
         * subscribed handlers.
         *
         * @param logLevel
         *            the level of the specified message.
         * @param msg
         *            the message to log.
         */
        Log(
            [in] ILevel* logLevel,
            [in] String msg);

        /**
         * Logs a message of the specified level with the supplied parameter. The
         * message is then transmitted to all subscribed handlers.
         *
         * @param logLevel
         *            the level of the given message.
         * @param msg
         *            the message to log.
         * @param param
         *            the parameter associated with the event that is logged.
         */
        Log(
            [in] ILevel* logLevel,
            [in] String msg,
            [in] IInterface* param);

        /**
         * Logs a message of the specified level with the supplied parameter array.
         * The message is then transmitted to all subscribed handlers.
         *
         * @param logLevel
         *            the level of the given message
         * @param msg
         *            the message to log.
         * @param params
         *            the parameter array associated with the event that is logged.
         */
        Log(
            [in] ILevel* logLevel,
            [in] String msg,
            [in] ArrayOf<IInterface*>* params);

        /**
         * Logs a message of the specified level with the supplied {@code Throwable}
         * object. The message is then transmitted to all subscribed handlers.
         *
         * @param logLevel
         *            the level of the given message.
         * @param msg
         *            the message to log.
         * @param thrown
         *            the {@code Throwable} object associated with the event that is
         *            logged.
         */
        Log(
            [in] ILevel* logLevel,
            [in] String msg,
            [in] IThrowable* thrown);

        /**
         * Logs a given log record. Only records with a logging level that is equal
         * or greater than this logger's level will be submitted to this logger's
         * handlers for logging. If {@code getUseParentHandlers()} returns {@code
         * true}, the log record will also be submitted to the handlers of this
         * logger's parent, potentially recursively up the namespace.
         * <p>
         * Since all other log methods call this method to actually perform the
         * logging action, subclasses of this class can override this method to
         * catch all logging activities.
         * </p>
         *
         * @param record
         *            the log record to be logged.
         */
        Log(
            [in] ILogRecord* record);

        /**
         * Logs a message of the given level with the specified source class name
         * and source method name.
         *
         * @param logLevel
         *            the level of the given message.
         * @param sourceClass
         *            the source class name.
         * @param sourceMethod
         *            the source method name.
         * @param msg
         *            the message to be logged.
         */
        Logp(
            [in] ILevel* logLevel,
            [in] String sourceClass,
            [in] String sourceMethod,
            [in] String msg);

        /**
         * Logs a message of the given level with the specified source class name,
         * source method name and parameter.
         *
         * @param logLevel
         *            the level of the given message
         * @param sourceClass
         *            the source class name
         * @param sourceMethod
         *            the source method name
         * @param msg
         *            the message to be logged
         * @param param
         *            the parameter associated with the event that is logged.
         */
        Logp(
            [in] ILevel* logLevel,
            [in] String sourceClass,
            [in] String sourceMethod,
            [in] String msg,
            [in] IInterface* param);

        /**
         * Logs a message of the given level with the specified source class name,
         * source method name and parameter array.
         *
         * @param logLevel
         *            the level of the given message.
         * @param sourceClass
         *            the source class name.
         * @param sourceMethod
         *            the source method name.
         * @param msg
         *            the message to be logged.
         * @param params
         *            the parameter array associated with the event that is logged.
         */
        Logp(
            [in] ILevel* logLevel,
            [in] String sourceClass,
            [in] String sourceMethod,
            [in] String msg,
            [in] ArrayOf<IInterface*>* params);

        /**
         * Logs a message of the given level with the specified source class name,
         * source method name and {@code Throwable} object.
         *
         * @param logLevel
         *            the level of the given message.
         * @param sourceClass
         *            the source class name.
         * @param sourceMethod
         *            the source method name.
         * @param msg
         *            the message to be logged.
         * @param thrown
         *            the {@code Throwable} object.
         */
        Logp(
            [in] ILevel* logLevel,
            [in] String sourceClass,
            [in] String sourceMethod,
            [in] String msg,
            [in] IThrowable* thrown);

        /**
         * Logs a message of the given level with the specified source class name
         * and source method name, using the given resource bundle to localize the
         * message. If {@code bundleName} is null, the empty string or not valid then
         * the message is not localized.
         *
         * @param logLevel
         *            the level of the given message.
         * @param sourceClass
         *            the source class name.
         * @param sourceMethod
         *            the source method name.
         * @param bundleName
         *            the name of the resource bundle used to localize the message.
         * @param msg
         *            the message to be logged.
         */
        Logrb(
            [in] ILevel* logLevel,
            [in] String sourceClass,
            [in] String sourceMethod,
            [in] String bundleName,
            [in] String msg);

        /**
         * Logs a message of the given level with the specified source class name,
         * source method name and parameter, using the given resource bundle to
         * localize the message. If {@code bundleName} is null, the empty string
         * or not valid then the message is not localized.
         *
         * @param logLevel
         *            the level of the given message.
         * @param sourceClass
         *            the source class name.
         * @param sourceMethod
         *            the source method name.
         * @param bundleName
         *            the name of the resource bundle used to localize the message.
         * @param msg
         *            the message to be logged.
         * @param param
         *            the parameter associated with the event that is logged.
         */
        Logrb(
            [in] ILevel* logLevel,
            [in] String sourceClass,
            [in] String sourceMethod,
            [in] String bundleName,
            [in] String msg,
            [in] IInterface* param);

        /**
         * Logs a message of the given level with the specified source class name,
         * source method name and parameter array, using the given resource bundle
         * to localize the message. If {@code bundleName} is null, the empty string
         * or not valid then the message is not localized.
         *
         * @param logLevel
         *            the level of the given message.
         * @param sourceClass
         *            the source class name.
         * @param sourceMethod
         *            the source method name.
         * @param bundleName
         *            the name of the resource bundle used to localize the message.
         * @param msg
         *            the message to be logged.
         * @param params
         *            the parameter array associated with the event that is logged.
         */
        Logrb(
            [in] ILevel* logLevel,
            [in] String sourceClass,
            [in] String sourceMethod,
            [in] String bundleName,
            [in] String msg,
            [in] ArrayOf<IInterface*>* params);

        /**
         * Logs a message of the given level with the specified source class name,
         * source method name and {@code Throwable} object, using the given resource
         * bundle to localize the message. If {@code bundleName} is null, the empty
         * string or not valid then the message is not localized.
         *
         * @param logLevel
         *            the level of the given message
         * @param sourceClass
         *            the source class name
         * @param sourceMethod
         *            the source method name
         * @param bundleName
         *            the name of the resource bundle used to localize the message.
         * @param msg
         *            the message to be logged.
         * @param thrown
         *            the {@code Throwable} object.
         */
        Logrb(
            [in] ILevel* logLevel,
            [in] String sourceClass,
            [in] String sourceMethod,
            [in] String bundleName,
            [in] String msg,
            [in] IThrowable* thrown);

        Reset();
    }

    interface IErrorManagerHelper {
        /**
         * Load the specified resource bundle, use privileged code.
         *
         * @param resourceBundleName
         *            the name of the resource bundle to load, cannot be {@code null}.
         * @return the loaded resource bundle.
         * @throws MissingResourceException
         *             if the specified resource bundle can not be loaded.
         */
        LoadResourceBundle(
            [in] String resourceBundleName,
            [out] IResourceBundle** outbundle);

        /**
         * Gets an anonymous logger to use internally in a thread. Anonymous loggers
         * are not registered in the log manager's namespace. No security checks
         * will be performed when updating an anonymous logger's control settings.
         * <p>
         * The anonymous loggers' parent is set to be the root logger. This way it
         * inherits the default logging level and handlers from the root logger.
         *
         * @return a new instance of anonymous logger.
         */
        GetAnonymousLogger(
            [out] ILogger** outlog);

        /**
         * Gets an anonymous logger to use internally in a thread. Anonymous loggers
         * are not registered in the log manager's namespace. No security checks
         * will be performed when updating an anonymous logger's control settings.
         * <p>
         * The anonymous loggers' parent is set to be the root logger. This way it
         * inherits default logging level and handlers from the root logger.
         *
         * @param resourceBundleName
         *            the name of the resource bundle used to localize log messages.
         * @return a new instance of anonymous logger.
         * @throws MissingResourceException
         *             if the specified resource bundle can not be loaded.
         */
        GetAnonymousLogger(
            [in] String resourceBundleName,
            [out] ILogger** outlog);

        /**
         * Gets a named logger. The returned logger may already exist or may be
         * newly created. In the latter case, its level will be set to the
         * configured level according to the {@code LogManager}'s properties.
         *
         * @param name
         *            the name of the logger to get, cannot be {@code null}.
         * @return a named logger.
         * @throws MissingResourceException
         *             If the specified resource bundle can not be loaded.
         */
        GetLogger(
            [in] String name,
            [out] ILogger** outlog);

        /**
         * Gets a named logger associated with the supplied resource bundle. The
         * resource bundle will be used to localize logging messages.
         *
         * @param name
         *            the name of the logger to get, cannot be {@code null}.
         * @param resourceBundleName
         *            the name of the resource bundle, may be {@code null}.
         * @throws IllegalArgumentException
         *             if the logger identified by {@code name} is associated with a
         *             resource bundle and its name is not equal to
         *             {@code resourceBundleName}.
         * @throws MissingResourceException
         *             if the name of the resource bundle cannot be found.
         * @return a named logger.
         */
        GetLogger(
            [in] String name,
            [in] String resourceBundleName,
            [out] ILogger** outlog);

        /**
         * Returns the global {@code Logger}.
         * @since 1.7
         * @hide 1.7
         */
        GetGlobal(
            [out] ILogger** outlog);
    }

    } // namespace Logging
    } // namespace Utility
    } // namespace Elastos
}
