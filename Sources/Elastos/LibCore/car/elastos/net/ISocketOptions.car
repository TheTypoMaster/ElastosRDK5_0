
module
{
    namespace Elastos {
    namespace Net {

    /**
     * Defines an interface for socket implementations to get and set socket
     * options. It is implemented by the classes {SocketImpl} and {DatagramSocketImpl}.
     *
     * @see SocketImpl
     * @see DatagramSocketImpl
     */
    interface ISocketOptions {
        /**
         * Number of seconds to wait when closing a socket if there
         * is still some buffered data to be sent.
         *
         * <p>If this option is set to 0, the TCP socket is closed forcefully and the
         * call to {close} returns immediately.
         *
         * <p>If this option is set to a value greater than 0, the value is interpreted
         * as the number of seconds to wait. If all data could be sent
         * during this time, the socket is closed normally. Otherwise the connection will be
         * closed forcefully.
         *
         * <p>Valid values for this option are in the range 0 to 65535 inclusive. (Larger
         * timeouts will be treated as 65535s timeouts; roughly 18 hours.)
         */
        const Int32 SO_LINGER = 128;

        /**
         * Integer timeout in milliseconds for blocking accept or read/receive operations (but not
         * write/send operations). A timeout of 0 means no timeout. Negative
         * timeouts are not allowed.
         *
         * <p>An {InterruptedIOException} is thrown if this timeout expires.
         */
        const Int32 SO_TIMEOUT = 4102;

        /**
         * This boolean option specifies whether data is sent immediately on this socket.
         * As a side-effect this could lead to low packet efficiency. The
         * socket implementation uses the Nagle's algorithm to try to reach a higher
         * packet efficiency if this option is disabled.
         */
        const Int32 TCP_NODELAY = 1;

        /**
         * This is an IPv4-only socket option whose functionality is subsumed by
         * IP_MULTICAST_IF and not implemented on Android.
         *
         * @sa #IP_MULTICAST_IF
         */
        const Int32 IP_MULTICAST_IF = 16;

        /**
         * This option does not correspond to any Unix socket option and is not implemented on Android.
         */
        const Int32 SO_BINDADDR = 15;

        /**
         * This boolean option specifies whether a reuse of a local address is allowed even
         * if another socket is not yet removed by the operating system. It's only
         * available on a {MulticastSocket}.
         */
        const Int32 SO_REUSEADDR = 4;

        /**
         * The size in bytes of a socket's send buffer. This must be an integer greater than 0.
         * This is a hint to the kernel; the kernel may use a larger buffer.
         *
         * <p>For datagram sockets, it is implementation-defined whether packets larger than
         * this size can be sent.
         */
        const Int32 SO_SNDBUF = 4097;

        /**
         * The size in bytes of a socket's receive buffer. This must be an integer greater than 0.
         * This is a hint to the kernel; the kernel may use a larger buffer.
         *
         * <p>For datagram sockets, packets larger than this value will be discarded.
         */
        const Int32 SO_RCVBUF = 4098;

        /**
         * This boolean option specifies whether the kernel sends keepalive messages.
         */
        const Int32 SO_KEEPALIVE = 8;

        /**
         * This integer option specifies the value for the type-of-service field of the IPv4 header,
         * or the traffic class field of the IPv6 header. These correspond to the IP_TOS and IPV6_TCLASS
         * socket options. These may be ignored by the underlying OS. Values must be between 0 and 255
         * inclusive.
         *
         * <p>See <a href="http://www.ietf.org/rfc/rfc1349.txt">RFC 1349</a> for more about IPv4
         * and <a href="http://www.ietf.org/rfc/rfc2460.txt">RFC 2460</a> for more about IPv6.
         */
        const Int32 IP_TOS = 3;

        /**
         * This boolean option specifies whether the local loopback of multicast packets is
         * enabled or disabled. This option is enabled by default on multicast
         * sockets. Note that the sense of this option in Java is the
         * <i>opposite</i> of the underlying Unix {IP_MULTICAST_LOOP}.
         * See MulticastSocket#setLoopbackMode.
         *
         * @sa MulticastSocket#setLoopbackMode
         */
        const Int32 IP_MULTICAST_LOOP = 18;

        /**
         * This boolean option can be used to enable broadcasting on datagram sockets.
         */
        const Int32 _SO_BROADCAST = 32;

        /**
         * This boolean option specifies whether sending TCP urgent data is supported on
         * this socket or not.
         */
        const Int32 SO_OOBINLINE = 4099;

        /**
         * This integer option sets the outgoing interface for multicast packets
         * using an interface index.
         */
        const Int32 IP_MULTICAST_IF2 = 31;

        /**
         * Gets the value for the specified socket option.
         *
         * @return the option value.
         * @param optID
         *            the option identifier.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * SocketException | if an error occurs reading the option value.
         */
        GetOption(
            [in] Int32 optID,
            [out] IInterface** optVal);

        /**
         * Sets the value of the specified socket option.
         *
         * @param optID
         *            the option identifier.
         * @param val
         *            the value to be set for the option.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * SocketException | if an error occurs setting the option value.
         */
        SetOption(
            [in] Int32 optID,
            [in] IInterface* optVal);
    }

    } // namespace Net
    } // namespace Elastos
}