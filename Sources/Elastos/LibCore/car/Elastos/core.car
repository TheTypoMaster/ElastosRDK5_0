
module
{
    merge("Core/Errors.car");
    merge("Core/Exceptions.car");
    merge("Core/ICharSequence.car");
    merge("Core/IAppendable.car");
    merge("Core/ICloneable.car");
    merge("Core/IComparable.car");
    merge("Core/IComparator.car");
    merge("Core/IStringBuilder.car");
    merge("Core/IStringBuffer.car");
    merge("Core/IArrayOf.car");
    merge("Core/INumber.car");
    merge("Core/IBoolean.car");
    merge("Core/IByte.car");
    merge("Core/IChar32.car");
    merge("Core/IChar16.car");
    merge("Core/IChar8.car");
    merge("Core/IInteger16.car");
    merge("Core/IInteger32.car");
    merge("Core/IInteger64.car");
    merge("Core/IFloat.car");
    merge("Core/IDouble.car");
    merge("Core/IString.car");
    merge("Core/IRunnable.car");
    merge("Core/ISynchronize.car");
    merge("Core/IThread.car");
    merge("Core/IThreadGroup.car");
    merge("Core/IClassLoader.car");
    merge("Core/IRandom.car");
    merge("Core/IThrowable.car");
    merge("Core/IStackTraceElement.car");
    merge("Core/IBlockGuard.car");
    merge("Core/ICloseGuard.car");
    merge("Core/IEnum.car");
    merge("Core/ISystem.car");

    merge("../../src/Elastos/Math/Elastos.Math.car");
    merge("../../src/Libcore/IO/Libcore.IO.car");
    merge("../../src/Elastos/Text/Elastos.Text2.car");
    merge("../../src/Libcore/ICU/Libcore.ICU.car");
    merge("../../src/Libcore/Utility/Libcore.Utility.car");
    merge("../../src/Elastos/IO/Elastos.IO.car");
    merge("../../src/Elastos/Utility/Elastos.Utility.car");
    merge("../../src/Elastos/Net/Elastos.Net.car");
    merge("../../src/Elastos/Text/Elastos.Text.car");
    merge("../../src/Elastos/Security/Elastos.Security.car");
    merge("../../src/Elastos/Utility/Concurrent/Elastos.Utility.Concurrent.car");
    merge("../../src/Elastos/Utility/Zip/Elastos.Utility.Zip.car");
    merge("../../src/Elastos/Utility/Jar/Elastos.Utility.Jar.car");
    merge("../../src/Elastos/Sql/Elastos.Sql.car");

    interface Elastos.Core.IRunnable;
    interface Elastos.Core.ICharSequence;
    interface Elastos.Core.Threading.ISynchronize;
    interface Elastos.Utility.IObjectContainer;

    namespace Elastos {
    namespace Core {

    class CObject {
        interface IObject;
        interface ISynchronize;
        interface IWeakReferenceSource;
    }

    // class CPathClassLoader {
    //     constructor (
    //         [in] String path);

    //     interface IClassLoader;
    // }

    class CStringWrapper {
        constructor(
            [in] String str);

        interface ICharSequence;
        interface IString;
        interface IComparable;
    }

    // class CBoolean {
    //     constructor(
    //         [in] Boolean value);

    //     interface IBoolean;
    // }

    // class CByte {
    //     constructor(
    //         [in] Byte value);

    //     interface IByte;
    // }

    // class CChar32 {
    //     constructor(
    //         [in] Char32 value);

    //     interface IChar32;
    // }

    // class CChar16 {
    //     constructor(
    //         [in] Char16 value);

    //     interface IChar16;
    // }

    // class CChar8 {
    //     constructor(
    //         [in] Char8 value);

    //     interface IChar8;
    // }

    // class CInteger16 {
    //     constructor(
    //         [in] Int16 value);

    //     interface IInteger16;
    // }

    // class CInteger32 {
    //     constructor(
    //         [in] Int32 value);

    //     interface IInteger32;
    // }

    // class CInteger64 {
    //     constructor(
    //         [in] Int64 value);

    //     interface IInteger64;
    // }

    // class CFloat {
    //     constructor(
    //         [in] Float value);

    //     interface IFloat;
    // }

    // class CDouble {
    //     constructor(
    //         [in] Double value);

    //     interface IDouble;
    // }

    // class CArrayOf {
    //     constructor(
    //         [in] InterfaceID riid,
    //         [in] Int32 size);

    //     interface IArrayOf;
    // }

    // class CRandom {
    //     constructor();

    //     constructor(
    //         [in] Int64 seed);

    //     interface IRandom;
    // }

    // class CObjectContainer {
    //     interface IObjectContainer;
    // }

    // singleton class CBlockGuard {
    //     interface IBlockGuard;
    // }

    // class CCloseGuard {
    //     interface ICloseGuard;
    // }

    // singleton class CCloseGuardHelper {
    //     interface ICloseGuardHelper;
    // }

    // singleton class CSystem {
    //      constructor();

    //      interface ISystem;
    // }

    } // namespace Core
    } // namepsace Elastos

    namespace Elastos {
    namespace Core {
    namespace Threading {

    class CThread {
         /**
         * Constructs a new {@code Thread} with no {@code Runnable} object and a
         * newly generated name. The new {@code Thread} will belong to the same
         * {@code ThreadGroup} as the {@code Thread} calling this constructor.
         *
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         */
        constructor();

        /**
         * Constructs a new {@code Thread} with a {@code Runnable} object and a
         * newly generated name. The new {@code Thread} will belong to the same
         * {@code ThreadGroup} as the {@code Thread} calling this constructor.
         *
         * @param runnable
         *            a {@code Runnable} whose method <code>run</code> will be
         *            executed by the new {@code Thread}
         *
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         */
        constructor(
            [in] IRunnable* runnable);

        /**
         * Constructs a new {@code Thread} with a {@code Runnable} object and name
         * provided. The new {@code Thread} will belong to the same {@code
         * ThreadGroup} as the {@code Thread} calling this constructor.
         *
         * @param runnable
         *            a {@code Runnable} whose method <code>run</code> will be
         *            executed by the new {@code Thread}
         * @param threadName
         *            the name for the {@code Thread} being created
         *
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         */
        constructor(
            [in] IRunnable* runnable,
            [in] String threadName);

        /**
         * Constructs a new {@code Thread} with no {@code Runnable} object and the
         * name provided. The new {@code Thread} will belong to the same {@code
         * ThreadGroup} as the {@code Thread} calling this constructor.
         *
         * @param threadName
         *            the name for the {@code Thread} being created
         *
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         *
         */
        constructor(
            [in] String threadName);

        /**
         * Constructs a new {@code Thread} with a {@code Runnable} object and a
         * newly generated name. The new {@code Thread} will belong to the {@code
         * ThreadGroup} passed as parameter.
         *
         * @param group
         *            {@code ThreadGroup} to which the new {@code Thread} will
         *            belong
         * @param runnable
         *            a {@code Runnable} whose method <code>run</code> will be
         *            executed by the new {@code Thread}
         * @throws SecurityException
         *             if <code>group.checkAccess()</code> fails with a
         *             SecurityException
         * @throws IllegalThreadStateException
         *             if <code>group.destroy()</code> has already been done
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         * @see java.lang.SecurityException
         * @see java.lang.SecurityManager
         */
        constructor(
            [in] IThreadGroup* group,
            [in] IRunnable* runnable);

        /**
         * Constructs a new {@code Thread} with a {@code Runnable} object, the given
         * name and belonging to the {@code ThreadGroup} passed as parameter.
         *
         * @param group
         *            ThreadGroup to which the new {@code Thread} will belong
         * @param runnable
         *            a {@code Runnable} whose method <code>run</code> will be
         *            executed by the new {@code Thread}
         * @param threadName
         *            the name for the {@code Thread} being created
         * @throws SecurityException
         *             if <code>group.checkAccess()</code> fails with a
         *             SecurityException
         * @throws IllegalThreadStateException
         *             if <code>group.destroy()</code> has already been done
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         * @see java.lang.SecurityException
         * @see java.lang.SecurityManager
         */
        constructor(
            [in] IThreadGroup* group,
            [in] IRunnable* runnable,
            [in] String threadName);

        /**
         * Constructs a new {@code Thread} with no {@code Runnable} object, the
         * given name and belonging to the {@code ThreadGroup} passed as parameter.
         *
         * @param group
         *            {@code ThreadGroup} to which the new {@code Thread} will belong
         * @param threadName
         *            the name for the {@code Thread} being created
         * @throws SecurityException
         *             if <code>group.checkAccess()</code> fails with a
         *             SecurityException
         * @throws IllegalThreadStateException
         *             if <code>group.destroy()</code> has already been done
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         * @see java.lang.SecurityException
         * @see java.lang.SecurityManager
         */
        constructor(
            [in] IThreadGroup* group,
            [in] String threadName);

        /**
         * Constructs a new {@code Thread} with a {@code Runnable} object, the given
         * name and belonging to the {@code ThreadGroup} passed as parameter.
         *
         * @param group
         *            {@code ThreadGroup} to which the new {@code Thread} will
         *            belong
         * @param runnable
         *            a {@code Runnable} whose method <code>run</code> will be
         *            executed by the new {@code Thread}
         * @param threadName
         *            the name for the {@code Thread} being created
         * @param stackSize
         *            a stack size for the new {@code Thread}. This has a highly
         *            platform-dependent interpretation. It may even be ignored
         *            completely.
         * @throws SecurityException
         *             if <code>group.checkAccess()</code> fails with a
         *             SecurityException
         * @throws IllegalThreadStateException
         *             if <code>group.destroy()</code> has already been done
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         * @see java.lang.SecurityException
         * @see java.lang.SecurityManager
         */
        constructor(
            [in] IThreadGroup* group,
            [in] IRunnable* runnable,
            [in] String threadName,
            [in] Int64 stackSize);

        /**
         * Package-scope method invoked by Dalvik VM to create "internal"
         * threads or attach threads created externally.
         *
         * Don't call Thread.currentThread(), since there may not be such
         * a thing (e.g. for Main).
         */
        constructor(
            [in] IThreadGroup* group,
            [in] String name,
            [in] Int32 priority,
            [in] Boolean daemon);

        interface IThread;
        interface IRunnable;
    }

    class CThreadGroup {
        /**
         * Constructs a new {@code ThreadGroup} with the given name. The new {@code ThreadGroup}
         * will be child of the {@code ThreadGroup} to which the calling thread belongs.
         *
         * @param name the name
         * @throws SecurityException if {@code checkAccess()} for the parent
         *         group fails with a SecurityException
         * @see java.lang.Thread#currentThread
         */
        constructor(
            [in] String name);

        /**
         * Constructs a new {@code ThreadGroup} with the given name, as a child of the
         * given {@code ThreadGroup}.
         *
         * @param parent the parent
         * @param name the name
         * @throws NullPointerException if {@code parent == null}
         * @throws SecurityException if {@code checkAccess()} for the parent
         *         group fails with a SecurityException
         * @throws IllegalThreadStateException if {@code parent} has been
         *         destroyed already
         */
         constructor(
            [in] IThreadGroup* parent,
            [in] String name);

        /**
         * Initialize the special "system" ThreadGroup. Was "main" in Harmony,
         * but we have an additional group above that in Android.
         */
        constructor();

        interface IThreadGroup;
    }

    } // namespace Threading
    } // namespace Core
    } // namepsace Elastos
}
