
module
{
    interface Elastos.Security.IProvider;
    interface Elastos.Security.ISecureRandom;
    interface Elastos.Security.IAlgorithmParameters;
    interface Elastos.Security.Spec.IAlgorithmParameterSpec;

    namespace Elastos {
    namespace Security {

    interface IAlgorithmParameterGenerator {
        /**
         * Returns the name of the algorithm.
         *
         * @return the name of the algorithm.
         */
        GetAlgorithm(
            [out] String* algorithm);

        /**
         * Returns the provider associated with this {@code
         * AlgorithmParameterGenerator}.
         *
         * @return the provider associated with this {@code
         *         AlgorithmParameterGenerator}.
         */
        GetProvider(
            [out] IProvider** provider);

        /**
         * Initializes this {@code AlgorithmParameterGenerator} with the given size.
         * The default parameter set and a default {@code SecureRandom} instance
         * will be used.
         *
         * @param size
         *            the size (in number of bits).
         */
        Init(
            [in] Int32 size);

        /**
         * Initializes this {@code AlgorithmParameterGenerator} with the given size
         * and the given {@code SecureRandom}. The default parameter set will be
         * used.
         *
         * @param size
         *            the size (in number of bits).
         * @param random
         *            the source of randomness.
         */
        InitEx(
            [in] Int32 size,
            [in] ISecureRandom* random);

        /**
         * Initializes this {@code AlgorithmParameterGenerator} with the given {@code
         * AlgorithmParameterSpec}. A default {@code SecureRandom} instance will be
         * used.
         *
         * @param genParamSpec
         *            the parameters to use.
         * @throws InvalidAlgorithmParameterException
         *             if the specified parameters are not supported.
         */
        InitEx2(
            [in] IAlgorithmParameterSpec* genParamSpec);

        /**
         * Initializes this {@code AlgorithmParameterGenerator} with the given
         * {@code AlgorithmParameterSpec} and the given {@code SecureRandom}.
         *
         * @param genParamSpec
         *            the parameters to use.
         * @param random
         *            the source of randomness.
         * @throws InvalidAlgorithmParameterException
         *             if the specified parameters are not supported.
         */
        InitEx3(
            [in] IAlgorithmParameterSpec* genParamSpec,
            [in] ISecureRandom* random);

        /**
         * Computes and returns {@code AlgorithmParameters} for this generator's
         * algorithm.
         *
         * @return {@code AlgorithmParameters} for this generator's algorithm.
         */
        GenerateParameters(
            [out] IAlgorithmParameters** parameters);
    }

    interface IAlgorithmParameterGeneratorHelper {
        /**
         * Returns a new instance of {@code AlgorithmParameterGenerator} for the
         * specified algorithm.
         *
         * @param algorithm
         *            the name of the algorithm to use.
         * @return a new instance of {@code AlgorithmParameterGenerator} for the
         *         specified algorithm.
         * @throws NoSuchAlgorithmException
         *             if the specified algorithm is not available.
         * @throws NullPointerException
         *             if {@code algorithm} is {@code null}.
         */
        GetInstance(
            [in] String algorithm,
            [out] IAlgorithmParameterGenerator** instance);

        /**
         * Returns a new instance of {@code AlgorithmParameterGenerator} from the
         * specified provider for the specified algorithm.
         *
         * @param algorithm
         *            the name of the algorithm to use.
         * @param provider
         *            name of the provider of the {@code
         *            AlgorithmParameterGenerator}.
         * @return a new instance of {@code AlgorithmParameterGenerator} for the
         *         specified algorithm.
         * @throws NoSuchAlgorithmException
         *             if the specified algorithm is not available.
         * @throws NoSuchProviderException
         *             if the specified provider is not available.
         * @throws IllegalArgumentException if {@code provider == null || provider.isEmpty()}
         * @throws NullPointerException
         *             if {@code algorithm} is {@code null}.
         */
        GetInstanceEx(
            [in] String algorithm,
            [in] String provider,
            [out] IAlgorithmParameterGenerator** instance);

        /**
         * Returns a new instance of {@code AlgorithmParameterGenerator} from the
         * specified provider for the specified algorithm.
         *
         * @param algorithm
         *            the name of the algorithm to use.
         * @param provider
         *            the provider of the {@code AlgorithmParameterGenerator}.
         * @return a new instance of {@code AlgorithmParameterGenerator} for the
         *         specified algorithm.
         * @throws NoSuchAlgorithmException
         *             if the specified algorithm is not available.
         * @throws NullPointerException
         *             if {@code algorithm} is {@code null}.
         * @throws IllegalArgumentException if {@code provider == null}
         */
        GetInstanceEx2(
            [in] String algorithm,
            [in] IProvider* provider,
            [out] IAlgorithmParameterGenerator** instance);
    }

    } // namespace Security
    } // namespace Elastos
}
