
module
{
    interface Elastos.IO.IInputStream;
    interface Elastos.Utility.IIterator;
    interface Elastos.Utility.IList;
    interface Elastos.Utility.ICollection;
    interface Elastos.Security.Cert.ICertPath;
    interface Elastos.Security.Cert.ICertificate;
    interface Elastos.Security.Cert.ICRL;

    namespace Elastos {
    namespace Security {
    namespace Cert {

    interface ICertificateFactorySpi {
        /**
         * Generates and initializes a {@code Certificate} from the provided input
         * stream.
         *
         * @param inStream
         *            the stream from which the data is read to create the
         *            certificate.
         * @return an initialized certificate.
         * @exception CertificateException
         *                if parsing problems are detected.
         */
        EngineGenerateCertificate(
            [in] IInputStream* inStream,
            [out] ICertificate** cert);

        /**
         * Generates and initializes a collection of certificates from the provided
         * input stream.
         *
         * @param inStream
         *            the stream from where data is read to create the certificates.
         * @return a collection of certificates.
         * @exception CertificateException
         *                if parsing problems are detected.
         */
        EngineGenerateCertificates(
                [in] IInputStream* inStream,
                [out] ICollection** certs);

        /**
         * Generates and initializes a <i>Certificate Revocation List</i> (CRL) from
         * the provided input stream.
         *
         * @param inStream
         *            the stream from where data is read to create the CRL.
         * @return an CRL instance.
         * @exception CRLException
         *                if parsing problems are detected.
         */
        EngineGenerateCRL(
            [in] IInputStream* inStream,
            [out] ICRL** crl);

        /**
         * Generates and initializes a collection of <i>Certificate Revocation
         * List</i> (CRL) from the provided input stream.
         *
         * @param inStream
         *            the stream from which the data is read to create the CRLs.
         * @return a collection of CRLs.
         * @exception CRLException
         *                if parsing problems are detected.
         */
        EngineGenerateCRLs(
                [in] IInputStream* inStream,
                [out] ICollection** crls);

        /**
         * Generates a {@code CertPath} from the provided {@code InputStream}. The
         * default encoding scheme is applied.
         *
         * @param inStream
         *            an input stream with encoded data.
         * @return a {@code CertPath} initialized from the provided data.
         * @throws CertificateException
         *             if parsing problems are detected.
         */
        EngineGenerateCertPath(
            [in] IInputStream* inStream,
            [out] ICertPath** certPath);

        /**
         * Generates a {@code CertPath} from the provided {@code
         * InputStream} in the specified encoding.
         *
         * @param inStream
         *            an input stream containing certificate path data in specified
         *            encoding.
         * @param encoding
         *            the encoding of the data in the input stream.
         * @return a {@code CertPath} initialized from the provided data
         * @throws CertificateException
         *             if parsing problems are detected.
         * @throws UnsupportedOperationException
         *             if the provider does not implement this method.
         */
        EngineGenerateCertPathEx(
            [in] IInputStream* inStream,
            [in] String encoding,
            [out] ICertPath** certPath);

        /**
         * Generates a {@code CertPath} from the provided list of certificates. The
         * encoding is the default encoding.
         *
         * @param certificates
         *            the list containing certificates in a format supported by the
         *            {@code CertificateFactory}.
         * @return a {@code CertPath} initialized from the provided data.
         * @throws CertificateException
         *             if parsing problems are detected.
         * @throws UnsupportedOperationException
         *             if the provider does not implement this method.
         */
        EngineGenerateCertPathEx2(
            [in] IList* certificates,
            [out] ICertPath** certPath);

        /**
         * Returns an {@code Iterator} over the supported {@code CertPath} encodings
         * (as Strings). The first element is the default encoding.
         *
         * @return an iterator over supported {@code CertPath} encodings (as
         *         Strings).
         */
        EngineGetCertPathEncodings(
            [out] IIterator** encodings);
    }

    } // namespace Cert
    } // namespace Security
    } // namespace Elastos
}