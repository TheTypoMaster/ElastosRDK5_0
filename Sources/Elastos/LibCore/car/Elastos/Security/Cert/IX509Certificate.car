
module
{
    interface Elastos.Math.IBigInteger;
    interface Elastos.Utility.IDate;
    interface Elastos.Utility.IList;
    interface Elastos.Utility.ICollection;
    interface Elastos.Security.IPrincipal;
    interface Elastosx.Security.Auth.X500.IX500Principal;
    interface Elastos.Security.Cert.ICertificate;

    namespace Elastos {
    namespace Security {
    namespace Cert {

    interface IX509Certificate extends ICertificate /*, IX509Extension */ {
        /**
         * Checks whether the certificate is currently valid.
         * <p>
         * The validity defined in ASN.1:
         *
         * <pre>
         * validity             Validity
         *
         * Validity ::= SEQUENCE {
         *      notBefore       CertificateValidityDate,
         *      notAfter        CertificateValidityDate }
         *
         * CertificateValidityDate ::= CHOICE {
         *      utcTime         UTCTime,
         *      generalTime     GeneralizedTime }
         * </pre>
         *
         * @throws CertificateExpiredException
         *             if the certificate has expired.
         * @throws CertificateNotYetValidException
         *             if the certificate is not yet valid.
         */
        CheckValidity();

        /**
         * Checks whether the certificate is valid at the specified date.
         *
         * @param date
         *            the date to check the validity against.
         * @throws CertificateExpiredException
         *             if the certificate has expired.
         * @throws CertificateNotYetValidException
         *             if the certificate is not yet valid.
         * @see #checkValidity()
         */
        CheckValidityEx(
            [in] IDate* date);

        /**
         * Returns the certificates {@code version} (version number).
         * <p>
         * The version defined is ASN.1:
         *
         * <pre>
         * Version ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
         * </pre>
         *
         * @return the version number.
         */
        GetVersion(
            [out] Int32* versionNumber);

        /**
         * Returns the {@code serialNumber} of the certificate.
         * <p>
         * The ASN.1 definition of {@code serialNumber}:
         *
         * <pre>
         * CertificateSerialNumber  ::=  INTEGER
         * </pre>
         *
         * @return the serial number.
         */
        GetSerialNumber(
            [out] IBigInteger** number);

        /**
         * Returns the {@code issuer} (issuer distinguished name) as an
         * implementation specific {@code Principal} object.
         * <p>
         * The ASN.1 definition of {@code issuer}:
         *
         * <pre>
         *  issuer      Name
         *
         *  Name ::= CHOICE {
         *      RDNSequence }
         *
         *    RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
         *
         *    RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
         *
         *    AttributeTypeAndValue ::= SEQUENCE {
         *      type     AttributeType,
         *      value    AttributeValue }
         *
         *    AttributeType ::= OBJECT IDENTIFIER
         *
         *    AttributeValue ::= ANY DEFINED BY AttributeType
         * </pre>
         *
         * <b>replaced by:</b> {@link #getIssuerX500Principal()}.
         *
         * @return the {@code issuer} as an implementation specific {@code
         *         Principal}.
         */
        GetIssuerDN(
            [out] IPrincipal** issuer);

        /**
         * Returns the {@code issuer} (issuer distinguished name) as an {@code
         * X500Principal}.
         *
         * @return the {@code issuer} (issuer distinguished name).
         */
        GetIssuerX500Principal(
            [out] IX500Principal** issuerName);

        /**
         * Returns the {@code subject} (subject distinguished name) as an
         * implementation specific {@code Principal} object.
         * <p>
         * The ASN.1 definition of {@code subject}:
         *
         * <pre>
         * subject      Name
         *
         *  Name ::= CHOICE {
         *      RDNSequence }
         *
         *    RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
         *
         *    RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
         *
         *    AttributeTypeAndValue ::= SEQUENCE {
         *      type     AttributeType,
         *      value    AttributeValue }
         *
         *    AttributeType ::= OBJECT IDENTIFIER
         *
         *    AttributeValue ::= ANY DEFINED BY AttributeType
         * </pre>
         *
         * <p>
         * <b>replaced by:</b> {@link #getSubjectX500Principal()}.
         *
         * @return the {@code subject} (subject distinguished name).
         */
        GetSubjectDN(
            [out] IPrincipal** subject);

        /**
         * Returns the {@code subject} (subject distinguished name) as an {@code
         * X500Principal}.
         *
         * @return the {@code subject} (subject distinguished name)
         */
        GetSubjectX500Principal(
            [out] IX500Principal** subject);

        /**
         * Returns the {@code notBefore} date from the validity period of the
         * certificate.
         *
         * @return the start of the validity period.
         */
        GetNotBefore(
            [out] IDate** notBefore);

        /**
         * Returns the {@code notAfter} date of the validity period of the
         * certificate.
         *
         * @return the end of the validity period.
         */
        GetNotAfter(
            [out] IDate** notAfter);

        /**
         * Returns the {@code tbsCertificate} information from this certificate in
         * DER-encoded format.
         *
         * @return the DER-encoded certificate information.
         * @throws CertificateEncodingException
         *             if an error occurs in encoding
         */
        GetTBSCertificate(
            [out, callee] ArrayOf<Byte>* tbsCertificate);

        /**
         * Returns the raw signature bits from the certificate.
         *
         * @return the raw signature bits from the certificate.
         */
        GetSignature(
            [out, callee] ArrayOf<Byte>* signature);

        /**
         * Returns the name of the algorithm for the certificate signature.
         *
         * @return the signature algorithm name.
         */
        GetSigAlgName(
            [out] String* sigAlgName);

        /**
         * Returns the OID of the signature algorithm from the certificate.
         *
         * @return the OID of the signature algorithm.
         */
        GetSigAlgOID(
            [out] String* oid);

        /**
         * Returns the parameters of the signature algorithm in DER-encoded format.
         *
         * @return the parameters of the signature algorithm, or {@code null} if
         *         none are used.
         */
        GetSigAlgParams(
            [out, callee] ArrayOf<Byte>* sigAlgParams);

        /**
         * Returns the {@code issuerUniqueID} from the certificate.
         *
         * @return the {@code issuerUniqueID} or {@code null} if there's none in the
         *         certificate.
         */
        GetIssuerUniqueID(
            [out, callee] ArrayOf<Boolean>* issuerUniqueID);

        /**
         * Returns the {@code subjectUniqueID} from the certificate.
         *
         * @return the {@code subjectUniqueID} or null if there's none in the
         *         certificate.
         */
        GetSubjectUniqueID(
            [out, callee] ArrayOf<Boolean>* subjectUniqueID);

        /**
         * Returns the {@code KeyUsage} extension as a {@code boolean} array.
         * <p>
         * The ASN.1 definition of {@code KeyUsage}:
         *
         * <pre>
         * KeyUsage ::= BIT STRING {
         *      digitalSignature        (0),
         *      nonRepudiation          (1),
         *      keyEncipherment         (2),
         *      dataEncipherment        (3),
         *      keyAgreement            (4),
         *      keyCertSign             (5),
         *      cRLSign                 (6),
         *      encipherOnly            (7),
         *      decipherOnly            (8) }
         *
         * </pre>
         *
         * @return the {@code KeyUsage} extension or {@code null} if there's none in
         *         the certificate.
         */
        GetKeyUsage(
            [out, callee] ArrayOf<Boolean>* keyUsage);

        /**
         * Returns a read-only list of OID strings representing the {@code
         * ExtKeyUsageSyntax} field of the extended key usage extension.
         *
         * @return the extended key usage extension, or {@code null} if there's none
         *         in the certificate.
         * @throws CertificateParsingException
         *             if the extension decoding fails.
         */
        GetExtendedKeyUsage(
            [out] IList** keyUsage);

        /**
         * Returns the path length of the certificate constraints from the {@code
         * BasicContraints} extension.
         *
         * @return the path length of the certificate constraints if the extension
         *         is present or {@code -1} if the extension is not present. {@code
         *         Integer.MAX_VALUE} if there's not limit.
         */
        GetBasicConstraints(
            [out] Int32* constraints);

        /**
         * Returns a read-only list of the subject alternative names from the
         * {@code SubjectAltName} extension.
         * <p>
         * The ASN.1 definition of {@code SubjectAltName}:
         *
         * <pre>
         * SubjectAltName ::= GeneralNames
         *
         * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
         *
         * GeneralName ::= CHOICE {
         *      otherName                       [0]     AnotherName,
         *      rfc822Name                      [1]     IA5String,
         *      dNSName                         [2]     IA5String,
         *      x400Address                     [3]     ORAddress,
         *      directoryName                   [4]     Name,
         *      ediPartyName                    [5]     EDIPartyName,
         *      uniformResourceIdentifier       [6]     IA5String,
         *      iPAddress                       [7]     OCTET STRING,
         *      registeredID                    [8]     OBJECT IDENTIFIER }
         *
         * </pre>
         *
         * @return the subject alternative names or {@code null} if there are none
         *         in the certificate.
         * @throws CertificateParsingException
         *             if decoding of the extension fails.
         */
        GetSubjectAlternativeNames(
            [out] ICollection** subjectAlternativeNames);

        /**
         * Returns a read-only list of the issuer alternative names from the {@code
         * IssuerAltName} extension.
         * <p>
         * The ASN.1 definition of {@code IssuerAltName}:
         *
         * <pre>
         * IssuerAltName ::= GeneralNames
         *
         * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
         *
         * GeneralName ::= CHOICE {
         *      otherName                       [0]     AnotherName,
         *      rfc822Name                      [1]     IA5String,
         *      dNSName                         [2]     IA5String,
         *      x400Address                     [3]     ORAddress,
         *      directoryName                   [4]     Name,
         *      ediPartyName                    [5]     EDIPartyName,
         *      uniformResourceIdentifier       [6]     IA5String,
         *      iPAddress                       [7]     OCTET STRING,
         *      registeredID                    [8]     OBJECT IDENTIFIER }
         *
         * </pre>
         *
         * @return the issuer alternative names of {@code null} if there are none in
         *         the certificate.
         * @throws CertificateParsingException
         *             if decoding of the extension fails.
         */
        GetIssuerAlternativeNames(
            [out] ICollection** issuerAlternativeNames);
    }

    } // namespace Cert
    } // namespace Security
    } // namespace Elastos
}