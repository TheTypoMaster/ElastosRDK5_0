module
{
    using interface Elastos.Utility.IProperties;
    interface Elastos.Sql.IDriverPropertyInfo;

    namespace Elastos {
    namespace Sql {

    interface IDriver {
        /* Returns whether the driver thinks that it can open a connection to the
         * given URL.
         *
         * @param url
         *            the URL to connect to.
         * @return {@code true} if the driver thinks that is can open a connection
         *         to the supplied URL, {@code false} otherwise. Typically, the
         *         driver will respond {@code true} if it thinks that it can handle
         *         the subprotocol specified by the driver.
         * @throws SQLException
         *          if a database error occurs.
         */
        AcceptsURL(
            [in] String url,
            [out] Boolean* canOpen);

        /**
         * Attempts to make a database connection to a data source specified by a
         * supplied URL.
         *
         * @param url
         *            the URL to connect.
         * @param info
         *            some properties that should be used in establishing the
         *            connection. The properties consist of name/value pairs of
         *            strings. Normally, a connection to a database requires at
         *            least two properties - for {@code "user"} and {@code
         *            "password"} in order to pass authentication to the database.
         * @return the connection to the database.
         * @throws SQLException
         *             if a database error occurs.
         */
        Connect(
            [in] String url,
            [in] IProperties* info,
            [out] IConnection** connection);

        /**
         * Gets the driver's major version number.
         *
         * @return the major version number of the driver - typically starts at 1.
         */
        GetMajorVersion(
            [out] Int32* ver);

        /**
         * Gets the driver's minor version number.
         *
         * @return the minor version number of the driver - typically starts at 0.
         */
        GetMinorVersion(
            [out] Int32* ver);

        /**
         * Gets information about possible properties for this driver.
         * <p>
         * This method is intended to provide a listing of possible properties that
         * the client of the driver must supply in order to establish a connection
         * to a database. Note that the returned array of properties may change
         * depending on the supplied list of property values.
         *
         * @param url
         *            the URL of the database. An application may call this method
         *            iteratively as the property list is built up - for example,
         *            when displaying a dialog to an end-user as part of the
         *            database login process.
         * @param info
         *            a set of tag/value pairs giving data that a user may be
         *            prompted to provide in order to connect to the database.
         * @return an array of {@code DriverPropertyInfo} records which provide
         *         details on which additional properties are required (in addition
         *         to those supplied in the {@code info} parameter) in order to
         *         connect to the database.
         * @throws SQLException
         *             if a database error occurs.
         */
        GetPropertyInfo(
            [in] String url,
            [in] IProperties* info,
            [out,callee] ArrayOf<IDriverPropertyInfo*>* array);

        /**
         * Reports whether this driver is a genuine JDBC CompliantTM driver. The
         * driver may only return {@code true} if it passes all the JDBC compliance
         * tests.
         * <p>
         * A driver may not be fully compliant if the underlying database has
         * limited functionality.
         *
         * @return {@code true} if the driver is fully JDBC compliant, {@code false}
         *         otherwise.
         */
        JdbcCompliant(
            [out] Boolean* isCompliant);
    }

    } // namespace Sql
    } // namespace Elastos
}
