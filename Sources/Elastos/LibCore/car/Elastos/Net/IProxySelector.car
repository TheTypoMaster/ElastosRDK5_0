
module
{
    interface Elastos.Net.IURI;
    interface Elastos.Net.ISocketAddress;
    interface Elastos.Utility.IObjectContainer;

    namespace Elastos {
    namespace Net {

    /**
     * Selects the proxy server to use, if any, when connecting to a given URL.
     */

    interface IProxySelector {
        /**
         * Returns the proxy servers to use on connections to {uri}. This list
         * will contain Proxy#NO_PROXY if no proxy server should be used.
         *
         * @sa Proxy#NO_PROXY
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalArgumentException | if {uri} is null.
         */
        Select(
            [in] IURI* uri,
            [out] IObjectContainer** container);

        /**
         * Notifies this {ProxySelector} that a connection to the proxy server
         * could not be established.
         *
         * @param uri the URI to which the connection could not be established.
         * @param address the address of the proxy.
         * @param failure the exception which was thrown during connection
         *     establishment.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IllegalArgumentException | if any argument is null.
         */
        ConnectFailed(
            [in] IURI* uri,
            [in] ISocketAddress* address,
            [in] ECode failure);
    }

    interface IProxySelectorHelper {
        /**
         * Returns the default proxy selector, or null if none exists.
         */
        GetDefault(
            [out] IProxySelector** selector);

        /**
         * Sets the default proxy selector. If {selector} is null, the current
         * proxy selector will be removed.
         */
        SetDefault(
            [in] IProxySelector* selector);
    }

    } // namespace Net
    } // namespace Elastos
}