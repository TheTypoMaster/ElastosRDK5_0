module
{
    namespace Elastos {
    namespace IO {

    interface IDataInput {
        /**
         * Reads a boolean.
         *
         * @return the next boolean value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * EOFException | if the end of the input is reached before the read request can be satisfied.
         * IOException | if an I/O error occurs while reading.
         * @see DataOutput#writeBoolean(boolean)
         */
        ReadBoolean(
           [out] Boolean* value);

        /**
         * Reads an 8-bit byte value.
         *
         * @return the next byte value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * EOFException | if the end of the input is reached before the read request can be satisfied.
         * IOException | if an I/O error occurs while reading.
         * @see DataOutput#writeByte(int)
         */
        ReadByte(
            [out] Byte* value);

        /**
         * Reads a big-endian 16-bit character value.
         *
         * @return the next char value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * EOFException | if the end of the input is reached before the read request can be satisfied.
         * IOException |if an I/O error occurs while reading.
         * @see DataOutput#writeChar(int)
         */
        ReadChar(
            [out] Char32* value);

        /**
         * Reads a big-endian 64-bit double value.
         *
         * @return the next double value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * EOFException | if the end of the input is reached before the read request can be satisfied.
         * IOException | if an I/O error occurs while reading.
         * @see DataOutput#writeDouble(double)
         */
        ReadDouble(
            [out] Double* value);

        /**
         * Reads a big-endian 32-bit float value.
         *
         * @return the next float value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * EOFException | if the end of the input is reached before the read request can be satisfied.
         * IOException | if an I/O error occurs while reading.
         * @see DataOutput#writeFloat(float)
         */
        ReadFloat(
            [out] Float* value);

        /**
         * Equivalent to {readFully(dst, 0, dst.length);}.
         */
        ReadFully(
           [out] ArrayOf<Byte> buffer);

        /**
         * Reads {byteCount} bytes from this stream and stores them in the byte
         * array {dst} starting at {offset}. If {byteCount} is zero, then this
         * method returns without reading any bytes. Otherwise, this method blocks until
         * {byteCount} bytes have been read. If insufficient bytes are available,
         * {EOFException} is thrown. If an I/O error occurs, {IOException} is
         * thrown. When an exception is thrown, some bytes may have been consumed from the stream
         * and written into the array.
         *
         * @param dst
         *            the byte array into which the data is read.
         * @param offset
         *            the offset in {dst} at which to store the bytes.
         * @param byteCount
         *            the number of bytes to read.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * EOFException | if the end of the source stream is reached before enough  bytes have been read.
         * IndexOutOfBoundsException | if {offset < 0} or {byteCount < 0}, or {ffset + byteCount > dst.length}.
         * IOException |if a problem occurs while reading from this stream.
         * NullPointerException | if {dst} is null.
         */
        ReadFullyEx(
            [out] ArrayOf<Byte> buffer,
            [in] Int32 offset,
            [in] Int32 byteCount);

        /**
         * Reads a big-endian 32-bit integer value.
         *
         * @return the next int value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * EOFException | if the end of the input is reached before the read
         *         request can be satisfied.
         * IOException | if an I/O error occurs while reading.
         * @see DataOutput#writeInt(int)
         */
        ReadInt32(
            [out] Int32* value);

        /**
         * Returns a string containing the next line of text available from this
         * stream. A line is made of zero or more characters followed by {
         * '\n'}, {'\r'}, {"\r\n"} or the end of the stream. The string
         * does not include the newline sequence.
         *
         * @return the contents of the line or null if no characters have been read
         *         before the end of the stream.
         * EOFException | if the end of the input is reached before the read request can be satisfied.
         * IOException | if an I/O error occurs while reading.
         */
        ReadLine(
            [out] String* str);

        /**
         * Reads a big-endian 64-bit long value.
         *
         * @return the next long value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * EOFException | if the end of the input is reached before the read request can be satisfied.
         * IOException |if an I/O error occurs while reading.
         * @see DataOutput#writeLong(long)
         */
        ReadInt64(
            [out] Int64* value);

        /**
         * Reads a big-endian 16-bit short value.
         *
         * @return the next short value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * EOFException | if the end of the input is reached before the read request can be satisfied.
         * IOException |if an I/O error occurs while reading.
         * @see DataOutput#writeShort(int)
         */
        ReadInt16(
            [out] Int16* value);

        /**
         * Reads an unsigned 8-bit byte value and returns it as an int.
         *
         * @return the next unsigned byte value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * EOFException | if the end of the input is reached before the read request can be satisfied.
         * IOException | if an I/O error occurs while reading.
         * @see DataOutput#writeByte(int)
         */
        ReadUnsignedByte(
            [out] Int32* value);

        /**
         * Reads a big-endian 16-bit unsigned short value and returns it as an int.
         *
         * @return the next unsigned short value.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * EOFException | if the end of the input is reached before the read request can be satisfied.
         * IOException | if an I/O error occurs while reading.
         * @see DataOutput#writeShort(int)
         */
        ReadUnsignedInt16(
            [out] Int32* value);

        /**
         * Reads a string encoded with DataInput modified UTF-8.
         *
         * @sa DataInput modified UTF-8
         *
         * @return the next string encoded with DataInput modified UTF-8.
         *
         * @sa DataInput modified UTF-8
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * EOFException | if the end of the input is reached before the read request can be satisfied.
         * IOException | if an I/O error occurs while reading.
         * @see DataOutput#writeUTF(java.lang.String)
         */
        ReadUTF(
            [out] String* str);

        /**
         * Skips {count} number of bytes. This method will not throw an
         * EOFException if the end of the input is reached before
         * {count} bytes where skipped.
         *
         * @sa EOFException
         *
         * @param count
         *            the number of bytes to skip.
         * @return the number of bytes actually skipped.
         * @return ECode = NOERROR(0) if success, else as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if a problem occurs during skipping.
         */
        SkipBytes(
            [in] Int32 count,
            [out] Int32* value);
    }

    } // namespace IO
    } // namespace Elastos
}