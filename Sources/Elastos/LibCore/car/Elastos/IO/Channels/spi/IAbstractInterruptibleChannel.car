
module
{
    namespace Elastos {
    namespace IO {
    namespace Channels {
    namespace Spi {

    /**
     * {@code AbstractInterruptibleChannel} is the root class for interruptible
     * channels.
     * <p>
     * The basic usage pattern for an interruptible channel is to invoke
     * {@code begin()} before any I/O operation that potentially blocks
     * indefinitely, then {@code end(boolean)} after completing the operation. The
     * argument to the {@code end} method should indicate if the I/O operation has
     * actually completed so that any change may be visible to the invoker.
    */
    interface IAbstractInterruptibleChannel extends Elastos.IO.Channels.IChannel {

        // IsOpen(
        //        [out] Boolean* isOpen);

         /**
         * Closes an open channel. If the channel is already closed then this method
         * has no effect, otherwise it closes the receiver via the
         * {@code implCloseChannel} method.
         * <p>
         * If an attempt is made to perform an operation on a closed channel then a
         * {@link java.nio.channels.ClosedChannelException} is thrown.
         * <p>
         * If multiple threads attempt to simultaneously close a channel, then only
         * one thread will run the closure code and the others will be blocked until
         * the first one completes.
         *
         * @throws IOException
         *             if a problem occurs while closing this channel.
         * @see java.nio.channels.Channel#close()
         */
         //Close();

    } // interface end

    } // namespace Spi
    } // namespace Channels
    } // namespace IO
    } // namespace Elastos
}
