
module
{
//    using interface Elastos.Net.ISocket;
//    using interface Elastos.Net.ISocketAddress;
    interface Elastos.IO.IByteBuffer;
    interface Elastos.IO.Channels.ISelectableChannel;

    namespace Elastos {
    namespace IO {
    namespace Channels {
    /**
     * A ISocketChannel is a selectable channel that provides a partial abstraction of
     * stream connecting socket. socket() returns the related Socket instance which
     * can handle the socket.
     * <p>
     * A socket channel is open but not connected when created by open(). After
     * connecting it by calling connect(SocketAddress), it will remain connected until
     * it gets closed. If the connection is non-blocking then connect(SocketAddress)
     * is used to initiate the connection, followed by a call of finishConnect() to
     * perform the final steps of connecting. isConnectionPending() indicates if the
     * connection is blocked or not; isConnected() indicates if the socket is finally
     * connected or not.
     * <p>
     * The input and output sides of a channel can be shut down independently and
     * asynchronously without closing the channel. The shutdownInput method is used
     * for the input side of a channel and subsequent read operations return -1, which
     * means end of stream. If another thread is blocked in a read operation when the
     * shutdown occurs, the read will end without effect and return end of stream. The
     * shutdownOutput method is used for the output side of the channel; subsequent
     * write operations throw a ClosedChannelException. If the output is shut down and
     * another thread is blocked in a write operation, an AsynchronousCloseException
     * will be thrown to the pending thread.
     * <p>
     * Socket channels are thread-safe, no more than one thread can read or write at
     * any given time. The connect(SocketAddress) and finishConnect() methods are
     * synchronized against each other; when they are processing, calls to read and
     * write will block.
     * @implement Elastos.IO.ISelectableChannel
    */

    interface ISocketChannel extends ISelectableChannel {
       /**
        * Returns the socket assigned to this channel, which does not declare any public
        * methods that are not declared in {Socket}.
        *
        * @return the socket assigned to this channel.
        */
//      GetSocket(
//            [out] ISocket** serverSocket);

        /**
         * Indicates whether this channel's socket is connected.
         *
         * @return {true} if this channel's socket is connected, {false}
         *         otherwise.
         */
        IsConnected(
            [out] Boolean* isConnected);

        /**
         * Indicates whether this channel's socket is still trying to connect.
         *
         * @return {true} if the connection is initiated but not finished;
         *         {false} otherwise.
         */
        IsConnectionPending(
            [out] Boolean* isConnectionPending);

        /**
         * Connects this channel's socket with a remote address.
         * <p>
         * If this channel is blocking, this method will suspend until connecting is
         * finished or an I/O exception occurs. If the channel is non-blocking,
         * this method will return {true} if the connection is finished at
         * once or return {false} when the connection must be finished later
         * by calling {finishConnect()}.
         * <p>
         * This method can be called at any moment and can block other read and
         * write operations while connecting. It executes the same security checks
         * as the connect method of the {Socket} class.
         *
         * @param address
         *            the address to connect with.
         * @return {true} if the connection is finished, {false}
         *         otherwise.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * AlreadyConnectedException | if the channel is already connected.
         * ConnectionPendingException
         *             a non-blocking connecting operation is already executing on
         *             this channel.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * ClosedChannelException | if this channel is closed.
         * AsynchronousCloseException | if this channel is closed by another thread while this method is executing.
         * ClosedByInterruptException | if another thread interrupts the calling thread while this operation is in progress. The calling thread will have the interrupt state set and this channel will be closed.
         * UnresolvedAddressException | if the address is not resolved.
         * UnsupportedAddressTypeException | if the address type is not supported.
         * IOException | if an I/O error occurs.
         */
//        Connect(
//            [in] ISocketAddress* address,
//            [out] Boolean* result);

        /**
         * Completes the connection process initiated by a call of {
         * connect(SocketAddress)}.
         * <p>
         * This method returns {true} if the connection is finished already
         * and returns {false} if the channel is non-blocking and the
         * connection is not finished yet.
         * <p>
         * If this channel is in blocking mode, this method will suspend and return
         * {true} when the connection is finished. It closes this channel and
         * throws an exception if the connection fails.
         * <p>
         * This method can be called at any moment and it can block other {
         * read} and {write} operations while connecting.
         *
         * @return {true} if the connection is successfully finished, {
         *         false} otherwise.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * NoConnectionPendingException | if the channel is not connected and the connection process has not been initiated.
         * ClosedChannelException | if this channel is closed.
         * AsynchronousCloseException | if this channel is closed by another thread while this method is executing.
         * ClosedByInterruptException | if another thread interrupts the calling thread while this operation is in progress. The calling thread has the interrupt state set, and this channel is closed.
         * IOException | if an I/O error occurs.
         */
        FinishConnect(
            [out] Boolean* result);

        /**
         * Reads bytes from this socket channel into the given buffer.
         * <p>
         * The maximum number of bytes that will be read is the remaining number of
         * bytes in the buffer when the method is invoked. The bytes will be copied
         * into the buffer starting at the buffer's current position.
         * <p>
         * The call may block if other threads are also attempting to read from this
         * channel.
         * <p>
         * Upon completion, the buffer's position is set to the end of the bytes
         * that have been read. The buffer's limit is not changed.
         *
         * @param target
         *            the byte buffer to receive the bytes.
         * @return the number of bytes actually read.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * AsynchronousCloseException | if another thread closes the channel during the read.
         * NotYetConnectedException | if this channel is not yet connected.
         * ClosedByInterruptException | if another thread interrupts the calling thread while this operation is in progress. The interrupt state of the calling thread is set and the channel is closed.
         * ClosedChannelException | if this channel is closed.
         * IOException | if another I/O error occurs.
         * @see java.nio.channels.ReadableByteChannel#read(java.nio.ByteBuffer)
         */
        ReadByteBuffer(
            [in] IByteBuffer* target,
            [out] Int32* number);

        /**
         * Reads bytes from this socket channel into a subset of the given buffers.
         * This method attempts to read all {remaining()} bytes from {
         * length} byte buffers, in order, starting at {targets[offset]}. The
         * number of bytes actually read is returned.
         * <p>
         * If a read operation is in progress, subsequent threads will block until
         * the read is completed and will then contend for the ability to read.
         *
         * @param targets
         *            the array of byte buffers into which the bytes will be copied.
         * @param offset
         *            the index of the first buffer to store bytes in.
         * @param length
         *            the maximum number of buffers to store bytes in.
         * @return the number of bytes actually read.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * AsynchronousCloseException | if this channel is closed by another thread during this read operation.
         * ClosedByInterruptException | if another thread interrupts the calling thread while this operation is in progress. The interrupt state of the calling thread is set and the channel is closed.
         * ClosedChannelException | if this channel is closed.
         * IndexOutOfBoundsException | if {offset < 0} or {length < 0}, or if {offset + length} is greater than the size of {targets}.
         * IOException | if another I/O error occurs.
         * NotYetConnectedException | if this channel is not yet connected.
         * @see java.nio.channels.ScatteringByteChannel#read(java.nio.ByteBuffer[],
         *      int, int)
         */
        ReadByteBuffers(
            [in] ArrayOf<IByteBuffer*> targets,
            [in] Int32 offset,
            [in] Int32 length,
            [out] Int64* number);

        /**
         * Reads bytes from this socket channel and stores them in the specified
         * array of buffers. This method attempts to read as many bytes as can be
         * stored in the buffer array from this channel and returns the number of
         * bytes actually read.
         * <p>
         * If a read operation is in progress, subsequent threads will block until
         * the read is completed and will then contend for the ability to read.
         * <p>
         * Calling this method is equivalent to calling {read(targets, 0,
         * targets.length);}
         *
         * @param targets
         *            the array of byte buffers into which the bytes will be copied.
         * @return the number of bytes actually read.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * AsynchronousCloseException | if this channel is closed by another thread during this read operation.
         * ClosedByInterruptException | if another thread interrupts the calling thread while this operation is in progress. The interrupt state of the calling thread is set and the channel is closed.
         * ClosedChannelException | if this channel is closed.
         * IOException | if another I/O error occurs.
         * NotYetConnectedException | if this channel is not yet connected.
         */
        ReadByteBuffersEx(
            [in] ArrayOf<IByteBuffer*> targets,
            [out] Int64* number);

        /**
         * Writes bytes from the given byte buffer to this socket channel. The
         * maximum number of bytes that are written is the remaining number of bytes
         * in the buffer when this method is invoked. The bytes are taken from the
         * buffer starting at the buffer's position.
         * <p>
         * The call may block if other threads are also attempting to write to the
         * same channel.
         * <p>
         * Upon completion, the buffer's position is updated to the end of the bytes
         * that have been written. The buffer's limit is not changed.
         *
         * @param source
         *            the byte buffer containing the bytes to be written.
         * @return the number of bytes actually written.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * AsynchronousCloseException | if another thread closes the channel during the write.
         * ClosedByInterruptException | if another thread interrupts the calling thread while this operation is in progress. The interrupt state of the calling thread is set and the channel is closed.
         * ClosedChannelException | if the channel was already closed.
         * IOException | if another I/O error occurs.
         * NotYetConnectedException | if this channel is not connected yet.
         * @see java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer)
         */
        WriteByteBuffer(
            [in] IByteBuffer* buffer,
            [out] Int32* number);

        /**
         * Attempts to write a subset of the given bytes from the buffers to this
         * socket channel. This method attempts to write all {remaining()}
         * bytes from {length} byte buffers, in order, starting at {
         * sources[offset]}. The number of bytes actually written is returned.
         * <p>
         * If a write operation is in progress, subsequent threads will block until
         * the write is completed and then contend for the ability to write.
         *
         * @param sources
         *            the array of byte buffers that is the source for bytes written
         *            to this channel.
         * @param offset
         *            the index of the first buffer in {buffers }to get bytes
         *            from.
         * @param length
         *            the number of buffers to get bytes from.
         * @return the number of bytes actually written to this channel.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * AsynchronousCloseException | if this channel is closed by another thread during this write operation.
         * ClosedByInterruptException | if another thread interrupts the calling thread while this operation is in progress. The interrupt state of the calling thread is set and the channel is closed.
         * ClosedChannelException | if this channel is closed.
         * IndexOutOfBoundsException | if {offset < 0} or {length < 0}, or if {offset + length} is greater than the size of {sources}.
         * IOException | if another I/O error occurs.
         * NotYetConnectedException | if this channel is not yet connected.
         * @see java.nio.channels.GatheringByteChannel#write(java.nio.ByteBuffer[],
         *      int, int)
         */
        WriteByteBuffers(
            [in] ArrayOf<IByteBuffer*> sources,
            [in] Int32 offset,
            [in] Int32 length,
            [out] Int64* number);

        /**
         * Writes bytes from all the given byte buffers to this socket channel.
         * <p>
         * Calling this method is equivalent to calling {write(sources, 0,
         * sources.length);}
         *
         * @param sources
         *            the buffers containing bytes to write.
         * @return the number of bytes actually written.
         * AsynchronousCloseException | if this channel is closed by another thread during this write operation.
         * ClosedByInterruptException | if another thread interrupts the calling thread while this operation is in progress. The interrupt state of the calling thread is set and the channel is closed.
         * ClosedChannelException | if this channel is closed.
         * IOException | if another I/O error occurs.
         * NotYetConnectedException | if this channel is not yet connected.
         * @see java.nio.channels.GatheringByteChannel#write(java.nio.ByteBuffer[])
         */
        WriteByteBuffersEx(
            [in] ArrayOf<IByteBuffer*> buffers,
            [out] Int64* number);
    }

    interface ISocketChannelHelper {
        /**
         * Creates an open and unconnected socket channel.
         * <p>
         * This channel is created by calling {openSocketChannel()} of the
         * default SelectorProvider instance.
         *
         * @sa SelectorProvider
         *
         * @return the new channel which is open but unconnected.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:------------|
         * IOException | if an I/O error occurs.
         */
        Open(
            [out] ISocketChannel** socketChannel);

        /**
         * Creates a socket channel and connects it to a socket address.
         * <p>
         * This method performs a call to {open()} followed by a call to
         * {connect(SocketAddress)}.
         *
         * @param address
         *            the socket address to be connected to.
         * @return the new connected channel.
         * @return ECode = NOERROR(0) if success, elas as follows:
         * Value | Meaning |
         * :-|:--------|
         * AsynchronousCloseException | if this channel is closed by another thread while this method is executing.
         * ClosedByInterruptException | if another thread interrupts the calling thread while this operation is executing. The calling thread will have the interrupt state set and the channel will be closed.
         * UnresolvedAddressException | if the address is not resolved.
         * UnsupportedAddressTypeException | if the address type is not supported.
         * IOException | if an I/O error occurs.
         */
//        OpenEx(
//            [in] ISocketAddress* address,
//            [out] ISocketChannel** socketChannel);
    }

    } // namespace Channels
    } // namespace IO
    } // namespace Elastos
}