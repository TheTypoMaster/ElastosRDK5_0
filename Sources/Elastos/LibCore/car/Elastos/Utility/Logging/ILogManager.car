module
{
    using interface Elastos.Utility.IEnumeration;
    using interface Elastos.IO.IInputStream;

    namespace Elastos {
    namespace Utility {
    namespace Logging {
    /**
     * {@code LogManager} is used to maintain configuration properties of the
     * logging framework, and to manage a hierarchical namespace of all named
     * {@code Logger} objects.
     * <p>
     * There is only one global {@code LogManager} instance in the
     * application, which can be get by calling static method
     * {@link #getLogManager()}. This instance is created and
     * initialized during class initialization and cannot be changed.
     * <p>
     * The {@code LogManager} class can be specified by
     * java.util.logging.manager system property, if the property is unavailable or
     * invalid, the default class {@link java.util.logging.LogManager} will
     * be used.
     * <p>
     * On initialization, {@code LogManager} reads its configuration from a
     * properties file, which by default is the "lib/logging.properties" in the JRE
     * directory.
     * <p>
     * However, two optional system properties can be used to customize the initial
     * configuration process of {@code LogManager}.
     * <ul>
     * <li>"java.util.logging.config.class"</li>
     * <li>"java.util.logging.config.file"</li>
     * </ul>
     * <p>
     * These two properties can be set in three ways, by the Preferences API, by the
     * "java" command line property definitions, or by system property definitions
     * passed to JNI_CreateJavaVM.
     * <p>
     * The "java.util.logging.config.class" should specifies a class name. If it is
     * set, this given class will be loaded and instantiated during
     * {@code LogManager} initialization, so that this object's default
     * constructor can read the initial configuration and define properties for
     * {@code LogManager}.
     * <p>
     * If "java.util.logging.config.class" property is not set, or it is invalid, or
     * some exception is thrown during the instantiation, then the
     * "java.util.logging.config.file" system property can be used to specify a
     * properties file. The {@code LogManager} will read initial
     * configuration from this file.
     * <p>
     * If neither of these properties is defined, or some exception is thrown
     * during these two properties using, the {@code LogManager} will read
     * its initial configuration from default properties file, as described above.
     * <p>
     * The global logging properties may include:
     * <ul>
     * <li>"handlers". This property's values should be a list of class names for
     * handler classes separated by whitespace, these classes must be subclasses of
     * {@code Handler} and each must have a default constructor, these
     * classes will be loaded, instantiated and registered as handlers on the root
     * {@code Logger} (the {@code Logger} named ""). These
     * {@code Handler}s maybe initialized lazily.</li>
     * <li>"config". The property defines a list of class names separated by
     * whitespace. Each class must have a default constructor, in which it can
     * update the logging configuration, such as levels, handlers, or filters for
     * some logger, etc. These classes will be loaded and instantiated during
     * {@code LogManager} configuration</li>
     * </ul>
     * <p>
     * This class, together with any handler and configuration classes associated
     * with it, <b>must</b> be loaded from the system classpath when
     * {@code LogManager} configuration occurs.
     * <p>
     * Besides global properties, the properties for loggers and Handlers can be
     * specified in the property files. The names of these properties will start
     * with the complete dot separated names for the handlers or loggers.
     * <p>
     * In the {@code LogManager}'s hierarchical namespace,
     * {@code Loggers} are organized based on their dot separated names. For
     * example, "x.y.z" is child of "x.y".
     * <p>
     * Levels for {@code Loggers} can be defined by properties whose name end
     * with ".level". Thus "alogger.level" defines a level for the logger named as
     * "alogger" and for all its children in the naming hierarchy. Log levels
     * properties are read and applied in the same order as they are specified in
     * the property file. The root logger's level can be defined by the property
     * named as ".level".
     * <p>
     * This class is thread safe. It is an error to synchronize on a
     * {@code LogManager} while synchronized on a {@code Logger}.
     */
    interface ILogManager {
        /**
         * Does nothing.
         */
        CheckAccess();

        /**
         * Add a given logger into the hierarchical namespace. The
         * {@code Logger.addLogger()} factory methods call this method to add newly
         * created Logger. This returns false if a logger with the given name has
         * existed in the namespace
         * <p>
         * Note that the {@code LogManager} may only retain weak references to
         * registered loggers. In order to prevent {@code Logger} objects from being
         * unexpectedly garbage collected it is necessary for <i>applications</i>
         * to maintain references to them.
         * </p>
         *
         * @param logger
         *            the logger to be added.
         * @return true if the given logger is added into the namespace
         *         successfully, false if the given logger exists in the namespace.
         */
        AddLogger(
            [in] ILogger* logger,
            [out] Boolean* value);

        /**
         * Get the logger with the given name.
         *
         * @param name
         *            name of logger
         * @return logger with given name, or {@code null} if nothing is found.
         */
        GetLogger(
            [in] String name,
            [out] ILogger** outlog);

        /**
         * Get a {@code Enumeration} of all registered logger names.
         *
         * @return enumeration of registered logger names
         */
        GetLoggerNames(
            [out] IEnumeration** outemu);

        /**
         * Get the value of property with given name.
         *
         * @param name
         *            the name of property
         * @return the value of property
         */
        GetProperty(
            [in] String name,
            [out] String* str);

        /**
         * Re-initialize the properties and configuration. The initialization
         * process is same as the {@code LogManager} instantiation.
         * <p>
         * Notice : No {@code PropertyChangeEvent} are fired.
         * </p>
         *
         * @throws IOException
         *             if any IO related problems happened.
         */
        ReadConfiguration();

        /**
         * Re-initialize the properties and configuration from the given
         * {@code InputStream}
         * <p>
         * Notice : No {@code PropertyChangeEvent} are fired.
         * </p>
         *
         * @param ins
         *            the input stream
         * @throws IOException
         *             if any IO related problems happened.
         */
        ReadConfigurationEx(
            [in] IInputStream* ins);

        /**
         * Reset configuration.
         *
         * <p>All handlers are closed and removed from any named loggers. All loggers'
         * level is set to null, except the root logger's level is set to
         * {@code Level.INFO}.
         */
        Reset();

        /**
         * Add a {@code PropertyChangeListener}, which will be invoked when
         * the properties are reread.
         *
         * @param l
         *            the {@code PropertyChangeListener} to be added.
         */
        // public void addPropertyChangeListener(PropertyChangeListener l);

        /**
         * Remove a {@code PropertyChangeListener}, do nothing if the given
         * listener is not found.
         *
         * @param l
         *            the {@code PropertyChangeListener} to be removed.
         */
        // public void removePropertyChangeListener(PropertyChangeListener l);

        /**
         * Returns a named logger associated with the supplied resource bundle.
         *
         * @param resourceBundleName the resource bundle to associate, or null for
         *      no associated resource bundle.
         */
        GetOrCreate(
            [in] String name,
            [in] String resourceBundleName,
            [out] ILogger** outlog);

        /**
         * Sets the parent of this logger in the namespace. Callers must first
         * {@link #checkAccess() check security}.
         *
         * @param newParent
         *            the parent logger to set.
         */
        SetParent(
            [in] ILogger* logger,
            [in] ILogger* newParent);

        /**
         * Sets the level on {@code logger} to {@code newLevel}. Any child loggers
         * currently inheriting their level from {@code logger} will be updated
         * recursively.
         *
         * @param newLevel the new minimum logging threshold. If null, the logger's
         *      parent level will be used; or {@code Level.INFO} for loggers with no
         *      parent.
         */
        SetLevelRecursively(
            [in] ILogger* logger,
            [in] ILevel* newLevel);
    }

    interface ILogManagerHelper {
        /**
         * Get the global {@code LogManager} instance.
         *
         * @return the global {@code LogManager} instance
         */
        GetLogManager(
            [out] ILogManager** outlog);

        // use SystemClassLoader to load class from system classpath
        GetInstanceByClass(
            [in] String className,
            [out] IInterface** outface);
    }

    } // namespace Logging
    } // namespace Utility
    } // namespace Elastos
}
