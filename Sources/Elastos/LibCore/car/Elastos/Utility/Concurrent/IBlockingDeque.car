
module
{
    using interface Elastos.Utility.IIterator;

    namespace Elastos {
    namespace Utility {
    namespace Concurrent {
    /**
     * A {@link Deque} that additionally supports blocking operations that wait
     * for the deque to become non-empty when retrieving an element, and wait for
     * space to become available in the deque when storing an element.
     *
     * <p><tt>BlockingDeque</tt> methods come in four forms, with different ways
     * of handling operations that cannot be satisfied immediately, but may be
     * satisfied at some point in the future:
     * one throws an exception, the second returns a special value (either
     * <tt>null</tt> or <tt>false</tt>, depending on the operation), the third
     * blocks the current thread indefinitely until the operation can succeed,
     * and the fourth blocks for only a given maximum time limit before giving
     * up.  These methods are summarized in the following table:
     *
     * <p>
     * <table BORDER CELLPADDING=3 CELLSPACING=1>
     *  <tr>
     *    <td ALIGN=CENTER COLSPAN = 5> <b>First Element (Head)</b></td>
     *  </tr>
     *  <tr>
     *    <td></td>
     *    <td ALIGN=CENTER><em>Throws exception</em></td>
     *    <td ALIGN=CENTER><em>Special value</em></td>
     *    <td ALIGN=CENTER><em>Blocks</em></td>
     *    <td ALIGN=CENTER><em>Times out</em></td>
     *  </tr>
     *  <tr>
     *    <td><b>Insert</b></td>
     *    <td>{@link #addFirst addFirst(e)}</td>
     *    <td>{@link #offerFirst(Object) offerFirst(e)}</td>
     *    <td>{@link #putFirst putFirst(e)}</td>
     *    <td>{@link #offerFirst(Object, long, TimeUnit) offerFirst(e, time, unit)}</td>
     *  </tr>
     *  <tr>
     *    <td><b>Remove</b></td>
     *    <td>{@link #removeFirst removeFirst()}</td>
     *    <td>{@link #pollFirst pollFirst()}</td>
     *    <td>{@link #takeFirst takeFirst()}</td>
     *    <td>{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>
     *  </tr>
     *  <tr>
     *    <td><b>Examine</b></td>
     *    <td>{@link #getFirst getFirst()}</td>
     *    <td>{@link #peekFirst peekFirst()}</td>
     *    <td><em>not applicable</em></td>
     *    <td><em>not applicable</em></td>
     *  </tr>
     *  <tr>
     *    <td ALIGN=CENTER COLSPAN = 5> <b>Last Element (Tail)</b></td>
     *  </tr>
     *  <tr>
     *    <td></td>
     *    <td ALIGN=CENTER><em>Throws exception</em></td>
     *    <td ALIGN=CENTER><em>Special value</em></td>
     *    <td ALIGN=CENTER><em>Blocks</em></td>
     *    <td ALIGN=CENTER><em>Times out</em></td>
     *  </tr>
     *  <tr>
     *    <td><b>Insert</b></td>
     *    <td>{@link #addLast addLast(e)}</td>
     *    <td>{@link #offerLast(Object) offerLast(e)}</td>
     *    <td>{@link #putLast putLast(e)}</td>
     *    <td>{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>
     *  </tr>
     *  <tr>
     *    <td><b>Remove</b></td>
     *    <td>{@link #removeLast() removeLast()}</td>
     *    <td>{@link #pollLast() pollLast()}</td>
     *    <td>{@link #takeLast takeLast()}</td>
     *    <td>{@link #pollLast(long, TimeUnit) pollLast(time, unit)}</td>
     *  </tr>
     *  <tr>
     *    <td><b>Examine</b></td>
     *    <td>{@link #getLast getLast()}</td>
     *    <td>{@link #peekLast peekLast()}</td>
     *    <td><em>not applicable</em></td>
     *    <td><em>not applicable</em></td>
     *  </tr>
     * </table>
     *
     * <p>Like any {@link BlockingQueue}, a <tt>BlockingDeque</tt> is thread safe,
     * does not permit null elements, and may (or may not) be
     * capacity-constrained.
     *
     * <p>A <tt>BlockingDeque</tt> implementation may be used directly as a FIFO
     * <tt>BlockingQueue</tt>. The methods inherited from the
     * <tt>BlockingQueue</tt> interface are precisely equivalent to
     * <tt>BlockingDeque</tt> methods as indicated in the following table:
     *
     * <p>
     * <table BORDER CELLPADDING=3 CELLSPACING=1>
     *  <tr>
     *    <td ALIGN=CENTER> <b><tt>BlockingQueue</tt> Method</b></td>
     *    <td ALIGN=CENTER> <b>Equivalent <tt>BlockingDeque</tt> Method</b></td>
     *  </tr>
     *  <tr>
     *    <td ALIGN=CENTER COLSPAN = 2> <b>Insert</b></td>
     *  </tr>
     *  <tr>
     *    <td>{@link #add(Object) add(e)}</td>
     *    <td>{@link #addLast(Object) addLast(e)}</td>
     *  </tr>
     *  <tr>
     *    <td>{@link #offer(Object) offer(e)}</td>
     *    <td>{@link #offerLast(Object) offerLast(e)}</td>
     *  </tr>
     *  <tr>
     *    <td>{@link #put(Object) put(e)}</td>
     *    <td>{@link #putLast(Object) putLast(e)}</td>
     *  </tr>
     *  <tr>
     *    <td>{@link #offer(Object, long, TimeUnit) offer(e, time, unit)}</td>
     *    <td>{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>
     *  </tr>
     *  <tr>
     *    <td ALIGN=CENTER COLSPAN = 2> <b>Remove</b></td>
     *  </tr>
     *  <tr>
     *    <td>{@link #remove() remove()}</td>
     *    <td>{@link #removeFirst() removeFirst()}</td>
     *  </tr>
     *  <tr>
     *    <td>{@link #poll() poll()}</td>
     *    <td>{@link #pollFirst() pollFirst()}</td>
     *  </tr>
     *  <tr>
     *    <td>{@link #take() take()}</td>
     *    <td>{@link #takeFirst() takeFirst()}</td>
     *  </tr>
     *  <tr>
     *    <td>{@link #poll(long, TimeUnit) poll(time, unit)}</td>
     *    <td>{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>
     *  </tr>
     *  <tr>
     *    <td ALIGN=CENTER COLSPAN = 2> <b>Examine</b></td>
     *  </tr>
     *  <tr>
     *    <td>{@link #element() element()}</td>
     *    <td>{@link #getFirst() getFirst()}</td>
     *  </tr>
     *  <tr>
     *    <td>{@link #peek() peek()}</td>
     *    <td>{@link #peekFirst() peekFirst()}</td>
     *  </tr>
     * </table>
     *
     * <p>Memory consistency effects: As with other concurrent
     * collections, actions in a thread prior to placing an object into a
     * {@code BlockingDeque}
     * <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>
     * actions subsequent to the access or removal of that element from
     * the {@code BlockingDeque} in another thread.
     *
     * <p>This interface is a member of the
     * <a href="{@docRoot}/../technotes/guides/collections/index.html">
     * Java Collections Framework</a>.
     *
     * @since 1.6
     * @author Doug Lea
     * @param <E> the type of elements held in this collection
     */
    interface IBlockingDeque extends IArrayBlockingQueue {
        /*
         * We have "diamond" multiple interface inheritance here, and that
         * introduces ambiguities.  Methods might end up with different
         * specs depending on the branch chosen by javadoc.  Thus a lot of
         * methods specs here are copied from superinterfaces.
         */

        /**
         * Inserts the specified element at the front of this deque if it is
         * possible to do so immediately without violating capacity restrictions,
         * throwing an <tt>IllegalStateException</tt> if no space is currently
         * available.  When using a capacity-restricted deque, it is generally
         * preferable to use {@link #offerFirst(Object) offerFirst}.
         *
         * @param e the element to add
         * @throws IllegalStateException {@inheritDoc}
         * @throws ClassCastException {@inheritDoc}
         * @throws NullPointerException if the specified element is null
         * @throws IllegalArgumentException {@inheritDoc}
         */
        AddFirst(
            [in] IInterface* e);

        /**
         * Inserts the specified element at the end of this deque if it is
         * possible to do so immediately without violating capacity restrictions,
         * throwing an <tt>IllegalStateException</tt> if no space is currently
         * available.  When using a capacity-restricted deque, it is generally
         * preferable to use {@link #offerLast(Object) offerLast}.
         *
         * @param e the element to add
         * @throws IllegalStateException {@inheritDoc}
         * @throws ClassCastException {@inheritDoc}
         * @throws NullPointerException if the specified element is null
         * @throws IllegalArgumentException {@inheritDoc}
         */
        AddLast(
            [in] IInterface* e);

        /**
         * Inserts the specified element at the front of this deque if it is
         * possible to do so immediately without violating capacity restrictions,
         * returning <tt>true</tt> upon success and <tt>false</tt> if no space is
         * currently available.
         * When using a capacity-restricted deque, this method is generally
         * preferable to the {@link #addFirst(Object) addFirst} method, which can
         * fail to insert an element only by throwing an exception.
         *
         * @param e the element to add
         * @throws ClassCastException {@inheritDoc}
         * @throws NullPointerException if the specified element is null
         * @throws IllegalArgumentException {@inheritDoc}
         */
        OfferFirst(
            [in] IInterface* e,
            [out] Boolean* value);

        /**
         * Inserts the specified element at the end of this deque if it is
         * possible to do so immediately without violating capacity restrictions,
         * returning <tt>true</tt> upon success and <tt>false</tt> if no space is
         * currently available.
         * When using a capacity-restricted deque, this method is generally
         * preferable to the {@link #addLast(Object) addLast} method, which can
         * fail to insert an element only by throwing an exception.
         *
         * @param e the element to add
         * @throws ClassCastException {@inheritDoc}
         * @throws NullPointerException if the specified element is null
         * @throws IllegalArgumentException {@inheritDoc}
         */
        OfferLast(
            [in] IInterface* e,
            [out] Boolean* value);

        /**
         * Inserts the specified element at the front of this deque,
         * waiting if necessary for space to become available.
         *
         * @param e the element to add
         * @throws InterruptedException if interrupted while waiting
         * @throws ClassCastException if the class of the specified element
         *         prevents it from being added to this deque
         * @throws NullPointerException if the specified element is null
         * @throws IllegalArgumentException if some property of the specified
         *         element prevents it from being added to this deque
         */
        PutFirst(
            [in] IInterface* e);

        /**
         * Inserts the specified element at the end of this deque,
         * waiting if necessary for space to become available.
         *
         * @param e the element to add
         * @throws InterruptedException if interrupted while waiting
         * @throws ClassCastException if the class of the specified element
         *         prevents it from being added to this deque
         * @throws NullPointerException if the specified element is null
         * @throws IllegalArgumentException if some property of the specified
         *         element prevents it from being added to this deque
         */
        PutLast(
            [in] IInterface* e);

        /**
         * Inserts the specified element at the front of this deque,
         * waiting up to the specified wait time if necessary for space to
         * become available.
         *
         * @param e the element to add
         * @param timeout how long to wait before giving up, in units of
         *        <tt>unit</tt>
         * @param unit a <tt>TimeUnit</tt> determining how to interpret the
         *        <tt>timeout</tt> parameter
         * @return <tt>true</tt> if successful, or <tt>false</tt> if
         *         the specified waiting time elapses before space is available
         * @throws InterruptedException if interrupted while waiting
         * @throws ClassCastException if the class of the specified element
         *         prevents it from being added to this deque
         * @throws NullPointerException if the specified element is null
         * @throws IllegalArgumentException if some property of the specified
         *         element prevents it from being added to this deque
         */
        OfferFirstEx(
            [in] IInterface* e,
            [in] Int64 timeout,
            [in] ITimeUnit* unit,
            [out] Boolean* value);

        /**
         * Inserts the specified element at the end of this deque,
         * waiting up to the specified wait time if necessary for space to
         * become available.
         *
         * @param e the element to add
         * @param timeout how long to wait before giving up, in units of
         *        <tt>unit</tt>
         * @param unit a <tt>TimeUnit</tt> determining how to interpret the
         *        <tt>timeout</tt> parameter
         * @return <tt>true</tt> if successful, or <tt>false</tt> if
         *         the specified waiting time elapses before space is available
         * @throws InterruptedException if interrupted while waiting
         * @throws ClassCastException if the class of the specified element
         *         prevents it from being added to this deque
         * @throws NullPointerException if the specified element is null
         * @throws IllegalArgumentException if some property of the specified
         *         element prevents it from being added to this deque
         */
        OfferLastEx(
            [in] IInterface* e,
            [in] Int64 timeout,
            [in] ITimeUnit* unit,
            [out] Boolean* value);

        /**
         * @throws NoSuchElementException {@inheritDoc}
         */
        RemoveFirst(
            [out] PInterface* res);

        /**
         * @throws NoSuchElementException {@inheritDoc}
         */
        RemoveLast(
            [out] PInterface* res);

        PollFirst(
            [out] PInterface* res);

        PollLast(
            [out] PInterface* res);

        /**
         * @throws NoSuchElementException {@inheritDoc}
         */
        GetFirst(
            [out] PInterface* res);

        /**
         * @throws NoSuchElementException {@inheritDoc}
         */
        GetLast(
            [out] PInterface* res);

        PeekFirst(
            [out] PInterface* res);

        PeekLast(
            [out] PInterface* res);

        /**
         * Retrieves and removes the first element of this deque, waiting
         * if necessary until an element becomes available.
         *
         * @return the head of this deque
         * @throws InterruptedException if interrupted while waiting
         */
        TakeFirst(
            [out] IInterface** outface);

        /**
         * Retrieves and removes the last element of this deque, waiting
         * if necessary until an element becomes available.
         *
         * @return the tail of this deque
         * @throws InterruptedException if interrupted while waiting
         */
        TakeLast(
            [out] IInterface** outface);

        /**
         * Retrieves and removes the first element of this deque, waiting
         * up to the specified wait time if necessary for an element to
         * become available.
         *
         * @param timeout how long to wait before giving up, in units of
         *        <tt>unit</tt>
         * @param unit a <tt>TimeUnit</tt> determining how to interpret the
         *        <tt>timeout</tt> parameter
         * @return the head of this deque, or <tt>null</tt> if the specified
         *         waiting time elapses before an element is available
         * @throws InterruptedException if interrupted while waiting
         */
        PollFirstEx(
            [in] Int64 timeout,
            [in] ITimeUnit* unit,
            [out] IInterface** outface);

        /**
         * Retrieves and removes the last element of this deque, waiting
         * up to the specified wait time if necessary for an element to
         * become available.
         *
         * @param timeout how long to wait before giving up, in units of
         *        <tt>unit</tt>
         * @param unit a <tt>TimeUnit</tt> determining how to interpret the
         *        <tt>timeout</tt> parameter
         * @return the tail of this deque, or <tt>null</tt> if the specified
         *         waiting time elapses before an element is available
         * @throws InterruptedException if interrupted while waiting
         */
        PollLastEx(
            [in] Int64 timeout,
            [in] ITimeUnit* unit,
            [out] IInterface** outface);

        /**
         * Removes the first occurrence of the specified element from this deque.
         * If the deque does not contain the element, it is unchanged.
         * More formally, removes the first element <tt>e</tt> such that
         * <tt>o.equals(e)</tt> (if such an element exists).
         * Returns <tt>true</tt> if this deque contained the specified element
         * (or equivalently, if this deque changed as a result of the call).
         *
         * @param o element to be removed from this deque, if present
         * @return <tt>true</tt> if an element was removed as a result of this call
         * @throws ClassCastException if the class of the specified element
         *         is incompatible with this deque
         *         (<a href="../Collection.html#optional-restrictions">optional</a>)
         * @throws NullPointerException if the specified element is null
         *         (<a href="../Collection.html#optional-restrictions">optional</a>)
         */
        RemoveFirstOccurrence(
            [in] IInterface* o,
            [out] Boolean* value);

        /**
         * Removes the last occurrence of the specified element from this deque.
         * If the deque does not contain the element, it is unchanged.
         * More formally, removes the last element <tt>e</tt> such that
         * <tt>o.equals(e)</tt> (if such an element exists).
         * Returns <tt>true</tt> if this deque contained the specified element
         * (or equivalently, if this deque changed as a result of the call).
         *
         * @param o element to be removed from this deque, if present
         * @return <tt>true</tt> if an element was removed as a result of this call
         * @throws ClassCastException if the class of the specified element
         *         is incompatible with this deque
         *         (<a href="../Collection.html#optional-restrictions">optional</a>)
         * @throws NullPointerException if the specified element is null
         *         (<a href="../Collection.html#optional-restrictions">optional</a>)
         */
        RemoveLastOccurrence(
            [in] IInterface* o,
            [out] Boolean* value);

        /**
         * Pushes an element onto the stack represented by this deque.  In other
         * words, inserts the element at the front of this deque unless it would
         * violate capacity restrictions.
         *
         * <p>This method is equivalent to {@link #addFirst(Object) addFirst}.
         *
         * @throws IllegalStateException {@inheritDoc}
         * @throws ClassCastException {@inheritDoc}
         * @throws NullPointerException if the specified element is null
         * @throws IllegalArgumentException {@inheritDoc}
         */
        Push(
            [in] IInterface* e);

        /**
         * @throws NoSuchElementException {@inheritDoc}
         */
        Pop(
            [out] IInterface** outface);

        /**
         * Returns an iterator over the elements in this deque in reverse
         * sequential order.  The elements will be returned in order from
         * last (tail) to first (head).
         *
         * @return an iterator over the elements in this deque in reverse
         * sequence
         */
        GetDescendingIterator(
            [out] IIterator** iterator);
    }

    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}
