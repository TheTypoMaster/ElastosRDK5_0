
module
{
    namespace Elastos {
    namespace Utility {
    namespace Concurrent {
    namespace Atomic {

    interface IAtomicReferenceFieldUpdater {
        /**
         * Atomically sets the field of the given object managed by this updater
         * to the given updated value if the current value {@code ==} the
         * expected value. This method is guaranteed to be atomic with respect to
         * other calls to {@code compareAndSet} and {@code set}, but not
         * necessarily with respect to other changes in the field.
         *
         * @param obj An object whose field to conditionally set
         * @param expect the expected value
         * @param update the new value
         * @return true if successful.
         */
        CompareAndSet(
            [in] IInterface* obj,
            [in] IInterface* expect,
            [in] IInterface* update,
            [out] Boolean* value);

        /**
         * Atomically sets the field of the given object managed by this updater
         * to the given updated value if the current value {@code ==} the
         * expected value. This method is guaranteed to be atomic with respect to
         * other calls to {@code compareAndSet} and {@code set}, but not
         * necessarily with respect to other changes in the field.
         *
         * <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
         * and does not provide ordering guarantees, so is only rarely an
         * appropriate alternative to {@code compareAndSet}.
         *
         * @param obj An object whose field to conditionally set
         * @param expect the expected value
         * @param update the new value
         * @return true if successful.
         */
        WeakCompareAndSet(
            [in] IInterface* obj,
            [in] IInterface* expect,
            [in] IInterface* update,
            [out] Boolean* value);

        /**
         * Sets the field of the given object managed by this updater to the
         * given updated value. This operation is guaranteed to act as a volatile
         * store with respect to subsequent invocations of {@code compareAndSet}.
         *
         * @param obj An object whose field to set
         * @param newValue the new value
         */
        Set(
            [in] IInterface* obj,
            [in] IInterface* newValue);

        /**
         * Eventually sets the field of the given object managed by this
         * updater to the given updated value.
         *
         * @param obj An object whose field to set
         * @param newValue the new value
         * @since 1.6
         */
        LazySet(
            [in] IInterface* obj,
            [in] IInterface* newValue);

        /**
         * Gets the current value held in the field of the given object managed
         * by this updater.
         *
         * @param obj An object whose field to get
         * @return the current value
         */
        Get(
            [in] IInterface* obj,
            [out] IInterface** outface);

        /**
         * Atomically sets the field of the given object managed by this updater
         * to the given value and returns the old value.
         *
         * @param obj An object whose field to get and set
         * @param newValue the new value
         * @return the previous value
         */
        GetAndSet(
            [in] IInterface* obj,
            [in] IInterface* newValue,
            [out] IInterface** outface);
    }

    } // namespace Atomic
    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}
