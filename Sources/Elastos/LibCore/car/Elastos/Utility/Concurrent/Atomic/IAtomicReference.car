
module
{
    namespace Elastos {
    namespace Utility {
    namespace Concurrent {
    namespace Atomic {

    interface IAtomicReference {
        /**
         * Gets the current value.
         *
         * @return the current value
         */
        Get(
            [out] IInterface** outface);

        /**
         * Sets to the given value.
         *
         * @param newValue the new value
         */
        Set(
            [in] IInterface* newValue);

        /**
         * Eventually sets to the given value.
         *
         * @param newValue the new value
         * @since 1.6
         */
        LazySet(
            [in] IInterface* newValue);

        /**
         * Atomically sets the value to the given updated value
         * if the current value {@code ==} the expected value.
         * @param expect the expected value
         * @param update the new value
         * @return true if successful. False return indicates that
         * the actual value was not equal to the expected value.
         */
        CompareAndSet(
            [in] IInterface* expect,
            [in] IInterface* update,
            [out] Boolean* value);

        /**
         * Atomically sets the value to the given updated value
         * if the current value {@code ==} the expected value.
         *
         * <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
         * and does not provide ordering guarantees, so is only rarely an
         * appropriate alternative to {@code compareAndSet}.
         *
         * @param expect the expected value
         * @param update the new value
         * @return true if successful.
         */
        WeakCompareAndSet(
            [in] IInterface* expect,
            [in] IInterface* update,
            [out] Boolean* value);

        /**
         * Atomically sets to the given value and returns the old value.
         *
         * @param newValue the new value
         * @return the previous value
         */
        GetAndSet(
            [in] IInterface* newValue,
            [out] IInterface** outface);

        /**
         * Returns the String representation of the current value.
         * @return the String representation of the current value.
         */
        ToString(
            [out] String* str);
    }

    } // namespace Atomic
    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}
