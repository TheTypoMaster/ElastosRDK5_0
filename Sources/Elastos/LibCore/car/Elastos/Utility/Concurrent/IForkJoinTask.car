
module
{
    using interface Elastos.Core.IThrowable;
    using interface Elastos.Core.IRunnable;
    using interface Elastos.Utility.ICollection;
    interface Elastos.Utility.Concurrent.IForkJoinTask;

    namespace Elastos {
    namespace Utility {
    namespace Concurrent {
    /**
     * Abstract base class for tasks that run within a {@link ForkJoinPool}.
     * A {@code ForkJoinTask} is a thread-like entity that is much
     * lighter weight than a normal thread.  Huge numbers of tasks and
     * subtasks may be hosted by a small number of actual threads in a
     * ForkJoinPool, at the price of some usage limitations.
     *
     * <p>A "main" {@code ForkJoinTask} begins execution when submitted
     * to a {@link ForkJoinPool}.  Once started, it will usually in turn
     * start other subtasks.  As indicated by the name of this class,
     * many programs using {@code ForkJoinTask} employ only methods
     * {@link #fork} and {@link #join}, or derivatives such as {@link
     * #invokeAll(ForkJoinTask...) invokeAll}.  However, this class also
     * provides a number of other methods that can come into play in
     * advanced usages, as well as extension mechanics that allow
     * support of new forms of fork/join processing.
     *
     * <p>A {@code ForkJoinTask} is a lightweight form of {@link Future}.
     * The efficiency of {@code ForkJoinTask}s stems from a set of
     * restrictions (that are only partially statically enforceable)
     * reflecting their intended use as computational tasks calculating
     * pure functions or operating on purely isolated objects.  The
     * primary coordination mechanisms are {@link #fork}, that arranges
     * asynchronous execution, and {@link #join}, that doesn't proceed
     * until the task's result has been computed.  Computations should
     * avoid {@code synchronized} methods or blocks, and should minimize
     * other blocking synchronization apart from joining other tasks or
     * using synchronizers such as Phasers that are advertised to
     * cooperate with fork/join scheduling. Tasks should also not perform
     * blocking IO, and should ideally access variables that are
     * completely independent of those accessed by other running
     * tasks. Minor breaches of these restrictions, for example using
     * shared output streams, may be tolerable in practice, but frequent
     * use may result in poor performance, and the potential to
     * indefinitely stall if the number of threads not waiting for IO or
     * other external synchronization becomes exhausted. This usage
     * restriction is in part enforced by not permitting checked
     * exceptions such as {@code IOExceptions} to be thrown. However,
     * computations may still encounter unchecked exceptions, that are
     * rethrown to callers attempting to join them. These exceptions may
     * additionally include {@link RejectedExecutionException} stemming
     * from internal resource exhaustion, such as failure to allocate
     * internal task queues. Rethrown exceptions behave in the same way as
     * regular exceptions, but, when possible, contain stack traces (as
     * displayed for example using {@code ex.printStackTrace()}) of both
     * the thread that initiated the computation as well as the thread
     * actually encountering the exception; minimally only the latter.
     *
     * <p>The primary method for awaiting completion and extracting
     * results of a task is {@link #join}, but there are several variants:
     * The {@link Future#get} methods support interruptible and/or timed
     * waits for completion and report results using {@code Future}
     * conventions. Method {@link #invoke} is semantically
     * equivalent to {@code fork(); join()} but always attempts to begin
     * execution in the current thread. The "<em>quiet</em>" forms of
     * these methods do not extract results or report exceptions. These
     * may be useful when a set of tasks are being executed, and you need
     * to delay processing of results or exceptions until all complete.
     * Method {@code invokeAll} (available in multiple versions)
     * performs the most common form of parallel invocation: forking a set
     * of tasks and joining them all.
     *
     * <p>The execution status of tasks may be queried at several levels
     * of detail: {@link #isDone} is true if a task completed in any way
     * (including the case where a task was cancelled without executing);
     * {@link #isCompletedNormally} is true if a task completed without
     * cancellation or encountering an exception; {@link #isCancelled} is
     * true if the task was cancelled (in which case {@link #getException}
     * returns a {@link java.util.concurrent.CancellationException}); and
     * {@link #isCompletedAbnormally} is true if a task was either
     * cancelled or encountered an exception, in which case {@link
     * #getException} will return either the encountered exception or
     * {@link java.util.concurrent.CancellationException}.
     *
     * <p>The ForkJoinTask class is not usually directly subclassed.
     * Instead, you subclass one of the abstract classes that support a
     * particular style of fork/join processing, typically {@link
     * RecursiveAction} for computations that do not return results, or
     * {@link RecursiveTask} for those that do.  Normally, a concrete
     * ForkJoinTask subclass declares fields comprising its parameters,
     * established in a constructor, and then defines a {@code compute}
     * method that somehow uses the control methods supplied by this base
     * class. While these methods have {@code public} access (to allow
     * instances of different task subclasses to call each other's
     * methods), some of them may only be called from within other
     * ForkJoinTasks (as may be determined using method {@link
     * #inForkJoinPool}).  Attempts to invoke them in other contexts
     * result in exceptions or errors, possibly including
     * {@code ClassCastException}.
     *
     * <p>Method {@link #join} and its variants are appropriate for use
     * only when completion dependencies are acyclic; that is, the
     * parallel computation can be described as a directed acyclic graph
     * (DAG). Otherwise, executions may encounter a form of deadlock as
     * tasks cyclically wait for each other.  However, this framework
     * supports other methods and techniques (for example the use of
     * {@link Phaser}, {@link #helpQuiesce}, and {@link #complete}) that
     * may be of use in constructing custom subclasses for problems that
     * are not statically structured as DAGs.
     *
     * <p>Most base support methods are {@code final}, to prevent
     * overriding of implementations that are intrinsically tied to the
     * underlying lightweight task scheduling framework.  Developers
     * creating new basic styles of fork/join processing should minimally
     * implement {@code protected} methods {@link #exec}, {@link
     * #setRawResult}, and {@link #getRawResult}, while also introducing
     * an abstract computational method that can be implemented in its
     * subclasses, possibly relying on other {@code protected} methods
     * provided by this class.
     *
     * <p>ForkJoinTasks should perform relatively small amounts of
     * computation. Large tasks should be split into smaller subtasks,
     * usually via recursive decomposition. As a very rough rule of thumb,
     * a task should perform more than 100 and less than 10000 basic
     * computational steps, and should avoid indefinite looping. If tasks
     * are too big, then parallelism cannot improve throughput. If too
     * small, then memory and internal task maintenance overhead may
     * overwhelm processing.
     *
     * <p>This class provides {@code adapt} methods for {@link Runnable}
     * and {@link Callable}, that may be of use when mixing execution of
     * {@code ForkJoinTasks} with other kinds of tasks. When all tasks are
     * of this form, consider using a pool constructed in <em>asyncMode</em>.
     *
     * <p>ForkJoinTasks are {@code Serializable}, which enables them to be
     * used in extensions such as remote execution frameworks. It is
     * sensible to serialize tasks only before or after, but not during,
     * execution. Serialization is not relied on during execution itself.
     *
     * @since 1.7
     * @hide
     * @author Doug Lea
     */
    interface IForkJoinTask extends IFuture {

        /**
         * Forces the given value to be returned as a result.  This method
         * is designed to support extensions, and should not in general be
         * called otherwise.
         *
         * @param value the value
         */
        SetRawResult(
            [in] IInterface* value);

        /**
         * Immediately performs the base action of this task.  This method
         * is designed to support extensions, and should not in general be
         * called otherwise. The return value controls whether this task
         * is considered to be done normally. It may return false in
         * asynchronous actions that require explicit invocations of
         * {@link #complete} to become joinable. It may also throw an
         * (unchecked) exception to indicate abnormal exit.
         *
         * @return {@code true} if completed normally
         */
        Exec(
            [out] Boolean* res);

        /**
         * Tries to block a worker thread until completed or timed out.
         * Uses Object.wait time argument conventions.
         * May fail on contention or interrupt.
         *
         * @param millis if > 0, wait time.
         */
        TryAwaitDone(
            [in] Int64 millis);

        /**
         * Primary execution method for stolen tasks. Unless done, calls
         * exec and records status if completed, but doesn't wait for
         * completion otherwise.
         */
        DoExec();

        // public methods

        /**
         * Arranges to asynchronously execute this task.  While it is not
         * necessarily enforced, it is a usage error to fork a task more
         * than once unless it has completed and been reinitialized.
         * Subsequent modifications to the state of this task or any data
         * it operates on are not necessarily consistently observable by
         * any thread other than the one executing it unless preceded by a
         * call to {@link #join} or related methods, or a call to {@link
         * #isDone} returning {@code true}.
         *
         * <p>This method may be invoked only from within {@code
         * ForkJoinPool} computations (as may be determined using method
         * {@link #inForkJoinPool}).  Attempts to invoke in other contexts
         * result in exceptions or errors, possibly including {@code
         * ClassCastException}.
         *
         * @return {@code this}, to simplify usage
         */
        Fork(
            [out] IForkJoinTask** outtask);

        /**
         * Returns the result of the computation when it {@link #isDone is
         * done}.  This method differs from {@link #get()} in that
         * abnormal completion results in {@code RuntimeException} or
         * {@code Error}, not {@code ExecutionException}, and that
         * interrupts of the calling thread do <em>not</em> cause the
         * method to abruptly return by throwing {@code
         * InterruptedException}.
         *
         * @return the computed result
         */
        Join(
            [out] IInterface** outface);

        /**
         * Commences performing this task, awaits its completion if
         * necessary, and returns its result, or throws an (unchecked)
         * {@code RuntimeException} or {@code Error} if the underlying
         * computation did so.
         *
         * @return the computed result
         */
        Invoke(
            [out] IInterface** outface);

        /**
         * Cancels, ignoring any exceptions thrown by cancel. Used during
         * worker and pool shutdown. Cancel is spec'ed not to throw any
         * exceptions, but if it does anyway, we have no recourse during
         * shutdown, so guard against this case.
         */
        CancelIgnoringExceptions();

        /**
         * Returns {@code true} if this task threw an exception or was cancelled.
         *
         * @return {@code true} if this task threw an exception or was cancelled
         */
        IsCompletedAbnormally(
            [out] Boolean* value);

        /**
         * Returns {@code true} if this task completed without throwing an
         * exception and was not cancelled.
         *
         * @return {@code true} if this task completed without throwing an
         * exception and was not cancelled
         */
        IsCompletedNormally(
            [out] Boolean* value);

        /**
         * Returns the exception thrown by the base computation, or a
         * {@code CancellationException} if cancelled, or {@code null} if
         * none or if the method has not yet completed.
         *
         * @return the exception, or {@code null} if none
         */
        GetException(
            [out] IThrowable** res);

        /**
         * Completes this task abnormally, and if not already aborted or
         * cancelled, causes it to throw the given exception upon
         * {@code join} and related operations. This method may be used
         * to induce exceptions in asynchronous tasks, or to force
         * completion of tasks that would not otherwise complete.  Its use
         * in other situations is discouraged.  This method is
         * overridable, but overridden versions must invoke {@code super}
         * implementation to maintain guarantees.
         *
         * @param ex the exception to throw. If this exception is not a
         * {@code RuntimeException} or {@code Error}, the actual exception
         * thrown will be a {@code RuntimeException} with cause {@code ex}.
         */
        CompleteExceptionally(
            [in] IThrowable* ex);

        /**
         * Completes this task, and if not already aborted or cancelled,
         * returning the given value as the result of subsequent
         * invocations of {@code join} and related operations. This method
         * may be used to provide results for asynchronous tasks, or to
         * provide alternative handling for tasks that would not otherwise
         * complete normally. Its use in other situations is
         * discouraged. This method is overridable, but overridden
         * versions must invoke {@code super} implementation to maintain
         * guarantees.
         *
         * @param value the result value for this task
         */
        Complete(
            [in] IInterface* value);

        /**
         * Joins this task, without returning its result or throwing its
         * exception. This method may be useful when processing
         * collections of tasks when some have been cancelled or otherwise
         * known to have aborted.
         */
        QuietlyJoin();

        /**
         * Commences performing this task and awaits its completion if
         * necessary, without returning its result or throwing its
         * exception.
         */
        QuietlyInvoke();

        /**
         * Resets the internal bookkeeping state of this task, allowing a
         * subsequent {@code fork}. This method allows repeated reuse of
         * this task, but only if reuse occurs when this task has either
         * never been forked, or has been forked, then completed and all
         * outstanding joins of this task have also completed. Effects
         * under any other usage conditions are not guaranteed.
         * This method may be useful when executing
         * pre-constructed trees of subtasks in loops.
         *
         * <p>Upon completion of this method, {@code isDone()} reports
         * {@code false}, and {@code getException()} reports {@code
         * null}. However, the value returned by {@code getRawResult} is
         * unaffected. To clear this value, you can invoke {@code
         * setRawResult(null)}.
         */
        Reinitialize();

        /**
         * Tries to unschedule this task for execution. This method will
         * typically succeed if this task is the most recently forked task
         * by the current thread, and has not commenced executing in
         * another thread.  This method may be useful when arranging
         * alternative local processing of tasks that could have been, but
         * were not, stolen.
         *
         * <p>This method may be invoked only from within {@code
         * ForkJoinPool} computations (as may be determined using method
         * {@link #inForkJoinPool}).  Attempts to invoke in other contexts
         * result in exceptions or errors, possibly including {@code
         * ClassCastException}.
         *
         * @return {@code true} if unforked
         */
        TryUnfork(
            [out] Boolean* value);

        // Extension methods

        /**
         * Returns the result that would be returned by {@link #join}, even
         * if this task completed abnormally, or {@code null} if this task
         * is not known to have been completed.  This method is designed
         * to aid debugging, as well as to support extensions. Its use in
         * any other context is discouraged.
         *
         * @return the result, or {@code null} if not completed
         */
        GetRawResult(
            [out] IInterface** outface);

    }

    [deprecated]
    interface IForkJoinTaskHelper {
        /**
         * Forks the given tasks, returning when {@code isDone} holds for
         * each task or an (unchecked) exception is encountered, in which
         * case the exception is rethrown. If more than one task
         * encounters an exception, then this method throws any one of
         * these exceptions. If any task encounters an exception, the
         * other may be cancelled. However, the execution status of
         * individual tasks is not guaranteed upon exceptional return. The
         * status of each task may be obtained using {@link
         * #getException()} and related methods to check if they have been
         * cancelled, completed normally or exceptionally, or left
         * unprocessed.
         *
         * <p>This method may be invoked only from within {@code
         * ForkJoinPool} computations (as may be determined using method
         * {@link #inForkJoinPool}).  Attempts to invoke in other contexts
         * result in exceptions or errors, possibly including {@code
         * ClassCastException}.
         *
         * @param t1 the first task
         * @param t2 the second task
         * @throws NullPointerException if any task is null
         */
        InvokeAll(
            [in] IForkJoinTask* t1,
            [in] IForkJoinTask* t2);

        /**
         * Forks the given tasks, returning when {@code isDone} holds for
         * each task or an (unchecked) exception is encountered, in which
         * case the exception is rethrown. If more than one task
         * encounters an exception, then this method throws any one of
         * these exceptions. If any task encounters an exception, others
         * may be cancelled. However, the execution status of individual
         * tasks is not guaranteed upon exceptional return. The status of
         * each task may be obtained using {@link #getException()} and
         * related methods to check if they have been cancelled, completed
         * normally or exceptionally, or left unprocessed.
         *
         * <p>This method may be invoked only from within {@code
         * ForkJoinPool} computations (as may be determined using method
         * {@link #inForkJoinPool}).  Attempts to invoke in other contexts
         * result in exceptions or errors, possibly including {@code
         * ClassCastException}.
         *
         * @param tasks the tasks
         * @throws NullPointerException if any task is null
         */
        InvokeAllEx(
            [in] ArrayOf<IForkJoinTask*>* tasks);

        /**
         * Forks all tasks in the specified collection, returning when
         * {@code isDone} holds for each task or an (unchecked) exception
         * is encountered, in which case the exception is rethrown. If
         * more than one task encounters an exception, then this method
         * throws any one of these exceptions. If any task encounters an
         * exception, others may be cancelled. However, the execution
         * status of individual tasks is not guaranteed upon exceptional
         * return. The status of each task may be obtained using {@link
         * #getException()} and related methods to check if they have been
         * cancelled, completed normally or exceptionally, or left
         * unprocessed.
         *
         * <p>This method may be invoked only from within {@code
         * ForkJoinPool} computations (as may be determined using method
         * {@link #inForkJoinPool}).  Attempts to invoke in other contexts
         * result in exceptions or errors, possibly including {@code
         * ClassCastException}.
         *
         * @param tasks the collection of tasks
         * @return the tasks argument, to simplify usage
         * @throws NullPointerException if tasks or any element are null
         */
        InvokeAllEx2(
            [in] ICollection* tasks,
            [out] ICollection** outcol);

        /**
         * Possibly executes tasks until the pool hosting the current task
         * {@link ForkJoinPool#isQuiescent is quiescent}. This method may
         * be of use in designs in which many tasks are forked, but none
         * are explicitly joined, instead executing them until all are
         * processed.
         *
         * <p>This method may be invoked only from within {@code
         * ForkJoinPool} computations (as may be determined using method
         * {@link #inForkJoinPool}).  Attempts to invoke in other contexts
         * result in exceptions or errors, possibly including {@code
         * ClassCastException}.
         */
        HelpQuiesce();

        /**
         * Returns the pool hosting the current task execution, or null
         * if this task is executing outside of any ForkJoinPool.
         *
         * @see #inForkJoinPool
         * @return the pool, or {@code null} if none
         */
        GetPool(
            [out] IForkJoinPool** outpool);

        /**
         * Returns {@code true} if the current thread is a {@link
         * ForkJoinWorkerThread} executing as a ForkJoinPool computation.
         *
         * @return {@code true} if the current thread is a {@link
         * ForkJoinWorkerThread} executing as a ForkJoinPool computation,
         * or {@code false} otherwise
         */
        InForkJoinPool(
            [out] Boolean* value);

        /**
         * Returns an estimate of the number of tasks that have been
         * forked by the current worker thread but not yet executed. This
         * value may be useful for heuristic decisions about whether to
         * fork other tasks.
         *
         * <p>This method may be invoked only from within {@code
         * ForkJoinPool} computations (as may be determined using method
         * {@link #inForkJoinPool}).  Attempts to invoke in other contexts
         * result in exceptions or errors, possibly including {@code
         * ClassCastException}.
         *
         * @return the number of tasks
         */
        GetQueuedTaskCount(
            [out] Int32* value);

        /**
         * Returns an estimate of how many more locally queued tasks are
         * held by the current worker thread than there are other worker
         * threads that might steal them.  This value may be useful for
         * heuristic decisions about whether to fork other tasks. In many
         * usages of ForkJoinTasks, at steady state, each worker should
         * aim to maintain a small constant surplus (for example, 3) of
         * tasks, and to process computations locally if this threshold is
         * exceeded.
         *
         * <p>This method may be invoked only from within {@code
         * ForkJoinPool} computations (as may be determined using method
         * {@link #inForkJoinPool}).  Attempts to invoke in other contexts
         * result in exceptions or errors, possibly including {@code
         * ClassCastException}.
         *
         * @return the surplus number of tasks, which may be negative
         */
        GetSurplusQueuedTaskCount(
            [out] Int32* value);

        /**
         * Returns a new {@code ForkJoinTask} that performs the {@code run}
         * method of the given {@code Runnable} as its action, and returns
         * a null result upon {@link #join}.
         *
         * @param runnable the runnable action
         * @return the task
         */
        Adapt(
            [in] IRunnable* runnable,
            [out] IForkJoinTask** outjoin);

        /**
         * Returns a new {@code ForkJoinTask} that performs the {@code run}
         * method of the given {@code Runnable} as its action, and returns
         * the given result upon {@link #join}.
         *
         * @param runnable the runnable action
         * @param result the result upon completion
         * @return the task
         */
        AdaptEx(
            [in] IRunnable* runnable,
            [in] IInterface* result,
            [out] IForkJoinTask** outjoin);

        /**
         * Returns a new {@code ForkJoinTask} that performs the {@code call}
         * method of the given {@code Callable} as its action, and returns
         * its result upon {@link #join}, translating any checked exceptions
         * encountered into {@code RuntimeException}.
         *
         * @param callable the callable action
         * @return the task
         */
        AdaptEx2(
            [in] ICallable* callable,
            [out] IForkJoinTask** outjoin);
    }

    } // namespace Concurrent
    } // namespace Utility
    } // namespace Elastos
}