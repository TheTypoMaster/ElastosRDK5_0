module
{
    namespace Elastos {
    namespace Utility {
    /**
     * Observable is used to notify a group of Observer objects when a change
     * occurs. On creation, the set of observers is empty. After a change occurred,
     * the application can call the {@link #notifyObservers()} method. This will
     * cause the invocation of the {@code update()} method of all registered
     * Observers. The order of invocation is not specified. This implementation will
     * call the Observers in the order they registered. Subclasses are completely
     * free in what order they call the update methods.
     *
     * @see Observer
     */
    interface IObservable {
        /**
         * Adds the specified observer to the list of observers. If it is already
         * registered, it is not added a second time.
         *
         * @param observer
         *            the Observer to add.
         */
        AddObserver(
            [in] IObserver* observer);

        /**
         * Returns the number of observers registered to this {@code Observable}.
         *
         * @return the number of observers.
         */
        CountObservers(
            [out] Int32* value);

        /**
         * Removes the specified observer from the list of observers. Passing null
         * won't do anything.
         *
         * @param observer
         *            the observer to remove.
         */
        DeleteObserver(
            [in] IObserver* observer);

        /**
         * Removes all observers from the list of observers.
         */
        DeleteObservers();

        /**
         * Returns the changed flag for this {@code Observable}.
         *
         * @return {@code true} when the changed flag for this {@code Observable} is
         *         set, {@code false} otherwise.
         */
        HasChanged(
            [out] Boolean* value);

        /**
         * If {@code hasChanged()} returns {@code true}, calls the {@code update()}
         * method for every observer in the list of observers using null as the
         * argument. Afterwards, calls {@code clearChanged()}.
         * <p>
         * Equivalent to calling {@code notifyObservers(null)}.
         */
        NotifyObservers();

        /**
         * If {@code hasChanged()} returns {@code true}, calls the {@code update()}
         * method for every Observer in the list of observers using the specified
         * argument. Afterwards calls {@code clearChanged()}.
         *
         * @param data
         *            the argument passed to {@code update()}.
         */
        NotifyObserversEx(
            [in] IInterface* data);

        /**
         * Clears the changed flag for this {@code Observable}. After calling
         * {@code clearChanged()}, {@code hasChanged()} will return {@code false}.
         */
        ClearChanged();

        /**
         * Sets the changed flag for this {@code Observable}. After calling
         * {@code setChanged()}, {@code hasChanged()} will return {@code true}.
         */
        SetChanged();
    }

    } // namespace Utility
    } // namespace Elastos
}
