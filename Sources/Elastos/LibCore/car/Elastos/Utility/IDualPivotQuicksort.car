module
{
    namespace Elastos {
    namespace Utility {
    /**
     * This class implements the Dual-Pivot Quicksort algorithm by
     * Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. The algorithm
     * offers O(n log(n)) performance on many data sets that cause other
     * quicksorts to degrade to quadratic performance, and is typically
     * faster than traditional (one-pivot) Quicksort implementations.
     *
     * @author Vladimir Yaroslavskiy
     * @author Jon Bentley
     * @author Josh Bloch
     *
     * @version 2009.11.29 m765.827.12i
     */
    [deprecated]
    interface IDualPivotQuicksortHelper {
        /*
         * Sorting methods for 7 primitive types.
         */

        /**
         * Sorts the specified array into ascending numerical order.
         *
         * @param a the array to be sorted
         */
        SortInt32(
            [in] ArrayOf<Int32>* a);

        /**
         * Sorts the specified range of the array into ascending order. The range
         * to be sorted extends from the index {@code fromIndex}, inclusive, to
         * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
         * the range to be sorted is empty (and the call is a no-op).
         *
         * @param a the array to be sorted
         * @param fromIndex the index of the first element, inclusive, to be sorted
         * @param toIndex the index of the last element, exclusive, to be sorted
         * @throws IllegalArgumentException if {@code fromIndex > toIndex}
         * @throws ArrayIndexOutOfBoundsException
         *     if {@code fromIndex < 0} or {@code toIndex > a.length}
         */
        SortInt32Ex(
            [in] ArrayOf<Int32>* a,
            [in] Int32 fromIndex,
            [in] Int32 toIndex);

        /**
         * Sorts the specified array into ascending numerical order.
         *
         * @param a the array to be sorted
         */
        SortInt64(
            [in] ArrayOf<Int64>* a);

       /**
         * Sorts the specified range of the array into ascending order. The range
         * to be sorted extends from the index {@code fromIndex}, inclusive, to
         * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
         * the range to be sorted is empty (and the call is a no-op).
         *
         * @param a the array to be sorted
         * @param fromIndex the index of the first element, inclusive, to be sorted
         * @param toIndex the index of the last element, exclusive, to be sorted
         * @throws IllegalArgumentException if {@code fromIndex > toIndex}
         * @throws ArrayIndexOutOfBoundsException
         *     if {@code fromIndex < 0} or {@code toIndex > a.length}
         */
        SortInt64Ex(
            [in] ArrayOf<Int64>* a,
            [in] Int32 fromIndex,
            [in] Int32 toIndex);

        /**
         * Sorts the specified array into ascending numerical order.
         *
         * @param a the array to be sorted
         */
        SortInt16(
            [in] ArrayOf<Int16>* a);

        /**
         * Sorts the specified range of the array into ascending order. The range
         * to be sorted extends from the index {@code fromIndex}, inclusive, to
         * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
         * the range to be sorted is empty (and the call is a no-op).
         *
         * @param a the array to be sorted
         * @param fromIndex the index of the first element, inclusive, to be sorted
         * @param toIndex the index of the last element, exclusive, to be sorted
         * @throws IllegalArgumentException if {@code fromIndex > toIndex}
         * @throws ArrayIndexOutOfBoundsException
         *     if {@code fromIndex < 0} or {@code toIndex > a.length}
         */
        SortInt16Ex(
            [in] ArrayOf<Int16>* a,
            [in] Int32 fromIndex,
            [in] Int32 toIndex);

        /**
         * Sorts the specified array into ascending numerical order.
         *
         * @param a the array to be sorted
         */
        SortChar(
            [in] ArrayOf<Char32>* a);

        /**
         * Sorts the specified range of the array into ascending order. The range
         * to be sorted extends from the index {@code fromIndex}, inclusive, to
         * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
         * the range to be sorted is empty (and the call is a no-op).
         *
         * @param a the array to be sorted
         * @param fromIndex the index of the first element, inclusive, to be sorted
         * @param toIndex the index of the last element, exclusive, to be sorted
         * @throws IllegalArgumentException if {@code fromIndex > toIndex}
         * @throws ArrayIndexOutOfBoundsException
         *     if {@code fromIndex < 0} or {@code toIndex > a.length}
         */
        SortCharEx(
            [in] ArrayOf<Char32>* a,
            [in] Int32 fromIndex,
            [in] Int32 toIndex);

        /**
         * Sorts the specified array into ascending numerical order.
         *
         * @param a the array to be sorted
         */
        SortByte(
            [in] ArrayOf<Byte>* a);

        /**
         * Sorts the specified range of the array into ascending order. The range
         * to be sorted extends from the index {@code fromIndex}, inclusive, to
         * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
         * the range to be sorted is empty (and the call is a no-op).
         *
         * @param a the array to be sorted
         * @param fromIndex the index of the first element, inclusive, to be sorted
         * @param toIndex the index of the last element, exclusive, to be sorted
         * @throws IllegalArgumentException if {@code fromIndex > toIndex}
         * @throws ArrayIndexOutOfBoundsException
         *     if {@code fromIndex < 0} or {@code toIndex > a.length}
         */
        SortByteEx(
            [in] ArrayOf<Byte>* a,
            [in] Int32 fromIndex,
            [in] Int32 toIndex);

        /**
         * Sorts the specified array into ascending numerical order.
         *
         * <p>The {@code <} relation does not provide a total order on all float
         * values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN}
         * value compares neither less than, greater than, nor equal to any value,
         * even itself. This method uses the total order imposed by the method
         * {@link Float#compareTo}: {@code -0.0f} is treated as less than value
         * {@code 0.0f} and {@code Float.NaN} is considered greater than any
         * other value and all {@code Float.NaN} values are considered equal.
         *
         * @param a the array to be sorted
         */
        SortFloat(
            [in] ArrayOf<Float>* a);

        /**
         * Sorts the specified range of the array into ascending order. The range
         * to be sorted extends from the index {@code fromIndex}, inclusive, to
         * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
         * the range to be sorted is empty  and the call is a no-op).
         *
         * <p>The {@code <} relation does not provide a total order on all float
         * values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN}
         * value compares neither less than, greater than, nor equal to any value,
         * even itself. This method uses the total order imposed by the method
         * {@link Float#compareTo}: {@code -0.0f} is treated as less than value
         * {@code 0.0f} and {@code Float.NaN} is considered greater than any
         * other value and all {@code Float.NaN} values are considered equal.
         *
         * @param a the array to be sorted
         * @param fromIndex the index of the first element, inclusive, to be sorted
         * @param toIndex the index of the last element, exclusive, to be sorted
         * @throws IllegalArgumentException if {@code fromIndex > toIndex}
         * @throws ArrayIndexOutOfBoundsException
         *     if {@code fromIndex < 0} or {@code toIndex > a.length}
         */
        SortFloatEx(
            [in] ArrayOf<Float>* a,
            [in] Int32 fromIndex,
            [in] Int32 toIndex);

        /**
         * Sorts the specified array into ascending numerical order.
         *
         * <p>The {@code <} relation does not provide a total order on all double
         * values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN}
         * value compares neither less than, greater than, nor equal to any value,
         * even itself. This method uses the total order imposed by the method
         * {@link Double#compareTo}: {@code -0.0d} is treated as less than value
         * {@code 0.0d} and {@code Double.NaN} is considered greater than any
         * other value and all {@code Double.NaN} values are considered equal.
         *
         * @param a the array to be sorted
         */
        SortDouble(
            [in] ArrayOf<Double>* a);

        /**
         * Sorts the specified range of the array into ascending order. The range
         * to be sorted extends from the index {@code fromIndex}, inclusive, to
         * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},
         * the range to be sorted is empty (and the call is a no-op).
         *
         * <p>The {@code <} relation does not provide a total order on all double
         * values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN}
         * value compares neither less than, greater than, nor equal to any value,
         * even itself. This method uses the total order imposed by the method
         * {@link Double#compareTo}: {@code -0.0d} is treated as less than value
         * {@code 0.0d} and {@code Double.NaN} is considered greater than any
         * other value and all {@code Double.NaN} values are considered equal.
         *
         * @param a the array to be sorted
         * @param fromIndex the index of the first element, inclusive, to be sorted
         * @param toIndex the index of the last element, exclusive, to be sorted
         * @throws IllegalArgumentException if {@code fromIndex > toIndex}
         * @throws ArrayIndexOutOfBoundsException
         *     if {@code fromIndex < 0} or {@code toIndex > a.length}
         */
        SortDoubleEx(
            [in] ArrayOf<Double>* a,
            [in] Int32 fromIndex,
            [in] Int32 toIndex);
    }

    } // namespace Utility
    } // namespace Elastos
}