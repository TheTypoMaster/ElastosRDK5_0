module
{
    enum Elastos.IO.ByteOrder;

    namespace Libcore {
    namespace IO {

    [deprecated]
    interface IMemory {
    /**
     * Used to optimize nio heap buffer bulk get operations. 'dst' must be a primitive array.
     * 'dstOffset' is measured in units of 'sizeofElements' bytes.
     */
        UnsafeBulkGet(
            [in] IObject* dst,
            [in] Int32 dstOffset,
            [in] Int32 byteCount,
            [in] ArrayOf<Byte>* src,
            [in] Int32 srcOffset,
            [in] Int32 sizeofElements,
            [in] Boolean swap);

    /**
     * Used to optimize nio heap buffer bulk put operations. 'src' must be a primitive array.
     * 'srcOffset' is measured in units of 'sizeofElements' bytes.
     */
        UnsafeBulkPut(
            [in] ArrayOf<Byte>* dst,
            [in] Int32 dstOffset,
            [in] Int32 byteCount,
            [in] IObject* src,
            [in] Int32 srcOffset,
            [in] Int32 sizeofElements,
            [in] Boolean swap);

        PeekInt32(
            [in] ArrayOf<Byte>* src,
            [in] Int32 offset,
            [in] ByteOrder order,
            [out] Int32* value);

        PeekInt64(
            [in] ArrayOf<Byte>* src,
            [in] Int32 offset,
            [in] ByteOrder order,
            [out] Int64* value);

        PeekInt16(
            [in] ArrayOf<Byte>* src,
            [in] Int32 offset,
            [in] ByteOrder order,
            [out] Int16* value);

        PokeInt(
            [in] ArrayOf<Byte>* dst,
            [in] Int32 offset,
            [in] Int32 value,
            [in] ByteOrder order);

        PokeLong(
            [in] ArrayOf<Byte>* dst,
            [in] Int32 offset,
            [in] Int64 value,
            [in] ByteOrder order);

        PokeShort(
            [in] ArrayOf<Byte>* dst,
            [in] Int32 offset,
            [in] Int16 value,
            [in] ByteOrder order);

    /**
     * Copies 'byteCount' bytes from the source to the destination. The objects are either
     * instances of DirectByteBuffer or byte[]. The offsets in the byte[] case must include
     * the Buffer.arrayOffset if the array came from a Buffer.array call. We could make this
     * private and provide the four type-safe variants, but then ByteBuffer.put(ByteBuffer)
     * would need to work out which to call based on whether the source and destination buffers
     * are direct or not.
     *
     * @hide make type-safe before making public?
     */
        Memmove(
            [in] IObject* dstObject,
            [in] Int32 dstOffset,
            [in] IObject* srcObject,
            [in] Int32 srcOffset,
            [in] Int64 byteCount);

        PeekByte(
            [in] Int64 address,
            [out] Byte* value);

        PeekInt32(
            [in] Int64 address,
            [in] Boolean swap,
            [out] Int32* value);

        PeekInt64(
            [in] Int64 address,
            [in] Boolean swap,
            [in] Int64* value);

        PeekInt16(
            [in] Int64 address,
            [in] Boolean swap,
            [in] Int16* value);

        PeekByteArray(
            [in] Int64 address,
            [in] ArrayOf<Byte>* dst,
            [in] Int32 dstOffset,
            [in] Int32 byteCount);

        PeekCharArray(
            [in] Int64 address,
            [in] ArrayOf<Char32>* dst,
            [in] Int32 dstOffset,
            [in] Int32 charCount,
            [in] Boolean swap);

        PeekDoubleArray(
            [in] Int64 address,
            [in] ArrayOf<Double>* dst,
            [in] Int32 dstOffset,
            [in] Int32 doubleCount,
            [in] Boolean swap);

        PeekFloatArray(
            [in] Int64 address,
            [in] ArrayOf<Float>* dst,
            [in] Int32 dstOffset,
            [in] Int32 floatCount,
            [in] Boolean swap);

        PeekInt32Array(
            [in] Int64 address,
            [in] ArrayOf<Int32>* dst,
            [in] Int32 dstOffset,
            [in] Int32 int32Count,
            [in] Boolean swap);

        PeekInt64Array(
            [in] Int64 address,
            [in] ArrayOf<Int64>* dst,
            [in] Int32 dstOffset,
            [in] Int32 int64Count,
            [in] Boolean swap);

        PeekInt16Array(
            [in] Int64 address,
            [in] ArrayOf<Int16>* dst,
            [in] Int32 dstOffset,
            [in] Int32 int16Count,
            [in] Boolean swap);

        PokeByte(
            [in] Int64 address,
            [in] Byte value);

        PokeInt32(
            [in] Int64 address,
            [in] Int32 value,
            [in] Boolean swap);

        PokeInt64(
            [in] Int64 address,
            [in] Int64 value,
            [in] Boolean swap);

        PokeInt16(
            [in] Int64 address,
            [in] Int16 value,
            [in] Boolean swap);

        PokeByteArray(
            [in] Int64 address,
            [in] ArrayOf<Byte>* src,
            [in] Int32 offset,
            [in] Int32 count);

        PokeCharArray(
            [in] Int64 address,
            [in] ArrayOf<Char32>* src,
            [in] Int32 offset,
            [in] Int32 count,
            [in] Boolean swap);

        PokeDoubleArray(
            [in] Int64 address,
            [in] ArrayOf<Double>* src,
            [in] Int32 offset,
            [in] Int32 count,
            [in] Boolean swap);

        PokeFloatArray(
            [in] Int64 address,
            [in] ArrayOf<Float>* src,
            [in] Int32 offset,
            [in] Int32 count,
            [in] Boolean swap);

        PokeInt32Array(
            [in] Int64 address,
            [in] ArrayOf<Int32>* src,
            [in] Int32 offset,
            [in] Int32 count,
            [in] Boolean swap);

        PokeInt64Array(
            [in] Int64 address,
            [in] ArrayOf<Int64>* src,
            [in] Int32 offset,
            [in] Int32 count,
            [in] Boolean swap);

        PokeInt16Array(
            [in] Int64 address,
            [in] ArrayOf<Int16>* src,
            [in] Int32 offset,
            [in] Int32 count,
            [in] Boolean swap);
    }

    } // namespace IO
    } // namespace Libcore
}
