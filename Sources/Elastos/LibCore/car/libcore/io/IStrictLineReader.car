
module
{
    namespace Libcore {
    namespace IO {
    /**
     * Buffers input from an {@link InputStream} for reading lines.
     *
     * This class is used for buffered reading of lines. For purposes of this class, a line ends with
     * "\n" or "\r\n". End of input is reported by throwing {@code EOFException}. Unterminated line at
     * end of input is invalid and will be ignored, the caller may use {@code hasUnterminatedLine()}
     * to detect it after catching the {@code EOFException}.
     *
     * This class is intended for reading input that strictly consists of lines, such as line-based
     * cache entries or cache journal. Unlike the {@link BufferedReader} which in conjunction with
     * {@link InputStreamReader} provides similar functionality, this class uses different
     * end-of-input reporting and a more restrictive definition of a line.
     *
     * This class supports only charsets that encode '\r' and '\n' as a single byte with value 13
     * and 10, respectively, and the representation of no other character contains these values.
     * We currently check in constructor that the charset is one of US-ASCII, UTF-8 and ISO-8859-1.
     * The default charset is US_ASCII.
     *
     * @Involve
     * interface ICloseable;
     */

    interface IStrictLineReader {
        /**
         * Reads the next line. A line ends with {@code "\n"} or {@code "\r\n"},
         * this end of line marker is not included in the result.
         *
         * @return the next line from the input.
         * @throws IOException for underlying {@code InputStream} errors.
         * @throws EOFException for the end of source stream.
         */
        ReadLine(
            [out] String* line);

        /**
         * Read an {@code int} from a line containing its decimal representation.
         *
         * @return the value of the {@code int} from the next line.
         * @throws IOException for underlying {@code InputStream} errors or conversion error.
         * @throws EOFException for the end of source stream.
         */
        ReadInt32(
            [out] Int32* value);

        /**
         * Check whether there was an unterminated line at end of input after the line reader reported
         * end-of-input with EOFException. The value is meaningless in any other situation.
         *
         * @return true if there was an unterminated line at end of input.
         */
        HasUnterminatedLine(
            [out] Boolean* value);
    }

    } // namespace IO
    } // namespace Libcore
}