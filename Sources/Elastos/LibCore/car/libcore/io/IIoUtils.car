
module
{
    interface Elastos.IO.IFile;
    interface Elastos.Net.ISocket;
    interface Elastos.IO.IFileDescriptor;
    interface Elastos.Core.IAutoCloseable;

    namespace Libcore {
    namespace IO {

    interface IIoUtils {
        /**
         * Calls close(2) on 'fd'. Also resets the internal int to -1. Does nothing if 'fd' is null
         * or invalid.
         */
        Close(
            [in] IFileDescriptor* fd);

        /**
         * Closes 'closeable', ignoring any checked exceptions. Does nothing if 'closeable' is null.
         */
        CloseQuietly(
            [in] IAutoCloseable* closeable);

        /**
         * Closes 'fd', ignoring any exceptions. Does nothing if 'fd' is null or invalid.
         */
        CloseQuietly(
            [in] IFileDescriptor* fd);

        /**
         * Closes 'socket', ignoring any exceptions. Does nothing if 'socket' is null.
         */
        CloseQuietly(
            [in] ISocket* socket);

        /**
         * Sets 'fd' to be blocking or non-blocking, according to the state of 'blocking'.
         */
        SetBlocking(
            [in] IFileDescriptor* fd,
            [in] Boolean blocking);

        /**
         * Returns the contents of 'path' as a byte array.
         */
        ReadFileAsByteArray(
            [in] String absolutePath
            [out, callee] ArrayOf<Byte>* arr);

        /**
         * Returns the contents of 'path' as a string. The contents are assumed to be UTF-8.
         */
        ReadFileAsString(
            [in] String absolutePath
            [out] String* rst);

        /**
         * Do not use. Use createTemporaryDirectory instead.
         *
         * Used by frameworks/base unit tests to clean up a temporary directory.
         * Deliberately ignores errors, on the assumption that test cleanup is only
         * supposed to be best-effort.
         *
         * @deprecated Use {@link #createTemporaryDirectory} instead.
         */
        DeleteContents(
            [in] IFile* dir);

        /**
         * Creates a unique new temporary directory under "java.io.tmpdir".
         */
        CreateTemporaryDirectory(
            [in] String prefix,
            [out] IFile** directory);

        /**
         * Do not use. This is for System.loadLibrary use only.
         *
         * Checks whether {@code path} can be opened read-only. Similar to File.exists, but doesn't
         * require read permission on the parent, so it'll work in more cases, and allow you to
         * remove read permission from more directories. Everyone else should just open(2) and then
         * use the fd, but the loadLibrary API is broken by its need to ask ClassLoaders where to
         * find a .so rather than just calling dlopen(3).
         */
        CanOpenReadOnly(
            [in] String path,
            [out] Boolean* canOpen);

        ThrowInterruptedIoException();
    }

    } // namespace IO
    } // namespace Libcore
}