module
{
    interface Org.W3c.Dom.INode;

    namespace Org {
    namespace W3c {
    namespace Dom {
    namespace Traversal {

    /**
     * Filters are objects that know how to "filter out" nodes. If a
     * <code>NodeIterator</code> or <code>TreeWalker</code> is given a
     * <code>NodeFilter</code>, it applies the filter before it returns the next
     * node. If the filter says to accept the node, the traversal logic returns
     * it; otherwise, traversal looks for the next node and pretends that the
     * node that was rejected was not there.
     * <p>The DOM does not provide any filters. <code>NodeFilter</code> is just an
     * interface that users can implement to provide their own filters.
     * <p><code>NodeFilters</code> do not need to know how to traverse from node
     * to node, nor do they need to know anything about the data structure that
     * is being traversed. This makes it very easy to write filters, since the
     * only thing they have to know how to do is evaluate a single node. One
     * filter may be used with a number of different kinds of traversals,
     * encouraging code reuse.
     * <p>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
     * @since DOM Level 2
     *
     * @hide
     */
    interface INodeFilter {
        // Constants returned by acceptNode
        /**
         * Accept the node. Navigation methods defined for
         * <code>NodeIterator</code> or <code>TreeWalker</code> will return this
         * node.
         */
        const Int16 FILTER_ACCEPT             = 1;

        /**
         * Reject the node. Navigation methods defined for
         * <code>NodeIterator</code> or <code>TreeWalker</code> will not return
         * this node. For <code>TreeWalker</code>, the children of this node
         * will also be rejected. <code>NodeIterators</code> treat this as a
         * synonym for <code>FILTER_SKIP</code>.
         */
        const Int16 FILTER_REJECT             = 2;

        /**
         * Skip this single node. Navigation methods defined for
         * <code>NodeIterator</code> or <code>TreeWalker</code> will not return
         * this node. For both <code>NodeIterator</code> and
         * <code>TreeWalker</code>, the children of this node will still be
         * considered.
         */
        const Int16 FILTER_SKIP               = 3;

        // Constants for whatToShow
        /**
         * Show all <code>Nodes</code>.
         */
        const Int32 SHOW_ALL                  = 0xFFFFFFFF;

        /**
         * Show <code>Element</code> nodes.
         */
        const Int32 SHOW_ELEMENT              = 0x00000001;

        /**
         * Show <code>Attr</code> nodes. This is meaningful only when creating an
         * <code>NodeIterator</code> or <code>TreeWalker</code> with an
         * attribute node as its <code>root</code>; in this case, it means that
         * the attribute node will appear in the first position of the iteration
         * or traversal. Since attributes are never children of other nodes,
         * they do not appear when traversing over the document tree.
         */
        const Int32 SHOW_ATTRIBUTE            = 0x00000002;

        /**
         * Show <code>Text</code> nodes.
         */
        const Int32 SHOW_TEXT                 = 0x00000004;

        /**
         * Show <code>CDATASection</code> nodes.
         */
        const Int32 SHOW_CDATA_SECTION        = 0x00000008;

        /**
         * Show <code>EntityReference</code> nodes.
         */
        const Int32 SHOW_ENTITY_REFERENCE     = 0x00000010;

        /**
         * Show <code>Entity</code> nodes. This is meaningful only when creating
         * an <code>NodeIterator</code> or <code>TreeWalker</code> with an
         * <code>Entity</code> node as its <code>root</code>; in this case, it
         * means that the <code>Entity</code> node will appear in the first
         * position of the traversal. Since entities are not part of the
         * document tree, they do not appear when traversing over the document
         * tree.
         */
        const Int32 SHOW_ENTITY               = 0x00000020;

        /**
         * Show <code>ProcessingInstruction</code> nodes.
         */
        const Int32 SHOW_PROCESSING_INSTRUCTION = 0x00000040;

        /**
         * Show <code>Comment</code> nodes.
         */
        const Int32 SHOW_COMMENT              = 0x00000080;

        /**
         * Show <code>Document</code> nodes.
         */
        const Int32 SHOW_DOCUMENT             = 0x00000100;

        /**
         * Show <code>DocumentType</code> nodes.
         */
        const Int32 SHOW_DOCUMENT_TYPE        = 0x00000200;

        /**
         * Show <code>DocumentFragment</code> nodes.
         */
        const Int32 SHOW_DOCUMENT_FRAGMENT    = 0x00000400;

        /**
         * Show <code>Notation</code> nodes. This is meaningful only when creating
         * an <code>NodeIterator</code> or <code>TreeWalker</code> with a
         * <code>Notation</code> node as its <code>root</code>; in this case, it
         * means that the <code>Notation</code> node will appear in the first
         * position of the traversal. Since notations are not part of the
         * document tree, they do not appear when traversing over the document
         * tree.
         */
        const Int32 SHOW_NOTATION             = 0x00000800;

        /**
         * Test whether a specified node is visible in the logical view of a
         * <code>TreeWalker</code> or <code>NodeIterator</code>. This function
         * will be called by the implementation of <code>TreeWalker</code> and
         * <code>NodeIterator</code>; it is not normally called directly from
         * user code. (Though you could do so if you wanted to use the same
         * filter to guide your own application logic.)
         * @param n The node to check to see if it passes the filter or not.
         * @return A constant to determine whether the node is accepted,
         *   rejected, or skipped, as defined above.
         */
        AcceptNode(
            [in] INode* n,
            [out] Int16* value);
    }

    } // namespace Traversal
    } // namespace Dom
    } // namespace W3c
    } // namespace Org
}
