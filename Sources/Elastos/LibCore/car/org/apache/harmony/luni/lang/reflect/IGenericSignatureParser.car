
module
{
    namespace Org {
    namespace Apache {
    namespace Harmony {
    namespace Luni {
    namespace Lang {
    namespace Reflect {

    /**
     * Implements a parser for the generics signature attribute.
     * Uses a top-down, recursive descent parsing approach for the following grammar:
     * <pre>
     * ClassSignature ::=
     *     OptFormalTypeParams SuperclassSignature {SuperinterfaceSignature}.
     * SuperclassSignature ::= ClassTypeSignature.
     * SuperinterfaceSignature ::= ClassTypeSignature.
     *
     * OptFormalTypeParams ::=
     *     ["<" FormalTypeParameter {FormalTypeParameter} ">"].
     *
     * FormalTypeParameter ::= Ident ClassBound {InterfaceBound}.
     * ClassBound ::= ":" [FieldTypeSignature].
     * InterfaceBound ::= ":" FieldTypeSignature.
     *
     * FieldTypeSignature ::=
     *     ClassTypeSignature | ArrayTypeSignature | TypeVariableSignature.
     * ArrayTypeSignature ::= "[" TypSignature.
     *
     * ClassTypeSignature ::=
     *     "L" {Ident "/"} Ident OptTypeArguments {"." Ident OptTypeArguments} ";".
     *
     * OptTypeArguments ::= "<" TypeArgument {TypeArgument} ">".
     *
     * TypeArgument ::= ([WildcardIndicator] FieldTypeSignature) | "*".
     * WildcardIndicator ::= "+" | "-".
     *
     * TypeVariableSignature ::= "T" Ident ";".
     *
     * TypSignature ::= FieldTypeSignature | BaseType.
     * BaseType ::= "B" | "C" | "D" | "F" | "I" | "J" | "S" | "Z".
     *
     * MethodTypeSignature ::=
     *     OptFormalTypeParams "(" {TypeSignature} ")" ReturnType {ThrowsSignature}.
     * ThrowsSignature ::= ("^" ClassTypeSignature) | ("^" TypeVariableSignature).
     *
     * ReturnType ::= TypSignature | VoidDescriptor.
     * VoidDescriptor ::= "V".
     * </pre>
    */
    interface IGenericSignatureParser {
        /**
         * Parses the generic signature of a class and creates the data structure
         * representing the signature.
         *
         * @param genericDecl the GenericDeclaration calling this method
         * @param signature the generic signature of the class
        */
        ParseForClass(
            [in] IGenericDeclaration* genericDecl,
            [in] String signature);

        /**
         * Parses the generic signature of a method and creates the data structure
         * representing the signature.
         *
         * @param genericDecl the GenericDeclaration calling this method
         * @param signature the generic signature of the class
        */
        ParseForMethod(
            [in] IGenericDeclaration* genericDecl,
            [in] String signature,
            [in] ArrayOf<IInterface*>* rawExceptionTypes);

        /**
         * Parses the generic signature of a constructor and creates the data
         * structure representing the signature.
         *
         * @param genericDecl the GenericDeclaration calling this method
         * @param signature the generic signature of the class
        */
        ParseForConstructor(
            [in] IGenericDeclaration* genericDecl,
            [in] String signature,
            [in] ArrayOf<IInterface*>* rawExceptionTypes);

        /**
         * Parses the generic signature of a field and creates the data structure
         * representing the signature.
         *
         * @param genericDecl the GenericDeclaration calling this method
         * @param signature the generic signature of the class
        */
        ParseForField(
            [in] IGenericDeclaration* genericDecl,
            [in] String signature);
    }

    } // namespace Reflect
    } // namespace Lang
    } // namespace Luni
    } // namespace Harmony
    } // namespace Apache
    } // namespace Org
}
