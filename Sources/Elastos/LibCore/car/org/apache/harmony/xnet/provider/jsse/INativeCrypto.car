
module
{
    interface Elastosx.Security.Auth.X500.IX500Principal;
    interface Elastos.Utility.IMap;
    interface Elastos.Security.Cert.ICertificate;
    interface Elastos.Security.Cert.IX509Certificate;
    interface Elastos.IO.IFileDescriptor;

    namespace Org {
    namespace Apache {
    namespace Harmony {
    namespace Xnet {
    namespace Provider {
    namespace Jsse {

    /**
     * A collection of callbacks from the native OpenSSL code that are
     * related to the SSL handshake initiated by SSL_do_handshake.
     */
    [deprecated]
    interface ISSLHandshakeCallbacks {
        /**
         * Verify that we trust the certificate chain is trusted.
         *
         * @param asn1DerEncodedCertificateChain A chain of ASN.1 DER encoded certificates
         * @param authMethod auth algorithm name
         *
         * @throws CertificateException if the certificate is untrusted
         */
        VerifyCertificateChain(
            [in] ArrayOf<Byte>* asn1DerEncodedCertificateChain,
            [in] String authMethod);

        /**
         * Called on an SSL client when the server requests (or
         * requires a certificate). The client can respond by using
         * SSL_use_certificate and SSL_use_PrivateKey to set a
         * certificate if has an appropriate one available, similar to
         * how the server provides its certificate.
         *
         * @param keyTypes key types supported by the server,
         * convertible to strings with #keyType
         * @param asn1DerEncodedX500Principals CAs known to the server
         */
        ClientCertificateRequested(
            [in] ArrayOf<Byte>* keyTypes,
            [in] ArrayOf<Byte>* asn1DerEncodedX500Principals);

        /**
         * Called when SSL handshake is completed. Note that this can
         * be after SSL_do_handshake returns when handshake cutthrough
         * is enabled.
         */
        HandshakeCompleted();
    }

    /**
     * Provides the Java side of our JNI glue for OpenSSL.
     */
    [deprecated]
    interface INativeCrypto {
        // --- ENGINE functions ----------------------------------------------------
        ENGINE_load_dynamic();

        ENGINE_by_id(
            [in] String id,
            [out] Int32* engine);

        ENGINE_add(
            [in] Int32 e,
            [out] Int32* engine);

        ENGINE_init(
            [in] Int32 e,
            [out] Int32* engine);

        ENGINE_finish(
            [in] Int32 e,
            [out] Int32* engine);

        ENGINE_free(
            [in] Int32 e,
            [out] Int32* engine);

        ENGINE_load_private_key(
            [in] Int32 e,
            [in] String key_id,
            [out] Int32* engine);

        // --- DSA/RSA public/private key handling functions -----------------------

        EVP_PKEY_new_DSA(
            [in] ArrayOf<Byte>* p,
            [in] ArrayOf<Byte>* q,
            [in] ArrayOf<Byte>* g,
            [in] ArrayOf<Byte>* pub_key,
            [in] ArrayOf<Byte>* priv_key,
            [out] Int32* engine);

        EVP_PKEY_new_RSA(
            [in] ArrayOf<Byte>* n,
            [in] ArrayOf<Byte>* e,
            [in] ArrayOf<Byte>* d,
            [in] ArrayOf<Byte>* p,
            [in] ArrayOf<Byte>* q,
            [in] ArrayOf<Byte>* dmp1,
            [in] ArrayOf<Byte>* dmq1,
            [in] ArrayOf<Byte>* iqmp,
            [out] Int32* engine);

        EVP_PKEY_size(
            [in] Int32 pkey,
            [out] Int32* size);

        EVP_PKEY_type(
            [in] Int32 pkey,
            [out] Int32* type);

        EVP_PKEY_free(
            [in] Int32 pkey);

        EVP_PKEY_cmp(
            [in] Int32 pkey1,
            [in] Int32 pkey2,
            [out] Int32* result);

        I2d_PKCS8_PRIV_KEY_INFO(
            [in] Int32 pkey,
            [out, callee] ArrayOf<Byte>* info);

        D2i_PKCS8_PRIV_KEY_INFO(
            [in] ArrayOf<Byte>* data,
            [out] Int32* info);

        I2d_PUBKEY(
            [in] Int32 pkey,
            [out, callee] ArrayOf<Byte>* pubKey);

        D2I_PUBKEY(
            [in] ArrayOf<Byte>* data,
            [out] Int32* pubKey);

        RSA_generate_key_ex(
            [in] Int32 modulusBits,
            [in] ArrayOf<Byte>* publicExponent,
            [out] Int32* key);

        RSA_size(
            [in] Int32 pkey,
            [out] Int32* size);

        RSA_private_encrypt(
            [in] Int32 flen,
            [in] ArrayOf<Byte>* from,
            [in] ArrayOf<Byte>* to,
            [in] Int32 pkey,
            [in] Int32 padding,
            [out] Int32* result);

        RSA_public_decrypt(
            [in] Int32 flen,
            [in] ArrayOf<Byte>* from,
            [in] ArrayOf<Byte>* to,
            [in] Int32 pkey,
            [in] Int32 padding,
            [out] Int32* result);

        RSA_public_encrypt(
            [in] Int32 flen,
            [in] ArrayOf<Byte>* from,
            [in] ArrayOf<Byte>* to,
            [in] Int32 pkey,
            [in] Int32 padding,
            [out] Int32* result);

        RSA_private_decrypt(
            [in] Int32 flen,
            [in] ArrayOf<Byte>* from,
            [in] ArrayOf<Byte>* to,
            [in] Int32 pkey,
            [in] Int32 padding,
            [out] Int32* result);

        /**
         * @return array of {n, e}
         */
        Get_RSA_public_params(
            [in] Int32 rsa,
            [out, callee] ArrayOf<Byte>* params);

        /**
         * @return array of {n, e, d, p, q, dmp1, dmq1, iqmp}
         */
        Get_RSA_private_params(
            [in] Int32 rsa,
            [out, callee] ArrayOf<Byte>* params);

        DSA_generate_key(
            [in] Int32 primeBits,
            [in] ArrayOf<Byte>* seed,
            [in] ArrayOf<Byte>* g,
            [in] ArrayOf<Byte>* p,
            [in] ArrayOf<Byte>* q,
            [out] Int32* key);

        /**
         * @return array of {g, p, q, y(pub), x(priv)}
         */
        Get_DSA_params(
            [in] Int32 dsa,
            [out, callee] ArrayOf<Byte>* params);

        I2d_RSAPublicKey(
            [in] Int32 rsa,
            [out, callee] ArrayOf<Byte>* params);

        I2d_RSAPrivateKey(
            [in] Int32 rsa,
            [out, callee] ArrayOf<Byte>* key);

        I2d_DSAPublicKey(
            [in] Int32 dsa,
            [out, callee] ArrayOf<Byte>* key);

        I2d_DSAPrivateKey(
            [in] Int32 dsa,
            [out, callee] ArrayOf<Byte>* key);

        // --- Message digest functions --------------

        EVP_get_digestbyname(
            [in] String name,
            [out] Int32* digest);

        EVP_MD_size(
            [in] Int32 evp_md,
            [out] Int32* size);

        EVP_MD_block_size(
            [in] Int32 evp_md,
            [out] Int32* size);

        // --- Message digest context functions --------------

        EVP_MD_CTX_destroy(
            [in] Int32 ctx);

        EVP_MD_CTX_copy(
            [in] Int32 ctx,
            [out] Int32* result);

        // --- Digest handling functions -------------------------------------------

        EVP_DigestInit(
            [in] Int32 evp_md,
            [out] Int32* result);

        EVP_DigestUpdate(
            [in] Int32 ctx,
            [in] ArrayOf<Byte>* buffer,
            [in] Int32 offset,
            [in] Int32 length);

        EVP_DigestFinal(
            [in] Int32 ctx,
            [in] ArrayOf<Byte>* hash,
            [in] Int32 offset,
            [out] Int32* digestFinal);

        // --- Signature handling functions ----------------------------------------

        EVP_SignInit(
            [in] String algorithm,
            [out] Int32* result);

        EVP_SignUpdate(
            [in] Int32 ctx,
            [in] ArrayOf<Byte>* buffer,
            [in] Int32 offset,
            [in] Int32 length);

        EVP_SignFinal(
            [in] Int32 ctx,
            [in] ArrayOf<Byte>* signature,
            [in] Int32 offset,
            [in] Int32 key,
            [out] Int32* digestFinal);

        EVP_VerifyInit(
            [in] String algorithm,
            [out] Int32* init);

        EVP_VerifyUpdate(
            [in] Int32 ctx,
            [in] ArrayOf<Byte>* buffer,
            [in] Int32 offset,
            [in] Int32 length);

        EVP_VerifyFinal(
            [in] Int32 ctx,
            [in] ArrayOf<Byte>* signature,
            [in] Int32 offset,
            [in] Int32 length,
            [in] Int32 key,
            [out] Int32* digestFinal);

            // --- Block ciphers -------------------------------------------------------

        EVP_get_cipherbyname(
            [in] String string,
            [out] Int32* cipher);

        EVP_CipherInit_ex(
            [in] Int32 cipherNid,
            [in] ArrayOf<Byte>* key,
            [in] ArrayOf<Byte>* iv,
            [in] Boolean encrypting,
            [out] Int32* result);

        EVP_CipherUpdate(
            [in] Int32 ctx,
            [in] ArrayOf<Byte>* o,
            [in] Int32 outOffset,
            [in] ArrayOf<Byte>* i,
            [in] Int32 inOffset,
            [out] Int32* result);

        EVP_CipherFinal_ex(
            [in] Int32 ctx,
            [in] ArrayOf<Byte>* o,
            [in] Int32 outOffset,
            [out] Int32* digestFinal);

        EVP_CIPHER_CTX_cleanup(
            [in] Int32 ctx);

        // --- RAND seeding --------------------------------------------------------

        const Int32 RAND_SEED_LENGTH_IN_BYTES = 1024;

        RAND_seed(
            [in] ArrayOf<Byte>* seed);

        RAND_load_file(
            [in] String filename,
            [in] Int64 max_bytes,
            [out] Int32* result);

        RAND_bytes(
            [in] ArrayOf<Byte>* output);

        // --- X509_NAME -----------------------------------------------------------

        X509_NAME_hash(
            [in] IX500Principal* principal,
            [out] Int32* hash);

        X509_NAME_hash_old(
            [in] IX500Principal* principal,
            [out] Int32* hash);

        Get_OPENSSL_TO_STANDARD_CIPHER_SUITES(
            [out] IMap** suites);

        Get_STANDARD_TO_OPENSSL_CIPHER_SUITES(
            [out] IMap** suites);

        const String TLS_EMPTY_RENEGOTIATION_INFO_SCSV = "TLS_EMPTY_RENEGOTIATION_INFO_SCSV";

        // EVP_PKEY types from evp.h and objects.h
        const Int32 EVP_PKEY_RSA = 6;   // NID_rsaEcnryption
        const Int32 EVP_PKEY_DSA = 116; // NID_dsa
        const Int32 EVP_PKEY_DH  = 28;  // NID_dhKeyAgreement
        const Int32 EVP_PKEY_EC  = 408; // NID_X9_62_id_ecPublicKey

        // RSA padding modes from rsa.h
        const Int32 RSA_PKCS1_PADDING = 1;
        const Int32 RSA_NO_PADDING    = 3;

        // SSL mode from ssl.h
        const Int64 SSL_MODE_HANDSHAKE_CUTTHROUGH = 0x00000040;

        // SSL options from ssl.h
        const Int64 SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = 0x00010000;
        const Int64 SSL_OP_NO_SSLv3                               = 0x02000000;
        const Int64 SSL_OP_NO_TLSv1                               = 0x04000000;
        const Int64 SSL_OP_NO_TLSv1_1                             = 0x10000000;
        const Int64 SSL_OP_NO_TLSv1_2                             = 0x08000000;
        const Int64 SSL_OP_NO_TICKET                              = 0x00004000;

        SSL_CTX_new(
            [out] Int32* ctx);

        GetDefaultCipherSuites(
            [out, callee] ArrayOf<String>* suites);

        GetSupportedCipherSuites(
            [out, callee] ArrayOf<String>* suites);

        SSL_CTX_free(
            [in] Int32 ssl_ctx);

        SSL_CTX_set_session_id_context(
            [in] Int32 ssl_ctx,
            [in] ArrayOf<Byte>* sid_ctx);

        SSL_new(
            [in] Int32 ssl_ctx,
            [out] Int32* ssl_new);

        EncodeCertificates(
            [in] ArrayOf<ICertificate*>* inCertificates,
            [out, callee] ArrayOf<Byte>* outCertificates);

        SSL_use_certificate(
            [in] Int32 ssl,
            [in] ArrayOf<Byte>* asn1DerEncodedCertificateChain);

        SSL_use_OpenSSL_PrivateKey(
            [in] Int32 ssl,
            [in] Int32 pkey);

        SSL_use_PrivateKey(
            [in] Int32 ssl,
            [in] ArrayOf<Byte>* pkcs8EncodedPrivateKey);

        SSL_check_private_key(
            [in] Int32 ssl);

        EncodeIssuerX509Principals(
            [in] ArrayOf<IX509Certificate*>* certificates,
            [out, callee] ArrayOf<Byte>* principals);

        SSL_set_client_CA_list(
            [in] Int32 ssl,
            [in] ArrayOf<Byte>* asn1DerEncodedX500Principals);

        SSL_get_mode(
            [in] Int32 ssl,
            [out] Int64* mode);

        SSL_set_mode(
            [in] Int32 ssl,
            [in] Int64 inMode,
            [out] Int64* outMode);

        SSL_clear_mode(
            [in] Int32 ssl,
            [in] Int64 inMode,
            [out] Int64* outMode);

        SSL_get_options(
            [in] Int32 ssl,
            [out] Int64* options);

        SSL_set_options(
            [in] Int32 ssl,
            [in] Int64 options,
            [out] Int64* retOptions);

        SSL_clear_options(
            [in] Int32 ssl,
            [in] Int64 options,
            [out] Int64* retOptions);

        GetDefaultProtocols(
            [out, callee] ArrayOf<String>* protocols);

        GetSupportedProtocols(
            [out, callee] ArrayOf<String>* protocols);

        SetEnabledProtocols(
            [in] Int32 ssl,
            [in] ArrayOf<String>* protocols);

        CheckEnabledProtocols(
            [in] ArrayOf<String>* protocols,
            [out, callee] ArrayOf<String>* retProtocols);

        SSL_set_cipher_lists(
            [in] Int32 ssl,
            [in] ArrayOf<String>* ciphers);

        SetEnabledCipherSuites(
            [in] Int32 ssl,
            [in] ArrayOf<String>* cipherSuites);

        CheckEnabledCipherSuites(
            [in] ArrayOf<String>* cipherSuites,
            [out, callee] ArrayOf<String>* suites);

        /*
         * See the OpenSSL ssl.h header file for more information.
         */
        const Int32 SSL_VERIFY_NONE =                 0x00;
        const Int32 SSL_VERIFY_PEER =                 0x01;
        const Int32 SSL_VERIFY_FAIL_IF_NO_PEER_CERT = 0x02;

        SSL_set_verify(
            [in] Int32 sslNativePointer,
            [in] Int32 mode);

        SSL_set_session(
            [in] Int32 sslNativePointer,
            [in] Int32 sslSessionNativePointer);

        SSL_set_session_creation_enabled(
            [in] Int32 sslNativePointer,
            [in] Boolean creationEnabled);

        SSL_set_tlsext_host_name(
            [in] Int32 sslNativePointer,
            [in] String hostname);

        SSL_get_servername(
            [in] Int32 sslNativePointer,
            [out] String* serverName);

        /**
         * Enables NPN for all SSL connections in the context.
         *
         * <p>For clients this causes the NPN extension to be included in the
         * ClientHello message.
         *
         * <p>For servers this causes the NPN extension to be included in the
         * ServerHello message. The NPN extension will not be included in the
         * ServerHello response if the client didn't include it in the ClientHello
         * request.
         *
         * <p>In either case the caller should pass a non-null byte array of NPN
         * protocols to {@link #SSL_do_handshake}.
         */
        SSL_CTX_enable_npn(
            [in] Int32 sslCtxNativePointer);

        /**
         * Disables NPN for all SSL connections in the context.
         */
        SSL_CTX_disable_npn(
            [in] Int32 sslCtxNativePointer);

        /**
         * Returns the sslSessionNativePointer of the negotiated session
         */
        SSL_do_handshake(
            [in] Int32 sslNativePointer,
            [in] IFileDescriptor* fd,
            [in] ISSLHandshakeCallbacks* shc,
            [in] Int32 timeoutMillis,
            [in] Boolean client_mode,
            [in] ArrayOf<Byte>* npnProtocols,
            [out] Int32* result);

        SSL_get_npn_negotiated_protocol(
            [in] Int32 sslNativePointer,
            [out, callee] ArrayOf<Byte>* protocol);

        /**
         * Currently only intended for forcing renegotiation for testing.
         * Not used within OpenSSLSocketImpl.
         */
        SSL_renegotiate(
            [in] Int32 sslNativePointer);

        /**
         * Returns the local ASN.1 DER encoded X509 certificates.
         */
        SSL_get_certificate(
            [in] Int32 sslNativePointer,
            [out, callee] ArrayOf<Byte>* certificate);

        /**
         * Returns the peer ASN.1 DER encoded X509 certificates.
         */
        SSL_get_peer_cert_chain(
            [in] Int32 sslNativePointer,
            [out, callee] ArrayOf<Byte>* cert_chain);

        /**
         * Reads with the native SSL_read function from the encrypted data stream
         * @return -1 if error or the end of the stream is reached.
         */
        SSL_read(
            [in] Int32 sslNativePointer,
            [in] IFileDescriptor* fd,
            [in] ISSLHandshakeCallbacks* shc,
            [in] ArrayOf<Byte>* b,
            [in] Int32 off,
            [in] Int32 len,
            [in] Int32 readTimeoutMillis,
            [out] Int32* result);

        /**
         * Writes with the native SSL_write function to the encrypted data stream.
         */
        SSL_write(
            [in] Int32 sslNativePointer,
            [in] IFileDescriptor* fd,
            [in] ISSLHandshakeCallbacks* shc,
            [in] ArrayOf<Byte>* b,
            [in] Int32 off,
            [in] Int32 len,
            [in] Int32 writeTimeoutMillis);

        SSL_interrupt(
            [in] Int32 sslNativePointer);

        SSL_shutdown(
            [in] Int32 sslNativePointer,
            [in] IFileDescriptor* fd,
            [in] ISSLHandshakeCallbacks* shc);

        SSL_free(
            [in] Int32 sslNativePointer);

        SSL_SESSION_session_id(
            [in] Int32 sslSessionNativePointer,
            [out, callee] ArrayOf<Byte>* session_id);

        SSL_SESSION_get_time(
            [in] Int32 sslSessionNativePointer,
            [out] Int64* time);

        SSL_SESSION_get_version(
            [in] Int32 sslSessionNativePointer,
            [out] String* ver);

        SSL_SESSION_cipher(
            [in] Int32 sslSessionNativePointer,
            [out] String* cipher);

        SSL_SESSION_free(
            [in] Int32 sslSessionNativePointer);

        I2d_SSL_SESSION(
            [in] Int32 sslSessionNativePointer,
            [out, callee] ArrayOf<Byte>* session);

        D2i_SSL_SESSION(
            [in] ArrayOf<Byte>* data,
            [out] Int32* session);
    }

    } // namespace Jsse
    } // namespace Provider
    } // namespace Xnet
    } // namespace Harmony
    } // namespace Apache
    } // namespace Org
}