

module
{
    interface Elastosx.Net.Ssl.ISSLEngine;
    interface Elastosx.Net.Ssl.ISSLSocket;
    interface Elastosx.Net.Ssl.ISSLSession;
    interface Elastos.Core.IRunnable;
    interface Org.Apache.Harmony.Xnet.Provider.Jsse.ISSLRecordProtocol;
    interface Org.Apache.Harmony.Xnet.Provider.Jsse.IMessage;

    namespace Org {
    namespace Apache {
    namespace Harmony {
    namespace Xnet {
    namespace Provider {
    namespace Jsse {

    /**
     * Base class for ClientHandshakeImpl and ServerHandshakeImpl classes.
     * @see <a href="http://www.ietf.org/rfc/rfc2246.txt">TLS 1.0 spec., 7.4.
     * Handshake protocol</a>
     *
     */
    [deprecated]
    interface IHandshakeProtocol {
        /**
         * Handshake status NEED_UNWRAP - HandshakeProtocol needs to receive data
         */
        const Int32 NEED_UNWRAP = 1;

        /**
         * Handshake status NOT_HANDSHAKING - is not currently handshaking
         */
        const Int32 NOT_HANDSHAKING = 2;

        /**
         * Handshake status FINISHED - HandshakeProtocol has just finished
         */
        const Int32 FINISHED = 3;

        /**
         * Handshake status NEED_TASK - HandshakeProtocol needs the results of delegated task
         */
        const Int32 NEED_TASK = 4;

        /**
         * SSLEngine owning this HandshakeProtocol
         */
        GetEngineOwner(
            [out] ISSLEngine** engineOwner);

        SetEngineOwner(
            [in] ISSLEngine* engineOwner);

        /**
         * SSLSocket owning this HandshakeProtocol
         */
        GetSocketOwner(
            [out] ISSLSocket** socketOwner);

        SetSocketOwner(
            [in] ISSLSocket* socketOwner);

        /**
         * Sets SSL Record Protocol
         * @param recordProtocol
         */
        SetRecordProtocol(
            [in] ISSLRecordProtocol* recordProtocol);

        /**
         * Start session negotiation
         * @param session
         */
        Start();

        /**
         * Returns handshake status
         * @return
         */
        GetStatus(
            [out] Int32* status);

        /**
         * Returns pending session
         * @return session
         */
        GetSession(
            [out] ISSLSession** session);

        /**
         * Proceses inbound handshake messages
         * @param bytes
         */
        Unwrap(
            [in] ArrayOf<Byte>* bytes);

        /**
         * Processes SSLv2 Hello message
         * @param bytes
         */
        UnwrapSSLv2(
            [in] ArrayOf<Byte>* bytes);

        /**
         * Proceses outbound handshake messages
         * @return
         */
        Wrap(
            [out, callee] ArrayOf<Byte>* wrap);

        /**
         * Writes message to HandshakeIODataStream
         *
         * @param message
         */
        Send(
            [in] IMessage* message);

        /**
         * Computers master secret
         *
         */
        ComputerMasterSecret();

        /**
         * Returns a delegated task.
         * @return Delegated task or null
         */
        GetTask(
            [out] IRunnable** task);
    }

    } // namespace Jsse
    } // namespace Provider
    } // namespace Xnet
    } // namespace Harmony
    } // namespace Apache
    } // namespace Org
}