

module
{
    interface Elastosx.Net.Ssl.ISSLSession;
    interface Org.Apache.Harmony.Xnet.Provider.Jsse.IDataStream;

    namespace Org {
    namespace Apache {
    namespace Harmony {
    namespace Xnet {
    namespace Provider {
    namespace Jsse {

    /**
     * This class performs functionality dedicated to SSL record layer.
     * It unpacks and routes income data to the appropriate
     * client protocol (handshake, alert, application data protocols)
     * and packages outcome data into SSL/TLS records.
     * Initially created object has null connection state and does not
     * perform any cryptography computations over the income/outcome data.
     * After handshake protocol agreed upon security parameters they are placed
     * into SSLSessionImpl object and available for record protocol as
     * pending session. The order of setting up of the pending session
     * as an active session differs for client and server modes.
     * So for client mode the parameters are provided by handshake protocol
     * during retrieving of change_cipher_spec message to be sent (by calling of
     * getChangeCipherSpecMesage method).
     * For server side mode record protocol retrieves the parameters from
     * handshake protocol after receiving of client's change_cipher_spec message.
     * After the pending session has been set up as a current session,
     * new connection state object is created and used for encryption/decryption
     * of the messages.
     * Among with base functionality this class provides the information about
     * constrains on the data length, and information about correspondence
     * of plain and encrypted data lengths.
     * For more information on TLS v1 see http://www.ietf.org/rfc/rfc2246.txt,
     * on SSL v3 see http://wp.netscape.com/eng/ssl3,
     * on SSL v2 see http://wp.netscape.com/eng/security/SSL_2.html.
     */
    [deprecated]
    interface ISSLRecordProtocol {
        /**
         * Maximum length of allowed plain data fragment
         * as specified by TLS specification.
         */
        const Int32 MAX_DATA_LENGTH = 16384; // 2^14

        /**
         * Maximum length of allowed compressed data fragment
         * as specified by TLS specification.
         */
        const Int32 MAX_COMPRESSED_DATA_LENGTH = 17408; //16384 + 1024;

        /**
         * Maximum length of allowed ciphered data fragment
         * as specified by TLS specification.
         */
        const Int32 MAX_CIPHERED_DATA_LENGTH = 18432; //16384 + 1024 + 1024;
        /**
         * Maximum length of ssl record. It is counted as:
         * type(1) + version(2) + length(2) + MAX_CIPHERED_DATA_LENGTH
         */
        const Int32 MAX_SSL_PACKET_SIZE = 18437; //16384 + 1024 + 1024 + 5;

        /**
         * Creates an instance of record protocol and tunes
         * up the client protocols to use ut.
         * @param   handshakeProtocol:  HandshakeProtocol
         * @param   alertProtocol:  AlertProtocol
         * @param   in: SSLInputStream
         * @param   appData:    Appendable
         */
         /**
         * Returns the session obtained during the handshake negotiation.
         * If the handshake process was not completed, method returns null.
         * @return the session in effect.
         */
         GetSession(
            [out] ISSLSession** session);

        /**
         * Returns the minimum possible length of the SSL record.
         * @return
         */
        GetMinRecordSize(
            [out] Int32* size);

        /**
         * Returns the record length for the specified incoming data length.
         * If actual resulting record length is greater than
         * MAX_CIPHERED_DATA_LENGTH, MAX_CIPHERED_DATA_LENGTH is returned.
         */
        GetRecordSize(
            [in] Int32 data_size,
            [out] Int32* size);

        /**
         * Returns the upper bound of length of data containing in the record with
         * specified length.
         * If the provided record_size is greater or equal to
         * MAX_CIPHERED_DATA_LENGTH the returned value will be
         * MAX_DATA_LENGTH
         * counted as for data with
         * MAX_CIPHERED_DATA_LENGTH length.
         */
        GetDataSize(
            [in] Int32 record_size,
            [out] Int32* dataSize);

        /**
         * Depending on the Connection State (Session) encrypts and compress
         * the provided data, and packs it into TLSCiphertext structure.
         * @param   content_type: int
         * @return  ssl packet created over the current connection state
         */
        Wrap(
            [in] Byte content_type,
            [in] IDataStream* dataStream,
            [out, callee] ArrayOf<Byte>* state);

        /**
         * Depending on the Connection State (Session) encrypts and compress
         * the provided data, and packs it into TLSCiphertext structure.
         * @param   content_type: int
         * @param   fragment: byte[]
         * @return  ssl packet created over the current connection state
         */
        WrapEx(
            [in] Byte content_type,
            [in] ArrayOf<Byte>* fragment,
            [in] Int32 offset,
            [in] Int32 len,
            [out, callee] ArrayOf<Byte>* state);

        /**
         * Returns the change cipher spec message to be sent to another peer.
         * The pending connection state will be built on the base of provided
         * session object
         * The calling of this method triggers pending write connection state to
         * be active.
         * @return ssl record containing the "change cipher spec" message.
         */
        GetChangeCipherSpecMesage(
            [in] ISSLSession* session,
            [out, callee] ArrayOf<Byte>* mesage);

        /**
         * Retrieves the fragment field of TLSCiphertext, and than
         * depending on the established Connection State
         * decrypts and decompresses it. The following structure is expected
         * on the input at the moment of the call:
         *
         *  struct {
         *      ContentType type;
         *      ProtocolVersion version;
         *      uint16 length;
         *      select (CipherSpec.cipher_type) {
         *          case stream: GenericStreamCipher;
         *          case block: GenericBlockCipher;
         *      } fragment;
         *  } TLSCiphertext;
         *
         * (as specified by RFC 2246, TLS v1 Protocol specification)
         *
         * In addition this method can recognize SSLv2 hello message which
         * are often used to establish the SSL/TLS session.
         *
         * @throws IOException if some io errors have been occurred
         * @throws EndOfSourceException if underlying input stream
         *                              has ran out of data.
         * @throws EndOfBufferException if there was not enough data
         *                              to build complete ssl packet.
         * @return the type of unwrapped message.
         */
        Unwrap(
            [out] Int32* ret);

        /**
         * Passes the alert information to the alert protocol.
         * @param   level:  byte
         * @param   description:    byte
         */
        Alert(
            [in] Byte level,
            [in] Byte description);

        /**
         * Sets up the SSL version used in this connection.
         * This method is calling from the handshake protocol after
         * it becomes known which protocol version will be used.
         * @param   ver:    byte[]
         * @return
         */
        SetVersion(
            [in] ArrayOf<Byte>* ver);

        /**
         * Shuts down the protocol. It will be impossible to use the instance
         * after the calling of this method.
         */
        Shutdown();
    }

    } // namespace Jsse
    } // namespace Provider
    } // namespace Xnet
    } // namespace Harmony
    } // namespace Apache
    } // namespace Org
}