
module
{
    interface Elastosx.Net.Ssl.ISSLSession;

    namespace Org {
    namespace Apache {
    namespace Harmony {
    namespace Xnet {
    namespace Provider {
    namespace Jsse {

    /**
     * A persistent {@link javax.net.ssl.SSLSession} cache used by
     * {@link javax.net.ssl.SSLSessionContext} to share client-side SSL sessions
     * across processes. For example, this cache enables applications to
     * persist and reuse sessions across restarts.
     *
     * <p>The {@code SSLSessionContext} implementation converts
     * {@code SSLSession}s into raw bytes and vice versa. The exact makeup of the
     * session data is dependent upon the caller's implementation and is opaque to
     * the {@code SSLClientSessionCache} implementation.
     */
    [deprecated]
    interface ISSLClientSessionCache {
        /**
        * Gets data from a pre-existing session for a given server host and port.
        *
        * @param host from {@link javax.net.ssl.SSLSession#getPeerHost()}
        * @param port from {@link javax.net.ssl.SSLSession#getPeerPort()}
        * @return the session data or null if none is cached
        * @throws NullPointerException if host is null
        */
        GetSessionData(
            [in] String host,
            [in] Int32 port,
            [out, callee] ArrayOf<Byte>* sessionData);

        /**
        * Stores session data for the given session.
        *
        * @param session to cache data for
        * @param sessionData to cache
        * @throws NullPointerException if session, result of
        *  {@code session.getPeerHost()} or data is null
        */
        PutSessionData(
            [in] ISSLSession* session,
            [in] ArrayOf<Byte>* sessionData);
    }



    } // namespace Jsse
    } // namespace Provider
    } // namespace Xnet
    } // namespace Harmony
    } // namespace Apache
    } // namespace Org
}