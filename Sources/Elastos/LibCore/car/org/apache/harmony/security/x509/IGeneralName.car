
module
{
    using interface Elastos.Utility.IList;
    interface Org.Apache.Harmony.Security.Asn1.IASN1Choice;

    namespace Org {
    namespace Apache {
    namespace Harmony {
    namespace Security {
    namespace X509 {

    /**
     * The class encapsulates the ASN.1 DER encoding/decoding work
     * with the GeneralName structure which is a part of X.509 certificate
     * (as specified in RFC 3280 -
     *  Internet X.509 Public Key Infrastructure.
     *  Certificate and Certificate Revocation List (CRL) Profile.
     *  http://www.ietf.org/rfc/rfc3280.txt):
     *
     * <pre>
     *
     *   GeneralName::= CHOICE {
     *        otherName                       [0]     OtherName,
     *        rfc822Name                      [1]     IA5String,
     *        dNSName                         [2]     IA5String,
     *        x400Address                     [3]     ORAddress,
     *        directoryName                   [4]     Name,
     *        ediPartyName                    [5]     EDIPartyName,
     *        uniformResourceIdentifier       [6]     IA5String,
     *        iPAddress                       [7]     OCTET STRING,
     *        registeredID                    [8]     OBJECT IDENTIFIER
     *   }
     *
     *   OtherName::= SEQUENCE {
     *        type-id    OBJECT IDENTIFIER,
     *        value      [0] EXPLICIT ANY DEFINED BY type-id
     *   }
     *
     *   EDIPartyName::= SEQUENCE {
     *        nameAssigner            [0]     DirectoryString OPTIONAL,
     *        partyName               [1]     DirectoryString
     *   }
     *
     *   DirectoryString::= CHOICE {
     *        teletexString             TeletexString   (SIZE (1..MAX)),
     *        printableString           PrintableString (SIZE (1..MAX)),
     *        universalString           UniversalString (SIZE (1..MAX)),
     *        utf8String              UTF8String      (SIZE (1..MAX)),
     *        bmpString               BMPString       (SIZE (1..MAX))
     *   }
     *
     * </pre>
     *
     * <p>This class doesn't support masked addresses like "10.9.8.0/255.255.255.0".
     * These are only necessary for NameConstraints, which are not exposed in the
     * Java certificate API.
     *
     * @see org.apache.harmony.security.x509.NameConstraints
     * @see org.apache.harmony.security.x509.GeneralSubtree
     */
    interface IGeneralName {
        /**
         * The values of the tags of fields
         */
        const Int32 OTHER_NAME = 0;
        const Int32 RFC822_NAME = 1;
        const Int32 DNS_NAME = 2;
        const Int32 X400_ADDR = 3;
        const Int32 DIR_NAME = 4;
        const Int32 EDIP_NAME = 5;
        const Int32 UR_ID = 6;
        const Int32 IP_ADDR = 7;
        const Int32 REG_ID = 8;

        /**
         * Returns the tag of the name in the structure
         */
        GetTag(
            [out] Int32* tag);

        /**
         * @return the value of the name.
         * The class of name object depends on the tag as follows:
         * [0] otherName - OtherName object,
         * [1] rfc822Name - String object,
         * [2] dNSName - String object,
         * [3] x400Address - ORAddress object,
         * [4] directoryName - instance of Name object,
         * [5] ediPartyName - EDIPartyName object,
         * [6] uniformResourceIdentifier - String object,
         * [7] iPAddress - array of bytes such as:
         *  For IP v4, as specified in RFC 791, the address must
         *  contain exactly 4 byte component.  For IP v6, as specified in
         *  RFC 1883, the address must contain exactly 16 byte component.
         *  If GeneralName structure is used as a part of Name Constraints
         *  extension, to represent an address range the number of address
         *  component is doubled (to 8 and 32 bytes respectively).
         * [8] registeredID - String.
         */
        GetName(
            [out] IInterface** name);

        Equals(
            [in] IInterface* other,
            [out] Boolean* equals);

        GetHashCode(
            [out] Int32* result);

        /**
         * Checks if the other general name is acceptable by this object.
         * The name is acceptable if it has the same type name and its
         * name value is equal to name value of this object. Also the name
         * is acceptable if this general name object is a part of name
         * constraints and the specified name is satisfied the restriction
         * provided by this object (for more detail see section 4.2.1.11
         * of rfc 3280).
         * Note that for X400Address [3] check procedure is unclear so method
         * just checks the equality of encoded forms.
         * For otherName [0], ediPartyName [5], and registeredID [8]
         * the check procedure if not defined by rfc 3280 and for names of
         * these types this method also checks only for equality of encoded forms.
         */
        IsAcceptable(
            [in] IGeneralName* gname,
            [out] Boolean* isAcceptable);

        /**
         * Gets a list representation of this GeneralName object.
         * The first entry of the list is an Integer object representing
         * the type of mane (0-8), and the second entry is a value of the name:
         * string or ASN.1 DER encoded form depending on the type as follows:
         * rfc822Name, dNSName, uniformResourceIdentifier names are returned
         * as Strings, using the string formats for those types (rfc 3280)
         * IP v4 address names are returned using dotted quad notation.
         * IP v6 address names are returned in the form "p1:p2:...:p8",
         * where p1-p8 are hexadecimal values representing the eight 16-bit
         * pieces of the address. registeredID name are returned as Strings
         * represented as a series of nonnegative integers separated by periods.
         * And directory names (distinguished names) are returned in
         * RFC 2253 string format.
         * otherName, X400Address, ediPartyName returned as byte arrays
         * containing the ASN.1 DER encoded form of the name.
         */
        GetAsList(
            [out] IList** list);

        ToString(
            [out] String* str);

        /**
        * Returns ASN.1 encoded form of this X.509 GeneralName value.
        */
        GetEncoded(
            [out, callee] ArrayOf<Byte>* encoded);

        /**
         * @return the encoded value of the name without the tag associated
         *         with the name in the GeneralName structure
         * @throws  IOException
         */
        GetEncodedName(
            [out, callee] ArrayOf<Byte>* encodedName);
    }

    [deprecated]
    interface IGeneralNameHelper {
        /**
         * Checks the correctness of the string representation of DNS name as
         * specified in RFC 1034 p. 10 and RFC 1123 section 2.1.
         *
         * <p>This permits a wildcard character '*' anywhere in the name; it is up
         * to the application to check which wildcards are permitted. See RFC 6125
         * for recommended wildcard matching rules.
         */
        CheckDNS(
            [in] String dns);

        /**
         * Checks the correctness of the string representation of URI name.
         * The correctness is checked as pointed out in RFC 3280 p. 34.
         */
        CheckURI(
            [in] String uri);

        /**
         * Converts OID into array of ints.
         */
        OidStrToInts(
            [in] String oid,
            [out, callee] ArrayOf<Int32>* ints);

        /**
         * Returns the bytes of the given IP address or masked IP address.
         */
        IpStrToBytes(
            [in] String ip,
            [out, callee] ArrayOf<Byte>* bytes);

        /**
         * Returns the string form of the given IP address. Addresses of length 2x
         * the canonical length are treated as a route/mask pair.
         */
        IpBytesToStr(
            [in] ArrayOf<Byte>* ip,
            [out] String* str);

        GetASN1(
            [out] IASN1Choice** asn1);
    }

    } // namespace X509
    } // namespace Security
    } // namespace Harmony
    } // namespace Apache
    } // namespace Org
}
