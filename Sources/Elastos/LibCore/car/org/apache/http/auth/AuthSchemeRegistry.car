
module
{

    using interface Elastos.Utility.IList;
    using interface Elastos.Utility.IMap;

    interface Org.Apache.Http.Auth.IAuthScheme;
    interface Org.Apache.Http.Params.IHttpParams;

    namespace Org {
    namespace Apache {
    namespace Http {
    namespace Auth {

    /**
     * Authentication scheme registry that can be used to obtain the corresponding
     * authentication scheme implementation for a given type of authorization challenge.
     *
     * @author <a href="mailto:oleg at ural.ru">Oleg Kalnichevski</a>
     *
     *
     * @version $Revision: 652950 $
     * @since 4.0
     */
    interface IAuthSchemeRegistry {

        /**
         * Registers a {@link AuthSchemeFactory} with  the given identifier. If a factory with the
         * given name already exists it will be overridden. This name is the same one used to
         * retrieve the {@link AuthScheme authentication scheme} from {@link #getAuthScheme}.
         *
         * <p>
         * Please note that custom authentication preferences, if used, need to be updated accordingly
         * for the new {@link AuthScheme authentication scheme} to take effect.
         * </p>
         *
         * @param name the identifier for this scheme
         * @param factory the {@link AuthSchemeFactory} class to register
         *
         * @see #getAuthScheme
         */
        Register(
            [in] String name,
            [in] IAuthSchemeFactory* factory);

        /**
         * Unregisters the class implementing an {@link AuthScheme authentication scheme} with
         * the given name.
         *
         * @param name the identifier of the class to unregister
         */
        Unregister(
            [in] String name);

        /**
         * Gets the {@link AuthScheme authentication scheme} with the given name.
         *
         * @param name the {@link AuthScheme authentication scheme} identifier
         * @param params the {@link HttpParams HTTP parameters} for the authentication
         *  scheme.
         *
         * @return {@link AuthScheme authentication scheme}
         *
         * @throws IllegalStateException if a scheme with the given name cannot be found
         */
        GetAuthScheme(
            [in] String name,
            [in] IHttpParams* params,
            [out] IAuthScheme** scheme);

        /**
         * Obtains a list containing names of all registered {@link AuthScheme authentication
         * schemes} in their default order.
         *
         * @return list of registered scheme names
         */
        GetSchemeNames(
            [out] IList** names);

        /**
         * Populates the internal collection of registered {@link AuthScheme authentication schemes}
         * with the content of the map passed as a parameter.
         *
         * @param map authentication schemes
         */
        SetItems(
            [in] IMap* map);

    }

    } // namespace Auth
    } // namespace Http
    } // namespace Apache
    } // namespace Org

}
