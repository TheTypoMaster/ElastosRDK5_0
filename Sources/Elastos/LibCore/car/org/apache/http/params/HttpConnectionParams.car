
module
{

    namespace Org {
    namespace Apache {
    namespace Http {
    namespace Params {

    /**
     * An adaptor for accessing connection parameters in {@link HttpParams}.
     * <br/>
     * Note that the <i>implements</i> relation to {@link CoreConnectionPNames}
     * is for compatibility with existing application code only. References to
     * the parameter names should use the interface, not this class.
     *
     * @author <a href="mailto:oleg at ural.ru">Oleg Kalnichevski</a>
     *
     * @version $Revision: 576089 $
     *
     * @since 4.0
     */
    interface IHttpConnectionParams {

        /**
         * Returns the default socket timeout (<tt>SO_TIMEOUT</tt>) in milliseconds which is the
         * timeout for waiting for data. A timeout value of zero is interpreted as an infinite
         * timeout. This value is used when no socket timeout is set in the
         * method parameters.
         *
         * @return timeout in milliseconds
         */
        GetSoTimeout(
            [in] IHttpParams* params,
            [out] Int32* timeout);

        /**
         * Sets the default socket timeout (<tt>SO_TIMEOUT</tt>) in milliseconds which is the
         * timeout for waiting for data. A timeout value of zero is interpreted as an infinite
         * timeout. This value is used when no socket timeout is set in the
         * method parameters.
         *
         * @param timeout Timeout in milliseconds
         */
        SetSoTimeout(
            [in] IHttpParams* params,
            [in] Int32 timeout);

        /**
         * Tests if Nagle's algorithm is to be used.
         *
         * @return <tt>true</tt> if the Nagle's algorithm is to NOT be used
         *   (that is enable TCP_NODELAY), <tt>false</tt> otherwise.
         */
        GetTcpNoDelay(
            [in] IHttpParams* params,
            [out] Boolean* result);

        /**
         * Determines whether Nagle's algorithm is to be used. The Nagle's algorithm
         * tries to conserve bandwidth by minimizing the number of segments that are
         * sent. When applications wish to decrease network latency and increase
         * performance, they can disable Nagle's algorithm (that is enable TCP_NODELAY).
         * Data will be sent earlier, at the cost of an increase in bandwidth consumption.
         *
         * @param value <tt>true</tt> if the Nagle's algorithm is to NOT be used
         *   (that is enable TCP_NODELAY), <tt>false</tt> otherwise.
         */
        SetTcpNoDelay(
            [in] IHttpParams* params,
            [in] Boolean value);

        GetSocketBufferSize(
            [in] IHttpParams* params,
            [out] Int32* size);

        SetSocketBufferSize(
            [in] IHttpParams* params,
            [in] Int32 size);

        /**
         * Returns linger-on-close timeout. Value <tt>0</tt> implies that the option is
         * disabled. Value <tt>-1</tt> implies that the JRE default is used.
         *
         * @return the linger-on-close timeout
         */
        GetLinger(
            [in] IHttpParams* params,
            [out] Int32* linger);

        /**
         * Returns linger-on-close timeout. This option disables/enables immediate return
         * from a close() of a TCP Socket. Enabling this option with a non-zero Integer
         * timeout means that a close() will block pending the transmission and
         * acknowledgement of all data written to the peer, at which point the socket is
         * closed gracefully. Value <tt>0</tt> implies that the option is
         * disabled. Value <tt>-1</tt> implies that the JRE default is used.
         *
         * @param value the linger-on-close timeout
         */
        SetLinger(
            [in] IHttpParams* params,
            [in] Int32 value);

        /**
         * Returns the timeout until a connection is etablished. A value of zero
         * means the timeout is not used. The default value is zero.
         *
         * @return timeout in milliseconds.
         */
        GetConnectionTimeout(
            [in] IHttpParams* params,
            [out] Int32* timeout);

        /**
         * Sets the timeout until a connection is etablished. A value of zero
         * means the timeout is not used. The default value is zero.
         *
         * @param timeout Timeout in milliseconds.
         */
        SetConnectionTimeout(
            [in] IHttpParams* params,
            [in] Int32 timeout);

        /**
         * Tests whether stale connection check is to be used. Disabling
         * stale connection check may result in slight performance improvement
         * at the risk of getting an I/O error when executing a request over a
         * connection that has been closed at the server side.
         *
         * @return <tt>true</tt> if stale connection check is to be used,
         *   <tt>false</tt> otherwise.
         */
        IsStaleCheckingEnabled(
            [in] IHttpParams* params,
            [out] Boolean* result);

        /**
         * Defines whether stale connection check is to be used. Disabling
         * stale connection check may result in slight performance improvement
         * at the risk of getting an I/O error when executing a request over a
         * connection that has been closed at the server side.
         *
         * @param value <tt>true</tt> if stale connection check is to be used,
         *   <tt>false</tt> otherwise.
         */
        SetStaleCheckingEnabled(
            [in] IHttpParams* params,
            [in] Boolean value);
    }

    } // namespace Params
    } // namespace Http
    } // namespace Apache
    } // namespace Org

}
