
module
{

    namespace Org {
    namespace Apache {
    namespace Http {
    namespace Conn {

    /**
     * A stream wrapper that triggers actions on {@link #close close()} and EOF.
     * Primarily used to auto-release an underlying
     * {@link ManagedClientConnection connection}
     * when the response body is consumed or no longer needed.
     *
     * <p>
     * This class is based on <code>AutoCloseInputStream</code> in HttpClient 3.1,
     * but has notable differences. It does not allow mark/reset, distinguishes
     * different kinds of event, and does not always close the underlying stream
     * on EOF. That decision is left to the {@link EofSensorWatcher watcher}.
     * </p>
     *
     * @see EofSensorWatcher EofSensorWatcher
     *
     * @author <a href="mailto:rolandw at apache.org">Roland Weber</a>
     * @author Ortwin Glueck
     * @author Eric Johnson
     * @author <a href="mailto:mbowler@GargoyleSoftware.com">Mike Bowler</a>
     *
     *
     * <!-- empty lines to avoid svn diff problems -->
     * @version $Revision: 672367 $
     *
     * @since 4.0
     */
    // don't use FilterInputStream as the base class, we'd have to
    // override markSupported(), mark(), and reset() to disable them
    /**
     * @Involve
     * interface IInputStream;
     */
    interface IEofSensorInputStream {

        /**
         * Checks whether the underlying stream can be read from.
         *
         * @return  <code>true</code> if the underlying stream is accessible,
         *          <code>false</code> if this stream is in EOF mode and
         *          detached from the underlying stream
         *
         * @throws IOException      if this stream is already closed
         */
        IsReadAllowed(
            [out] Boolean* isReadAllowed);

        /**
         * Detects EOF and notifies the watcher.
         * This method should only be called while the underlying stream is
         * still accessible. Use {@link #isReadAllowed isReadAllowed} to
         * check that condition.
         * <br/>
         * If EOF is detected, the watcher will be notified and this stream
         * is detached from the underlying stream. This prevents multiple
         * notifications from this stream.
         *
         * @param eof       the result of the calling read operation.
         *                  A negative value indicates that EOF is reached.
         *
         * @throws IOException
         *          in case of an IO problem on closing the underlying stream
         */
        CheckEOF(
            [in] Int32 eof);

        /**
         * Detects stream close and notifies the watcher.
         * There's not much to detect since this is called by {@link #close close}.
         * The watcher will only be notified if this stream is closed
         * for the first time and before EOF has been detected.
         * This stream will be detached from the underlying stream to prevent
         * multiple notifications to the watcher.
         *
         * @throws IOException
         *          in case of an IO problem on closing the underlying stream
         */
        CheckClose();

        /**
         * Detects stream abort and notifies the watcher.
         * There's not much to detect since this is called by
         * {@link #abortConnection abortConnection}.
         * The watcher will only be notified if this stream is aborted
         * for the first time and before EOF has been detected or the
         * stream has been {@link #close closed} gracefully.
         * This stream will be detached from the underlying stream to prevent
         * multiple notifications to the watcher.
         *
         * @throws IOException
         *          in case of an IO problem on closing the underlying stream
         */
        CheckAbort();

    }

    } // namespace Conn
    } // namespace Http
    } // namespace Apache
    } // namespace Org

}
