module
{
    namespace Org {
    namespace W3c {
    namespace Dom {

    /**
     * When associating an object to a key on a node using
     * <code>Node.setUserData()</code> the application can provide a handler
     * that gets called when the node the object is associated to is being
     * cloned, imported, or renamed. This can be used by the application to
     * implement various behaviors regarding the data it associates to the DOM
     * nodes. This interface defines that handler.
     * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
     * @since DOM Level 3
     */
    interface IUserDataHandler {
        // OperationType
        /**
         * The node is cloned, using <code>Node.cloneNode()</code>.
         */
        const Int16 NODE_CLONED               = 1;
        /**
         * The node is imported, using <code>Document.importNode()</code>.
         */
        const Int16 NODE_IMPORTED             = 2;
        /**
         * The node is deleted.
         * <p ><b>Note:</b> This may not be supported or may not be reliable in
         * certain environments, such as Java, where the implementation has no
         * real control over when objects are actually deleted.
         */
        const Int16 NODE_DELETED              = 3;
        /**
         * The node is renamed, using <code>Document.renameNode()</code>.
         */
        const Int16 NODE_RENAMED              = 4;
        /**
         * The node is adopted, using <code>Document.adoptNode()</code>.
         */
        const Int16 NODE_ADOPTED              = 5;

        /**
         * This method is called whenever the node for which this handler is
         * registered is imported or cloned.
         * <br> DOM applications must not raise exceptions in a
         * <code>UserDataHandler</code>. The effect of throwing exceptions from
         * the handler is DOM implementation dependent.
         * @param operation Specifies the type of operation that is being
         *   performed on the node.
         * @param key Specifies the key for which this handler is being called.
         * @param data Specifies the data for which this handler is being called.
         * @param src Specifies the node being cloned, adopted, imported, or
         *   renamed. This is <code>null</code> when the node is being deleted.
         * @param dst Specifies the node newly created if any, or
         *   <code>null</code>.
         */
        Handle(
            [in] Int16 operation,
            [in] String key,
            [in] IObject* data,
            [in] INode* src,
            [in] INode* dst);
    }

    } // namespace Dom
    } // namespace W3c
    } // namespace Org
}
