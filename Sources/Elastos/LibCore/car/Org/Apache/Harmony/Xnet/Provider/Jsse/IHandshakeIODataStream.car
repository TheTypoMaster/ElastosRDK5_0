

module
{
    namespace Org {
    namespace Apache {
    namespace Harmony {
    namespace Xnet {
    namespace Provider {
    namespace Jsse {

    /**
     * This class provides Input/Output data functionality
     * for handshake layer. It provides read and write operations
     * and accumulates all sent/received handshake's data.
     * This class can be presented as a combination of 2 data pipes.
     * The first data pipe is a pipe of income data: append method
     * places the data at the beginning of the pipe, and read methods
     * consume the data from the pipe. The second pipe is an outcoming
     * data pipe: write operations plases the data into the pipe,
     * and getData methods consume the data.
     * It is important to note that work with pipe cound not be
     * started if there is unconsumed data in another pipe. It is
     * reasoned by the following: handshake protocol performs read
     * and write operations consecuently. I.e. it first reads all
     * income data and only than produces the responce and places it
     * into the stream.
     * The read operations of the stream presented by the methods
     * of SSLInputStream which in its turn is an extension of InputStream.
     * So this stream can be used as an InputStream parameter for
     * certificate generation.
     * Also input stream functionality supports marks. The marks
     * help to reset the position of the stream in case of incompleate
     * handshake records. Note that in case of exhausting
     * of income data the EndOfBufferException is thown which implies
     * the following:
     *  1. the stream contains scrappy handshake record,
     *  2. the read position should be reseted to marked,
     *  3. and more income data is expected.
     * The throwing of the exception (instead of returning of -1 value
     * or incompleate filling of destination buffer)
     * helps to speed up the process of scrappy data recognition and
     * processing.
     * For more information about TLS handshake process see
     * TLS v 1 specification at http://www.ietf.org/rfc/rfc2246.txt.
     */
    [deprecated]
    interface IHandshakeIODataStream extends Elastos.IO.IInputStream {
        MarkEx();

        /**
         * Writes an opaque value
         * @param   byte:   byte
         */
        Write(
            [in] Byte b);

        /**
         * Writes Uint8 value
         * @param long: the value to be written (last byte)
         */
        WriteUint8(
            [in] Int64 n);

        /**
         * Writes Uint16 value
         * @param long: the value to be written (last 2 bytes)
         */
        WriteUint16(
            [in] Int64 n);

        /**
         * Writes Uint24 value
         * @param long: the value to be written (last 3 bytes)
         */
        WriteUint24(
            [in] Int64 n);

        /**
         * Writes Uint32 value
         * @param long: the value to be written (last 4 bytes)
         */
        WriteUint32(
            [in] Int64 n);

        /**
         * Writes Uint64 value
         * @param long: the value to be written
         */
        WriteUint64(
            [in] Int64 n);

        /**
         * writes vector of opaque values
         * @param  vector the vector to be written
         */
        WriteEx(
            [in] ArrayOf<Byte>* vector);
    }

    } // namespace Jsse
    } // namespace Provider
    } // namespace Xnet
    } // namespace Harmony
    } // namespace Apache
    } // namespace Org
}