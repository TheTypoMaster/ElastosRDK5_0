
module
{
    namespace Org {
    namespace Apache {
    namespace Harmony {
    namespace Lang {
    namespace Annotation {

    /**
     * The annotation implementation based on dynamically generated proxy instances.
     * It conforms to all requirements stated in public APIs, see in particular
     * {@link java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement}
     * and {@link java.lang.annotation.Annotation java.lang.annotation.Annotation}.
     * Namely, annotation instances are immutable and serializable; they provide
     * conforming access to annotation member values and required implementations of
     * methods declared in Annotation interface.
     *
     * @see android.lang.annotation.AnnotationMember
     * @see java.lang.annotation.Annotation
     *
     * @author Alexey V. Varlamov, Serguei S. Zapreyev
     * @version $Revision$
    */
    interface IAnnotationFactory {
        /**
         * Returns true if the specified object represents the same annotation instance.
         * That is, if it implements the same annotation type and
         * returns the same element values.
         * <br>Note, actual underlying implementation mechanism does not matter - it may
         * differ completely from this class.
         * @return true if the passed object is equivalent annotation instance,
         * false otherwise.
         * @see android.lang.annotation.AnnotationMember#equals(Object)
        */
        Equals(
            [in] PInterface obj,
            [out] Boolean* isEqual);

        /**
         * Returns a hash code composed as a sum of hash codes of member elements,
         * including elements with default values.
         * @see android.lang.annotation.AnnotationMember#hashCode()
        */
        GetHashCode(
            [out] Int32* result);

        /**
         * Provides detailed description of this annotation instance,
         * including all member name-values pairs.
         * @return string representation of this annotation
        */
        ToString(
            [out] String* result);
    }

    interface IAnnotationFactoryHelper {
        /**
         * Reflects specified annotation type and returns an array
         * of member element definitions with default values.
        */
        GetElementsDescription(
            [in] IAnnotation* annotationType,
            [out, callee] ArrayOf<IAnnotationMember*>* annotationMember);

        /**
         * Provides a new annotation instance.
         * @param annotationType the annotation type definition
         * @param elements name-value pairs representing elements of the annotation
         * @return a new annotation instance
        */
        CreateAnnotation(
            [in] IAnnotation* annotationType,
            [in] ArrayOf<IAnnotationMember>* elements,
            [out] IAnnotation** annotation);
    }

    } // namespace Annotation
    } // namespace Lang
    } // namespace Harmony
    } // namespace Apache
    } // namespace Org
}
