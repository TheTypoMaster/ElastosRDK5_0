module
{
    interface Org.Xml.Sax.IAttributes;
    
    namespace Org {
    namespace Xml {
    namespace Sax {
    namespace Helpers {

    /**
     * Default implementation of the Attributes interface.
     *
     * <blockquote>
     * <em>This module, both source code and documentation, is in the
     * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
     * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>
     * for further information.
     * </blockquote>
     *
     * <p>This class provides a default implementation of the SAX2
     * {@link org.xml.sax.Attributes Attributes} interface, with the
     * addition of manipulators so that the list can be modified or
     * reused.</p>
     *
     * <p>There are two typical uses of this class:</p>
     *
     * <ol>
     * <li>to take a persistent snapshot of an Attributes object
     *  in a {@link org.xml.sax.ContentHandler#startElement startElement} event; or</li>
     * <li>to construct or modify an Attributes object in a SAX2 driver or filter.</li>
     * </ol>
     *
     * <p>This class replaces the now-deprecated SAX1 {@link
     * org.xml.sax.helpers.AttributeListImpl AttributeListImpl}
     * class; in addition to supporting the updated Attributes
     * interface rather than the deprecated {@link org.xml.sax.AttributeList
     * AttributeList} interface, it also includes a much more efficient
     * implementation using a single array rather than a set of Vectors.</p>
     *
     * @since SAX 2.0
     * @author David Megginson
     * @version 2.0.1 (sax2r2)
     */
    interface IAttributesImpl extends Org.Xml.Sax.IAttributes {
        /**
         * Clear the attribute list for reuse.
         *
         * <p>Note that little memory is freed by this call:
         * the current array is kept so it can be
         * reused.</p>
         */
        Clear ();

        /**
         * Copy an entire Attributes object.
         *
         * <p>It may be more efficient to reuse an existing object
         * rather than constantly allocating new ones.</p>
         *
         * @param atts The attributes to copy.
         */
        SetAttributes(
            [in] IAttributes* atts);

        /**
         * Add an attribute to the end of the list.
         *
         * <p>For the sake of speed, this method does no checking
         * to see if the attribute is already in the list: that is
         * the responsibility of the application.</p>
         *
         * @param uri The Namespace URI, or the empty string if
         *        none is available or Namespace processing is not
         *        being performed.
         * @param localName The local name, or the empty string if
         *        Namespace processing is not being performed.
         * @param qName The qualified (prefixed) name, or the empty string
         *        if qualified names are not available.
         * @param type The attribute type as a string.
         * @param value The attribute value.
         */
        AddAttribute (
            [in] String uri,
            [in] String localName,
            [in] String qName,
            [in] String type,
            [in] String value);

        /**
         * Set an attribute in the list.
         *
         * <p>For the sake of speed, this method does no checking
         * for name conflicts or well-formedness: such checks are the
         * responsibility of the application.</p>
         *
         * @param index The index of the attribute (zero-based).
         * @param uri The Namespace URI, or the empty string if
         *        none is available or Namespace processing is not
         *        being performed.
         * @param localName The local name, or the empty string if
         *        Namespace processing is not being performed.
         * @param qName The qualified name, or the empty string
         *        if qualified names are not available.
         * @param type The attribute type as a string.
         * @param value The attribute value.
         * @exception java.lang.ArrayIndexOutOfBoundsException When the
         *            supplied index does not point to an attribute
         *            in the list.
         */
        SetAttribute (
            [in] Int32 index,
            [in] String uri,
            [in] String localName,
            [in] String qName,
            [in] String type,
            [in] String value);

        /**
         * Remove an attribute from the list.
         *
         * @param index The index of the attribute (zero-based).
         * @exception java.lang.ArrayIndexOutOfBoundsException When the
         *            supplied index does not point to an attribute
         *            in the list.
         */
        RemoveAttribute (
            [in] Int32 index);

        /**
         * Set the Namespace URI of a specific attribute.
         *
         * @param index The index of the attribute (zero-based).
         * @param uri The attribute's Namespace URI, or the empty
         *        string for none.
         * @exception java.lang.ArrayIndexOutOfBoundsException When the
         *            supplied index does not point to an attribute
         *            in the list.
         */
        SetURI(
            [in] Int32 index,
            [in] String uri);

        /**
         * Set the local name of a specific attribute.
         *
         * @param index The index of the attribute (zero-based).
         * @param localName The attribute's local name, or the empty
         *        string for none.
         * @exception java.lang.ArrayIndexOutOfBoundsException When the
         *            supplied index does not point to an attribute
         *            in the list.
         */
        SetLocalName(
            [in] Int32 index,
            [in] String localName);

        /**
         * Set the qualified name of a specific attribute.
         *
         * @param index The index of the attribute (zero-based).
         * @param qName The attribute's qualified name, or the empty
         *        string for none.
         * @exception java.lang.ArrayIndexOutOfBoundsException When the
         *            supplied index does not point to an attribute
         *            in the list.
         */
        SetQName(
            [in] Int32 index,
            [in] String qName);

        /**
         * Set the type of a specific attribute.
         *
         * @param index The index of the attribute (zero-based).
         * @param type The attribute's type.
         * @exception java.lang.ArrayIndexOutOfBoundsException When the
         *            supplied index does not point to an attribute
         *            in the list.
         */
        SetType(
            [in] Int32 index,
            [in] String type);

        /**
         * Set the value of a specific attribute.
         *
         * @param index The index of the attribute (zero-based).
         * @param value The attribute's value.
         * @exception java.lang.ArrayIndexOutOfBoundsException When the
         *            supplied index does not point to an attribute
         *            in the list.
         */
        SetValue(
            [in] Int32 index,
            [in] String value);
    }

    } // namespace Helpers
    } // namespace Sax
    } // namespace Xml
    } // namespace Org
}