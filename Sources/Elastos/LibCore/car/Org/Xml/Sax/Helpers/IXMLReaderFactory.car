module
{
    interface Org.Xml.Sax.IXMLReader;

    namespace Org {
    namespace Xml {
    namespace Sax {
    namespace Helpers {

    interface IXMLReaderFactory {
        /**
         * Attempt to create an XMLReader from system defaults.
         * In environments which can support it, the name of the XMLReader
         * class is determined by trying each these options in order, and
         * using the first one which succeeds:</p> <ul>
         *
         * <li>If the system property <code>org.xml.sax.driver</code>
         * has a value, that is used as an XMLReader class name. </li>
         *
         * <li>The JAR "Services API" is used to look for a class name
         * in the <em>META-INF/services/org.xml.sax.driver</em> file in
         * jarfiles available to the runtime.</li>
         *
         * <li> SAX parser distributions are strongly encouraged to provide
         * a default XMLReader class name that will take effect only when
         * previous options (on this list) are not successful.</li>
         *
         * <li>Finally, if {@link ParserFactory#makeParser()} can
         * return a system default SAX1 parser, that parser is wrapped in
         * a {@link ParserAdapter}.  (This is a migration aid for SAX1
         * environments, where the <code>org.xml.sax.parser</code> system
         * property will often be usable.) </li>
         *
         * </ul>
         *
         * <p> In environments such as small embedded systems, which can not
         * support that flexibility, other mechanisms to determine the default
         * may be used. </p>
         *
         * <p>Note that many Java environments allow system properties to be
         * initialized on a command line.  This means that <em>in most cases</em>
         * setting a good value for that property ensures that calls to this
         * method will succeed, except when security policies intervene.
         * This will also maximize application portability to older SAX
         * environments, with less robust implementations of this method.
         * </p>
         *
         * @return A new XMLReader.
         * @exception org.xml.sax.SAXException If no default XMLReader class
         *            can be identified and instantiated.
         * @see #createXMLReader(java.lang.String)
         */
        CreateXMLReader(
            [out] IXMLReader** reader);

        /**
         * Attempt to create an XML reader from a class name.
         *
         * <p>Given a class name, this method attempts to load
         * and instantiate the class as an XML reader.</p>
         *
         * @param className the name of the class that should be instantiated.
         *
         * <p>Note that this method will not be usable in environments where
         * the caller (perhaps an applet) is not permitted to load classes
         * dynamically.</p>
         *
         * @return A new XML reader.
         * @exception org.xml.sax.SAXException If the class cannot be
         *            loaded, instantiated, and cast to XMLReader.
         * @see #createXMLReader()
         */
        CreateXMLReaderEx(
            [in] String className,
            [out] IXMLReader** reader);
    }

    } // namespace Helpers
    } // namespace Sax
    } // namespace Xml
    } // namespace Org
}