
#ifndef __ELASTOS_SQL_SQLITE_CONSTANTS_H__
#define __ELASTOS_SQL_SQLITE_CONSTANTS_H__

#include <elastos/core/Object.h>

namespace Elastos {
namespace Sql {
namespace SQLite {

/**
 * Container for SQLite constants.
 *
 * Usually generated by "native/mkconst.c". For Android, I pasted in the output of this one-liner:
 *
 * perl -ne '$_ =~ s/#define\s+(SQLITE\S+)\s+([0-9x]+)/    static const Int32 $1; // = $2;/ && print $_;' external/sqlite/dist/sqlite3.h
 */
class Constants
{
public:
    // Copied from VERSION.
    static const Int32 drv_minor; // = 20100131;
    // Generated by the one-liner above.
    static const Int32 SQLITE_VERSION_NUMBER; // = 3006022;
    static const Int32 SQLITE_OK; // = 0;   /* Successful result */
    static const Int32 SQLITE_ERROR; // = 1;   /* SQL error or missing database */
    static const Int32 SQLITE_INTERNAL; // = 2;   /* Internal logic error in SQLite */
    static const Int32 SQLITE_PERM; // = 3;   /* Access permission denied */
    static const Int32 SQLITE_ABORT; // = 4;   /* Callback routine requested an abort */
    static const Int32 SQLITE_BUSY; // = 5;   /* The database file is locked */
    static const Int32 SQLITE_LOCKED; // = 6;   /* A table in the database is locked */
    static const Int32 SQLITE_NOMEM; // = 7;   /* A malloc() failed */
    static const Int32 SQLITE_READONLY; // = 8;   /* Attempt to write a readonly database */
    static const Int32 SQLITE_INTERRUPT; // = 9;   /* Operation terminated by sqlite3_interrupt()*/
    static const Int32 SQLITE_IOERR; // = 10;   /* Some kind of disk I/O error occurred */
    static const Int32 SQLITE_CORRUPT; // = 11;   /* The database disk image is malformed */
    static const Int32 SQLITE_NOTFOUND; // = 12;   /* NOT USED. Table or record not found */
    static const Int32 SQLITE_FULL; // = 13;   /* Insertion failed because database is full */
    static const Int32 SQLITE_CANTOPEN; // = 14;   /* Unable to open the database file */
    static const Int32 SQLITE_PROTOCOL; // = 15;   /* NOT USED. Database lock protocol error */
    static const Int32 SQLITE_EMPTY; // = 16;   /* Database is empty */
    static const Int32 SQLITE_SCHEMA; // = 17;   /* The database schema changed */
    static const Int32 SQLITE_TOOBIG; // = 18;   /* String or BLOB exceeds size limit */
    static const Int32 SQLITE_CONSTRAINT; // = 19;   /* Abort due to constraint violation */
    static const Int32 SQLITE_MISMATCH; // = 20;   /* Data type mismatch */
    static const Int32 SQLITE_MISUSE; // = 21;   /* Library used incorrectly */
    static const Int32 SQLITE_NOLFS; // = 22;   /* Uses OS features not supported on host */
    static const Int32 SQLITE_AUTH; // = 23;   /* Authorization denied */
    static const Int32 SQLITE_FORMAT; // = 24;   /* Auxiliary database format error */
    static const Int32 SQLITE_RANGE; // = 25;   /* 2nd parameter to sqlite3_bind out of range */
    static const Int32 SQLITE_NOTADB; // = 26;   /* File opened that is not a database file */
    static const Int32 SQLITE_ROW; // = 100;  /* sqlite3_step() has another row ready */
    static const Int32 SQLITE_DONE; // = 101;  /* sqlite3_step() has finished executing */
    static const Int32 SQLITE_OPEN_READONLY; // = 0x00000001;  /* Ok for sqlite3_open_v2() */
    static const Int32 SQLITE_OPEN_READWRITE; // = 0x00000002;  /* Ok for sqlite3_open_v2() */
    static const Int32 SQLITE_OPEN_CREATE; // = 0x00000004;  /* Ok for sqlite3_open_v2() */
    static const Int32 SQLITE_OPEN_DELETEONCLOSE; // = 0x00000008;  /* VFS only */
    static const Int32 SQLITE_OPEN_EXCLUSIVE; // = 0x00000010;  /* VFS only */
    static const Int32 SQLITE_OPEN_MAIN_DB; // = 0x00000100;  /* VFS only */
    static const Int32 SQLITE_OPEN_TEMP_DB; // = 0x00000200;  /* VFS only */
    static const Int32 SQLITE_OPEN_TRANSIENT_DB; // = 0x00000400;  /* VFS only */
    static const Int32 SQLITE_OPEN_MAIN_JOURNAL; // = 0x00000800;  /* VFS only */
    static const Int32 SQLITE_OPEN_TEMP_JOURNAL; // = 0x00001000;  /* VFS only */
    static const Int32 SQLITE_OPEN_SUBJOURNAL; // = 0x00002000;  /* VFS only */
    static const Int32 SQLITE_OPEN_MASTER_JOURNAL; // = 0x00004000;  /* VFS only */
    static const Int32 SQLITE_OPEN_NOMUTEX; // = 0x00008000;  /* Ok for sqlite3_open_v2() */
    static const Int32 SQLITE_OPEN_FULLMUTEX; // = 0x00010000;  /* Ok for sqlite3_open_v2() */
    static const Int32 SQLITE_OPEN_SHAREDCACHE; // = 0x00020000;  /* Ok for sqlite3_open_v2() */
    static const Int32 SQLITE_OPEN_PRIVATECACHE; // = 0x00040000;  /* Ok for sqlite3_open_v2() */
    static const Int32 SQLITE_IOCAP_ATOMIC; // = 0x00000001;
    static const Int32 SQLITE_IOCAP_ATOMIC512; // = 0x00000002;
    static const Int32 SQLITE_IOCAP_ATOMIC1K; // = 0x00000004;
    static const Int32 SQLITE_IOCAP_ATOMIC2K; // = 0x00000008;
    static const Int32 SQLITE_IOCAP_ATOMIC4K; // = 0x00000010;
    static const Int32 SQLITE_IOCAP_ATOMIC8K; // = 0x00000020;
    static const Int32 SQLITE_IOCAP_ATOMIC16K; // = 0x00000040;
    static const Int32 SQLITE_IOCAP_ATOMIC32K; // = 0x00000080;
    static const Int32 SQLITE_IOCAP_ATOMIC64K; // = 0x00000100;
    static const Int32 SQLITE_IOCAP_SAFE_APPEND; // = 0x00000200;
    static const Int32 SQLITE_IOCAP_SEQUENTIAL; // = 0x00000400;
    static const Int32 SQLITE_LOCK_NONE; // = 0;
    static const Int32 SQLITE_LOCK_SHARED; // = 1;
    static const Int32 SQLITE_LOCK_RESERVED; // = 2;
    static const Int32 SQLITE_LOCK_PENDING; // = 3;
    static const Int32 SQLITE_LOCK_EXCLUSIVE; // = 4;
    static const Int32 SQLITE_SYNC_NORMAL; // = 0x00002;
    static const Int32 SQLITE_SYNC_FULL; // = 0x00003;
    static const Int32 SQLITE_SYNC_DATAONLY; // = 0x00010;
    static const Int32 SQLITE_FCNTL_LOCKSTATE; // = 1;
    static const Int32 SQLITE_GET_LOCKPROXYFILE; // = 2;
    static const Int32 SQLITE_SET_LOCKPROXYFILE; // = 3;
    static const Int32 SQLITE_LAST_ERRNO; // = 4;
    static const Int32 SQLITE_ACCESS_EXISTS; // = 0;
    static const Int32 SQLITE_ACCESS_READWRITE; // = 1;
    static const Int32 SQLITE_ACCESS_READ; // = 2;
    static const Int32 SQLITE_CONFIG_SINGLETHREAD; // = 1;  /* nil */
    static const Int32 SQLITE_CONFIG_MULTITHREAD; // = 2;  /* nil */
    static const Int32 SQLITE_CONFIG_SERIALIZED; // = 3;  /* nil */
    static const Int32 SQLITE_CONFIG_MALLOC; // = 4;  /* sqlite3_mem_methods* */
    static const Int32 SQLITE_CONFIG_GETMALLOC; // = 5;  /* sqlite3_mem_methods* */
    static const Int32 SQLITE_CONFIG_SCRATCH; // = 6;  /* void*, int sz, int N */
    static const Int32 SQLITE_CONFIG_PAGECACHE; // = 7;  /* void*, int sz, int N */
    static const Int32 SQLITE_CONFIG_HEAP; // = 8;  /* void*, int nByte, int min */
    static const Int32 SQLITE_CONFIG_MEMSTATUS; // = 9;  /* boolean */
    static const Int32 SQLITE_CONFIG_MUTEX; // = 10;  /* sqlite3_mutex_methods* */
    static const Int32 SQLITE_CONFIG_GETMUTEX; // = 11;  /* sqlite3_mutex_methods* */
    static const Int32 SQLITE_CONFIG_LOOKASIDE; // = 13;  /* int int */
    static const Int32 SQLITE_CONFIG_PCACHE; // = 14;  /* sqlite3_pcache_methods* */
    static const Int32 SQLITE_CONFIG_GETPCACHE; // = 15;  /* sqlite3_pcache_methods* */
    static const Int32 SQLITE_DBCONFIG_LOOKASIDE; // = 1001;  /* void* int int */
    static const Int32 SQLITE_DENY; // = 1;   /* Abort the SQL statement with an error */
    static const Int32 SQLITE_IGNORE; // = 2;   /* Don't allow access, but don't generate an error */
    static const Int32 SQLITE_CREATE_INDEX; // = 1;   /* Index Name      Table Name      */
    static const Int32 SQLITE_CREATE_TABLE; // = 2;   /* Table Name      NULL            */
    static const Int32 SQLITE_CREATE_TEMP_INDEX; // = 3;   /* Index Name      Table Name      */
    static const Int32 SQLITE_CREATE_TEMP_TABLE; // = 4;   /* Table Name      NULL            */
    static const Int32 SQLITE_CREATE_TEMP_TRIGGER; // = 5;   /* Trigger Name    Table Name      */
    static const Int32 SQLITE_CREATE_TEMP_VIEW; // = 6;   /* View Name       NULL            */
    static const Int32 SQLITE_CREATE_TRIGGER; // = 7;   /* Trigger Name    Table Name      */
    static const Int32 SQLITE_CREATE_VIEW; // = 8;   /* View Name       NULL            */
    static const Int32 SQLITE_DELETE; // = 9;   /* Table Name      NULL            */
    static const Int32 SQLITE_DROP_INDEX; // = 10;   /* Index Name      Table Name      */
    static const Int32 SQLITE_DROP_TABLE; // = 11;   /* Table Name      NULL            */
    static const Int32 SQLITE_DROP_TEMP_INDEX; // = 12;   /* Index Name      Table Name      */
    static const Int32 SQLITE_DROP_TEMP_TABLE; // = 13;   /* Table Name      NULL            */
    static const Int32 SQLITE_DROP_TEMP_TRIGGER; // = 14;   /* Trigger Name    Table Name      */
    static const Int32 SQLITE_DROP_TEMP_VIEW; // = 15;   /* View Name       NULL            */
    static const Int32 SQLITE_DROP_TRIGGER; // = 16;   /* Trigger Name    Table Name      */
    static const Int32 SQLITE_DROP_VIEW; // = 17;   /* View Name       NULL            */
    static const Int32 SQLITE_INSERT; // = 18;   /* Table Name      NULL            */
    static const Int32 SQLITE_PRAGMA; // = 19;   /* Pragma Name     1st arg or NULL */
    static const Int32 SQLITE_READ; // = 20;   /* Table Name      Column Name     */
    static const Int32 SQLITE_SELECT; // = 21;   /* NULL            NULL            */
    static const Int32 SQLITE_TRANSACTION; // = 22;   /* Operation       NULL            */
    static const Int32 SQLITE_UPDATE; // = 23;   /* Table Name      Column Name     */
    static const Int32 SQLITE_ATTACH; // = 24;   /* Filename        NULL            */
    static const Int32 SQLITE_DETACH; // = 25;   /* Database Name   NULL            */
    static const Int32 SQLITE_ALTER_TABLE; // = 26;   /* Database Name   Table Name      */
    static const Int32 SQLITE_REINDEX; // = 27;   /* Index Name      NULL            */
    static const Int32 SQLITE_ANALYZE; // = 28;   /* Table Name      NULL            */
    static const Int32 SQLITE_CREATE_VTABLE; // = 29;   /* Table Name      Module Name     */
    static const Int32 SQLITE_DROP_VTABLE; // = 30;   /* Table Name      Module Name     */
    static const Int32 SQLITE_FUNCTION; // = 31;   /* NULL            Function Name   */
    static const Int32 SQLITE_SAVEPOINT; // = 32;   /* Operation       Savepoint Name  */
    static const Int32 SQLITE_COPY; // = 0;   /* No longer used */
    static const Int32 SQLITE_LIMIT_LENGTH; // = 0;
    static const Int32 SQLITE_LIMIT_SQL_LENGTH; // = 1;
    static const Int32 SQLITE_LIMIT_COLUMN; // = 2;
    static const Int32 SQLITE_LIMIT_EXPR_DEPTH; // = 3;
    static const Int32 SQLITE_LIMIT_COMPOUND_SELECT; // = 4;
    static const Int32 SQLITE_LIMIT_VDBE_OP; // = 5;
    static const Int32 SQLITE_LIMIT_FUNCTION_ARG; // = 6;
    static const Int32 SQLITE_LIMIT_ATTACHED; // = 7;
    static const Int32 SQLITE_LIMIT_LIKE_PATTERN_LENGTH; // = 8;
    static const Int32 SQLITE_LIMIT_VARIABLE_NUMBER; // = 9;
    static const Int32 SQLITE_LIMIT_TRIGGER_DEPTH; // = 10;
    static const Int32 SQLITE_INTEGER; // = 1;
    static const Int32 SQLITE_FLOAT; // = 2;
    static const Int32 SQLITE_BLOB; // = 4;
    static const Int32 SQLITE_NULL; // = 5;
    static const Int32 SQLITE3_TEXT; // = 3;
    static const Int32 SQLITE_UTF8; // = 1;
    static const Int32 SQLITE_UTF16LE; // = 2;
    static const Int32 SQLITE_UTF16BE; // = 3;
    static const Int32 SQLITE_UTF16; // = 4;    /* Use native byte order */
    static const Int32 SQLITE_ANY; // = 5;    /* sqlite3_create_function only */
    static const Int32 SQLITE_UTF16_ALIGNED; // = 8;    /* sqlite3_create_collation only */
    static const Int32 SQLITE_INDEX_CONSTRAINT_EQ; // = 2;
    static const Int32 SQLITE_INDEX_CONSTRAINT_GT; // = 4;
    static const Int32 SQLITE_INDEX_CONSTRAINT_LE; // = 8;
    static const Int32 SQLITE_INDEX_CONSTRAINT_LT; // = 16;
    static const Int32 SQLITE_INDEX_CONSTRAINT_GE; // = 32;
    static const Int32 SQLITE_INDEX_CONSTRAINT_MATCH; // = 64;
    static const Int32 SQLITE_MUTEX_FAST; // = 0;
    static const Int32 SQLITE_MUTEX_RECURSIVE; // = 1;
    static const Int32 SQLITE_MUTEX_STATIC_MASTER; // = 2;
    static const Int32 SQLITE_MUTEX_STATIC_MEM; // = 3;  /* sqlite3_malloc() */
    static const Int32 SQLITE_MUTEX_STATIC_MEM2; // = 4;  /* NOT USED */
    static const Int32 SQLITE_MUTEX_STATIC_OPEN; // = 4;  /* sqlite3BtreeOpen() */
    static const Int32 SQLITE_MUTEX_STATIC_PRNG; // = 5;  /* sqlite3_random() */
    static const Int32 SQLITE_MUTEX_STATIC_LRU; // = 6;  /* lru page list */
    static const Int32 SQLITE_MUTEX_STATIC_LRU2; // = 7;  /* lru page list */
    static const Int32 SQLITE_TESTCTRL_FIRST; // = 5;
    static const Int32 SQLITE_TESTCTRL_PRNG_SAVE; // = 5;
    static const Int32 SQLITE_TESTCTRL_PRNG_RESTORE; // = 6;
    static const Int32 SQLITE_TESTCTRL_PRNG_RESET; // = 7;
    static const Int32 SQLITE_TESTCTRL_BITVEC_TEST; // = 8;
    static const Int32 SQLITE_TESTCTRL_FAULT_INSTALL; // = 9;
    static const Int32 SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS; // = 10;
    static const Int32 SQLITE_TESTCTRL_PENDING_BYTE; // = 11;
    static const Int32 SQLITE_TESTCTRL_ASSERT; // = 12;
    static const Int32 SQLITE_TESTCTRL_ALWAYS; // = 13;
    static const Int32 SQLITE_TESTCTRL_RESERVE; // = 14;
    static const Int32 SQLITE_TESTCTRL_OPTIMIZATIONS; // = 15;
    static const Int32 SQLITE_TESTCTRL_ISKEYWORD; // = 16;
    static const Int32 SQLITE_TESTCTRL_LAST; // = 16;
    static const Int32 SQLITE_STATUS_MEMORY_USED; // = 0;
    static const Int32 SQLITE_STATUS_PAGECACHE_USED; // = 1;
    static const Int32 SQLITE_STATUS_PAGECACHE_OVERFLOW; // = 2;
    static const Int32 SQLITE_STATUS_SCRATCH_USED; // = 3;
    static const Int32 SQLITE_STATUS_SCRATCH_OVERFLOW; // = 4;
    static const Int32 SQLITE_STATUS_MALLOC_SIZE; // = 5;
    static const Int32 SQLITE_STATUS_PARSER_STACK; // = 6;
    static const Int32 SQLITE_STATUS_PAGECACHE_SIZE; // = 7;
    static const Int32 SQLITE_STATUS_SCRATCH_SIZE; // = 8;
    static const Int32 SQLITE_DBSTATUS_LOOKASIDE_USED; // = 0;
    static const Int32 SQLITE_STMTSTATUS_FULLSCAN_STEP; // = 1;
    static const Int32 SQLITE_STMTSTATUS_SORT; // = 2;

private:
    Constants();
    Constants(const Constants&);

};

} // namespace SQLite
} // namespace Sql
} // namespace Elastos

#endif // __ELASTOS_SQL_SQLITE_CONSTANTS_H__
